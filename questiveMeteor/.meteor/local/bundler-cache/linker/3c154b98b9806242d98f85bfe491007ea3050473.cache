[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nReactLayout = Package['kadira:react-layout'].ReactLayout;\nAstro = Package['jagi:astronomy'].Astro;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"tasks.js\":[\"meteor/meteor\",\"meteor/mongo\",\"meteor/check\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////\n//                                                                         //\n// imports/api/tasks.js                                                    //\n//                                                                         //\n/////////////////////////////////////////////////////////////////////////////\n                                                                           //\nmodule.export({Tasks:function(){return Tasks}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});\n                                                                           // 2\n                                                                           // 3\n                                                                           //\nvar Tasks = new Mongo.Collection('tasks');                                 // 5\n                                                                           //\nif (Meteor.isServer) {                                                     // 7\n  // This code only runs on the server                                     //\n  // Only publish tasks that are public or belong to the current user      //\n  Meteor.publish('tasks', function tasksPublication() {                    // 10\n    return Tasks.find({                                                    // 11\n      $or: [{ 'private': { $ne: true } }, { owner: this.userId }]          // 12\n    });                                                                    // 11\n  });                                                                      // 17\n}                                                                          // 18\n                                                                           //\nMeteor.methods({                                                           // 20\n  // add information to our task db                                        //\n                                                                           //\n  'tasks.insert': function tasksInsert(object) {                           // 22\n    var user = object.user;                                                // 23\n    var title = object.title;                                              // 24\n    var task = object.text;                                                // 25\n    var location = object.location;                                        // 26\n    check(title, String);                                                  // 27\n    check(task, String);                                                   // 28\n    check(location, String);                                               // 29\n                                                                           //\n    // Make sure the user is logged in before inserting a task             //\n    if (!this.userId) {                                                    // 32\n      throw new Meteor.Error('not-authorized');                            // 33\n    }                                                                      // 34\n                                                                           //\n    Tasks.insert({                                                         // 36\n      user: user,                                                          // 37\n      title: title,                                                        // 38\n      task: task,                                                          // 39\n      location: location,                                                  // 40\n      createdAt: new Date(),                                               // 41\n      owner: this.userId,                                                  // 42\n      username: Meteor.users.findOne(this.userId).username                 // 43\n    });                                                                    // 36\n  },                                                                       // 45\n  'tasks.remove': function tasksRemove(taskId) {                           // 46\n    check(taskId, String);                                                 // 47\n                                                                           //\n    var task = Tasks.findOne(taskId);                                      // 49\n    if (task['private'] && task.owner !== this.userId) {                   // 50\n      // If the task is private, make sure only the owner can delete it    //\n      throw new Meteor.Error('not-authorized');                            // 52\n    }                                                                      // 53\n                                                                           //\n    Tasks.remove(taskId);                                                  // 55\n  },                                                                       // 56\n  'tasks.setChecked': function tasksSetChecked(taskId, setChecked) {       // 57\n    check(taskId, String);                                                 // 58\n    check(setChecked, Boolean);                                            // 59\n                                                                           //\n    var task = Tasks.findOne(taskId);                                      // 61\n    if (task['private'] && task.owner !== this.userId) {                   // 62\n      // If the task is private, make sure only the owner can check it off\n      throw new Meteor.Error('not-authorized');                            // 64\n    }                                                                      // 65\n                                                                           //\n    Tasks.update(taskId, { $set: { checked: setChecked } });               // 67\n  },                                                                       // 68\n  'tasks.setPrivate': function tasksSetPrivate(taskId, setToPrivate) {     // 69\n    check(taskId, String);                                                 // 70\n    check(setToPrivate, Boolean);                                          // 71\n                                                                           //\n    var task = Tasks.findOne(taskId);                                      // 73\n                                                                           //\n    // Make sure only the task owner can make a task private               //\n    if (task.owner !== this.userId) {                                      // 76\n      throw new Meteor.Error('not-authorized');                            // 77\n    }                                                                      // 78\n                                                                           //\n    Tasks.update(taskId, { $set: { 'private': setToPrivate } });           // 80\n  }                                                                        // 81\n});                                                                        // 20\n/////////////////////////////////////////////////////////////////////////////\n\n}]}},\"server\":{\"main.js\":[\"../imports/api/tasks.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////\n//                                                                         //\n// server/main.js                                                          //\n//                                                                         //\n/////////////////////////////////////////////////////////////////////////////\n                                                                           //\nmodule.import('../imports/api/tasks.js');                                  // 1\n/////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\",\".jsx\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/api/tasks.js","/server/main.js"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAM,QAAQ,IAAI,MAAM,UAAV,CAAqB,OAArB,CAAd;;AAEP,IAAI,OAAO,QAAX,EAAqB;;;AAGnB,SAAO,OAAP,CAAe,OAAf,EAAwB,SAAS,gBAAT,GAA4B;AAClD,WAAO,MAAM,IAAN,CAAW;AAChB,WAAK,CACH,EAAE,WAAS,EAAE,KAAK,IAAP,EAAX,EADG,EAEH,EAAE,OAAO,KAAK,MAAd,EAFG;AADW,KAAX,CAAP;AAMD,GAPD;AAQD;;AAED,OAAO,OAAP,CAAe;;;AAEb,gBAFa,uBAEE,MAFF,EAEU;AACrB,QAAI,OAAO,OAAO,IAAlB;AACA,QAAI,QAAQ,OAAO,KAAnB;AACA,QAAI,OAAO,OAAO,IAAlB;AACA,QAAI,WAAW,OAAO,QAAtB;AACA,UAAM,KAAN,EAAa,MAAb;AACA,UAAM,IAAN,EAAY,MAAZ;AACA,UAAM,QAAN,EAAgB,MAAhB;;;AAGA,QAAI,CAAE,KAAK,MAAX,EAAmB;AACjB,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa;AACX,gBADW;AAEX,kBAFW;AAGX,gBAHW;AAIX,wBAJW;AAKX,iBAAW,IAAI,IAAJ,EALA;AAMX,aAAO,KAAK,MAND;AAOX,gBAAU,OAAO,KAAP,CAAa,OAAb,CAAqB,KAAK,MAA1B,EAAkC;AAPjC,KAAb;AASD,GAzBY;AA0Bb,gBA1Ba,uBA0BE,MA1BF,EA0BU;AACrB,UAAM,MAAN,EAAc,MAAd;;AAEA,QAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACA,QAAI,mBAAgB,KAAK,KAAL,KAAe,KAAK,MAAxC,EAAgD;;AAE9C,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa,MAAb;AACD,GApCY;AAqCb,oBArCa,2BAqCM,MArCN,EAqCc,UArCd,EAqC0B;AACrC,UAAM,MAAN,EAAc,MAAd;AACA,UAAM,UAAN,EAAkB,OAAlB;;AAEA,QAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACA,QAAI,mBAAgB,KAAK,KAAL,KAAe,KAAK,MAAxC,EAAgD;;AAE9C,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa,MAAb,EAAqB,EAAE,MAAM,EAAE,SAAS,UAAX,EAAR,EAArB;AACD,GAhDY;AAiDb,oBAjDa,2BAiDM,MAjDN,EAiDc,YAjDd,EAiD4B;AACvC,UAAM,MAAN,EAAc,MAAd;AACA,UAAM,YAAN,EAAoB,OAApB;;AAEA,QAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;;;AAGA,QAAI,KAAK,KAAL,KAAe,KAAK,MAAxB,EAAgC;AAC9B,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa,MAAb,EAAqB,EAAE,MAAM,EAAE,WAAS,YAAX,EAAR,EAArB;AACD;AA7DY,CAAf,+E;;;;;;;;;;;ACnBA,OAAO,yBAAP,+C","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nexport const Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only publish tasks that are public or belong to the current user\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find({\n      $or: [\n        { private: { $ne: true } },\n        { owner: this.userId },\n      ],\n    });\n  });\n}\n\nMeteor.methods({\n  // add information to our task db\n  'tasks.insert'(object) {\n    let user = object.user;\n    let title = object.title;\n    let task = object.text;\n    let location = object.location;\n    check(title, String)\n    check(task, String);\n    check(location, String);\n\n    // Make sure the user is logged in before inserting a task\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.insert({\n      user,\n      title,\n      task,\n      location,\n      createdAt: new Date(),\n      owner: this.userId,\n      username: Meteor.users.findOne(this.userId).username,\n    });\n  },\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== this.userId) {\n      // If the task is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.remove(taskId);\n  },\n  'tasks.setChecked'(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== this.userId) {\n      // If the task is private, make sure only the owner can check it off\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, { $set: { checked: setChecked } });\n  },\n  'tasks.setPrivate'(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n\n    const task = Tasks.findOne(taskId);\n\n    // Make sure only the task owner can make a task private\n    if (task.owner !== this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, { $set: { private: setToPrivate } });\n  },\n\n} ) ;","import '../imports/api/tasks.js';\n\n"]}}]