[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar EJSON = Package.ejson.EJSON;\nvar ValidationError = Package['mdg:validation-error'].ValidationError;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Astro;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"jagi:astronomy\":{\"lib\":{\"main.js\":[\"./core/ejson.js\",\"./modules/core/module.js\",\"./modules/storage/module.js\",\"./modules/behaviors/module.js\",\"./modules/events/module.js\",\"./modules/methods/module.js\",\"./modules/fields/module.js\",\"./modules/indexes/module.js\",\"./modules/validators/module.js\",\"./core/config.js\",\"./core/module.js\",\"./core/class.js\",\"./core/reserved_keywords.js\",\"./modules/fields/enum.js\",\"./modules/fields/type.js\",\"./modules/fields/Field\",\"./modules/fields/ScalarField\",\"./modules/fields/ObjectField\",\"./modules/fields/ListField\",\"./modules/behaviors/behavior.js\",\"./modules/validators/validator.js\",\"./modules/validators/validators.js\",\"meteor/mdg:validation-error\",\"./modules/events/event.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/main.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({Astro:function(){return Astro},Module:function(){return Module},Class:function(){return Class},Enum:function(){return Enum},Type:function(){return Type},Field:function(){return Field},ScalarField:function(){return ScalarField},ObjectField:function(){return ObjectField},ListField:function(){return ListField},Behavior:function(){return Behavior},Validator:function(){return Validator},Validators:function(){return Validators},ValidationError:function(){return ValidationError},Event:function(){return Event},reservedKeywords:function(){return reservedKeywords}});module.import('./core/ejson.js');module.import('./modules/core/module.js');module.import('./modules/storage/module.js');module.import('./modules/behaviors/module.js');module.import('./modules/events/module.js');module.import('./modules/methods/module.js');module.import('./modules/fields/module.js');module.import('./modules/indexes/module.js');module.import('./modules/validators/module.js');var Config;module.import('./core/config.js',{\"default\":function(v){Config=v}});var Module;module.import('./core/module.js',{\"default\":function(v){Module=v}});var Class;module.import('./core/class.js',{\"default\":function(v){Class=v}});var reservedKeywords;module.import('./core/reserved_keywords.js',{\"default\":function(v){reservedKeywords=v}});var Enum;module.import('./modules/fields/enum.js',{\"default\":function(v){Enum=v}});var Type;module.import('./modules/fields/type.js',{\"default\":function(v){Type=v}});var Field;module.import('./modules/fields/Field',{\"default\":function(v){Field=v}});var ScalarField;module.import('./modules/fields/ScalarField',{\"default\":function(v){ScalarField=v}});var ObjectField;module.import('./modules/fields/ObjectField',{\"default\":function(v){ObjectField=v}});var ListField;module.import('./modules/fields/ListField',{\"default\":function(v){ListField=v}});var Behavior;module.import('./modules/behaviors/behavior.js',{\"default\":function(v){Behavior=v}});var Validator;module.import('./modules/validators/validator.js',{\"default\":function(v){Validator=v}});var Validators;module.import('./modules/validators/validators.js',{\"default\":function(v){Validators=v}});var ValidationError;module.import('meteor/mdg:validation-error',{\"ValidationError\":function(v){ValidationError=v}});var Event;module.import('./modules/events/event.js',{\"default\":function(v){Event=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n                                                                                                                       //\n                                                                                                                       // 11\n                                                                                                                       // 12\n                                                                                                                       // 13\n                                                                                                                       // 14\n                                                                                                                       // 15\n                                                                                                                       // 16\n                                                                                                                       // 17\n                                                                                                                       // 18\n                                                                                                                       // 19\n                                                                                                                       // 20\n                                                                                                                       // 21\n                                                                                                                       // 22\n                                                                                                                       // 23\n                                                                                                                       // 24\n                                                                                                                       // 25\n                                                                                                                       //\nvar Astro = {                                                                                                          // 27\n  Config: Config,                                                                                                      // 28\n  Module: Module,                                                                                                      // 29\n  Class: Class,                                                                                                        // 30\n  Enum: Enum,                                                                                                          // 31\n  Type: Type,                                                                                                          // 32\n  Field: Field,                                                                                                        // 33\n  ScalarField: ScalarField,                                                                                            // 34\n  ObjectField: ObjectField,                                                                                            // 35\n  ListField: ListField,                                                                                                // 36\n  Behavior: Behavior,                                                                                                  // 37\n  Validator: Validator,                                                                                                // 38\n  Validators: Validators,                                                                                              // 39\n  ValidationError: ValidationError,                                                                                    // 40\n  Event: Event,                                                                                                        // 41\n  reservedKeywords: reservedKeywords                                                                                   // 42\n};                                                                                                                     // 27\n                                                                                                                       //\n                                                                                                                       // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"core\":{\"class.js\":[\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"babel-runtime/helpers/classCallCheck\",\"lodash\",\"meteor/ejson\",\"../modules/core/utils/throw_parse_error.js\",\"../modules/core/utils/clone_definition.js\",\"../modules/fields/utils/set_defaults.js\",\"../modules/fields/utils/cast_nested.js\",\"./module.js\",\"../modules/events/event.js\",\"../modules/fields/type.js\",\"../modules/validators/validators.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/core/class.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _;module.import('lodash',{\"default\":function(v){_=v}});var EJSON;module.import('meteor/ejson',{\"EJSON\":function(v){EJSON=v}});var throwParseError;module.import('../modules/core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});var cloneDefinition;module.import('../modules/core/utils/clone_definition.js',{\"default\":function(v){cloneDefinition=v}});var setDefaults;module.import('../modules/fields/utils/set_defaults.js',{\"default\":function(v){setDefaults=v}});var castNested;module.import('../modules/fields/utils/cast_nested.js',{\"default\":function(v){castNested=v}});var Module;module.import('./module.js',{\"default\":function(v){Module=v}});var Event;module.import('../modules/events/event.js',{\"default\":function(v){Event=v}});var Type;module.import('../modules/fields/type.js',{\"default\":function(v){Type=v}});var Validators;module.import('../modules/validators/validators.js',{\"default\":function(v){Validators=v}});\n                                                                                                                       //\n                                                                                                                       //\n                                                                                                                       // 1\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n                                                                                                                       // 10\n                                                                                                                       //\nvar initClass = function initClass(Class) {                                                                            // 12\n  // Create and store the schema \"definition\" object in the class constructor.                                         //\n  // It's a combination of all parent definitions and a definition that                                                //\n  // created this class. It's used to create child classes.                                                            //\n  Class.definition = {};                                                                                               // 16\n  // Create and store the \"schema\" object in the class constructor. It's an                                            //\n  // object that contains all the data related with a given class. The                                                 //\n  // \"schema\" object contains \"computed\" data of the schema \"definition\".                                              //\n  // Thanks to that, Astronomy does not need to compute data on the fly and                                            //\n  // everything works faster.                                                                                          //\n  Class.schema = {};                                                                                                   // 22\n  // Create empty array for storing child classes.                                                                     //\n  Class.children = [];                                                                                                 // 24\n  // Init the class schema and schema definition.                                                                      //\n  Module.forEach(function (module) {                                                                                   // 26\n    module.onInitSchema(Class.schema, Class.getName());                                                                // 27\n    module.onInitDefinition(Class.definition, Class.getName());                                                        // 28\n  });                                                                                                                  // 29\n  // We have to call the \"onInitClass\" hooks in the separate loop after                                                //\n  // initiation of the schema and schema definition, because some                                                      //\n  // \"onInitClass\" hooks can execute the \"Class.extend\" method which requires                                          //\n  // schema and schama definition to be initalized.                                                                    //\n  Module.forEach(function (module) {                                                                                   // 34\n    module.onInitClass(Class, Class.getName());                                                                        // 35\n  });                                                                                                                  // 36\n};                                                                                                                     // 37\n                                                                                                                       //\n// Helper variables for passing information about options to nested documents                                          //\n// being initialised during construction.                                                                              //\nvar callsCount = 0;                                                                                                    // 41\nvar cloneArgs = null;                                                                                                  // 42\n                                                                                                                       //\nvar Class = function () {                                                                                              //\n  function Class(rawDoc) {                                                                                             // 45\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                             // 45\n                                                                                                                       //\n    _classCallCheck(this, Class);                                                                                      // 45\n                                                                                                                       //\n    // Set default options.                                                                                            //\n    _.defaults(options, {                                                                                              // 47\n      defaults: true,                                                                                                  // 48\n      clone: true                                                                                                      // 49\n    });                                                                                                                // 47\n                                                                                                                       //\n    if (callsCount === 0 && cloneArgs === null) {                                                                      // 52\n      cloneArgs = options.clone;                                                                                       // 53\n    }                                                                                                                  // 54\n    callsCount++;                                                                                                      // 55\n                                                                                                                       //\n    var doc = this;                                                                                                    // 57\n    var _Class = doc.constructor;                                                                                      // 58\n                                                                                                                       //\n    if (!_Class.getName()) {                                                                                           // 60\n      throw new Error('Can not create instance of the \"Astro.Class\" class');                                           // 61\n    }                                                                                                                  // 64\n                                                                                                                       //\n    // Trigger the \"beforeInit\" event handlers.                                                                        //\n    doc.dispatchEvent(new Event('beforeInit'));                                                                        // 67\n                                                                                                                       //\n    // Clone an argument if the \"clone\" option is set.                                                                 //\n    rawDoc = rawDoc || {};                                                                                             // 70\n    if (cloneArgs) {                                                                                                   // 71\n      rawDoc = EJSON.clone(rawDoc);                                                                                    // 72\n    }                                                                                                                  // 73\n                                                                                                                       //\n    // Set values in a document.                                                                                       //\n    var fields = _Class.getFields();                                                                                   // 76\n    _.each(fields, function (field) {                                                                                  // 77\n      doc[field.name] = rawDoc[field.name];                                                                            // 78\n    });                                                                                                                // 79\n                                                                                                                       //\n    // Set default values if the \"defaults\" option is set.                                                             //\n    if (options.defaults) {                                                                                            // 82\n      setDefaults({                                                                                                    // 83\n        doc: doc                                                                                                       // 84\n      });                                                                                                              // 83\n    }                                                                                                                  // 86\n    // Cast nested documents.                                                                                          //\n    castNested({                                                                                                       // 88\n      doc: doc,                                                                                                        // 89\n      options: {                                                                                                       // 90\n        clone: options.clone                                                                                           // 91\n      }                                                                                                                // 90\n    });                                                                                                                // 88\n                                                                                                                       //\n    // Trigger the \"afterInit\" event handlers.                                                                         //\n    doc.dispatchEvent(new Event('afterInit'));                                                                         // 96\n                                                                                                                       //\n    // Decrease number of nested documents being initialised.                                                          //\n    if (callsCount > 0) {                                                                                              // 99\n      callsCount--;                                                                                                    // 100\n    }                                                                                                                  // 101\n    if (callsCount === 0) {                                                                                            // 102\n      cloneArgs = null;                                                                                                // 103\n    }                                                                                                                  // 104\n  }                                                                                                                    // 105\n                                                                                                                       //\n  // Method needed for EJSONification.                                                                                 //\n                                                                                                                       //\n                                                                                                                       //\n  Class.prototype.typeName = function typeName() {                                                                     //\n    return 'Astronomy';                                                                                                // 109\n  };                                                                                                                   // 110\n                                                                                                                       //\n  Class.prototype.toJSONValue = function toJSONValue(args) {                                                           //\n    var doc = this;                                                                                                    // 113\n    var Class = doc.constructor;                                                                                       // 114\n                                                                                                                       //\n    var json = {                                                                                                       // 116\n      'class': Class.getName()                                                                                         // 117\n    };                                                                                                                 // 116\n                                                                                                                       //\n    // Trigger the \"toJSONValue\" event handlers.                                                                       //\n    doc.dispatchEvent(new Event('toJSONValue', {                                                                       // 121\n      json: json                                                                                                       // 122\n    }));                                                                                                               // 121\n                                                                                                                       //\n    return json;                                                                                                       // 125\n  };                                                                                                                   // 126\n                                                                                                                       //\n  Class.getName = function getName() {                                                                                 //\n    return this.className;                                                                                             // 129\n  };                                                                                                                   // 130\n                                                                                                                       //\n  Class.getParent = function getParent() {                                                                             //\n    if (this.parentClassName) {                                                                                        // 133\n      return this.get(this.parentClassName);                                                                           // 134\n    }                                                                                                                  // 135\n  };                                                                                                                   // 136\n                                                                                                                       //\n  Class.getChildren = function getChildren() {                                                                         //\n    return this.children;                                                                                              // 139\n  };                                                                                                                   // 140\n                                                                                                                       //\n  Class.create = function create(definition) {                                                                         //\n    // Get class name.                                                                                                 //\n    var className = definition.name;                                                                                   // 144\n    // Extend the Astro.Class class.                                                                                   //\n    var Class = this.classes[className] = function (_ref) {                                                            // 146\n      _inherits(Class, _ref);                                                                                          // 146\n                                                                                                                       //\n      function Class() {                                                                                               // 146\n        _classCallCheck(this, Class);                                                                                  // 146\n                                                                                                                       //\n        return _possibleConstructorReturn(this, _ref.apply(this, arguments));                                          // 146\n      }                                                                                                                // 146\n                                                                                                                       //\n      return Class;                                                                                                    // 146\n    }(this);                                                                                                           // 146\n    // Store the class name in the constructor.                                                                        //\n    Class.className = className;                                                                                       // 148\n    // Initialize class.                                                                                               //\n    initClass(Class);                                                                                                  // 150\n    // Extend class with a definition.                                                                                 //\n    Class.extend(definition);                                                                                          // 152\n    // Register a new type.                                                                                            //\n    Type.create({                                                                                                      // 154\n      name: className,                                                                                                 // 155\n      'class': Class,                                                                                                  // 156\n      validate: function validate(args) {                                                                              // 157\n        // Add current class as a param of validator.                                                                  //\n        args.param = Class;                                                                                            // 159\n        Validators['class'](args);                                                                                     // 160\n      }                                                                                                                // 161\n    });                                                                                                                // 154\n                                                                                                                       //\n    return Class;                                                                                                      // 164\n  };                                                                                                                   // 165\n                                                                                                                       //\n  Class.inherit = function inherit(definition) {                                                                       //\n    var Parent = this;                                                                                                 // 168\n    var className = definition.name;                                                                                   // 169\n                                                                                                                       //\n    // Extend the parent class.                                                                                        //\n    var Class = this.classes[className] = function (_Parent) {                                                         // 172\n      _inherits(Class, _Parent);                                                                                       // 172\n                                                                                                                       //\n      function Class() {                                                                                               // 172\n        _classCallCheck(this, Class);                                                                                  // 172\n                                                                                                                       //\n        return _possibleConstructorReturn(this, _Parent.apply(this, arguments));                                       // 172\n      }                                                                                                                // 172\n                                                                                                                       //\n      return Class;                                                                                                    // 172\n    }(Parent);                                                                                                         // 172\n                                                                                                                       //\n    // Store the class name in the constructor.                                                                        //\n    Class.className = className;                                                                                       // 175\n    // Store the parent class name in the constructor.                                                                 //\n    Class.parentClassName = Parent.getName();                                                                          // 177\n    // Initialize class.                                                                                               //\n    initClass(Class);                                                                                                  // 179\n    // Store child class in the parent class.                                                                          //\n    Parent.children.push(Class);                                                                                       // 181\n    // Extend class with the parent class definition.                                                                  //\n    Class.extend(Parent.definition);                                                                                   // 183\n    // Extend class with the definition.                                                                               //\n    Class.extend(definition);                                                                                          // 185\n    // Register a new type.                                                                                            //\n    Type.create({                                                                                                      // 187\n      name: className,                                                                                                 // 188\n      'class': Class,                                                                                                  // 189\n      validate: function validate(args) {                                                                              // 190\n        // Add current class as a param of validator.                                                                  //\n        args.param = Class;                                                                                            // 192\n        Validators['class'](args);                                                                                     // 193\n      }                                                                                                                // 194\n    });                                                                                                                // 187\n                                                                                                                       //\n    return Class;                                                                                                      // 197\n  };                                                                                                                   // 198\n                                                                                                                       //\n  Class.extend = function extend(extendDefinition, onlyModules) {                                                      //\n    var _this3 = this;                                                                                                 // 200\n                                                                                                                       //\n    if (onlyModules !== undefined && !Match.test(onlyModules, Match.OneOf(String, [String]))) {                        // 201\n      throwParseError([{                                                                                               // 205\n        'class': this.getName()                                                                                        // 206\n      }, {                                                                                                             // 205\n        'method': 'extend'                                                                                             // 208\n      }, 'The second argument has to be a string or an array of strings']);                                            // 207\n    }                                                                                                                  // 212\n                                                                                                                       //\n    if (Match.test(onlyModules, String)) {                                                                             // 214\n      onlyModules = [onlyModules];                                                                                     // 215\n    }                                                                                                                  // 216\n                                                                                                                       //\n    // Clone definition to not modify the original one.                                                                //\n    extendDefinition = cloneDefinition(extendDefinition);                                                              // 219\n                                                                                                                       //\n    Module.forEach(function (module) {                                                                                 // 221\n      // If the second argument was passed, then we only run module hooks for                                          //\n      // modules that were listed in the second argument.                                                              //\n      if (onlyModules !== undefined && !_.includes(onlyModules, module.name)) {                                        // 224\n        return;                                                                                                        // 225\n      }                                                                                                                // 226\n      // Initialize parsed definition.                                                                                 //\n      var parsedDefinition = {};                                                                                       // 228\n      module.onInitDefinition(parsedDefinition, Class.getName());                                                      // 229\n      // Parse the extending definition and put parsed properties in the parsed                                        //\n      // definition.                                                                                                   //\n      module.onParseDefinition(parsedDefinition, extendDefinition, _this3.getName());                                  // 232\n      // Apply parsed definition.                                                                                      //\n      module.onApplyDefinition(_this3, parsedDefinition, _this3.getName());                                            // 234\n      // Merge parsed definition with a class definition.                                                              //\n      module.onMergeDefinitions(_this3.definition, parsedDefinition, _this3.getName());                                // 236\n    });                                                                                                                // 237\n  };                                                                                                                   // 238\n                                                                                                                       //\n  Class.get = function get(className) {                                                                                //\n    return this.classes[className];                                                                                    // 241\n  };                                                                                                                   // 242\n                                                                                                                       //\n  Class.has = function has(className) {                                                                                //\n    return _.has(this.classes, className);                                                                             // 245\n  };                                                                                                                   // 246\n                                                                                                                       //\n  Class.includes = function includes(Class) {                                                                          //\n    return _.includes(this.classes, Class);                                                                            // 249\n  };                                                                                                                   // 250\n                                                                                                                       //\n  Class.isParentOf = function isParentOf(Class) {                                                                      //\n    if (!Class || !Class.prototype) {                                                                                  // 253\n      return false;                                                                                                    // 254\n    }                                                                                                                  // 255\n    return this.prototype.isPrototypeOf(Class.prototype);                                                              // 256\n  };                                                                                                                   // 257\n                                                                                                                       //\n  Class.isChildOf = function isChildOf(Class) {                                                                        //\n    if (!Class || !Class.prototype) {                                                                                  // 260\n      return false;                                                                                                    // 261\n    }                                                                                                                  // 262\n    return Class.prototype.isPrototypeOf(this.prototype);                                                              // 263\n  };                                                                                                                   // 264\n                                                                                                                       //\n  return Class;                                                                                                        //\n}();                                                                                                                   //\n                                                                                                                       //\n;                                                                                                                      // 265\n                                                                                                                       //\nClass.classes = {};                                                                                                    // 267\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(Class));                                                                      // 269\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"config.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/core/config.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Config = {                                                                                                         // 1\n\tverbose: true                                                                                                         // 2\n};                                                                                                                     // 1\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(Config));                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ejson.js\":[\"./class.js\",\"../modules/events/event.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/core/ejson.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar AstroClass;module.import('./class.js',{\"default\":function(v){AstroClass=v}});var Event;module.import('../modules/events/event.js',{\"default\":function(v){Event=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nEJSON.addType('Astronomy', function (json) {                                                                           // 4\n  var Class = AstroClass.get(json['class']);                                                                           // 5\n  var doc = new Class();                                                                                               // 6\n                                                                                                                       //\n  // Trigger the \"fromJSONValue\" event handlers.                                                                       //\n  doc.dispatchEvent(new Event('fromJSONValue', {                                                                       // 9\n    json: json                                                                                                         // 10\n  }));                                                                                                                 // 9\n                                                                                                                       //\n  return doc;                                                                                                          // 13\n});                                                                                                                    // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"module.js\":[\"babel-runtime/helpers/classCallCheck\",\"lodash\",\"../modules/core/utils/throw_parse_error.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/core/module.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _;module.import('lodash',{\"default\":function(v){_=v}});var throwParseError;module.import('../modules/core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});\n                                                                                                                       // 1\n                                                                                                                       // 2\n                                                                                                                       //\nvar Module = function () {                                                                                             //\n\tfunction Module(definition) {                                                                                         // 5\n\t\tvar _this = this;                                                                                                    // 5\n                                                                                                                       //\n\t\t_classCallCheck(this, Module);                                                                                       // 5\n                                                                                                                       //\n\t\tif (!Match.test(definition, Object)) {                                                                               // 6\n\t\t\tthrowParseError(['Module definition has to be an object']);                                                         // 7\n\t\t}                                                                                                                    // 10\n                                                                                                                       //\n\t\t// Set module name.                                                                                                  //\n\t\tif (!Match.test(definition.name, String)) {                                                                          // 13\n\t\t\tthrowParseError(['Module name has to be a string']);                                                                // 14\n\t\t}                                                                                                                    // 17\n\t\tvar moduleName = this.name = definition.name;                                                                        // 18\n                                                                                                                       //\n\t\t// Set module hooks.                                                                                                 //\n\t\t_.each(['onInitSchema', 'onInitDefinition', 'onInitClass', 'onParseDefinition', 'onApplyDefinition', 'onMergeDefinitions'], function (hookName) {\n\t\t\tif (definition[hookName] === undefined) {                                                                           // 25\n\t\t\t\treturn;                                                                                                            // 26\n\t\t\t}                                                                                                                   // 27\n\t\t\tif (!Match.test(definition[hookName], Function)) {                                                                  // 28\n\t\t\t\tthrowParseError([{                                                                                                 // 29\n\t\t\t\t\t'module': moduleName                                                                                              // 30\n\t\t\t\t}, {                                                                                                               // 29\n\t\t\t\t\t'property': hookName                                                                                              // 32\n\t\t\t\t}, 'The \"' + hookName + '\" hook has to be a function']);                                                           // 31\n\t\t\t}                                                                                                                   // 36\n\t\t\t_this[hookName] = definition[hookName];                                                                             // 37\n\t\t});                                                                                                                  // 38\n                                                                                                                       //\n\t\t// Set module utils.                                                                                                 //\n\t\tif (definition.utils) {                                                                                              // 41\n\t\t\tif (!Match.test(definition.utils, Object)) {                                                                        // 42\n\t\t\t\tthrowParseError([{                                                                                                 // 43\n\t\t\t\t\t'module': moduleName                                                                                              // 44\n\t\t\t\t}, {                                                                                                               // 43\n\t\t\t\t\t'property': 'utils'                                                                                               // 46\n\t\t\t\t}, 'Utilities definition has to be an object']);                                                                   // 45\n\t\t\t}                                                                                                                   // 50\n\t\t\tthis.utils = {};                                                                                                    // 51\n\t\t\t_.each(definition.utils, function (method, methodName) {                                                            // 52\n\t\t\t\tif (!Match.test(method, Function)) {                                                                               // 53\n\t\t\t\t\tthrowParseError([{                                                                                                // 54\n\t\t\t\t\t\t'module': moduleName                                                                                             // 55\n\t\t\t\t\t}, {                                                                                                              // 54\n\t\t\t\t\t\t'property': 'utils'                                                                                              // 57\n\t\t\t\t\t}, {                                                                                                              // 56\n\t\t\t\t\t\t'method': methodName                                                                                             // 59\n\t\t\t\t\t}, 'Utility has to be a function']);                                                                              // 58\n\t\t\t\t}                                                                                                                  // 63\n\t\t\t\t_this.utils[methodName] = method;                                                                                  // 64\n\t\t\t});                                                                                                                 // 65\n\t\t}                                                                                                                    // 66\n\t}                                                                                                                     // 67\n                                                                                                                       //\n\tModule.prototype.onInitSchema = function onInitSchema(schema, className) {};                                          //\n                                                                                                                       //\n\tModule.prototype.onInitDefinition = function onInitDefinition(definition, className) {};                              //\n                                                                                                                       //\n\tModule.prototype.onInitClass = function onInitClass(Class, className) {};                                             //\n                                                                                                                       //\n\tModule.prototype.onParseDefinition = function onParseDefinition(parsedDefinition, definition, className) {};          //\n                                                                                                                       //\n\tModule.prototype.onApplyDefinition = function onApplyDefinition(Class, definition, className) {};                     //\n                                                                                                                       //\n\tModule.prototype.onMergeDefinitions = function onMergeDefinitions(targetDefinition, sourceDefinition, className) {};  //\n                                                                                                                       //\n\tModule.create = function create(definition) {                                                                         //\n\t\tvar module = new this(definition);                                                                                   // 79\n\t\tthis.modules[module.name] = module;                                                                                  // 80\n\t\tthis.modulesOrder.push(module.name);                                                                                 // 81\n\t\treturn module;                                                                                                       // 82\n\t};                                                                                                                    // 83\n                                                                                                                       //\n\tModule.get = function get(moduleName) {                                                                               //\n\t\treturn this.modules[moduleName];                                                                                     // 86\n\t};                                                                                                                    // 87\n                                                                                                                       //\n\tModule.forEach = function forEach(iteratee) {                                                                         //\n\t\tvar _this2 = this;                                                                                                   // 89\n                                                                                                                       //\n\t\tif (!Match.test(iteratee, Function)) {                                                                               // 90\n\t\t\tthrowParseError(['The first argument of the \"Module.forEach\" method has to be a function']);                        // 91\n\t\t}                                                                                                                    // 94\n\t\t_.each(this.modulesOrder, function (moduleName) {                                                                    // 95\n\t\t\titeratee(_this2.modules[moduleName]);                                                                               // 96\n\t\t});                                                                                                                  // 97\n\t};                                                                                                                    // 98\n                                                                                                                       //\n\treturn Module;                                                                                                        //\n}();                                                                                                                   //\n                                                                                                                       //\n;                                                                                                                      // 99\n                                                                                                                       //\nModule.modules = {};                                                                                                   // 101\nModule.modulesOrder = [];                                                                                              // 102\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(Module));                                                                     // 104\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"reserved_keywords.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/core/reserved_keywords.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar reservedNames = ['_isNew', 'copy', 'dispatchEvent', 'get', 'getModified', 'getModifiedValues', 'getModifier', 'isModified', 'raw', 'reload', 'remove', 'save', 'set', 'toJSONValue', 'typeName', 'validate', 'validateAll'];\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(reservedNames));                                                              // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"modules\":{\"behaviors\":{\"behavior.js\":[\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"babel-runtime/helpers/classCallCheck\",\"lodash\",\"../core/utils/throw_parse_error.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/behaviors/behavior.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _;module.import('lodash',{\"default\":function(v){_=v}});var throwParseError;module.import('../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});\n                                                                                                                       //\n                                                                                                                       //\n                                                                                                                       // 1\n                                                                                                                       // 2\n                                                                                                                       //\nvar checkDefinition = function checkDefinition(definition) {                                                           // 4\n\t// Check parameters validity.                                                                                         //\n\tif (!Match.test(definition, Object)) {                                                                                // 6\n\t\tthrowParseError(['Behavior definition has to be an object']);                                                        // 7\n\t}                                                                                                                     // 10\n                                                                                                                       //\n\t// Check if behavior name is provided and is a string.                                                                //\n\tif (!Match.test(definition.name, String)) {                                                                           // 13\n\t\tthrowParseError(['Behavior has to be named']);                                                                       // 14\n\t}                                                                                                                     // 17\n                                                                                                                       //\n\t// Check if behavior with a given name already exists.                                                                //\n\tif (_.has(Behavior.behaviors, definition.name)) {                                                                     // 20\n\t\tthrowParseError([{                                                                                                   // 21\n\t\t\t'behavior': definition.name                                                                                         // 22\n\t\t}, 'Behavior already exists']);                                                                                      // 21\n\t}                                                                                                                     // 26\n};                                                                                                                     // 27\n                                                                                                                       //\nvar Behavior = function () {                                                                                           //\n\tfunction Behavior(options) {                                                                                          // 30\n\t\t_classCallCheck(this, Behavior);                                                                                     // 30\n                                                                                                                       //\n\t\tthis.options = _.extend({}, this.options, options);                                                                  // 31\n\t}                                                                                                                     // 32\n                                                                                                                       //\n\tBehavior.prototype.createClassDefinition = function createClassDefinition() {};                                       //\n                                                                                                                       //\n\tBehavior.prototype.apply = function apply(Class) {                                                                    //\n\t\tvar definition = this.createClassDefinition();                                                                       // 37\n\t\tif (definition) {                                                                                                    // 38\n\t\t\tClass.extend(definition);                                                                                           // 39\n\t\t}                                                                                                                    // 40\n\t};                                                                                                                    // 41\n                                                                                                                       //\n\tBehavior.create = function create(definition) {                                                                       //\n\t\tcheckDefinition(definition);                                                                                         // 44\n                                                                                                                       //\n\t\t// Get behavior name.                                                                                                //\n\t\tvar behaviorName = definition.name;                                                                                  // 47\n\t\t// Extend the Behavior class.                                                                                        //\n\t\tvar Behavior = this.behaviors[behaviorName] = function (_ref) {                                                      // 49\n\t\t\t_inherits(Behavior, _ref);                                                                                          // 49\n                                                                                                                       //\n\t\t\tfunction Behavior() {                                                                                               // 49\n\t\t\t\t_classCallCheck(this, Behavior);                                                                                   // 49\n                                                                                                                       //\n\t\t\t\treturn _possibleConstructorReturn(this, _ref.apply(this, arguments));                                              // 49\n\t\t\t}                                                                                                                   // 49\n                                                                                                                       //\n\t\t\treturn Behavior;                                                                                                    // 49\n\t\t}(this);                                                                                                             // 49\n\t\t// Store definition in behavior class.                                                                               //\n\t\tBehavior.definition = definition;                                                                                    // 51\n\t\t// Extend prototype with a definition.                                                                               //\n\t\t_.extend(Behavior.prototype, definition);                                                                            // 53\n                                                                                                                       //\n\t\treturn Behavior;                                                                                                     // 55\n\t};                                                                                                                    // 56\n                                                                                                                       //\n\tBehavior.get = function get(behaviorName) {                                                                           //\n\t\treturn this.behaviors[behaviorName];                                                                                 // 59\n\t};                                                                                                                    // 60\n                                                                                                                       //\n\tBehavior.has = function has(behaviorName) {                                                                           //\n\t\treturn _.has(this.behaviors, behaviorName);                                                                          // 63\n\t};                                                                                                                    // 64\n                                                                                                                       //\n\treturn Behavior;                                                                                                      //\n}();                                                                                                                   //\n                                                                                                                       //\n;                                                                                                                      // 65\n                                                                                                                       //\nBehavior.behaviors = {};                                                                                               // 67\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(Behavior));                                                                   // 69\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"module.js\":[\"../../core/module.js\",\"./hooks/init_schema.js\",\"./hooks/init_definition.js\",\"./hooks/parse_definition.js\",\"./hooks/merge_definitions.js\",\"./hooks/apply_definition.js\",\"./hooks/init_class.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/behaviors/module.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Module;module.import('../../core/module.js',{\"default\":function(v){Module=v}});var onInitSchema;module.import('./hooks/init_schema.js',{\"default\":function(v){onInitSchema=v}});var onInitDefinition;module.import('./hooks/init_definition.js',{\"default\":function(v){onInitDefinition=v}});var onParseDefinition;module.import('./hooks/parse_definition.js',{\"default\":function(v){onParseDefinition=v}});var onMergeDefinitions;module.import('./hooks/merge_definitions.js',{\"default\":function(v){onMergeDefinitions=v}});var onApplyDefinition;module.import('./hooks/apply_definition.js',{\"default\":function(v){onApplyDefinition=v}});var onInitClass;module.import('./hooks/init_class.js',{\"default\":function(v){onInitClass=v}});\n// Hooks.                                                                                                              //\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n                                                                                                                       //\nModule.create({                                                                                                        // 10\n\tname: 'behaviors',                                                                                                    // 11\n\tonInitSchema: onInitSchema,                                                                                           // 12\n\tonInitDefinition: onInitDefinition,                                                                                   // 13\n\tonParseDefinition: onParseDefinition,                                                                                 // 14\n\tonMergeDefinitions: onMergeDefinitions,                                                                               // 15\n\tonApplyDefinition: onApplyDefinition,                                                                                 // 16\n\tonInitClass: onInitClass                                                                                              // 17\n});                                                                                                                    // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"class_static_methods\":{\"get_behavior.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/behaviors/class_static_methods/get_behavior.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction getBehavior(behaviorName) {                                                                                   // 1\n  return this.schema.behaviors[behaviorName];                                                                          // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getBehavior));                                                                // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"get_behaviors.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/behaviors/class_static_methods/get_behaviors.js                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction getBehaviors() {                                                                                              // 1\n  return this.schema.behaviors;                                                                                        // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getBehaviors));                                                               // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"has_behavior.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/behaviors/class_static_methods/has_behavior.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction hasBehavior(behaviorName) {                                                                                   // 3\n  return _.has(this.schema.behaviors, behaviorName);                                                                   // 4\n};                                                                                                                     // 5\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(hasBehavior));                                                                // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"hooks\":{\"apply_definition.js\":[\"lodash\",\"../behavior.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/behaviors/hooks/apply_definition.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Behavior;module.import('../behavior.js',{\"default\":function(v){Behavior=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nfunction onApplyDefinition(Class, parsedDefinition, className) {                                                       // 4\n\tvar schema = Class.schema;                                                                                            // 5\n                                                                                                                       //\n\t// Add behaviors to the class.                                                                                        //\n\t_.each(parsedDefinition.behaviors, function (behaviorsOptions, behaviorName) {                                        // 8\n\t\t// Get the behavior class.                                                                                           //\n\t\tvar BehaviorClass = Behavior.get(behaviorName);                                                                      // 10\n\t\t_.each(behaviorsOptions, function (behaviorOptions) {                                                                // 11\n\t\t\t// Create the behavior instance passing behavior options.                                                           //\n\t\t\tvar behavior = new BehaviorClass(behaviorOptions);                                                                  // 13\n\t\t\t// Add behavior to the schema.                                                                                      //\n\t\t\tschema.behaviors[behaviorName] = schema.behaviors[behaviorName] || [];                                              // 15\n\t\t\tschema.behaviors[behaviorName].push(behavior);                                                                      // 16\n\t\t\t// Apply behavior to the class.                                                                                     //\n\t\t\tbehavior.apply(Class);                                                                                              // 18\n\t\t});                                                                                                                  // 19\n\t});                                                                                                                   // 20\n};                                                                                                                     // 21\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onApplyDefinition));                                                          // 23\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"init_class.js\":[\"../class_static_methods/get_behavior.js\",\"../class_static_methods/get_behaviors.js\",\"../class_static_methods/has_behavior.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/behaviors/hooks/init_class.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar getBehavior;module.import('../class_static_methods/get_behavior.js',{\"default\":function(v){getBehavior=v}});var getBehaviors;module.import('../class_static_methods/get_behaviors.js',{\"default\":function(v){getBehaviors=v}});var hasBehavior;module.import('../class_static_methods/has_behavior.js',{\"default\":function(v){hasBehavior=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction onInitClass(Class, className) {                                                                               // 5\n\tClass.getBehavior = getBehavior;                                                                                      // 6\n\tClass.getBehaviors = getBehaviors;                                                                                    // 7\n\tClass.hasBehavior = hasBehavior;                                                                                      // 8\n};                                                                                                                     // 9\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitClass));                                                                // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"init_definition.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/behaviors/hooks/init_definition.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction onInitDefinition(definition, className) {                                                                     // 1\n\tdefinition.behaviors = {};                                                                                            // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitDefinition));                                                           // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"init_schema.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/behaviors/hooks/init_schema.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction onInitSchema(schema, className) {                                                                             // 1\n\tschema.behaviors = {};                                                                                                // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitSchema));                                                               // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"merge_definitions.js\":[\"babel-runtime/helpers/toConsumableArray\",\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/behaviors/hooks/merge_definitions.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _toConsumableArray;module.import('babel-runtime/helpers/toConsumableArray',{\"default\":function(v){_toConsumableArray=v}});var _;module.import('lodash',{\"default\":function(v){_=v}});\n                                                                                                                       // 1\n                                                                                                                       //\nfunction onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {                                           // 3\n\t_.each(sourceDefinition.behaviors, function (behaviors, behaviorName) {                                               // 4\n\t\tvar _targetDefinition$beh;                                                                                           // 4\n                                                                                                                       //\n\t\ttargetDefinition.behaviors[behaviorName] = targetDefinition.behaviors[behaviorName] || [];                           // 5\n\t\t(_targetDefinition$beh = targetDefinition.behaviors[behaviorName]).push.apply(_targetDefinition$beh, _toConsumableArray(behaviors));\n\t});                                                                                                                   // 8\n};                                                                                                                     // 9\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onMergeDefinitions));                                                         // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"parse_definition.js\":[\"lodash\",\"../../core/utils/throw_parse_error.js\",\"../behavior.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/behaviors/hooks/parse_definition.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});var Behavior;module.import('../behavior.js',{\"default\":function(v){Behavior=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction onParseDefinition(parsedDefinition, definition, className) {                                                  // 5\n\t// Check existence of the \"behaviors\" property.                                                                       //\n\tif (definition.behaviors !== undefined) {                                                                             // 7\n\t\tif (!Match.test(definition.behaviors, Match.OneOf([String], Object))) {                                              // 8\n\t\t\tthrowParseError([{                                                                                                  // 9\n\t\t\t\t'class': className                                                                                                 // 10\n\t\t\t}, {                                                                                                                // 9\n\t\t\t\t'property': 'behaviors'                                                                                            // 12\n\t\t\t}, 'Behaviors definition has to be an array of behaviors\\' names or an ' + 'object with behaviors\\' options']);     // 11\n\t\t}                                                                                                                    // 17\n\t\t_.each(definition.behaviors, function (behaviorOptions, behaviorName) {                                              // 18\n\t\t\t// If we deal with an array of behaviors' names, then behavior options is                                           //\n\t\t\t// an empty object.                                                                                                 //\n\t\t\tif (_.isString(behaviorOptions)) {                                                                                  // 21\n\t\t\t\tbehaviorName = behaviorOptions;                                                                                    // 22\n\t\t\t\tbehaviorOptions = [{}];                                                                                            // 23\n\t\t\t}                                                                                                                   // 24\n\t\t\t// Check if behavior with a given name exists.                                                                      //\n\t\t\tif (!Behavior.has(behaviorName)) {                                                                                  // 26\n\t\t\t\tthrowParseError([{                                                                                                 // 27\n\t\t\t\t\t'class': className                                                                                                // 28\n\t\t\t\t}, {                                                                                                               // 27\n\t\t\t\t\t'behavior': behaviorName                                                                                          // 30\n\t\t\t\t}, 'Behavior does not exist']);                                                                                    // 29\n\t\t\t}                                                                                                                   // 34\n\t\t\t// Behavior options has to be an object or an array of objects, when we                                             //\n\t\t\t// are adding multiple behaviors of the same type.                                                                  //\n\t\t\tif (!Match.test(behaviorOptions, Match.OneOf(Object, [Object]))) {                                                  // 37\n\t\t\t\tthrowParseError([{                                                                                                 // 38\n\t\t\t\t\t'class': className                                                                                                // 39\n\t\t\t\t}, {                                                                                                               // 38\n\t\t\t\t\t'behavior': behaviorName                                                                                          // 41\n\t\t\t\t}, 'Behavior options have to be an object or an array of objects']);                                               // 40\n\t\t\t}                                                                                                                   // 45\n\t\t\t// Make sure that behavior options is an array of objects.                                                          //\n\t\t\tif (!Match.test(behaviorOptions, Array)) {                                                                          // 47\n\t\t\t\tbehaviorOptions = [behaviorOptions];                                                                               // 48\n\t\t\t}                                                                                                                   // 49\n\t\t\tparsedDefinition.behaviors[behaviorName] = behaviorOptions;                                                         // 50\n\t\t});                                                                                                                  // 51\n\t}                                                                                                                     // 52\n};                                                                                                                     // 53\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onParseDefinition));                                                          // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"core\":{\"module.js\":[\"../../core/module.js\",\"./utils/clone_definition.js\",\"./utils/override_method.js\",\"./utils/throw_parse_error.js\",\"./utils/warn.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/core/module.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Module;module.import('../../core/module.js',{\"default\":function(v){Module=v}});var cloneDefinition;module.import('./utils/clone_definition.js',{\"default\":function(v){cloneDefinition=v}});var overrideMethod;module.import('./utils/override_method.js',{\"default\":function(v){overrideMethod=v}});var throwParseError;module.import('./utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});var warn;module.import('./utils/warn.js',{\"default\":function(v){warn=v}});\n// Utils.                                                                                                              //\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       //\nModule.create({                                                                                                        // 8\n  name: 'core',                                                                                                        // 9\n  utils: {                                                                                                             // 10\n    cloneDefinition: cloneDefinition,                                                                                  // 11\n    overrideMethod: overrideMethod,                                                                                    // 12\n    throwParseError: throwParseError,                                                                                  // 13\n    warn: warn                                                                                                         // 14\n  }                                                                                                                    // 10\n});                                                                                                                    // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"utils\":{\"clone_definition.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/core/utils/clone_definition.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction cloneDefinition(definition) {                                                                                 // 3\n\treturn _.cloneDeepWith(definition, function (value) {                                                                 // 4\n\t\tif (!_.isPlainObject(value) && !_.isArray(value)) {                                                                  // 5\n\t\t\treturn value;                                                                                                       // 6\n\t\t}                                                                                                                    // 7\n\t});                                                                                                                   // 8\n};                                                                                                                     // 9\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(cloneDefinition));                                                            // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"override_method.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/core/utils/override_method.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction overrideMethod(object, methodName, overridingMethod, param) {                                                 // 3\n  // Get original method.                                                                                              //\n  var originalMethod = object[methodName];                                                                             // 5\n                                                                                                                       //\n  // Override original method.                                                                                         //\n  object[methodName] = function () {                                                                                   // 8\n    // Convert arguments to array.                                                                                     //\n    var args = _.toArray(arguments);                                                                                   // 10\n                                                                                                                       //\n    // Execute overriding method passing arguments, original method and extra                                          //\n    // parameters.                                                                                                     //\n    return overridingMethod.call(this, args, originalMethod, param);                                                   // 14\n  };                                                                                                                   // 15\n};                                                                                                                     // 16\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(overrideMethod));                                                             // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"throw_parse_error.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/core/utils/throw_parse_error.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction throwParseError(details) {                                                                                    // 3\n  var message = '';                                                                                                    // 4\n                                                                                                                       //\n  _.each(details, function (detail) {                                                                                  // 6\n    if (_.isObject(detail)) {                                                                                          // 7\n      _.each(detail, function (value, key) {                                                                           // 8\n        message += '[\"' + value + '\" ' + key + ']';                                                                    // 9\n      });                                                                                                              // 10\n    } else if (_.isString(detail)) {                                                                                   // 11\n      message += ' ' + detail;                                                                                         // 12\n    }                                                                                                                  // 13\n  });                                                                                                                  // 14\n                                                                                                                       //\n  throw new TypeError(message);                                                                                        // 16\n};                                                                                                                     // 17\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(throwParseError));                                                            // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"warn.js\":[\"../../../core/config.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/core/utils/warn.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Config;module.import('../../../core/config.js',{\"default\":function(v){Config=v}});                                 // 1\n                                                                                                                       //\nfunction warn(warning) {                                                                                               // 3\n  if (console && console.warn && Config.verbose) {                                                                     // 4\n    console.warn(warning);                                                                                             // 5\n  }                                                                                                                    // 6\n};                                                                                                                     // 7\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(warn));                                                                       // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"events\":{\"event.js\":[\"babel-runtime/helpers/classCallCheck\",\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/events/event.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _;module.import('lodash',{\"default\":function(v){_=v}});\n                                                                                                                       // 1\n                                                                                                                       //\nvar Event = function () {                                                                                              //\n\tfunction Event(type, data) {                                                                                          // 4\n\t\t_classCallCheck(this, Event);                                                                                        // 4\n                                                                                                                       //\n\t\tthis.cancelable = false;                                                                                             // 5\n\t\tthis.propagates = false;                                                                                             // 6\n                                                                                                                       //\n\t\t_.extend(this, data);                                                                                                // 8\n                                                                                                                       //\n\t\tthis.type = type.toLowerCase();                                                                                      // 10\n\t\tthis.timeStamp = Date.now();                                                                                         // 11\n                                                                                                                       //\n\t\tthis.target = null;                                                                                                  // 13\n\t\tthis.currentTarget = null;                                                                                           // 14\n                                                                                                                       //\n\t\tthis.defaultPrevented = false;                                                                                       // 16\n\t\tthis.propagationStopped = false;                                                                                     // 17\n\t\tthis.immediatePropagationStopped = false;                                                                            // 18\n\t}                                                                                                                     // 19\n                                                                                                                       //\n\tEvent.prototype.preventDefault = function preventDefault() {                                                          //\n\t\tthis.defaultPrevented = true;                                                                                        // 22\n\t};                                                                                                                    // 23\n                                                                                                                       //\n\tEvent.prototype.stopPropagation = function stopPropagation() {                                                        //\n\t\tthis.propagationStopped = true;                                                                                      // 26\n\t};                                                                                                                    // 27\n                                                                                                                       //\n\tEvent.prototype.stopImmediatePropagation = function stopImmediatePropagation() {                                      //\n\t\tthis.immediatePropagationStopped = true;                                                                             // 30\n\t\tthis.stopPropagation();                                                                                              // 31\n\t};                                                                                                                    // 32\n                                                                                                                       //\n\treturn Event;                                                                                                         //\n}();                                                                                                                   //\n                                                                                                                       //\n;                                                                                                                      // 33\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(Event));                                                                      // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"module.js\":[\"../../core/module.js\",\"./hooks/init_schema.js\",\"./hooks/init_definition.js\",\"./hooks/parse_definition.js\",\"./hooks/merge_definitions.js\",\"./hooks/apply_definition.js\",\"./hooks/init_class.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/events/module.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Module;module.import('../../core/module.js',{\"default\":function(v){Module=v}});var onInitSchema;module.import('./hooks/init_schema.js',{\"default\":function(v){onInitSchema=v}});var onInitDefinition;module.import('./hooks/init_definition.js',{\"default\":function(v){onInitDefinition=v}});var onParseDefinition;module.import('./hooks/parse_definition.js',{\"default\":function(v){onParseDefinition=v}});var onMergeDefinitions;module.import('./hooks/merge_definitions.js',{\"default\":function(v){onMergeDefinitions=v}});var onApplyDefinition;module.import('./hooks/apply_definition.js',{\"default\":function(v){onApplyDefinition=v}});var onInitClass;module.import('./hooks/init_class.js',{\"default\":function(v){onInitClass=v}});\n                                                                                                                       //\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n                                                                                                                       //\nModule.create({                                                                                                        // 10\n\tname: 'events',                                                                                                       // 11\n\tonInitSchema: onInitSchema,                                                                                           // 12\n\tonInitDefinition: onInitDefinition,                                                                                   // 13\n\tonParseDefinition: onParseDefinition,                                                                                 // 14\n\tonMergeDefinitions: onMergeDefinitions,                                                                               // 15\n\tonApplyDefinition: onApplyDefinition,                                                                                 // 16\n\tonInitClass: onInitClass                                                                                              // 17\n});                                                                                                                    // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"class_prototype_methods\":{\"dispatch_event.js\":[\"lodash\",\"../event.js\",\"../../core/utils/throw_parse_error.js\",\"../../../core/class.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/events/class_prototype_methods/dispatch_event.js                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Event;module.import('../event.js',{\"default\":function(v){Event=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});var AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       //\nfunction returnFromDispatchEvent(event) {                                                                              // 6\n  // If an event is cancelable and it had been canceled with the                                                       //\n  // \"preventDefault\" method call, then we return false.                                                               //\n  if (event.cancelable) {                                                                                              // 9\n    return !event.defaultPrevented;                                                                                    // 10\n  }                                                                                                                    // 11\n  return true;                                                                                                         // 12\n}                                                                                                                      // 13\n                                                                                                                       //\nfunction dispatchEvent(event) {                                                                                        // 15\n  var doc = this;                                                                                                      // 16\n  var Class = doc.constructor;                                                                                         // 17\n                                                                                                                       //\n  if (!Match.test(event, Event)) {                                                                                     // 19\n    throwParseError([{                                                                                                 // 20\n      'class': Class.getName()                                                                                         // 21\n    }, {                                                                                                               // 20\n      'method': 'dispatchEvent'                                                                                        // 23\n    }, 'The first argument has to be an event object']);                                                               // 22\n  }                                                                                                                    // 27\n                                                                                                                       //\n  // Attach a document to the event as a target.                                                                       //\n  if (event.target === null) {                                                                                         // 30\n    event.target = doc;                                                                                                // 31\n  }                                                                                                                    // 32\n  if (event.currentTarget === null) {                                                                                  // 33\n    event.currentTarget = doc;                                                                                         // 34\n  }                                                                                                                    // 35\n                                                                                                                       //\n  // Get all event handlers of a given type.                                                                           //\n  var eventHandlers = Class.getEvents(event.type);                                                                     // 38\n                                                                                                                       //\n  _.every(eventHandlers, function (eventHandler) {                                                                     // 40\n    eventHandler(event);                                                                                               // 41\n                                                                                                                       //\n    // Stop execution of the following event handlers, if a flag is set.                                               //\n    return !event.immediatePropagationStopped;                                                                         // 44\n  });                                                                                                                  // 45\n                                                                                                                       //\n  // If propagation was stopped or bubbling is turned off, then we don't go                                            //\n  // deeper into nested fields.                                                                                        //\n  if (event.propagationStopped || !event.propagates) {                                                                 // 49\n    return returnFromDispatchEvent(event);                                                                             // 50\n  }                                                                                                                    // 51\n                                                                                                                       //\n  // Object fields.                                                                                                    //\n  _.each(Class.getObjectFields(), function (field) {                                                                   // 54\n    var value = doc[field.name];                                                                                       // 55\n    if (value instanceof AstroClass) {                                                                                 // 56\n      event.currentTarget = value;                                                                                     // 57\n      value.dispatchEvent(event);                                                                                      // 58\n    }                                                                                                                  // 59\n  });                                                                                                                  // 60\n                                                                                                                       //\n  // List fields.                                                                                                      //\n  _.each(Class.getListFields(), function (field) {                                                                     // 63\n    var value = doc[field.name];                                                                                       // 64\n    if (field.isClass && _.isArray(value)) {                                                                           // 65\n      _.each(value, function (element) {                                                                               // 66\n        if (element instanceof AstroClass) {                                                                           // 67\n          event.currentTarget = element;                                                                               // 68\n          element.dispatchEvent(event);                                                                                // 69\n        }                                                                                                              // 70\n      });                                                                                                              // 71\n    }                                                                                                                  // 72\n  });                                                                                                                  // 73\n                                                                                                                       //\n  return returnFromDispatchEvent(event);                                                                               // 75\n}                                                                                                                      // 76\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(dispatchEvent));                                                              // 78\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"class_static_methods\":{\"dispatch_event.js\":[\"lodash\",\"../event.js\",\"../../core/utils/throw_parse_error.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/events/class_static_methods/dispatch_event.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Event;module.import('../event.js',{\"default\":function(v){Event=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction returnFromDispatchEvent(event) {                                                                              // 5\n  // If an event is cancelable and it had been canceled with the                                                       //\n  // \"preventDefault\" method call, then we return false.                                                               //\n  if (event.cancelable) {                                                                                              // 8\n    return !event.defaultPrevented;                                                                                    // 9\n  }                                                                                                                    // 10\n  return true;                                                                                                         // 11\n}                                                                                                                      // 12\n                                                                                                                       //\nfunction dispatchEvent(event) {                                                                                        // 14\n  var Class = this;                                                                                                    // 15\n                                                                                                                       //\n  if (!Match.test(event, Event)) {                                                                                     // 17\n    throwParseError([{                                                                                                 // 18\n      'class': Class.getName()                                                                                         // 19\n    }, {                                                                                                               // 18\n      'method': 'dispatchEvent'                                                                                        // 21\n    }, 'The first argument has to be an event object']);                                                               // 20\n  }                                                                                                                    // 25\n                                                                                                                       //\n  // Attach a document to the event as a target.                                                                       //\n  if (event.target === null) {                                                                                         // 28\n    event.target = Class;                                                                                              // 29\n  }                                                                                                                    // 30\n  if (event.currentTarget === null) {                                                                                  // 31\n    event.currentTarget = Class;                                                                                       // 32\n  }                                                                                                                    // 33\n                                                                                                                       //\n  // Get all event handlers of a given type.                                                                           //\n  var eventHandlers = Class.getEvents(event.type);                                                                     // 36\n                                                                                                                       //\n  _.every(eventHandlers, function (eventHandler) {                                                                     // 38\n    eventHandler(event);                                                                                               // 39\n                                                                                                                       //\n    // Stop execution of the following event handlers, if a flag is set.                                               //\n    return !event.immediatePropagationStopped;                                                                         // 42\n  });                                                                                                                  // 43\n                                                                                                                       //\n  return returnFromDispatchEvent(event);                                                                               // 45\n}                                                                                                                      // 46\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(dispatchEvent));                                                              // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_events.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/events/class_static_methods/get_events.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction getEvents(eventName) {                                                                                        // 1\n  var Class = this;                                                                                                    // 2\n                                                                                                                       //\n  if (eventName) {                                                                                                     // 4\n    eventName = eventName.toLowerCase();                                                                               // 5\n    return Class.schema.events[eventName] || [];                                                                       // 6\n  }                                                                                                                    // 7\n  return Class.schema.events;                                                                                          // 8\n}                                                                                                                      // 9\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getEvents));                                                                  // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"has_event.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/events/class_static_methods/has_event.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction hasEvent(eventName, eventHandler) {                                                                           // 3\n  var Class = this;                                                                                                    // 4\n                                                                                                                       //\n  eventName = eventName.toLowerCase();                                                                                 // 6\n                                                                                                                       //\n  if (arguments.length === 2) {                                                                                        // 8\n    return _.has(Class.schema.events[eventName], eventHandler);                                                        // 9\n  } else if (arguments.length === 1) {                                                                                 // 10\n    return _.has(Class.schema.events, eventName);                                                                      // 12\n  }                                                                                                                    // 13\n}                                                                                                                      // 14\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(hasEvent));                                                                   // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"hooks\":{\"apply_definition.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/events/hooks/apply_definition.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction onApplyDefinition(Class, parsedDefinition, className) {                                                       // 3\n\tvar schema = Class.schema;                                                                                            // 4\n                                                                                                                       //\n\t// Add events to the event manager.                                                                                   //\n\t_.each(parsedDefinition.events, function (eventHandlers, eventName) {                                                 // 7\n\t\teventName = eventName.toLowerCase();                                                                                 // 8\n\t\t_.each(eventHandlers, function (eventHandler) {                                                                      // 9\n\t\t\tschema.events[eventName] = schema.events[eventName] || [];                                                          // 10\n\t\t\tschema.events[eventName].push(eventHandler);                                                                        // 11\n\t\t});                                                                                                                  // 12\n\t});                                                                                                                   // 13\n};                                                                                                                     // 14\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onApplyDefinition));                                                          // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"init_class.js\":[\"../class_static_methods/dispatch_event.js\",\"../class_static_methods/get_events.js\",\"../class_static_methods/has_event.js\",\"../class_prototype_methods/dispatch_event.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/events/hooks/init_class.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar dispatchEvent;module.import('../class_static_methods/dispatch_event.js',{\"default\":function(v){dispatchEvent=v}});var getEvents;module.import('../class_static_methods/get_events.js',{\"default\":function(v){getEvents=v}});var hasEvent;module.import('../class_static_methods/has_event.js',{\"default\":function(v){hasEvent=v}});var dispatchEventProto;module.import('../class_prototype_methods/dispatch_event.js',{\"default\":function(v){dispatchEventProto=v}});// Class static methods.\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n// Class prototype methods.                                                                                            //\n                                                                                                                       // 6\n                                                                                                                       //\nfunction onInitClass(Class, className) {                                                                               // 8\n  // Class static methods.                                                                                             //\n  Class.dispatchEvent = dispatchEvent;                                                                                 // 10\n  Class.getEvents = getEvents;                                                                                         // 11\n  Class.hasEvent = hasEvent;                                                                                           // 12\n  // Class prototype methods.                                                                                          //\n  Class.prototype.dispatchEvent = dispatchEventProto;                                                                  // 14\n}                                                                                                                      // 15\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitClass));                                                                // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"init_definition.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/events/hooks/init_definition.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction onInitDefinition(definition, className) {                                                                     // 1\n\tdefinition.events = {};                                                                                               // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitDefinition));                                                           // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"init_schema.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/events/hooks/init_schema.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction onInitSchema(schema, className) {                                                                             // 1\n\tschema.events = {};                                                                                                   // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitSchema));                                                               // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"merge_definitions.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/events/hooks/merge_definitions.js                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {                                           // 3\n\t_.each(sourceDefinition.events, function (events, eventName) {                                                        // 4\n\t\teventName = eventName.toLowerCase();                                                                                 // 5\n\t\ttargetDefinition.events[eventName] = targetDefinition.events[eventName] || [];                                       // 6\n\t\ttargetDefinition.events[eventName] = targetDefinition.events[eventName].concat(events);                              // 7\n\t});                                                                                                                   // 9\n};                                                                                                                     // 10\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onMergeDefinitions));                                                         // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"parse_definition.js\":[\"lodash\",\"../../core/utils/throw_parse_error.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/events/hooks/parse_definition.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nfunction onParseDefinition(parsedDefinition, definition, className) {                                                  // 4\n\t// Check existence and validity of the \"events\" property.                                                             //\n\tif (definition.events !== undefined) {                                                                                // 6\n\t\t_.each(definition.events, function (eventHandlers, eventName) {                                                      // 7\n\t\t\teventName = eventName.toLowerCase();                                                                                // 8\n\t\t\t// Check if the event definition is an array of functions.                                                          //\n\t\t\tif (!Match.test(eventHandlers, Match.OneOf(Function, [Function]))) {                                                // 10\n\t\t\t\tthrowParseError([{                                                                                                 // 11\n\t\t\t\t\t'class': className                                                                                                // 12\n\t\t\t\t}, {                                                                                                               // 11\n\t\t\t\t\t'event': eventName                                                                                                // 14\n\t\t\t\t}, 'Event handler has to be a function or an array of functions']);                                                // 13\n\t\t\t}                                                                                                                   // 18\n\t\t\t// Convert function to array of functions.                                                                          //\n\t\t\tif (Match.test(eventHandlers, Function)) {                                                                          // 20\n\t\t\t\teventHandlers = [eventHandlers];                                                                                   // 21\n\t\t\t}                                                                                                                   // 22\n\t\t\tparsedDefinition.events[eventName] = eventHandlers;                                                                 // 23\n\t\t});                                                                                                                  // 24\n\t}                                                                                                                     // 25\n};                                                                                                                     // 26\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onParseDefinition));                                                          // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"fields\":{\"Field.js\":[\"babel-runtime/helpers/classCallCheck\",\"lodash\",\"../validators/validators.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/Field.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _;module.import('lodash',{\"default\":function(v){_=v}});var Validators;module.import('../validators/validators.js',{\"default\":function(v){Validators=v}});\n                                                                                                                       // 1\n                                                                                                                       // 2\n                                                                                                                       //\nvar Field = function () {                                                                                              //\n  function Field() {                                                                                                   // 5\n    var definition = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                          // 5\n                                                                                                                       //\n    _classCallCheck(this, Field);                                                                                      // 5\n                                                                                                                       //\n    _.defaults(definition, {                                                                                           // 6\n      optional: false,                                                                                                 // 7\n      immutable: false,                                                                                                // 8\n      transient: false                                                                                                 // 9\n    });                                                                                                                // 6\n                                                                                                                       //\n    this.name = definition.name;                                                                                       // 12\n    this.type = definition.type;                                                                                       // 13\n    this['default'] = definition['default'];                                                                           // 14\n    this.optional = definition.optional;                                                                               // 15\n    this.immutable = definition.immutable;                                                                             // 16\n    this.transient = definition.transient;                                                                             // 17\n    this.resolve = definition.resolve;                                                                                 // 18\n  }                                                                                                                    // 19\n                                                                                                                       //\n  Field.prototype.getDefault = function getDefault() {                                                                 //\n    if (_.isFunction(this['default'])) {                                                                               // 22\n      return this['default']();                                                                                        // 23\n    }                                                                                                                  // 24\n    return this['default'];                                                                                            // 25\n  };                                                                                                                   // 26\n                                                                                                                       //\n  Field.prototype.getOptional = function getOptional(doc) {                                                            //\n    if (_.isFunction(this.optional)) {                                                                                 // 29\n      return this.optional(doc);                                                                                       // 30\n    }                                                                                                                  // 31\n    return this.optional;                                                                                              // 32\n  };                                                                                                                   // 33\n                                                                                                                       //\n  Field.prototype.cast = function cast(value) {                                                                        //\n    return value;                                                                                                      // 36\n  };                                                                                                                   // 37\n                                                                                                                       //\n  Field.prototype.validate = function validate(args) {                                                                 //\n    // If a field is not optional (required) then it has to have value.                                                //\n    if (!this.getOptional(args.doc)) {                                                                                 // 41\n      Validators.required(args);                                                                                       // 42\n    }                                                                                                                  // 43\n  };                                                                                                                   // 44\n                                                                                                                       //\n  Field.prototype.resolveValue = function resolveValue(rawDoc) {                                                       //\n    if (this.resolve) {                                                                                                // 47\n      return this.resolve(rawDoc);                                                                                     // 48\n    } else {                                                                                                           // 49\n      return rawDoc[this.name];                                                                                        // 51\n    }                                                                                                                  // 52\n  };                                                                                                                   // 53\n                                                                                                                       //\n  return Field;                                                                                                        //\n}();                                                                                                                   //\n                                                                                                                       //\n;                                                                                                                      // 54\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(Field));                                                                      // 56\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ListField.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"lodash\",\"./Field\",\"./utils/castToClass\",\"../../core/class.js\",\"../validators/validators.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/ListField.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var _;module.import('lodash',{\"default\":function(v){_=v}});var Field;module.import('./Field',{\"default\":function(v){Field=v}});var castToClass;module.import('./utils/castToClass',{\"default\":function(v){castToClass=v}});var AstroClass;module.import('../../core/class.js',{\"default\":function(v){AstroClass=v}});var Validators;module.import('../validators/validators.js',{\"default\":function(v){Validators=v}});\n                                                                                                                       //\n                                                                                                                       //\n                                                                                                                       // 1\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       //\nvar ListField = function (_Field) {                                                                                    //\n  _inherits(ListField, _Field);                                                                                        //\n                                                                                                                       //\n  function ListField() {                                                                                               // 8\n    var definition = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                          // 8\n                                                                                                                       //\n    _classCallCheck(this, ListField);                                                                                  // 8\n                                                                                                                       //\n    var _this = _possibleConstructorReturn(this, _Field.call(this, definition));                                       // 8\n                                                                                                                       //\n    _this.isClass = AstroClass.isParentOf(_this.type['class']);                                                        // 11\n    return _this;                                                                                                      // 8\n  }                                                                                                                    // 12\n                                                                                                                       //\n  ListField.prototype.cast = function cast(value, options) {                                                           //\n    var _this2 = this;                                                                                                 // 14\n                                                                                                                       //\n    if (!_.isArray(value)) {                                                                                           // 15\n      return value;                                                                                                    // 16\n    }                                                                                                                  // 17\n                                                                                                                       //\n    return _.map(value, function (element) {                                                                           // 19\n      // Class type.                                                                                                   //\n      if (_this2.isClass) {                                                                                            // 21\n        // We only cast if value is a plain object.                                                                    //\n        if (!_.isPlainObject(element)) {                                                                               // 23\n          return element;                                                                                              // 24\n        }                                                                                                              // 25\n        // Get class from type property.                                                                               //\n        var Class = _this2.type['class'];                                                                              // 27\n        // Cast value to an instance of the class.                                                                     //\n        return castToClass({                                                                                           // 29\n          Class: Class,                                                                                                // 30\n          rawDoc: element,                                                                                             // 31\n          options: options                                                                                             // 32\n        });                                                                                                            // 29\n      }                                                                                                                // 34\n      // Scalar type.                                                                                                  //\n      else {                                                                                                           // 21\n          return _this2.type.cast(element);                                                                            // 37\n        }                                                                                                              // 38\n    });                                                                                                                // 39\n  };                                                                                                                   // 40\n                                                                                                                       //\n  ListField.prototype.validate = function validate(args) {                                                             //\n    var _this3 = this;                                                                                                 // 42\n                                                                                                                       //\n    _Field.prototype.validate.call(this, args);                                                                        // 43\n    var doc = args.doc;                                                                                                // 42\n    var name = args.name;                                                                                              // 42\n    var value = args.value;                                                                                            // 42\n                                                                                                                       //\n                                                                                                                       //\n    if (!_.isNil(value)) {                                                                                             // 50\n      Validators.array(args);                                                                                          // 51\n      _.each(value, function (element, index) {                                                                        // 52\n        _this3.type.validate({                                                                                         // 53\n          doc: doc,                                                                                                    // 54\n          name: name + '.' + index,                                                                                    // 55\n          value: element                                                                                               // 56\n        });                                                                                                            // 53\n      });                                                                                                              // 58\n    }                                                                                                                  // 59\n  };                                                                                                                   // 60\n                                                                                                                       //\n  return ListField;                                                                                                    //\n}(Field);                                                                                                              //\n                                                                                                                       //\n;                                                                                                                      // 61\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(ListField));                                                                  // 63\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ObjectField.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"lodash\",\"./Field\",\"./utils/castToClass\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/ObjectField.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var _;module.import('lodash',{\"default\":function(v){_=v}});var Field;module.import('./Field',{\"default\":function(v){Field=v}});var castToClass;module.import('./utils/castToClass',{\"default\":function(v){castToClass=v}});\n                                                                                                                       //\n                                                                                                                       //\n                                                                                                                       // 1\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nvar ObjectField = function (_Field) {                                                                                  //\n  _inherits(ObjectField, _Field);                                                                                      //\n                                                                                                                       //\n  function ObjectField() {                                                                                             //\n    _classCallCheck(this, ObjectField);                                                                                //\n                                                                                                                       //\n    return _possibleConstructorReturn(this, _Field.apply(this, arguments));                                            //\n  }                                                                                                                    //\n                                                                                                                       //\n  ObjectField.prototype.cast = function cast(value, options) {                                                         //\n    // We only cast if value is a plain object.                                                                        //\n    if (!_.isPlainObject(value)) {                                                                                     // 8\n      return value;                                                                                                    // 9\n    }                                                                                                                  // 10\n                                                                                                                       //\n    // Get class from type property.                                                                                   //\n    var Class = this.type['class'];                                                                                    // 13\n                                                                                                                       //\n    // Cast value to an instance of the class.                                                                         //\n    return castToClass({                                                                                               // 16\n      Class: Class,                                                                                                    // 17\n      rawDoc: value,                                                                                                   // 18\n      options: options                                                                                                 // 19\n    });                                                                                                                // 16\n  };                                                                                                                   // 21\n                                                                                                                       //\n  ObjectField.prototype.validate = function validate(args) {                                                           //\n    _Field.prototype.validate.call(this, args);                                                                        // 24\n                                                                                                                       //\n    this.type.validate(args);                                                                                          // 26\n  };                                                                                                                   // 27\n                                                                                                                       //\n  return ObjectField;                                                                                                  //\n}(Field);                                                                                                              //\n                                                                                                                       //\n;                                                                                                                      // 28\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(ObjectField));                                                                // 30\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ScalarField.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"lodash\",\"./Field\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/ScalarField.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var _;module.import('lodash',{\"default\":function(v){_=v}});var Field;module.import('./Field',{\"default\":function(v){Field=v}});\n                                                                                                                       //\n                                                                                                                       //\n                                                                                                                       // 1\n                                                                                                                       // 2\n                                                                                                                       //\nvar ScalarField = function (_Field) {                                                                                  //\n  _inherits(ScalarField, _Field);                                                                                      //\n                                                                                                                       //\n  function ScalarField() {                                                                                             // 5\n    var definition = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                          // 5\n                                                                                                                       //\n    _classCallCheck(this, ScalarField);                                                                                // 5\n                                                                                                                       //\n    var _this = _possibleConstructorReturn(this, _Field.call(this, definition));                                       // 5\n                                                                                                                       //\n    _this.type = definition.type;                                                                                      // 8\n    return _this;                                                                                                      // 5\n  }                                                                                                                    // 9\n                                                                                                                       //\n  ScalarField.prototype.cast = function cast(value) {                                                                  //\n    return this.type.cast(value);                                                                                      // 12\n  };                                                                                                                   // 13\n                                                                                                                       //\n  ScalarField.prototype.validate = function validate(args) {                                                           //\n    _Field.prototype.validate.call(this, args);                                                                        // 16\n    var value = args.value;                                                                                            // 15\n                                                                                                                       //\n                                                                                                                       //\n    if (!_.isNil(value)) {                                                                                             // 21\n      return this.type.validate(args);                                                                                 // 22\n    }                                                                                                                  // 23\n  };                                                                                                                   // 24\n                                                                                                                       //\n  return ScalarField;                                                                                                  //\n}(Field);                                                                                                              //\n                                                                                                                       //\n;                                                                                                                      // 25\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(ScalarField));                                                                // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"enum.js\":[\"lodash\",\"./type.js\",\"../validators/validators.js\",\"meteor/check\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/enum.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Type;module.import('./type.js',{\"default\":function(v){Type=v}});var Validators;module.import('../validators/validators.js',{\"default\":function(v){Validators=v}});var check,Match;module.import('meteor/check',{\"check\":function(v){check=v},\"Match\":function(v){Match=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       //\nvar enumDefinitionPattern = {                                                                                          // 6\n  name: String,                                                                                                        // 7\n  identifiers: Match.OneOf(Array, Object)                                                                              // 8\n};                                                                                                                     // 6\n                                                                                                                       //\nvar Enum = {                                                                                                           // 11\n  create: function create(definition) {                                                                                // 12\n    check(definition, enumDefinitionPattern);                                                                          // 13\n                                                                                                                       //\n    // Get identifiers and values.                                                                                     //\n    var identifiers = void 0;                                                                                          // 16\n    if (Match.test(definition.identifiers, Array)) {                                                                   // 17\n      identifiers = _.zipObject(definition.identifiers, _.range(definition.identifiers.length));                       // 18\n    } else if (Match.test(definition.identifiers, Object)) {                                                           // 21\n      (function () {                                                                                                   // 22\n        identifiers = definition.identifiers;                                                                          // 23\n        var i = 0;                                                                                                     // 24\n        _.forOwn(identifiers, function (value, key) {                                                                  // 25\n          if (_.isNil(value)) {                                                                                        // 26\n            identifiers[key] = i;                                                                                      // 27\n            i++;                                                                                                       // 28\n          } else if (_.isNumber(value)) {                                                                              // 29\n            i = value + 1;                                                                                             // 31\n          }                                                                                                            // 32\n        });                                                                                                            // 33\n      })();                                                                                                            // 22\n    }                                                                                                                  // 34\n    var values = _.values(identifiers);                                                                                // 35\n    var keys = _.keys(identifiers);                                                                                    // 36\n    // Create a new Enum constructor.                                                                                  //\n    var Enum = function Enum(identifier) {                                                                             // 38\n      return Enum[identifier];                                                                                         // 39\n    };                                                                                                                 // 40\n    Enum.getIdentifiers = function () {                                                                                // 41\n      return keys;                                                                                                     // 42\n    };                                                                                                                 // 43\n    Enum.getIdentifier = function (value) {                                                                            // 44\n      var index = _.indexOf(values, value);                                                                            // 45\n      return keys[index];                                                                                              // 46\n    };                                                                                                                 // 47\n    // Set identifiers properties in the class.                                                                        //\n    _.each(identifiers, function (value, name) {                                                                       // 49\n      if (Object.defineProperty) {                                                                                     // 50\n        Object.defineProperty(Enum, name, {                                                                            // 51\n          writable: false,                                                                                             // 52\n          enumerable: true,                                                                                            // 53\n          value: value                                                                                                 // 54\n        });                                                                                                            // 51\n      } else {                                                                                                         // 56\n        Enum[name] = value;                                                                                            // 58\n      }                                                                                                                // 59\n    });                                                                                                                // 60\n    // Create type definition for the given enum.                                                                      //\n    Type.create({                                                                                                      // 62\n      name: definition.name,                                                                                           // 63\n      'class': Enum,                                                                                                   // 64\n      validate: function validate(args) {                                                                              // 65\n        args.param = values;                                                                                           // 66\n        Validators.choice(args);                                                                                       // 67\n      }                                                                                                                // 68\n    });                                                                                                                // 62\n    // Store enum in the enums list.                                                                                   //\n    this.enums[definition.name] = Enum;                                                                                // 71\n                                                                                                                       //\n    return Enum;                                                                                                       // 73\n  },                                                                                                                   // 74\n                                                                                                                       //\n  enums: {}                                                                                                            // 75\n};                                                                                                                     // 11\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(Enum));                                                                       // 78\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"module.js\":[\"../../core/module.js\",\"./types/boolean.js\",\"./types/date.js\",\"./types/mongo_object_id.js\",\"./types/number.js\",\"./types/object.js\",\"./types/string.js\",\"./utils/cast_nested.js\",\"./utils/get_all.js\",\"./utils/get_many.js\",\"./utils/get_one.js\",\"./utils/is_nested_field_name.js\",\"./utils/raw_all.js\",\"./utils/raw_many.js\",\"./utils/raw_one.js\",\"./utils/set_all.js\",\"./utils/set_defaults.js\",\"./utils/set_many.js\",\"./utils/set_one.js\",\"./utils/traverse.js\",\"./hooks/init_schema.js\",\"./hooks/init_definition.js\",\"./hooks/parse_definition.js\",\"./hooks/merge_definitions.js\",\"./hooks/apply_definition.js\",\"./hooks/init_class.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/module.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Module;module.import('../../core/module.js',{\"default\":function(v){Module=v}});module.import('./types/boolean.js');module.import('./types/date.js');module.import('./types/mongo_object_id.js');module.import('./types/number.js');module.import('./types/object.js');module.import('./types/string.js');var castNested;module.import('./utils/cast_nested.js',{\"default\":function(v){castNested=v}});var getAll;module.import('./utils/get_all.js',{\"default\":function(v){getAll=v}});var getMany;module.import('./utils/get_many.js',{\"default\":function(v){getMany=v}});var getOne;module.import('./utils/get_one.js',{\"default\":function(v){getOne=v}});var isNestedFieldName;module.import('./utils/is_nested_field_name.js',{\"default\":function(v){isNestedFieldName=v}});var rawAll;module.import('./utils/raw_all.js',{\"default\":function(v){rawAll=v}});var rawMany;module.import('./utils/raw_many.js',{\"default\":function(v){rawMany=v}});var rawOne;module.import('./utils/raw_one.js',{\"default\":function(v){rawOne=v}});var setAll;module.import('./utils/set_all.js',{\"default\":function(v){setAll=v}});var setDefaults;module.import('./utils/set_defaults.js',{\"default\":function(v){setDefaults=v}});var setMany;module.import('./utils/set_many.js',{\"default\":function(v){setMany=v}});var setOne;module.import('./utils/set_one.js',{\"default\":function(v){setOne=v}});var traverse;module.import('./utils/traverse.js',{\"default\":function(v){traverse=v}});var onInitSchema;module.import('./hooks/init_schema.js',{\"default\":function(v){onInitSchema=v}});var onInitDefinition;module.import('./hooks/init_definition.js',{\"default\":function(v){onInitDefinition=v}});var onParseDefinition;module.import('./hooks/parse_definition.js',{\"default\":function(v){onParseDefinition=v}});var onMergeDefinitions;module.import('./hooks/merge_definitions.js',{\"default\":function(v){onMergeDefinitions=v}});var onApplyDefinition;module.import('./hooks/apply_definition.js',{\"default\":function(v){onApplyDefinition=v}});var onInitClass;module.import('./hooks/init_class.js',{\"default\":function(v){onInitClass=v}});\n// Types.                                                                                                              //\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n// Utils.                                                                                                              //\n                                                                                                                       // 10\n                                                                                                                       // 11\n                                                                                                                       // 12\n                                                                                                                       // 13\n                                                                                                                       // 14\n                                                                                                                       // 15\n                                                                                                                       // 16\n                                                                                                                       // 17\n                                                                                                                       // 18\n                                                                                                                       // 19\n                                                                                                                       // 20\n                                                                                                                       // 21\n                                                                                                                       // 22\n// Hooks.                                                                                                              //\n                                                                                                                       // 24\n                                                                                                                       // 25\n                                                                                                                       // 26\n                                                                                                                       // 27\n                                                                                                                       // 28\n                                                                                                                       // 29\n                                                                                                                       //\nModule.create({                                                                                                        // 31\n  name: 'fields',                                                                                                      // 32\n  onInitSchema: onInitSchema,                                                                                          // 33\n  onInitDefinition: onInitDefinition,                                                                                  // 34\n  onParseDefinition: onParseDefinition,                                                                                // 35\n  onMergeDefinitions: onMergeDefinitions,                                                                              // 36\n  onApplyDefinition: onApplyDefinition,                                                                                // 37\n  onInitClass: onInitClass,                                                                                            // 38\n  utils: {                                                                                                             // 39\n    castNested: castNested,                                                                                            // 40\n    getAll: getAll,                                                                                                    // 41\n    getMany: getMany,                                                                                                  // 42\n    getOne: getOne,                                                                                                    // 43\n    isNestedFieldName: isNestedFieldName,                                                                              // 44\n    rawAll: rawAll,                                                                                                    // 45\n    rawMany: rawMany,                                                                                                  // 46\n    rawOne: rawOne,                                                                                                    // 47\n    setAll: setAll,                                                                                                    // 48\n    setDefaults: setDefaults,                                                                                          // 49\n    setMany: setMany,                                                                                                  // 50\n    setOne: setOne,                                                                                                    // 51\n    traverse: traverse                                                                                                 // 52\n  }                                                                                                                    // 39\n});                                                                                                                    // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"type.js\":[\"babel-runtime/helpers/classCallCheck\",\"lodash\",\"../validators/validators.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/type.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _;module.import('lodash',{\"default\":function(v){_=v}});var Validators;module.import('../validators/validators.js',{\"default\":function(v){Validators=v}});\n                                                                                                                       // 1\n                                                                                                                       // 2\n                                                                                                                       //\nvar typeDefinitionPattern = {                                                                                          // 4\n  name: String,                                                                                                        // 5\n  'class': Match.Any,                                                                                                  // 6\n  cast: Match.Optional(Function),                                                                                      // 7\n  validate: Match.Optional(Function)                                                                                   // 8\n};                                                                                                                     // 4\n                                                                                                                       //\nvar enumDefinitionPattern = {                                                                                          // 11\n  name: String,                                                                                                        // 12\n  options: Object                                                                                                      // 13\n};                                                                                                                     // 11\n                                                                                                                       //\nvar Type = function () {                                                                                               //\n  function Type(definition) {                                                                                          // 17\n    _classCallCheck(this, Type);                                                                                       // 17\n                                                                                                                       //\n    check(definition, typeDefinitionPattern);                                                                          // 18\n                                                                                                                       //\n    this.name = definition.name;                                                                                       // 20\n    this['class'] = definition['class'];                                                                               // 21\n                                                                                                                       //\n    if (_.isFunction(definition.validate)) {                                                                           // 23\n      this.validate = definition.validate;                                                                             // 24\n    }                                                                                                                  // 25\n                                                                                                                       //\n    if (_.isFunction(definition.cast)) {                                                                               // 27\n      this.cast = definition.cast;                                                                                     // 28\n    }                                                                                                                  // 29\n  }                                                                                                                    // 30\n                                                                                                                       //\n  Type.prototype.cast = function cast(value) {                                                                         //\n    return value;                                                                                                      // 33\n  };                                                                                                                   // 34\n                                                                                                                       //\n  Type.prototype.validate = function validate(doc, fieldName) {                                                        //\n    return true;                                                                                                       // 37\n  };                                                                                                                   // 38\n                                                                                                                       //\n  Type.create = function create(definition) {                                                                          //\n    var type = new Type(definition);                                                                                   // 41\n    this.types[type.name] = type;                                                                                      // 42\n  };                                                                                                                   // 43\n                                                                                                                       //\n  Type.get = function get(name) {                                                                                      //\n    return this.types[name];                                                                                           // 46\n  };                                                                                                                   // 47\n                                                                                                                       //\n  Type.has = function has(name) {                                                                                      //\n    return _.has(this.types, name);                                                                                    // 50\n  };                                                                                                                   // 51\n                                                                                                                       //\n  Type.find = function find(Class) {                                                                                   //\n    return _.find(this.types, function (type) {                                                                        // 54\n      return type['class'].prototype === Class.prototype;                                                              // 55\n    });                                                                                                                // 56\n  };                                                                                                                   // 57\n                                                                                                                       //\n  return Type;                                                                                                         //\n}();                                                                                                                   //\n                                                                                                                       //\n;                                                                                                                      // 58\n                                                                                                                       //\nType.types = {};                                                                                                       // 60\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(Type));                                                                       // 62\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"class_events\":{\"from_json_value.js\":[\"../utils/set_all.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/class_events/from_json_value.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar setAll;module.import('../utils/set_all.js',{\"default\":function(v){setAll=v}});                                     // 1\n                                                                                                                       //\nfunction fromJSONValue(e) {                                                                                            // 3\n\tvar doc = e.currentTarget;                                                                                            // 4\n\tsetAll(doc, EJSON.parse(e.json.values));                                                                              // 5\n};                                                                                                                     // 6\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(fromJSONValue));                                                              // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"to_json_value.js\":[\"../utils/get_all.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/class_events/to_json_value.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar getAll;module.import('../utils/get_all.js',{\"default\":function(v){getAll=v}});                                     // 1\n                                                                                                                       //\nfunction toJSONValue(e) {                                                                                              // 3\n\tvar doc = e.currentTarget;                                                                                            // 4\n\te.json.values = EJSON.stringify(getAll(doc));                                                                         // 5\n};                                                                                                                     // 6\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(toJSONValue));                                                                // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"class_prototype_methods\":{\"get.js\":[\"../utils/get_all.js\",\"../utils/get_many.js\",\"../utils/get_one.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/class_prototype_methods/get.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar getAll;module.import('../utils/get_all.js',{\"default\":function(v){getAll=v}});var getMany;module.import('../utils/get_many.js',{\"default\":function(v){getMany=v}});var getOne;module.import('../utils/get_one.js',{\"default\":function(v){getOne=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction get() {                                                                                                       // 5\n\tvar doc = this;                                                                                                       // 6\n\tvar args = arguments;                                                                                                 // 7\n                                                                                                                       //\n\tif (args.length === 0) {                                                                                              // 9\n\t\treturn getAll(doc);                                                                                                  // 10\n\t} else if (args.length === 1) {                                                                                       // 11\n\t\tif (args[0] instanceof Array) {                                                                                      // 13\n\t\t\treturn getMany(doc, args[0]);                                                                                       // 14\n\t\t} else if (typeof args[0] === 'string') {                                                                            // 15\n\t\t\treturn getOne(doc, args[0]);                                                                                        // 17\n\t\t}                                                                                                                    // 18\n\t}                                                                                                                     // 19\n};                                                                                                                     // 20\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(get));                                                                        // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"raw.js\":[\"../utils/raw_all.js\",\"../utils/raw_many.js\",\"../utils/raw_one.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/class_prototype_methods/raw.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar rawAll;module.import('../utils/raw_all.js',{\"default\":function(v){rawAll=v}});var rawMany;module.import('../utils/raw_many.js',{\"default\":function(v){rawMany=v}});var rawOne;module.import('../utils/raw_one.js',{\"default\":function(v){rawOne=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction raw() {                                                                                                       // 5\n\tvar doc = this;                                                                                                       // 6\n\tvar args = arguments;                                                                                                 // 7\n                                                                                                                       //\n\tif (args.length === 0) {                                                                                              // 9\n\t\treturn rawAll(doc);                                                                                                  // 10\n\t} else if (args.length === 1) {                                                                                       // 11\n\t\tif (args[0] instanceof Array) {                                                                                      // 13\n\t\t\treturn rawMany(doc, args[0]);                                                                                       // 14\n\t\t} else if (typeof args[0] === 'string') {                                                                            // 15\n\t\t\treturn rawOne(doc, args[0]);                                                                                        // 17\n\t\t}                                                                                                                    // 18\n\t}                                                                                                                     // 19\n};                                                                                                                     // 20\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(raw));                                                                        // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"set.js\":[\"lodash\",\"../utils/set_many.js\",\"../utils/set_one.js\",\"../utils/cast_nested.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/class_prototype_methods/set.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var setMany;module.import('../utils/set_many.js',{\"default\":function(v){setMany=v}});var setOne;module.import('../utils/set_one.js',{\"default\":function(v){setOne=v}});var castNested;module.import('../utils/cast_nested.js',{\"default\":function(v){castNested=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       //\nfunction set() {                                                                                                       // 6\n  var doc = this;                                                                                                      // 7\n  var args = arguments;                                                                                                // 8\n  var options = {                                                                                                      // 9\n    clone: true                                                                                                        // 10\n  };                                                                                                                   // 9\n                                                                                                                       //\n  // Setting single field.                                                                                             //\n  if (_.isString(args[0]) && args.length >= 2) {                                                                       // 14\n    // The last argument is an options object.                                                                         //\n    if (_.isObject(args[2])) {                                                                                         // 16\n      _.extend(options, args[2]);                                                                                      // 17\n    }                                                                                                                  // 18\n    setOne(doc, args[0], args[1], options);                                                                            // 19\n  } else if (_.isObject(args[0]) && args.length >= 1) {                                                                // 20\n    // The last argument is an options object.                                                                         //\n    if (_.isObject(args[1])) {                                                                                         // 23\n      _.extend(options, args[1]);                                                                                      // 24\n    }                                                                                                                  // 25\n    setMany(doc, args[0], options);                                                                                    // 26\n  }                                                                                                                    // 27\n                                                                                                                       //\n  // Cast nested documents.                                                                                            //\n  castNested({                                                                                                         // 30\n    doc: doc,                                                                                                          // 31\n    options: {                                                                                                         // 32\n      clone: options.clone                                                                                             // 33\n    }                                                                                                                  // 32\n  });                                                                                                                  // 30\n};                                                                                                                     // 36\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(set));                                                                        // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"class_static_methods\":{\"get_field.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/class_static_methods/get_field.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction getField(fieldName) {                                                                                         // 1\n\treturn this.schema.fields[fieldName];                                                                                 // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getField));                                                                   // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"get_fields.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/class_static_methods/get_fields.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction getFields() {                                                                                                 // 3\n\treturn _.values(this.schema.fields);                                                                                  // 4\n};                                                                                                                     // 5\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getFields));                                                                  // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_fields_names.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/class_static_methods/get_fields_names.js                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction getFieldsNames(options) {                                                                                     // 3\n  // Prepare options.                                                                                                  //\n  options = _.extend({                                                                                                 // 5\n    transient: true,                                                                                                   // 6\n    immutable: true                                                                                                    // 7\n  }, options);                                                                                                         // 5\n                                                                                                                       //\n  var fieldsNames = [];                                                                                                // 10\n  _.each(this.schema.fields, function (field, name) {                                                                  // 11\n    // Don't get a transient field.                                                                                    //\n    if (!options.transient && field.transient) {                                                                       // 13\n      return;                                                                                                          // 14\n    }                                                                                                                  // 15\n    // Don't get an immutable field.                                                                                   //\n    if (!options.immutable && field.immutable) {                                                                       // 17\n      return;                                                                                                          // 18\n    }                                                                                                                  // 19\n    fieldsNames.push(name);                                                                                            // 20\n  });                                                                                                                  // 21\n                                                                                                                       //\n  return fieldsNames;                                                                                                  // 23\n};                                                                                                                     // 24\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getFieldsNames));                                                             // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_list_fields.js\":[\"lodash\",\"../ListField\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/class_static_methods/get_list_fields.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var ListField;module.import('../ListField',{\"default\":function(v){ListField=v}});\n                                                                                                                       //\n                                                                                                                       // 3\n                                                                                                                       //\nfunction getListFields() {                                                                                             // 5\n  var classOnly = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];                          // 5\n                                                                                                                       //\n  return _.filter(this.getFields(), function (field) {                                                                 // 6\n    if (classOnly) {                                                                                                   // 7\n      return field instanceof ListField && field.isClass;                                                              // 8\n    }                                                                                                                  // 9\n    return field instanceof ListField;                                                                                 // 10\n  });                                                                                                                  // 11\n};                                                                                                                     // 12\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getListFields));                                                              // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_object_fields.js\":[\"lodash\",\"../ObjectField\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/class_static_methods/get_object_fields.js                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var ObjectField;module.import('../ObjectField',{\"default\":function(v){ObjectField=v}});\n                                                                                                                       //\n                                                                                                                       // 3\n                                                                                                                       //\nfunction getObjectFields() {                                                                                           // 5\n\treturn _.filter(this.getFields(), function (field) {                                                                  // 6\n\t\treturn field instanceof ObjectField;                                                                                 // 7\n\t});                                                                                                                   // 8\n};                                                                                                                     // 9\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getObjectFields));                                                            // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_scalar_fields.js\":[\"lodash\",\"../ScalarField\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/class_static_methods/get_scalar_fields.js                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var ScalarField;module.import('../ScalarField',{\"default\":function(v){ScalarField=v}});\n                                                                                                                       //\n                                                                                                                       // 3\n                                                                                                                       //\nfunction getScalarFields() {                                                                                           // 5\n\treturn _.filter(this.getFields(), function (field) {                                                                  // 6\n\t\treturn field instanceof ScalarField;                                                                                 // 7\n\t});                                                                                                                   // 8\n};                                                                                                                     // 9\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getScalarFields));                                                            // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"has_field.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/class_static_methods/has_field.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction hasField(fieldName) {                                                                                         // 3\n\treturn _.has(this.schema.fields, fieldName);                                                                          // 4\n};                                                                                                                     // 5\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(hasField));                                                                   // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"hooks\":{\"apply_definition.js\":[\"lodash\",\"../../core/utils/throw_parse_error.js\",\"../type.js\",\"../../../core/class.js\",\"../ScalarField\",\"../ObjectField\",\"../ListField\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/hooks/apply_definition.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});var Type;module.import('../type.js',{\"default\":function(v){Type=v}});var AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});var ScalarField;module.import('../ScalarField',{\"default\":function(v){ScalarField=v}});var ObjectField;module.import('../ObjectField',{\"default\":function(v){ObjectField=v}});var ListField;module.import('../ListField',{\"default\":function(v){ListField=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       //\nfunction checkTypeExistence(type, className, fieldName) {                                                              // 9\n  if (!type) {                                                                                                         // 10\n    throwParseError([{                                                                                                 // 11\n      'class': className                                                                                               // 12\n    }, {                                                                                                               // 11\n      'property': 'fields'                                                                                             // 14\n    }, {                                                                                                               // 13\n      'field': fieldName                                                                                               // 16\n    }, 'Type does not exist']);                                                                                        // 15\n  }                                                                                                                    // 20\n}                                                                                                                      // 21\n                                                                                                                       //\nfunction onApplyDefinition(Class, parsedDefinition, className) {                                                       // 23\n  _.each(parsedDefinition.fields, function (fieldDefinition, fieldName) {                                              // 24\n    // Prepare field variable.                                                                                         //\n    var field = void 0;                                                                                                // 26\n    // List field.                                                                                                     //\n    if (Match.test(fieldDefinition.type, Array)) {                                                                     // 28\n      var type = Type.find(fieldDefinition.type[0]);                                                                   // 29\n      checkTypeExistence(type, className, fieldDefinition.name);                                                       // 30\n      if (AstroClass.isParentOf(type['class'])) {                                                                      // 31\n        field = new ListField(_.extend({}, fieldDefinition, {                                                          // 32\n          type: type                                                                                                   // 34\n        }));                                                                                                           // 33\n      } else {                                                                                                         // 37\n        field = new ListField(_.extend({}, fieldDefinition, {                                                          // 39\n          type: type                                                                                                   // 41\n        }));                                                                                                           // 40\n      }                                                                                                                // 44\n    }                                                                                                                  // 45\n    // Scalar or object field.                                                                                         //\n    else {                                                                                                             // 28\n        var _type = Type.find(fieldDefinition.type);                                                                   // 48\n        checkTypeExistence(_type, className, fieldDefinition.name);                                                    // 49\n        if (AstroClass.isParentOf(_type['class'])) {                                                                   // 50\n          field = new ObjectField(_.extend({}, fieldDefinition, {                                                      // 51\n            type: _type                                                                                                // 53\n          }));                                                                                                         // 52\n        } else {                                                                                                       // 56\n          field = new ScalarField(_.extend({}, fieldDefinition, {                                                      // 58\n            type: _type                                                                                                // 60\n          }));                                                                                                         // 59\n        }                                                                                                              // 63\n      }                                                                                                                // 64\n                                                                                                                       //\n    // Add a field object to the fields list.                                                                          //\n    Class.schema.fields[fieldName] = field;                                                                            // 67\n    Class.schema.fieldsNames.push(fieldName);                                                                          // 68\n  });                                                                                                                  // 69\n}                                                                                                                      // 70\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onApplyDefinition));                                                          // 72\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"init_class.js\":[\"../class_static_methods/get_field.js\",\"../class_static_methods/get_fields_names.js\",\"../class_static_methods/get_fields.js\",\"../class_static_methods/get_object_fields.js\",\"../class_static_methods/get_list_fields.js\",\"../class_static_methods/get_scalar_fields.js\",\"../class_static_methods/has_field.js\",\"../class_prototype_methods/get.js\",\"../class_prototype_methods/raw.js\",\"../class_prototype_methods/set.js\",\"../class_events/from_json_value.js\",\"../class_events/to_json_value.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/hooks/init_class.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar getField;module.import('../class_static_methods/get_field.js',{\"default\":function(v){getField=v}});var getFieldsNames;module.import('../class_static_methods/get_fields_names.js',{\"default\":function(v){getFieldsNames=v}});var getFields;module.import('../class_static_methods/get_fields.js',{\"default\":function(v){getFields=v}});var getObjectFields;module.import('../class_static_methods/get_object_fields.js',{\"default\":function(v){getObjectFields=v}});var getListFields;module.import('../class_static_methods/get_list_fields.js',{\"default\":function(v){getListFields=v}});var getScalarFields;module.import('../class_static_methods/get_scalar_fields.js',{\"default\":function(v){getScalarFields=v}});var hasField;module.import('../class_static_methods/has_field.js',{\"default\":function(v){hasField=v}});var get;module.import('../class_prototype_methods/get.js',{\"default\":function(v){get=v}});var raw;module.import('../class_prototype_methods/raw.js',{\"default\":function(v){raw=v}});var set;module.import('../class_prototype_methods/set.js',{\"default\":function(v){set=v}});var fromJSONValue;module.import('../class_events/from_json_value.js',{\"default\":function(v){fromJSONValue=v}});var toJSONValue;module.import('../class_events/to_json_value.js',{\"default\":function(v){toJSONValue=v}});// Class static methods.\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n// Class prototype methods.                                                                                            //\n                                                                                                                       // 10\n                                                                                                                       // 11\n                                                                                                                       // 12\n// Class events.                                                                                                       //\n                                                                                                                       // 14\n                                                                                                                       // 15\n                                                                                                                       //\nfunction onInitClass(Class, className) {                                                                               // 17\n  // Class static methods.                                                                                             //\n  Class.getField = getField;                                                                                           // 19\n  Class.getFieldsNames = getFieldsNames;                                                                               // 20\n  Class.getFields = getFields;                                                                                         // 21\n  Class.getObjectFields = getObjectFields;                                                                             // 22\n  Class.getListFields = getListFields;                                                                                 // 23\n  Class.getScalarFields = getScalarFields;                                                                             // 24\n  Class.hasField = hasField;                                                                                           // 25\n  // Class prototype methods.                                                                                          //\n  Class.prototype.get = get;                                                                                           // 27\n  Class.prototype.raw = raw;                                                                                           // 28\n  Class.prototype.set = set;                                                                                           // 29\n  // Class events.                                                                                                     //\n  Class.extend({                                                                                                       // 31\n    events: {                                                                                                          // 32\n      fromJSONValue: fromJSONValue,                                                                                    // 33\n      toJSONValue: toJSONValue                                                                                         // 34\n    }                                                                                                                  // 32\n  }, ['events']);                                                                                                      // 31\n};                                                                                                                     // 37\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitClass));                                                                // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"init_definition.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/hooks/init_definition.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction onInitDefinition(definition, className) {                                                                     // 1\n\tdefinition.fields = {};                                                                                               // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitDefinition));                                                           // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"init_schema.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/hooks/init_schema.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction onInitSchema(schema, className) {                                                                             // 1\n  schema.fields = {};                                                                                                  // 2\n  schema.fieldsNames = [];                                                                                             // 3\n};                                                                                                                     // 4\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitSchema));                                                               // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"merge_definitions.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/hooks/merge_definitions.js                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction onMergeDefinitions(targetDefinition, sourceDefinition, className) {                                           // 3\n  _.each(sourceDefinition.fields, function (fieldDefinition, fieldName) {                                              // 4\n    targetDefinition.fields[fieldName] = fieldDefinition;                                                              // 5\n  });                                                                                                                  // 6\n};                                                                                                                     // 7\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onMergeDefinitions));                                                         // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"parse_definition.js\":[\"lodash\",\"../../core/utils/throw_parse_error.js\",\"../../../core/class.js\",\"../type.js\",\"../../../core/reserved_keywords.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/hooks/parse_definition.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});var Class;module.import('../../../core/class.js',{\"default\":function(v){Class=v}});var Type;module.import('../type.js',{\"default\":function(v){Type=v}});var reservedKeywords;module.import('../../../core/reserved_keywords.js',{\"default\":function(v){reservedKeywords=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       //\nvar typePattern = Match.OneOf(Function, [Function]);                                                                   // 7\n                                                                                                                       //\nfunction onParseDefinition(parsedDefinition, definition, className) {                                                  // 9\n\tif (definition.fields === undefined) {                                                                                // 10\n\t\treturn;                                                                                                              // 11\n\t}                                                                                                                     // 12\n                                                                                                                       //\n\t// Fields definition has to be an object.                                                                             //\n\tif (!Match.test(definition.fields, Object)) {                                                                         // 15\n\t\tthrowParseError([{                                                                                                   // 16\n\t\t\t'class': className                                                                                                  // 17\n\t\t}, {                                                                                                                 // 16\n\t\t\t'property': 'fields'                                                                                                // 19\n\t\t}, 'Fields definition has to be an object']);                                                                        // 18\n\t}                                                                                                                     // 23\n                                                                                                                       //\n\t_.each(definition.fields, function (fieldDefinition, fieldName) {                                                     // 25\n\t\tif (Match.test(fieldDefinition, typePattern)) {                                                                      // 26\n\t\t\tfieldDefinition = {                                                                                                 // 27\n\t\t\t\tname: fieldName,                                                                                                   // 28\n\t\t\t\ttype: fieldDefinition                                                                                              // 29\n\t\t\t};                                                                                                                  // 27\n\t\t} else if (Match.test(fieldDefinition, Object)) {                                                                    // 31\n\t\t\tfieldDefinition = _.extend(fieldDefinition, {                                                                       // 33\n\t\t\t\tname: fieldName                                                                                                    // 34\n\t\t\t});                                                                                                                 // 33\n\t\t} else {                                                                                                             // 36\n\t\t\tthrowParseError([{                                                                                                  // 38\n\t\t\t\t'class': className                                                                                                 // 39\n\t\t\t}, {                                                                                                                // 38\n\t\t\t\t'property': 'fields'                                                                                               // 41\n\t\t\t}, {                                                                                                                // 40\n\t\t\t\t'field': fieldName                                                                                                 // 43\n\t\t\t}, 'Field definition has to be an object or type']);                                                                // 42\n\t\t}                                                                                                                    // 47\n                                                                                                                       //\n\t\t// Check if a field name is not reserved keyword.                                                                    //\n\t\tif (_.includes(reservedKeywords, fieldName)) {                                                                       // 50\n\t\t\tthrowParseError([{                                                                                                  // 51\n\t\t\t\t'class': className                                                                                                 // 52\n\t\t\t}, {                                                                                                                // 51\n\t\t\t\t'method': fieldName                                                                                                // 54\n\t\t\t}, 'Reserved keyword']);                                                                                            // 53\n\t\t}                                                                                                                    // 58\n                                                                                                                       //\n\t\tparsedDefinition.fields[fieldDefinition.name] = fieldDefinition;                                                     // 60\n\t});                                                                                                                   // 61\n};                                                                                                                     // 62\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onParseDefinition));                                                          // 64\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"types\":{\"boolean.js\":[\"../type.js\",\"../../validators/validators.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/types/boolean.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Type;module.import('../type.js',{\"default\":function(v){Type=v}});var Validators;module.import('../../validators/validators.js',{\"default\":function(v){Validators=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nType.create({                                                                                                          // 4\n  name: 'Boolean',                                                                                                     // 5\n  'class': Boolean,                                                                                                    // 6\n  cast: function cast(value) {                                                                                         // 7\n    if (_.isString(value) && value.toLowerCase() === 'false' || value === '0') {                                       // 8\n      return false;                                                                                                    // 9\n    }                                                                                                                  // 10\n    return Boolean(value);                                                                                             // 11\n  },                                                                                                                   // 12\n  validate: function validate(args) {                                                                                  // 13\n    Validators.boolean(args);                                                                                          // 14\n  }                                                                                                                    // 15\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"date.js\":[\"lodash\",\"../type.js\",\"../../validators/validators.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/types/date.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Type;module.import('../type.js',{\"default\":function(v){Type=v}});var Validators;module.import('../../validators/validators.js',{\"default\":function(v){Validators=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nType.create({                                                                                                          // 5\n  name: 'Date',                                                                                                        // 6\n  'class': Date,                                                                                                       // 7\n  cast: function cast(value) {                                                                                         // 8\n    return new Date(value);                                                                                            // 9\n  },                                                                                                                   // 10\n  validate: function validate(args) {                                                                                  // 11\n    Validators.date(args);                                                                                             // 12\n  }                                                                                                                    // 13\n});                                                                                                                    // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"mongo_object_id.js\":[\"../type.js\",\"../../validators/validators.js\",\"meteor/mongo\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/types/mongo_object_id.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Type;module.import('../type.js',{\"default\":function(v){Type=v}});var Validators;module.import('../../validators/validators.js',{\"default\":function(v){Validators=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nType.create({                                                                                                          // 5\n  name: 'MongoObjectID',                                                                                               // 6\n  'class': Mongo.ObjectID,                                                                                             // 7\n  validate: function validate(args) {                                                                                  // 8\n    Validators.mongoObjectID(args);                                                                                    // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"number.js\":[\"../type.js\",\"../../validators/validators.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/types/number.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Type;module.import('../type.js',{\"default\":function(v){Type=v}});var Validators;module.import('../../validators/validators.js',{\"default\":function(v){Validators=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nType.create({                                                                                                          // 4\n  name: 'Number',                                                                                                      // 5\n  'class': Number,                                                                                                     // 6\n  cast: function cast(value) {                                                                                         // 7\n    return Number(value);                                                                                              // 8\n  },                                                                                                                   // 9\n  validate: function validate(args) {                                                                                  // 10\n    Validators.number(args);                                                                                           // 11\n  }                                                                                                                    // 12\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"object.js\":[\"../type.js\",\"../../validators/validators.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/types/object.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Type;module.import('../type.js',{\"default\":function(v){Type=v}});var Validators;module.import('../../validators/validators.js',{\"default\":function(v){Validators=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nType.create({                                                                                                          // 4\n  name: 'Object',                                                                                                      // 5\n  'class': Object,                                                                                                     // 6\n  validate: function validate(args) {                                                                                  // 7\n    Validators.object(args);                                                                                           // 8\n  }                                                                                                                    // 9\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"string.js\":[\"../type.js\",\"../../validators/validators.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/types/string.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Type;module.import('../type.js',{\"default\":function(v){Type=v}});var Validators;module.import('../../validators/validators.js',{\"default\":function(v){Validators=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nType.create({                                                                                                          // 4\n  name: 'String',                                                                                                      // 5\n  'class': String,                                                                                                     // 6\n  cast: function cast(value) {                                                                                         // 7\n    return String(value);                                                                                              // 8\n  },                                                                                                                   // 9\n  validate: function validate(args) {                                                                                  // 10\n    Validators.string(args);                                                                                           // 11\n  }                                                                                                                    // 12\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"utils\":{\"castToClass.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/utils/castToClass.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction castToClass() {                                                                                               // 1\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 1\n  var Class = args.Class;                                                                                              // 1\n  var rawDoc = args.rawDoc;                                                                                            // 1\n  var options = args.options;                                                                                          // 1\n  // If the class has a type field, then we have to check if we are                                                    //\n  // casting to some of the nested classes.                                                                            //\n                                                                                                                       //\n  var typeField = Class.getTypeField();                                                                                // 9\n  if (typeField) {                                                                                                     // 10\n    var ChildClass = Class.get(rawDoc[typeField]);                                                                     // 11\n    if (ChildClass && ChildClass.isChildOf(Class)) {                                                                   // 12\n      return new ChildClass(rawDoc, options);                                                                          // 13\n    }                                                                                                                  // 14\n  }                                                                                                                    // 15\n  return new Class(rawDoc, options);                                                                                   // 16\n};                                                                                                                     // 17\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(castToClass));                                                                // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cast_nested.js\":[\"lodash\",\"../../../core/class.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/utils/cast_nested.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nfunction createDocument(Class, rawDoc, options) {                                                                      // 4\n  // If a nested field has a type field, then we have to check if we are                                               //\n  // casting to some of the nested classes.                                                                            //\n  var typeField = Class.getTypeField();                                                                                // 7\n  if (typeField) {                                                                                                     // 8\n    var ChildClass = AstroClass.get(rawDoc[typeField]);                                                                // 9\n    if (ChildClass && ChildClass.isChildOf(Class)) {                                                                   // 10\n      return new ChildClass(rawDoc);                                                                                   // 11\n    }                                                                                                                  // 12\n  }                                                                                                                    // 13\n  return new Class(rawDoc, options);                                                                                   // 14\n};                                                                                                                     // 15\n                                                                                                                       //\nfunction castNested() {                                                                                                // 17\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 17\n  var doc = args.doc;                                                                                                  // 17\n  var options = args.options;                                                                                          // 17\n                                                                                                                       //\n  _.defaults(options, {                                                                                                // 22\n    clone: true                                                                                                        // 23\n  });                                                                                                                  // 22\n  var Class = doc.constructor;                                                                                         // 25\n                                                                                                                       //\n  _.each(Class.getObjectFields(), function (field) {                                                                   // 27\n    var value = doc[field.name];                                                                                       // 28\n    // If field value is empty then go to the next one.                                                                //\n    if (_.isNil(value)) {                                                                                              // 30\n      return;                                                                                                          // 31\n    }                                                                                                                  // 32\n    var NestedClass = field.type['class'];                                                                             // 33\n    if (!(value instanceof NestedClass)) {                                                                             // 34\n      if (!_.isPlainObject(value)) {                                                                                   // 35\n        return;                                                                                                        // 36\n      }                                                                                                                // 37\n      doc[field.name] = createDocument(NestedClass, value, options);                                                   // 38\n    }                                                                                                                  // 39\n  });                                                                                                                  // 40\n                                                                                                                       //\n  _.each(Class.getListFields(), function (field) {                                                                     // 42\n    var value = doc[field.name];                                                                                       // 43\n    // If field value is empty then go to the next one.                                                                //\n    if (!_.isArray(value) || !field.isClass) {                                                                         // 45\n      return;                                                                                                          // 46\n    }                                                                                                                  // 47\n    var NestedClass = field.type['class'];                                                                             // 48\n    _.each(value, function (element, index) {                                                                          // 49\n      if (!(element instanceof NestedClass)) {                                                                         // 50\n        if (!_.isPlainObject(element)) {                                                                               // 51\n          return;                                                                                                      // 52\n        }                                                                                                              // 53\n        value[index] = createDocument(NestedClass, element, options);                                                  // 54\n      }                                                                                                                // 55\n    });                                                                                                                // 56\n  });                                                                                                                  // 57\n};                                                                                                                     // 58\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(castNested));                                                                 // 60\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_all.js\":[\"./get_many.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/utils/get_all.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar getMany;module.import('./get_many.js',{\"default\":function(v){getMany=v}});                                         // 1\n                                                                                                                       //\nfunction getAll(doc, options) {                                                                                        // 3\n\tvar Class = doc.constructor;                                                                                          // 4\n                                                                                                                       //\n\t// Get list of fields and their values.                                                                               //\n\treturn getMany(doc, Class.getFieldsNames(), options);                                                                 // 7\n};                                                                                                                     // 8\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getAll));                                                                     // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_many.js\":[\"lodash\",\"./get_one.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/utils/get_many.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var getOne;module.import('./get_one.js',{\"default\":function(v){getOne=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nfunction getMany(doc, fieldNames, options) {                                                                           // 4\n\tvar values = {};                                                                                                      // 5\n                                                                                                                       //\n\t_.each(fieldNames, function (fieldName) {                                                                             // 7\n\t\tvar fieldValue = getOne(doc, fieldName, options);                                                                    // 8\n\t\tif (fieldValue !== undefined) {                                                                                      // 9\n\t\t\tvalues[fieldName] = fieldValue;                                                                                     // 10\n\t\t}                                                                                                                    // 11\n\t});                                                                                                                   // 12\n                                                                                                                       //\n\treturn values;                                                                                                        // 14\n};                                                                                                                     // 15\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getMany));                                                                    // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_one.js\":[\"lodash\",\"../utils/traverse.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/utils/get_one.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var traverse;module.import('../utils/traverse.js',{\"default\":function(v){traverse=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nfunction getOne(doc, fieldPattern, options) {                                                                          // 4\n\t// Prepare options.                                                                                                   //\n\toptions = _.extend({                                                                                                  // 6\n\t\ttransient: true,                                                                                                     // 7\n\t\timmutable: true                                                                                                      // 8\n\t}, options);                                                                                                          // 6\n                                                                                                                       //\n\treturn traverse(doc, fieldPattern, function (nestedDoc, nestedFieldName, field) {                                     // 11\n\t\t// If a field does not exist than we don't return anything.                                                          //\n\t\tif (!field) {                                                                                                        // 15\n\t\t\treturn;                                                                                                             // 16\n\t\t}                                                                                                                    // 17\n                                                                                                                       //\n\t\t// Don't get a transient field.                                                                                      //\n\t\tif (!options.transient && field.transient) {                                                                         // 20\n\t\t\treturn;                                                                                                             // 21\n\t\t}                                                                                                                    // 22\n                                                                                                                       //\n\t\t// Don't get an immutable field.                                                                                     //\n\t\tif (!options.immutable && field.immutable) {                                                                         // 25\n\t\t\treturn;                                                                                                             // 26\n\t\t}                                                                                                                    // 27\n                                                                                                                       //\n\t\t// Just return a value.                                                                                              //\n\t\treturn nestedDoc[nestedFieldName];                                                                                   // 30\n\t});                                                                                                                   // 31\n};                                                                                                                     // 33\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getOne));                                                                     // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"is_nested_field_name.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/utils/is_nested_field_name.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction isNestedFieldName(fieldPattern) {                                                                             // 1\n  return fieldPattern.indexOf('.') !== -1;                                                                             // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(isNestedFieldName));                                                          // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"raw_all.js\":[\"./raw_many.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/utils/raw_all.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar rawMany;module.import('./raw_many.js',{\"default\":function(v){rawMany=v}});                                         // 1\n                                                                                                                       //\nfunction rawAll(doc, options) {                                                                                        // 3\n\tvar Class = doc.constructor;                                                                                          // 4\n                                                                                                                       //\n\t// Get list of fields and their values.                                                                               //\n\treturn rawMany(doc, Class.getFieldsNames(options), options);                                                          // 7\n};                                                                                                                     // 8\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(rawAll));                                                                     // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"raw_many.js\":[\"lodash\",\"./raw_one.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/utils/raw_many.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var rawOne;module.import('./raw_one.js',{\"default\":function(v){rawOne=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nfunction rawMany(doc, fieldNames, options) {                                                                           // 4\n  var values = {};                                                                                                     // 5\n                                                                                                                       //\n  _.each(fieldNames, function (fieldName) {                                                                            // 7\n    values[fieldName] = rawOne(doc, fieldName, options);                                                               // 8\n  });                                                                                                                  // 9\n                                                                                                                       //\n  return values;                                                                                                       // 11\n};                                                                                                                     // 12\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(rawMany));                                                                    // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"raw_one.js\":[\"lodash\",\"../../../core/class.js\",\"./traverse.js\",\"./raw_all.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/utils/raw_one.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});var traverse;module.import('./traverse.js',{\"default\":function(v){traverse=v}});var rawAll;module.import('./raw_all.js',{\"default\":function(v){rawAll=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       //\nfunction rawOne(doc, fieldPattern, options) {                                                                          // 6\n\t// Prepare options.                                                                                                   //\n\toptions = _.extend({                                                                                                  // 8\n\t\ttransient: true,                                                                                                     // 9\n\t\timmutable: true                                                                                                      // 10\n\t}, options);                                                                                                          // 8\n                                                                                                                       //\n\treturn traverse(doc, fieldPattern, function (nestedDoc, nestedFieldName, field) {                                     // 13\n\t\t// If a field does not exist than we don't return anything.                                                          //\n\t\tif (!field) {                                                                                                        // 17\n\t\t\treturn;                                                                                                             // 18\n\t\t}                                                                                                                    // 19\n                                                                                                                       //\n\t\t// Don't get a transient field.                                                                                      //\n\t\tif (!options.transient && field.transient) {                                                                         // 22\n\t\t\treturn;                                                                                                             // 23\n\t\t}                                                                                                                    // 24\n                                                                                                                       //\n\t\t// Don't get an immutable field.                                                                                     //\n\t\tif (!options.immutable && field.immutable) {                                                                         // 27\n\t\t\treturn;                                                                                                             // 28\n\t\t}                                                                                                                    // 29\n                                                                                                                       //\n\t\t// Get a value to be returned.                                                                                       //\n\t\tvar fieldValue = nestedDoc[nestedFieldName];                                                                         // 32\n                                                                                                                       //\n\t\tif (fieldValue instanceof AstroClass) {                                                                              // 34\n\t\t\treturn rawAll(fieldValue, options);                                                                                 // 35\n\t\t} else if (_.isArray(fieldValue)) {                                                                                  // 36\n\t\t\treturn _.map(fieldValue, function (element) {                                                                       // 38\n\t\t\t\tif (element instanceof AstroClass) {                                                                               // 39\n\t\t\t\t\treturn rawAll(element, options);                                                                                  // 40\n\t\t\t\t} else {                                                                                                           // 41\n\t\t\t\t\treturn element;                                                                                                   // 43\n\t\t\t\t}                                                                                                                  // 44\n\t\t\t});                                                                                                                 // 45\n\t\t} else {                                                                                                             // 46\n\t\t\treturn fieldValue;                                                                                                  // 48\n\t\t}                                                                                                                    // 49\n\t});                                                                                                                   // 50\n};                                                                                                                     // 52\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(rawOne));                                                                     // 54\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"resolve_values.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/utils/resolve_values.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction resolveValues(args) {                                                                                         // 3\n  var Class = args.Class;                                                                                              // 3\n  var values = args.values;                                                                                            // 3\n                                                                                                                       //\n  var fields = Class.getFields();                                                                                      // 8\n  var resolvedValues = {};                                                                                             // 9\n  _.each(fields, function (field) {                                                                                    // 10\n    resolvedValues[field.name] = field.resolveValue(values);                                                           // 11\n  });                                                                                                                  // 12\n  return resolvedValues;                                                                                               // 13\n};                                                                                                                     // 14\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(resolveValues));                                                              // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"set_all.js\":[\"lodash\",\"./set_one.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/utils/set_all.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var setOne;module.import('./set_one.js',{\"default\":function(v){setOne=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nfunction setAll(doc, fieldsValues) {                                                                                   // 4\n  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];                               // 4\n                                                                                                                       //\n  _.defaults(options, {                                                                                                // 5\n    clone: true                                                                                                        // 6\n  });                                                                                                                  // 5\n  var Class = doc.constructor;                                                                                         // 8\n                                                                                                                       //\n  // Get names of the fields that are not present in the fieldsValues variable.                                        //\n  var fieldsNames = _.difference(Class.getFieldsNames(), _.keys(fieldsValues));                                        // 11\n                                                                                                                       //\n  _.each(fieldsNames, function (fieldName) {                                                                           // 13\n    setOne(doc, fieldName, undefined, options);                                                                        // 14\n  });                                                                                                                  // 15\n                                                                                                                       //\n  _.forOwn(fieldsValues, function (fieldValue, fieldName) {                                                            // 17\n    setOne(doc, fieldName, fieldValue, options);                                                                       // 18\n  });                                                                                                                  // 19\n};                                                                                                                     // 20\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(setAll));                                                                     // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"set_defaults.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/utils/set_defaults.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction setDefaults() {                                                                                               // 3\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 3\n  var doc = args.doc;                                                                                                  // 3\n                                                                                                                       //\n  var Class = doc.constructor;                                                                                         // 7\n                                                                                                                       //\n  _.each(Class.getFields(), function (field) {                                                                         // 9\n    var value = doc[field.name];                                                                                       // 10\n    if (value === undefined) {                                                                                         // 11\n      doc[field.name] = field.getDefault();                                                                            // 12\n    }                                                                                                                  // 13\n  });                                                                                                                  // 14\n}                                                                                                                      // 15\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(setDefaults));                                                                // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"set_many.js\":[\"lodash\",\"./set_one.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/utils/set_many.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var setOne;module.import('./set_one.js',{\"default\":function(v){setOne=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nfunction setMany(doc, fieldsValues) {                                                                                  // 4\n  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];                               // 4\n                                                                                                                       //\n  _.defaults(options, {                                                                                                // 5\n    clone: true                                                                                                        // 6\n  });                                                                                                                  // 5\n                                                                                                                       //\n  // Set multiple fields.                                                                                              //\n  _.forOwn(fieldsValues, function (setValue, fieldName) {                                                              // 10\n    setOne(doc, fieldName, setValue, options);                                                                         // 11\n  });                                                                                                                  // 12\n};                                                                                                                     // 13\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(setMany));                                                                    // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"set_one.js\":[\"lodash\",\"meteor/ejson\",\"../utils/traverse.js\",\"../../core/utils/warn.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/utils/set_one.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var EJSON;module.import('meteor/ejson',{\"EJSON\":function(v){EJSON=v}});var traverse;module.import('../utils/traverse.js',{\"default\":function(v){traverse=v}});var warn;module.import('../../core/utils/warn.js',{\"default\":function(v){warn=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       //\nfunction setOne(doc, fieldPattern, fieldValue) {                                                                       // 6\n  var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];                               // 6\n                                                                                                                       //\n  _.defaults(options, {                                                                                                // 7\n    clone: true                                                                                                        // 8\n  });                                                                                                                  // 7\n                                                                                                                       //\n  if (options.clone && _.isObject(fieldValue)) {                                                                       // 11\n    fieldValue = EJSON.clone(fieldValue);                                                                              // 12\n  }                                                                                                                    // 13\n                                                                                                                       //\n  return traverse(doc, fieldPattern, function (nestedDoc, nestedFieldName, field) {                                    // 15\n    // If a field does not exist than we don't return anything.                                                        //\n    if (!field) {                                                                                                      // 19\n      var Class = doc.constructor;                                                                                     // 20\n      warn('[\"' + Class.getName() + '\" class][\"' + fieldPattern + '\" field] ' + 'Trying to set a value of the field that does not exist in the class');\n      return;                                                                                                          // 25\n    }                                                                                                                  // 26\n                                                                                                                       //\n    nestedDoc[nestedFieldName] = fieldValue;                                                                           // 28\n  });                                                                                                                  // 29\n};                                                                                                                     // 31\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(setOne));                                                                     // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"traverse.js\":[\"lodash\",\"./is_nested_field_name.js\",\"../../../core/class.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/fields/utils/traverse.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var isNestedFieldName;module.import('./is_nested_field_name.js',{\"default\":function(v){isNestedFieldName=v}});var AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction traverse(doc, name, callback) {                                                                               // 5\n  if (!doc) {                                                                                                          // 6\n    return;                                                                                                            // 7\n  }                                                                                                                    // 8\n                                                                                                                       //\n  var Class = void 0;                                                                                                  // 10\n  var field = void 0;                                                                                                  // 11\n                                                                                                                       //\n  // Check whether the given field name is a nested field name.                                                        //\n  if (!isNestedFieldName(name)) {                                                                                      // 14\n    // Get a class.                                                                                                    //\n    var _Class = doc.constructor;                                                                                      // 16\n    // Get a field definition.                                                                                         //\n    var _field = _Class.getField(name);                                                                                // 18\n    // Execute the callback function passing the last nested document, the last                                        //\n    // segment name and a field object.                                                                                //\n    return callback(doc, name, _field);                                                                                // 21\n  }                                                                                                                    // 22\n                                                                                                                       //\n  // Split the nested field pattern name by the \".\" character.                                                         //\n  var segments = name.split('.');                                                                                      // 25\n  // Get the last and one before the last index.                                                                       //\n  var lastIndex = segments.length - 1;                                                                                 // 27\n                                                                                                                       //\n  // Traverse nested fields until reaching the last one from the pattern.                                              //\n  var next = function next(nestedDoc, segmentIndex) {                                                                  // 30\n    segmentIndex = segmentIndex || 0;                                                                                  // 31\n    // Get a nested field name under the given index.                                                                  //\n    var segment = segments[segmentIndex];                                                                              // 33\n    // Check if a nested document is an instance of the Astronomy class and get                                        //\n    // a field object for a given field name;                                                                          //\n    if (nestedDoc instanceof AstroClass) {                                                                             // 36\n      // Get a class for of a nested document.                                                                         //\n      Class = nestedDoc.constructor;                                                                                   // 38\n      // Get a field object from the nested class.                                                                     //\n      field = Class.getField(segment);                                                                                 // 40\n    }                                                                                                                  // 41\n    if (segmentIndex === lastIndex) {                                                                                  // 42\n      // Execute the callback function, if we reached the last nested document.                                        //\n      return callback(nestedDoc, segment, field);                                                                      // 44\n    } else if (_.isObject(nestedDoc[segment])) {                                                                       // 45\n      // Go deeper if a value of the current nested document is an object.                                             //\n      return next(nestedDoc[segment], segmentIndex + 1);                                                               // 48\n    }                                                                                                                  // 49\n  };                                                                                                                   // 50\n                                                                                                                       //\n  // Start traversing nested fields.                                                                                   //\n  return next(doc);                                                                                                    // 53\n};                                                                                                                     // 54\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(traverse));                                                                   // 56\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"indexes\":{\"module.js\":[\"../../core/module.js\",\"./hooks/init_schema.js\",\"./hooks/init_definition.js\",\"./hooks/parse_definition.js\",\"./hooks/merge_definitions.js\",\"./hooks/apply_definition.js\",\"./hooks/init_class.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/indexes/module.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Module;module.import('../../core/module.js',{\"default\":function(v){Module=v}});var onInitSchema;module.import('./hooks/init_schema.js',{\"default\":function(v){onInitSchema=v}});var onInitDefinition;module.import('./hooks/init_definition.js',{\"default\":function(v){onInitDefinition=v}});var onParseDefinition;module.import('./hooks/parse_definition.js',{\"default\":function(v){onParseDefinition=v}});var onMergeDefinitions;module.import('./hooks/merge_definitions.js',{\"default\":function(v){onMergeDefinitions=v}});var onApplyDefinition;module.import('./hooks/apply_definition.js',{\"default\":function(v){onApplyDefinition=v}});var onInitClass;module.import('./hooks/init_class.js',{\"default\":function(v){onInitClass=v}});\n// Hooks.                                                                                                              //\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n                                                                                                                       //\nModule.create({                                                                                                        // 10\n\tname: 'indexes',                                                                                                      // 11\n\tonInitSchema: onInitSchema,                                                                                           // 12\n\tonInitDefinition: onInitDefinition,                                                                                   // 13\n\tonParseDefinition: onParseDefinition,                                                                                 // 14\n\tonMergeDefinitions: onMergeDefinitions,                                                                               // 15\n\tonApplyDefinition: onApplyDefinition,                                                                                 // 16\n\tonInitClass: onInitClass                                                                                              // 17\n});                                                                                                                    // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"class_static_methods\":{\"get_index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/indexes/class_static_methods/get_index.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction getIndex(indexName) {                                                                                         // 1\n\treturn this.schema.indexes[indexName];                                                                                // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getIndex));                                                                   // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"get_indexes.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/indexes/class_static_methods/get_indexes.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction getIndexes() {                                                                                                // 1\n\treturn this.schema.indexes;                                                                                           // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getIndexes));                                                                 // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"has_index.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/indexes/class_static_methods/has_index.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction hasIndex(indexName) {                                                                                         // 3\n\treturn _.has(this.schema.indexes, indexName);                                                                         // 4\n};                                                                                                                     // 5\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(hasIndex));                                                                   // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"hooks\":{\"apply_definition.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/indexes/hooks/apply_definition.js                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction onApplyDefinition(Class, parsedDefinition, className) {                                                       // 3\n\tvar Collection = Class.getCollection();                                                                               // 4\n                                                                                                                       //\n\tif (!Meteor.isServer || !Collection || Collection && !Collection._connection) {                                       // 6\n\t\treturn;                                                                                                              // 11\n\t}                                                                                                                     // 12\n                                                                                                                       //\n\tvar schema = Class.schema;                                                                                            // 14\n                                                                                                                       //\n\tfunction prefixIndexes(indexes, fieldName) {                                                                          // 16\n\t\t// Prefix the fields property.                                                                                       //\n\t\t_.each(indexes, function (index, indexName) {                                                                        // 18\n\t\t\tindex.fields = _.mapKeys(index.fields, function (value, key) {                                                      // 19\n\t\t\t\treturn fieldName + '.' + key;                                                                                      // 20\n\t\t\t});                                                                                                                 // 21\n\t\t\t_.extend(index.options, {                                                                                           // 22\n\t\t\t\tname: fieldName + '.' + indexName                                                                                  // 23\n\t\t\t});                                                                                                                 // 22\n\t\t});                                                                                                                  // 25\n\t\t// Prefix object keys.                                                                                               //\n\t\tindexes = _.mapKeys(indexes, function (index, indexName) {                                                           // 27\n\t\t\treturn fieldName + '.' + indexName;                                                                                 // 28\n\t\t});                                                                                                                  // 29\n\t\treturn indexes;                                                                                                      // 30\n\t}                                                                                                                     // 31\n                                                                                                                       //\n\t// Add indexes to the collection from nested classes.                                                                 //\n\tfunction collectNestedIndexes(Class) {                                                                                // 34\n\t\tvar indexes = {};                                                                                                    // 35\n\t\tvar fields = _.concat(Class.getObjectFields(), Class.getListFields(true));                                           // 36\n\t\t_.each(fields, function (field) {                                                                                    // 39\n\t\t\t_.extend(indexes, prefixIndexes(field.type['class'].definition.indexes, field.name), prefixIndexes(collectNestedIndexes(field.type['class']), field.name));\n\t\t});                                                                                                                  // 45\n\t\treturn indexes;                                                                                                      // 46\n\t}                                                                                                                     // 47\n                                                                                                                       //\n\tvar indexes = _.extend({}, parsedDefinition.indexes, collectNestedIndexes(Class));                                    // 49\n                                                                                                                       //\n\t_.each(indexes, function (index, indexName) {                                                                         // 55\n\t\tschema.indexes[indexName] = index;                                                                                   // 56\n\t\tCollection._ensureIndex(index.fields, index.options);                                                                // 57\n\t});                                                                                                                   // 58\n};                                                                                                                     // 59\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onApplyDefinition));                                                          // 61\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"init_class.js\":[\"../class_static_methods/get_index.js\",\"../class_static_methods/get_indexes.js\",\"../class_static_methods/has_index.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/indexes/hooks/init_class.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar getIndex;module.import('../class_static_methods/get_index.js',{\"default\":function(v){getIndex=v}});var getIndexes;module.import('../class_static_methods/get_indexes.js',{\"default\":function(v){getIndexes=v}});var hasIndex;module.import('../class_static_methods/has_index.js',{\"default\":function(v){hasIndex=v}});// Class static methods.\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       //\nfunction onInitClass(Class, className) {                                                                               // 6\n\t// Class static methods.                                                                                              //\n\tClass.getIndex = getIndex;                                                                                            // 8\n\tClass.getIndexes = getIndexes;                                                                                        // 9\n\tClass.hasIndex = hasIndex;                                                                                            // 10\n};                                                                                                                     // 11\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitClass));                                                                // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"init_definition.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/indexes/hooks/init_definition.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction onInitDefinition(definition, className) {                                                                     // 1\n\tdefinition.indexes = {};                                                                                              // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitDefinition));                                                           // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"init_schema.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/indexes/hooks/init_schema.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction onInitSchema(schema, className) {                                                                             // 1\n\tschema.indexes = {};                                                                                                  // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitSchema));                                                               // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"merge_definitions.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/indexes/hooks/merge_definitions.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {                                           // 3\n\t_.each(sourceDefinition.indexes, function (index, indexName) {                                                        // 4\n\t\ttargetDefinition.indexes[indexName] = index;                                                                         // 5\n\t});                                                                                                                   // 6\n};                                                                                                                     // 7\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onMergeDefinitions));                                                         // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"parse_definition.js\":[\"lodash\",\"../../core/utils/throw_parse_error.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/indexes/hooks/parse_definition.js                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nvar fieldDefinitionPattern = Match.ObjectIncluding({                                                                   // 4\n\tindex: Match.OneOf(1, -1, String)                                                                                     // 5\n});                                                                                                                    // 4\n                                                                                                                       //\nfunction onParseDefinition(parsedDefinition, definition, className) {                                                  // 8\n\t// Check existence and validity of the \"indexes\" property.                                                            //\n\tif (definition.indexes !== undefined) {                                                                               // 10\n\t\t_.each(definition.indexes, function (index, indexName) {                                                             // 11\n\t\t\tif (!Match.test(index, Object)) {                                                                                   // 12\n\t\t\t\tthrowParseError([{                                                                                                 // 13\n\t\t\t\t\t'class': className                                                                                                // 14\n\t\t\t\t}, {                                                                                                               // 13\n\t\t\t\t\t'index': indexName                                                                                                // 16\n\t\t\t\t}, 'Indexes definition has to be an object']);                                                                     // 15\n\t\t\t}                                                                                                                   // 20\n\t\t\tindex = {                                                                                                           // 21\n\t\t\t\tfields: index.fields,                                                                                              // 22\n\t\t\t\toptions: index.options || {}                                                                                       // 23\n\t\t\t};                                                                                                                  // 21\n\t\t\tindex.options.name = index.options.name || indexName;                                                               // 25\n\t\t\tparsedDefinition.indexes[indexName] = index;                                                                        // 26\n\t\t});                                                                                                                  // 27\n\t}                                                                                                                     // 28\n                                                                                                                       //\n\tif (definition.fields !== undefined) {                                                                                // 30\n\t\t_.each(definition.fields, function (fieldDefinition, fieldName) {                                                    // 31\n\t\t\t// Stop if a field definition does not contain index information.                                                   //\n\t\t\tif (!Match.test(fieldDefinition, fieldDefinitionPattern)) {                                                         // 33\n\t\t\t\treturn;                                                                                                            // 34\n\t\t\t}                                                                                                                   // 35\n\t\t\t// Prepare an index definition.                                                                                     //\n\t\t\tvar indexDefinition = {                                                                                             // 37\n\t\t\t\tfields: {},                                                                                                        // 38\n\t\t\t\toptions: {                                                                                                         // 39\n\t\t\t\t\tname: fieldName                                                                                                   // 40\n\t\t\t\t}                                                                                                                  // 39\n\t\t\t};                                                                                                                  // 37\n\t\t\tindexDefinition.fields[fieldName] = fieldDefinition.index;                                                          // 43\n\t\t\tparsedDefinition.indexes[fieldName] = indexDefinition;                                                              // 44\n\t\t});                                                                                                                  // 45\n\t}                                                                                                                     // 46\n};                                                                                                                     // 47\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onParseDefinition));                                                          // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"methods\":{\"module.js\":[\"../../core/module.js\",\"./hooks/init_schema.js\",\"./hooks/init_definition.js\",\"./hooks/parse_definition.js\",\"./hooks/merge_definitions.js\",\"./hooks/apply_definition.js\",\"./hooks/init_class.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/methods/module.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Module;module.import('../../core/module.js',{\"default\":function(v){Module=v}});var onInitSchema;module.import('./hooks/init_schema.js',{\"default\":function(v){onInitSchema=v}});var onInitDefinition;module.import('./hooks/init_definition.js',{\"default\":function(v){onInitDefinition=v}});var onParseDefinition;module.import('./hooks/parse_definition.js',{\"default\":function(v){onParseDefinition=v}});var onMergeDefinitions;module.import('./hooks/merge_definitions.js',{\"default\":function(v){onMergeDefinitions=v}});var onApplyDefinition;module.import('./hooks/apply_definition.js',{\"default\":function(v){onApplyDefinition=v}});var onInitClass;module.import('./hooks/init_class.js',{\"default\":function(v){onInitClass=v}});\n// Hooks.                                                                                                              //\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n                                                                                                                       //\nModule.create({                                                                                                        // 10\n\tname: 'methods',                                                                                                      // 11\n\tonInitSchema: onInitSchema,                                                                                           // 12\n\tonInitDefinition: onInitDefinition,                                                                                   // 13\n\tonParseDefinition: onParseDefinition,                                                                                 // 14\n\tonMergeDefinitions: onMergeDefinitions,                                                                               // 15\n\tonApplyDefinition: onApplyDefinition,                                                                                 // 16\n\tonInitClass: onInitClass                                                                                              // 17\n});                                                                                                                    // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"class_static_methods\":{\"get_method.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/methods/class_static_methods/get_method.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction getMethod(methodName) {                                                                                       // 1\n\treturn this.schema.methods[methodName];                                                                               // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getMethod));                                                                  // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"get_methods.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/methods/class_static_methods/get_methods.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction getMethods() {                                                                                                // 1\n\treturn this.schema.methods;                                                                                           // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getMethods));                                                                 // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"has_method.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/methods/class_static_methods/has_method.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction hasMethod(methodName) {                                                                                       // 3\n\treturn _.has(this.schema.methods, methodName);                                                                        // 4\n};                                                                                                                     // 5\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(hasMethod));                                                                  // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"hooks\":{\"apply_definition.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/methods/hooks/apply_definition.js                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction onApplyDefinition(Class, parsedDefinition, className) {                                                       // 3\n\tvar schema = Class.schema;                                                                                            // 4\n                                                                                                                       //\n\t// Add methods to the class.                                                                                          //\n\t_.each(parsedDefinition.methods, function (method, methodName) {                                                      // 7\n\t\tschema.methods[methodName] = method;                                                                                 // 8\n\t\tClass.prototype[methodName] = method;                                                                                // 9\n\t});                                                                                                                   // 10\n};                                                                                                                     // 11\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onApplyDefinition));                                                          // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"init_class.js\":[\"../class_static_methods/get_method.js\",\"../class_static_methods/get_methods.js\",\"../class_static_methods/has_method.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/methods/hooks/init_class.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar getMethod;module.import('../class_static_methods/get_method.js',{\"default\":function(v){getMethod=v}});var getMethods;module.import('../class_static_methods/get_methods.js',{\"default\":function(v){getMethods=v}});var hasMethod;module.import('../class_static_methods/has_method.js',{\"default\":function(v){hasMethod=v}});// Class static methods.\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       //\nfunction onInitClass(Class, className) {                                                                               // 6\n\t// Class static methods.                                                                                              //\n\tClass.getMethod = getMethod;                                                                                          // 8\n\tClass.getMethods = getMethods;                                                                                        // 9\n\tClass.hasMethod = hasMethod;                                                                                          // 10\n};                                                                                                                     // 11\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitClass));                                                                // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"init_definition.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/methods/hooks/init_definition.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction onInitDefinition(definition, className) {                                                                     // 1\n\tdefinition.methods = {};                                                                                              // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitDefinition));                                                           // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"init_schema.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/methods/hooks/init_schema.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction onInitSchema(schema, className) {                                                                             // 1\n\tschema.methods = {};                                                                                                  // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitSchema));                                                               // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"merge_definitions.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/methods/hooks/merge_definitions.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {                                           // 3\n\t_.each(sourceDefinition.methods, function (method, methodName) {                                                      // 4\n\t\ttargetDefinition.methods[methodName] = method;                                                                       // 5\n\t});                                                                                                                   // 6\n};                                                                                                                     // 7\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onMergeDefinitions));                                                         // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"parse_definition.js\":[\"lodash\",\"../../core/utils/throw_parse_error.js\",\"../../../core/reserved_keywords.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/methods/hooks/parse_definition.js                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});var reservedKeywords;module.import('../../../core/reserved_keywords.js',{\"default\":function(v){reservedKeywords=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction onParseDefinition(parsedDefinition, definition, className) {                                                  // 5\n\t// Check existence and validity of the \"methods\" property.                                                            //\n\tif (definition.methods !== undefined) {                                                                               // 7\n\t\tif (!Match.test(definition.methods, Object)) {                                                                       // 8\n\t\t\tthrowParseError([{                                                                                                  // 9\n\t\t\t\t'class': className                                                                                                 // 10\n\t\t\t}, {                                                                                                                // 9\n\t\t\t\t'property': 'methods'                                                                                              // 12\n\t\t\t}, 'Methods definition has to be an object']);                                                                      // 11\n\t\t}                                                                                                                    // 16\n                                                                                                                       //\n\t\t_.each(definition.methods, function (method, methodName) {                                                           // 18\n\t\t\tif (!Match.test(method, Function)) {                                                                                // 19\n\t\t\t\tthrowParseError([{                                                                                                 // 20\n\t\t\t\t\t'class': className                                                                                                // 21\n\t\t\t\t}, {                                                                                                               // 20\n\t\t\t\t\t'method': methodName                                                                                              // 23\n\t\t\t\t}, 'Method has to be a function']);                                                                                // 22\n\t\t\t}                                                                                                                   // 27\n                                                                                                                       //\n\t\t\tif (_.includes(reservedKeywords, methodName)) {                                                                     // 29\n\t\t\t\tthrowParseError([{                                                                                                 // 30\n\t\t\t\t\t'class': className                                                                                                // 31\n\t\t\t\t}, {                                                                                                               // 30\n\t\t\t\t\t'method': methodName                                                                                              // 33\n\t\t\t\t}, 'Reserved keyword']);                                                                                           // 32\n\t\t\t}                                                                                                                   // 37\n\t\t\tparsedDefinition.methods[methodName] = method;                                                                      // 38\n\t\t});                                                                                                                  // 39\n\t}                                                                                                                     // 40\n};                                                                                                                     // 41\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onParseDefinition));                                                          // 43\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"storage\":{\"module.js\":[\"../../core/module.js\",\"./utils/apply_modifier.js\",\"./utils/call_meteor_method.js\",\"./utils/class_insert.js\",\"./utils/class_update.js\",\"./utils/class_remove.js\",\"./utils/document_insert.js\",\"./utils/document_update.js\",\"./utils/document_remove.js\",\"./utils/get_modified.js\",\"./utils/get_modifier.js\",\"./utils/has_meteor_method.js\",\"./utils/is_modified.js\",\"./utils/is_remote.js\",\"./utils/omit_undefined.js\",\"./utils/throw_if_selector_is_not_id.js\",\"./utils/transform_to_class.js\",\"./utils/trigger_before_save.js\",\"./utils/trigger_before_insert.js\",\"./utils/trigger_before_update.js\",\"./utils/trigger_before_remove.js\",\"./utils/trigger_after_save.js\",\"./utils/trigger_after_insert.js\",\"./utils/trigger_after_update.js\",\"./utils/trigger_after_remove.js\",\"./hooks/init_schema.js\",\"./hooks/init_definition.js\",\"./hooks/parse_definition.js\",\"./hooks/merge_definitions.js\",\"./hooks/apply_definition.js\",\"./hooks/init_class.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/module.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Module;module.import('../../core/module.js',{\"default\":function(v){Module=v}});var applyModifier;module.import('./utils/apply_modifier.js',{\"default\":function(v){applyModifier=v}});var callMeteorMethod;module.import('./utils/call_meteor_method.js',{\"default\":function(v){callMeteorMethod=v}});var classInsert;module.import('./utils/class_insert.js',{\"default\":function(v){classInsert=v}});var classUpdate;module.import('./utils/class_update.js',{\"default\":function(v){classUpdate=v}});var classRemove;module.import('./utils/class_remove.js',{\"default\":function(v){classRemove=v}});var documentInsert;module.import('./utils/document_insert.js',{\"default\":function(v){documentInsert=v}});var documentUpdate;module.import('./utils/document_update.js',{\"default\":function(v){documentUpdate=v}});var documentRemove;module.import('./utils/document_remove.js',{\"default\":function(v){documentRemove=v}});var getModified;module.import('./utils/get_modified.js',{\"default\":function(v){getModified=v}});var getModifier;module.import('./utils/get_modifier.js',{\"default\":function(v){getModifier=v}});var hasMeteorMethod;module.import('./utils/has_meteor_method.js',{\"default\":function(v){hasMeteorMethod=v}});var isModified;module.import('./utils/is_modified.js',{\"default\":function(v){isModified=v}});var isRemote;module.import('./utils/is_remote.js',{\"default\":function(v){isRemote=v}});var omitUndefined;module.import('./utils/omit_undefined.js',{\"default\":function(v){omitUndefined=v}});var throwIfSelectorIsNotId;module.import('./utils/throw_if_selector_is_not_id.js',{\"default\":function(v){throwIfSelectorIsNotId=v}});var transformToClass;module.import('./utils/transform_to_class.js',{\"default\":function(v){transformToClass=v}});var triggerBeforeSave;module.import('./utils/trigger_before_save.js',{\"default\":function(v){triggerBeforeSave=v}});var triggerBeforeInsert;module.import('./utils/trigger_before_insert.js',{\"default\":function(v){triggerBeforeInsert=v}});var triggerBeforeUpdate;module.import('./utils/trigger_before_update.js',{\"default\":function(v){triggerBeforeUpdate=v}});var triggerBeforeRemove;module.import('./utils/trigger_before_remove.js',{\"default\":function(v){triggerBeforeRemove=v}});var triggerAfterSave;module.import('./utils/trigger_after_save.js',{\"default\":function(v){triggerAfterSave=v}});var triggerAfterInsert;module.import('./utils/trigger_after_insert.js',{\"default\":function(v){triggerAfterInsert=v}});var triggerAfterUpdate;module.import('./utils/trigger_after_update.js',{\"default\":function(v){triggerAfterUpdate=v}});var triggerAfterRemove;module.import('./utils/trigger_after_remove.js',{\"default\":function(v){triggerAfterRemove=v}});var onInitSchema;module.import('./hooks/init_schema.js',{\"default\":function(v){onInitSchema=v}});var onInitDefinition;module.import('./hooks/init_definition.js',{\"default\":function(v){onInitDefinition=v}});var onParseDefinition;module.import('./hooks/parse_definition.js',{\"default\":function(v){onParseDefinition=v}});var onMergeDefinitions;module.import('./hooks/merge_definitions.js',{\"default\":function(v){onMergeDefinitions=v}});var onApplyDefinition;module.import('./hooks/apply_definition.js',{\"default\":function(v){onApplyDefinition=v}});var onInitClass;module.import('./hooks/init_class.js',{\"default\":function(v){onInitClass=v}});\n// Utils.                                                                                                              //\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n                                                                                                                       // 10\n                                                                                                                       // 11\n                                                                                                                       // 12\n                                                                                                                       // 13\n                                                                                                                       // 14\n                                                                                                                       // 15\n                                                                                                                       // 16\n                                                                                                                       // 17\n                                                                                                                       // 18\n                                                                                                                       // 19\n                                                                                                                       // 20\n                                                                                                                       // 21\n                                                                                                                       // 22\n                                                                                                                       // 23\n                                                                                                                       // 24\n                                                                                                                       // 25\n                                                                                                                       // 26\n// Hooks.                                                                                                              //\n                                                                                                                       // 28\n                                                                                                                       // 29\n                                                                                                                       // 30\n                                                                                                                       // 31\n                                                                                                                       // 32\n                                                                                                                       // 33\n                                                                                                                       //\nModule.create({                                                                                                        // 35\n  name: 'storage',                                                                                                     // 36\n  onInitSchema: onInitSchema,                                                                                          // 37\n  onInitDefinition: onInitDefinition,                                                                                  // 38\n  onParseDefinition: onParseDefinition,                                                                                // 39\n  onMergeDefinitions: onMergeDefinitions,                                                                              // 40\n  onApplyDefinition: onApplyDefinition,                                                                                // 41\n  onInitClass: onInitClass,                                                                                            // 42\n  utils: {                                                                                                             // 43\n    applyModifier: applyModifier,                                                                                      // 44\n    callMeteorMethod: callMeteorMethod,                                                                                // 45\n    classInsert: classInsert,                                                                                          // 46\n    classUpdate: classUpdate,                                                                                          // 47\n    classRemove: classRemove,                                                                                          // 48\n    documentInsert: documentInsert,                                                                                    // 49\n    documentUpdate: documentUpdate,                                                                                    // 50\n    documentRemove: documentRemove,                                                                                    // 51\n    getModified: getModified,                                                                                          // 52\n    getModifier: getModifier,                                                                                          // 53\n    hasMeteorMethod: hasMeteorMethod,                                                                                  // 54\n    isModified: isModified,                                                                                            // 55\n    isRemote: isRemote,                                                                                                // 56\n    omitUndefined: omitUndefined,                                                                                      // 57\n    throwIfSelectorIsNotId: throwIfSelectorIsNotId,                                                                    // 58\n    transformToClass: transformToClass,                                                                                // 59\n    triggerBeforeSave: triggerBeforeSave,                                                                              // 60\n    triggerBeforeInsert: triggerBeforeInsert,                                                                          // 61\n    triggerBeforeUpdate: triggerBeforeUpdate,                                                                          // 62\n    triggerBeforeRemove: triggerBeforeRemove,                                                                          // 63\n    triggerAfterSave: triggerAfterSave,                                                                                // 64\n    triggerAfterInsert: triggerAfterInsert,                                                                            // 65\n    triggerAfterUpdate: triggerAfterUpdate,                                                                            // 66\n    triggerAfterRemove: triggerAfterRemove                                                                             // 67\n  }                                                                                                                    // 43\n});                                                                                                                    // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"class_events\":{\"after_init.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_events/after_init.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction afterInit(e) {                                                                                                // 1\n  var doc = e.currentTarget;                                                                                           // 2\n  var Class = doc.constructor;                                                                                         // 3\n                                                                                                                       //\n  var typeField = Class.getTypeField();                                                                                // 5\n  if (!doc[typeField]) {                                                                                               // 6\n    doc[typeField] = Class.getName();                                                                                  // 7\n  }                                                                                                                    // 8\n};                                                                                                                     // 9\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(afterInit));                                                                  // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"before_init.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_events/before_init.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction beforeInit(e) {                                                                                               // 1\n\tvar doc = e.currentTarget;                                                                                            // 2\n                                                                                                                       //\n\t// Create the \"_isNew\" property to indicate if a document had been                                                    //\n\t// stored in a database. A default value of this property is set                                                      //\n\t// to false. Astronomy can modify this property and it can not appear                                                 //\n\t// in the list of the object properties.                                                                              //\n\tif (Object.defineProperty) {                                                                                          // 8\n\t\tObject.defineProperty(doc, '_isNew', {                                                                               // 9\n\t\t\twritable: true,                                                                                                     // 10\n\t\t\tenumerable: false                                                                                                   // 11\n\t\t});                                                                                                                  // 9\n\t}                                                                                                                     // 13\n\tdoc._isNew = true;                                                                                                    // 14\n};                                                                                                                     // 15\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(beforeInit));                                                                 // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"from_json_value.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_events/from_json_value.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction fromJSONValue(e) {                                                                                            // 1\n\tvar doc = e.currentTarget;                                                                                            // 2\n\tdoc._isNew = e.json.isNew;                                                                                            // 3\n};                                                                                                                     // 4\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(fromJSONValue));                                                              // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"to_json_value.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_events/to_json_value.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction toJSONValue(e) {                                                                                              // 1\n\tvar doc = e.currentTarget;                                                                                            // 2\n\te.json.isNew = doc._isNew;                                                                                            // 3\n};                                                                                                                     // 4\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(toJSONValue));                                                                // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"class_prototype_methods\":{\"copy.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/copy.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction copy(save) {                                                                                                  // 1\n\tvar doc = this;                                                                                                       // 2\n\tsave = save || false;                                                                                                 // 3\n                                                                                                                       //\n\t// Use EJSON to clone object.                                                                                         //\n\tvar copy = EJSON.clone(doc);                                                                                          // 6\n                                                                                                                       //\n\t// Remove the \"_id\" value and set the \"_isNew\" flag to false so that it will                                          //\n\t// save the object as a new document instead updating the old one.                                                    //\n\tcopy._id = null;                                                                                                      // 10\n\tcopy._isNew = true;                                                                                                   // 11\n                                                                                                                       //\n\tif (save) {                                                                                                           // 13\n\t\tcopy.save();                                                                                                         // 14\n\t}                                                                                                                     // 15\n                                                                                                                       //\n\treturn copy;                                                                                                          // 17\n};                                                                                                                     // 18\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(copy));                                                                       // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"get_modified.js\":[\"../utils/get_modified.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/get_modified.js                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar utilGetModified;module.import('../utils/get_modified.js',{\"default\":function(v){utilGetModified=v}});              // 1\n                                                                                                                       //\nfunction getModified() {                                                                                               // 3\n\tvar doc = this;                                                                                                       // 4\n                                                                                                                       //\n\treturn utilGetModified({                                                                                              // 6\n\t\tdoc: doc,                                                                                                            // 7\n\t\ttransient: true                                                                                                      // 8\n\t});                                                                                                                   // 6\n};                                                                                                                     // 10\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getModified));                                                                // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_modified_values.js\":[\"lodash\",\"../utils/get_modified.js\",\"../../fields/utils/raw_one.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/get_modified_values.js                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var utilGetModified;module.import('../utils/get_modified.js',{\"default\":function(v){utilGetModified=v}});var rawOne;module.import('../../fields/utils/raw_one.js',{\"default\":function(v){rawOne=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction getModifiedValues() {                                                                                         // 5\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                               // 5\n  var _options$old = options.old;                                                                                      // 5\n  var old = _options$old === undefined ? false : _options$old;                                                         // 5\n  var _options$raw = options.raw;                                                                                      // 5\n  var raw = _options$raw === undefined ? false : _options$raw;                                                         // 5\n                                                                                                                       //\n                                                                                                                       //\n  var doc = this;                                                                                                      // 11\n  var Class = doc.constructor;                                                                                         // 12\n                                                                                                                       //\n  // Get list of modified fields.                                                                                      //\n  var modified = utilGetModified({                                                                                     // 15\n    doc: doc,                                                                                                          // 16\n    transient: true                                                                                                    // 17\n  });                                                                                                                  // 15\n                                                                                                                       //\n  // Get old or new values of a document.                                                                              //\n  if (old) {                                                                                                           // 21\n    doc = doc._isNew ? new Class() : Class.findOne(doc._id);                                                           // 22\n  }                                                                                                                    // 23\n                                                                                                                       //\n  // Collect values for each field.                                                                                    //\n  var values = {};                                                                                                     // 26\n  _.each(modified, function (name) {                                                                                   // 27\n    if (raw) {                                                                                                         // 28\n      values[name] = rawOne(doc, name);                                                                                // 29\n    } else {                                                                                                           // 30\n      values[name] = doc.get(name);                                                                                    // 32\n    }                                                                                                                  // 33\n  });                                                                                                                  // 34\n                                                                                                                       //\n  return values;                                                                                                       // 36\n};                                                                                                                     // 37\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getModifiedValues));                                                          // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_modifier.js\":[\"../utils/get_modifier.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/get_modifier.js                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar utilGetModifier;module.import('../utils/get_modifier.js',{\"default\":function(v){utilGetModifier=v}});              // 1\n                                                                                                                       //\nfunction getModifier() {                                                                                               // 3\n\tvar doc = this;                                                                                                       // 4\n                                                                                                                       //\n\treturn utilGetModifier({                                                                                              // 6\n\t\tdoc: doc                                                                                                             // 7\n\t});                                                                                                                   // 6\n};                                                                                                                     // 9\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getModifier));                                                                // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"is_modified.js\":[\"../utils/is_modified.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/is_modified.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar utilIsModified;module.import('../utils/is_modified.js',{\"default\":function(v){utilIsModified=v}});                 // 1\n                                                                                                                       //\nfunction isModified(pattern) {                                                                                         // 3\n\tvar doc = this;                                                                                                       // 4\n                                                                                                                       //\n\treturn utilIsModified({                                                                                               // 6\n\t\tdoc: doc,                                                                                                            // 7\n\t\tpattern: pattern,                                                                                                    // 8\n\t\ttransient: true                                                                                                      // 9\n\t});                                                                                                                   // 6\n};                                                                                                                     // 11\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(isModified));                                                                 // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"reload.js\":[\"lodash\",\"../../fields/utils/set_defaults.js\",\"../../fields/utils/cast_nested.js\",\"../../events/event.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/reload.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var setDefaults;module.import('../../fields/utils/set_defaults.js',{\"default\":function(v){setDefaults=v}});var castNested;module.import('../../fields/utils/cast_nested.js',{\"default\":function(v){castNested=v}});var Event;module.import('../../events/event.js',{\"default\":function(v){Event=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       //\nfunction reload() {                                                                                                    // 6\n\t\tvar doc = this;                                                                                                      // 7\n\t\tvar Class = doc.constructor;                                                                                         // 8\n                                                                                                                       //\n\t\t// The document has to be already saved in the collection.                                                           //\n\t\tif (!doc._isNew) {                                                                                                   // 11\n\t\t\t\t(function () {                                                                                                     // 11\n\t\t\t\t\t\t// Get a document from the collection without transformation.                                                    //\n\t\t\t\t\t\tvar rawDoc = Class.findOne(doc._id, {                                                                            // 13\n\t\t\t\t\t\t\t\ttransform: null                                                                                                // 14\n\t\t\t\t\t\t});                                                                                                              // 13\n                                                                                                                       //\n\t\t\t\t\t\t// Trigger the \"beforeInit\" event handlers.                                                                      //\n\t\t\t\t\t\tdoc.dispatchEvent(new Event('beforeInit'));                                                                      // 18\n                                                                                                                       //\n\t\t\t\t\t\t// Set all fields.                                                                                               //\n\t\t\t\t\t\tvar fields = Class.getFields();                                                                                  // 21\n\t\t\t\t\t\t_.each(fields, function (field) {                                                                                // 22\n\t\t\t\t\t\t\t\tdoc[field.name] = field.resolveValue(rawDoc);                                                                  // 23\n\t\t\t\t\t\t});                                                                                                              // 24\n                                                                                                                       //\n\t\t\t\t\t\t// Set default values if the \"defaults\" option is set.                                                           //\n\t\t\t\t\t\tsetDefaults({                                                                                                    // 27\n\t\t\t\t\t\t\t\tdoc: doc                                                                                                       // 28\n\t\t\t\t\t\t});                                                                                                              // 27\n\t\t\t\t\t\t// Cast nested documents.                                                                                        //\n\t\t\t\t\t\tcastNested({                                                                                                     // 31\n\t\t\t\t\t\t\t\tdoc: doc                                                                                                       // 32\n\t\t\t\t\t\t});                                                                                                              // 31\n                                                                                                                       //\n\t\t\t\t\t\t// Trigger the \"afterInit\" event handlers.                                                                       //\n\t\t\t\t\t\tdoc.dispatchEvent(new Event('afterInit'));                                                                       // 36\n                                                                                                                       //\n\t\t\t\t\t\t// Mark the document as not new.                                                                                 //\n\t\t\t\t\t\tdoc._isNew = false;                                                                                              // 39\n\t\t\t\t})();                                                                                                              // 11\n\t\t}                                                                                                                    // 40\n};                                                                                                                     // 41\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(reload));                                                                     // 43\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"remove.js\":[\"../utils/document_remove.js\",\"../utils/is_remote.js\",\"../utils/call_meteor_method.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/remove.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar documentRemove;module.import('../utils/document_remove.js',{\"default\":function(v){documentRemove=v}});var isRemote;module.import('../utils/is_remote.js',{\"default\":function(v){isRemote=v}});var callMeteorMethod;module.import('../utils/call_meteor_method.js',{\"default\":function(v){callMeteorMethod=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction remove() {                                                                                                    // 5\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 5\n  var callback = arguments[1];                                                                                         // 5\n                                                                                                                       //\n  var doc = this;                                                                                                      // 6\n  var Class = doc.constructor;                                                                                         // 7\n                                                                                                                       //\n  // If the first argument is callback function then reassign values.                                                  //\n  if (arguments.length === 1 && Match.test(args, Function)) {                                                          // 10\n    callback = args;                                                                                                   // 11\n    args = {};                                                                                                         // 12\n  }                                                                                                                    // 13\n  // Get variables from the first argument.                                                                            //\n  var _args = args;                                                                                                    // 5\n  var _args$simulation = _args.simulation;                                                                             // 5\n  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 5\n                                                                                                                       //\n  // If we are dealing with a remote collection and we are not on the server.                                          //\n                                                                                                                       //\n  if (isRemote(Class)) {                                                                                               // 20\n    // Prepare meteor method name to be called.                                                                        //\n    var methodName = '/Astronomy/remove';                                                                              // 22\n    // Prepare arguments for the meteor method.                                                                        //\n    var methodArgs = {                                                                                                 // 24\n      className: Class.getName(),                                                                                      // 25\n      selector: {                                                                                                      // 26\n        _id: doc._id                                                                                                   // 27\n      },                                                                                                               // 26\n      simulation: simulation                                                                                           // 29\n    };                                                                                                                 // 24\n                                                                                                                       //\n    try {                                                                                                              // 32\n      // Run meteor method.                                                                                            //\n      var result = callMeteorMethod(Class, methodName, [methodArgs], callback);                                        // 34\n      // Change the \"_isNew\" flag to \"true\". After removing a document can be                                          //\n      // saved again as a new one.                                                                                     //\n      doc._isNew = true;                                                                                               // 39\n      // Return result of the meteor method call.                                                                      //\n      return result;                                                                                                   // 41\n    }                                                                                                                  // 42\n    // Catch stub exceptions.                                                                                          //\n    catch (err) {                                                                                                      // 44\n      if (callback) {                                                                                                  // 45\n        callback(err);                                                                                                 // 46\n        return null;                                                                                                   // 47\n      }                                                                                                                // 48\n      throw err;                                                                                                       // 49\n    }                                                                                                                  // 50\n  }                                                                                                                    // 51\n                                                                                                                       //\n  // If we can just remove a document without calling the meteor method. We may                                        //\n  // be on the server or the collection may be local.                                                                  //\n  try {                                                                                                                // 55\n    // Prepare arguments.                                                                                              //\n    var _methodArgs = {                                                                                                // 57\n      doc: doc,                                                                                                        // 58\n      simulation: simulation,                                                                                          // 59\n      trusted: true                                                                                                    // 60\n    };                                                                                                                 // 57\n    var _result = documentRemove(_methodArgs);                                                                         // 62\n    if (callback) {                                                                                                    // 63\n      callback(undefined, _result);                                                                                    // 64\n    }                                                                                                                  // 65\n    return _result;                                                                                                    // 66\n  } catch (err) {                                                                                                      // 67\n    if (callback) {                                                                                                    // 69\n      callback(err);                                                                                                   // 70\n      return null;                                                                                                     // 71\n    }                                                                                                                  // 72\n    throw err;                                                                                                         // 73\n  }                                                                                                                    // 74\n}                                                                                                                      // 75\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(remove));                                                                     // 77\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"save.js\":[\"lodash\",\"meteor/ddp\",\"../utils/document_insert.js\",\"../utils/document_update.js\",\"../utils/is_remote.js\",\"../utils/call_meteor_method.js\",\"../../fields/utils/raw_all.js\",\"../../fields/utils/cast_nested.js\",\"../../storage/utils/get_modifier.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/save.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var DDP;module.import('meteor/ddp',{\"DDP\":function(v){DDP=v}});var documentInsert;module.import('../utils/document_insert.js',{\"default\":function(v){documentInsert=v}});var documentUpdate;module.import('../utils/document_update.js',{\"default\":function(v){documentUpdate=v}});var isRemote;module.import('../utils/is_remote.js',{\"default\":function(v){isRemote=v}});var callMeteorMethod;module.import('../utils/call_meteor_method.js',{\"default\":function(v){callMeteorMethod=v}});var rawAll;module.import('../../fields/utils/raw_all.js',{\"default\":function(v){rawAll=v}});var castNested;module.import('../../fields/utils/cast_nested.js',{\"default\":function(v){castNested=v}});var getModifier;module.import('../../storage/utils/get_modifier.js',{\"default\":function(v){getModifier=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n                                                                                                                       //\nfunction save() {                                                                                                      // 11\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 11\n  var callback = arguments[1];                                                                                         // 11\n                                                                                                                       //\n  var doc = this;                                                                                                      // 12\n  var Class = doc.constructor;                                                                                         // 13\n  var Collection = Class.getCollection();                                                                              // 14\n                                                                                                                       //\n  // If the first argument is callback function then reassign values.                                                  //\n  if (arguments.length === 1 && Match.test(args, Function)) {                                                          // 17\n    callback = args;                                                                                                   // 18\n    args = {};                                                                                                         // 19\n  }                                                                                                                    // 20\n  // Get variables from the first argument.                                                                            //\n  var _args = args;                                                                                                    // 11\n  var stopOnFirstError = _args.stopOnFirstError;                                                                       // 11\n  var simulation = _args.simulation;                                                                                   // 11\n  var fields = _args.fields;                                                                                           // 11\n                                                                                                                       //\n  // Cast nested documents.                                                                                            //\n                                                                                                                       //\n  castNested({                                                                                                         // 29\n    doc: doc                                                                                                           // 30\n  });                                                                                                                  // 29\n                                                                                                                       //\n  // Detect which operation we are executing.                                                                          //\n  var inserting = doc._isNew;                                                                                          // 34\n                                                                                                                       //\n  // Generate ID if not provided.                                                                                      //\n  if (inserting && !doc._id) {                                                                                         // 37\n    var generateId = true;                                                                                             // 38\n    // Don't generate the id if we're the client and the 'outermost' call.                                             //\n    // This optimization saves us passing both the randomSeed and the id.                                              //\n    // Passing both is redundant.                                                                                      //\n    if (Collection._isRemoteCollection()) {                                                                            // 42\n      var enclosing = DDP._CurrentInvocation.get();                                                                    // 43\n      if (!enclosing) {                                                                                                // 44\n        generateId = false;                                                                                            // 45\n      }                                                                                                                // 46\n    }                                                                                                                  // 47\n    if (generateId) {                                                                                                  // 48\n      doc._id = Collection._makeNewID();                                                                               // 49\n    }                                                                                                                  // 50\n  }                                                                                                                    // 51\n                                                                                                                       //\n  // If we are dealing with a remote collection and we are not on the server.                                          //\n  if (isRemote(Class)) {                                                                                               // 54\n    // Prepare meteor method name to be called.                                                                        //\n    var methodName = '/Astronomy/' + (inserting ? 'insert' : 'update');                                                // 56\n    // Prepare arguments for meteor method.                                                                            //\n    var methodArgs = {                                                                                                 // 58\n      className: Class.getName(),                                                                                      // 59\n      stopOnFirstError: stopOnFirstError,                                                                              // 60\n      simulation: simulation                                                                                           // 61\n    };                                                                                                                 // 58\n    // Inserting.                                                                                                      //\n    if (inserting) {                                                                                                   // 64\n      _.extend(methodArgs, {                                                                                           // 65\n        rawDoc: rawAll(doc, {                                                                                          // 66\n          transient: false                                                                                             // 67\n        })                                                                                                             // 66\n      });                                                                                                              // 65\n    }                                                                                                                  // 70\n    // Updating.                                                                                                       //\n    else {                                                                                                             // 64\n        _.extend(methodArgs, {                                                                                         // 73\n          selector: {                                                                                                  // 74\n            _id: doc._id                                                                                               // 75\n          },                                                                                                           // 74\n          modifier: getModifier({                                                                                      // 77\n            doc: doc                                                                                                   // 78\n          }),                                                                                                          // 77\n          options: {},                                                                                                 // 80\n          fields: fields                                                                                               // 81\n        });                                                                                                            // 73\n      }                                                                                                                // 83\n                                                                                                                       //\n    try {                                                                                                              // 85\n      // Run Meteor method.                                                                                            //\n      var result = callMeteorMethod(Class, methodName, [methodArgs], callback);                                        // 87\n      if (result && inserting) {                                                                                       // 90\n        // In the insert operation the value return from the meteor method is                                          //\n        // a document ID.                                                                                              //\n        doc._id = result;                                                                                              // 93\n      }                                                                                                                // 94\n      // A document is not new anymore.                                                                                //\n      doc._isNew = false;                                                                                              // 96\n      return result;                                                                                                   // 97\n    }                                                                                                                  // 98\n    // Catch stub exceptions.                                                                                          //\n    catch (err) {                                                                                                      // 100\n      if (callback) {                                                                                                  // 101\n        callback(err);                                                                                                 // 102\n        return null;                                                                                                   // 103\n      }                                                                                                                // 104\n      throw err;                                                                                                       // 105\n    }                                                                                                                  // 106\n  }                                                                                                                    // 107\n                                                                                                                       //\n  // If we can just insert a document without calling the meteor method. We may                                        //\n  // be on the server or the collection may be local.                                                                  //\n  try {                                                                                                                // 111\n    // Prepare arguments.                                                                                              //\n    var _methodArgs = {                                                                                                // 113\n      doc: doc,                                                                                                        // 114\n      stopOnFirstError: stopOnFirstError,                                                                              // 115\n      simulation: simulation,                                                                                          // 116\n      trusted: true                                                                                                    // 117\n    };                                                                                                                 // 113\n    if (inserting) {                                                                                                   // 119\n      var _result = documentInsert(_methodArgs);                                                                       // 120\n      if (callback) {                                                                                                  // 121\n        callback(undefined, _result);                                                                                  // 122\n      }                                                                                                                // 123\n      return _result;                                                                                                  // 124\n    } else {                                                                                                           // 125\n      _methodArgs.fields = fields;                                                                                     // 127\n      var _result2 = documentUpdate(_methodArgs);                                                                      // 128\n      if (callback) {                                                                                                  // 129\n        callback(undefined, _result2);                                                                                 // 130\n      }                                                                                                                // 131\n      return _result2;                                                                                                 // 132\n    }                                                                                                                  // 133\n  } catch (err) {                                                                                                      // 134\n    if (callback) {                                                                                                    // 136\n      callback(err);                                                                                                   // 137\n      return null;                                                                                                     // 138\n    }                                                                                                                  // 139\n    throw err;                                                                                                         // 140\n  }                                                                                                                    // 141\n}                                                                                                                      // 142\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(save));                                                                       // 144\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"class_static_methods\":{\"find.js\":[\"lodash\",\"../utils/transform_to_class.js\",\"../../events/event.js\",\"meteor/mongo\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_static_methods/find.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({find:function(){return find},findOne:function(){return findOne}});var _;module.import('lodash',{\"default\":function(v){_=v}});var transformToClass;module.import('../utils/transform_to_class.js',{\"default\":function(v){transformToClass=v}});var Event;module.import('../../events/event.js',{\"default\":function(v){Event=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       //\nfunction createMethod(methodName) {                                                                                    // 6\n  return function (selector, options) {                                                                                // 7\n    var Class = this;                                                                                                  // 8\n    var Collection = Class.getCollection();                                                                            // 9\n                                                                                                                       //\n    // Get selector from arguments.                                                                                    //\n    if (arguments.length === 0) {                                                                                      // 12\n      selector = {};                                                                                                   // 13\n    } else {                                                                                                           // 14\n      selector = arguments[0];                                                                                         // 16\n    }                                                                                                                  // 17\n    // If selector is null then just proceed to collection's find method.                                              //\n    if (_.isNull(selector)) {                                                                                          // 19\n      return Collection[methodName](selector, options);                                                                // 20\n    }                                                                                                                  // 21\n    // Rewrite selector to make it an object.                                                                          //\n    selector = Mongo.Collection._rewriteSelector(selector);                                                            // 23\n                                                                                                                       //\n    // Set default options.                                                                                            //\n    options = _.defaults({}, options, {                                                                                // 26\n      defaults: true,                                                                                                  // 27\n      children: true                                                                                                   // 28\n    });                                                                                                                // 26\n    // We don't want to clone raw object in the \"find\" method.                                                         //\n    options.clone = false;                                                                                             // 31\n                                                                                                                       //\n    // Modify selector and options using the \"beforeFind\" event handlers.                                              //\n    if (!options.disableEvents) {                                                                                      // 34\n      Class.dispatchEvent(new Event('beforeFind', {                                                                    // 35\n        selector: selector,                                                                                            // 36\n        options: options                                                                                               // 37\n      }));                                                                                                             // 35\n    }                                                                                                                  // 39\n                                                                                                                       //\n    // If it's an inherited class, then get only documents being instances of                                          //\n    // the subclass.                                                                                                   //\n    var typeField = Class.getTypeField();                                                                              // 43\n    if (typeField) {                                                                                                   // 44\n      // If a class has child classes then we have to fetch document being                                             //\n      // instances of the parent and child classes depending on a value of                                             //\n      // the \"children\" option.                                                                                        //\n      var children = Class.getChildren();                                                                              // 48\n      if (options.children === true && children.length > 0) {                                                          // 49\n        selector[typeField] = {                                                                                        // 50\n          $in: _(children).map(function (Child) {                                                                      // 51\n            return Child.getName();                                                                                    // 52\n          }).concat(Class.getName()).value()                                                                           // 53\n        };                                                                                                             // 50\n      } else {                                                                                                         // 55\n        selector[typeField] = Class.getName();                                                                         // 57\n      }                                                                                                                // 58\n    }                                                                                                                  // 59\n                                                                                                                       //\n    // Get custom transform function from the class schema.                                                            //\n    if (options.transform === undefined) {                                                                             // 62\n      options.transform = Class.getTransform(options);                                                                 // 63\n    }                                                                                                                  // 64\n    // Get default transform function if none is provided.                                                             //\n    if (options.transform === undefined) {                                                                             // 66\n      options.transform = transformToClass(Class.getName(), {                                                          // 67\n        defaults: options.defaults                                                                                     // 68\n      });                                                                                                              // 67\n    }                                                                                                                  // 70\n                                                                                                                       //\n    // Execute the original method.                                                                                    //\n    var result = Collection[methodName](selector, options);                                                            // 73\n                                                                                                                       //\n    // Modify a query result using the \"afterFind\" event handlers.                                                     //\n    if (!options.disableEvents) {                                                                                      // 76\n      Class.dispatchEvent(new Event('afterFind', {                                                                     // 77\n        selector: selector,                                                                                            // 78\n        options: options,                                                                                              // 79\n        result: result                                                                                                 // 80\n      }));                                                                                                             // 77\n    }                                                                                                                  // 82\n                                                                                                                       //\n    return result;                                                                                                     // 84\n  };                                                                                                                   // 85\n}                                                                                                                      // 86\n                                                                                                                       //\nvar find = createMethod('find');                                                                                       // 88\nvar findOne = createMethod('findOne');                                                                                 // 89\n                                                                                                                       //\n                                                                                                                       // 91\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_collection.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_static_methods/get_collection.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction getCollection() {                                                                                             // 1\n\treturn this.schema.collection;                                                                                        // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getCollection));                                                              // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"get_transform.js\":[\"../../../core/class.js\",\"../../fields/utils/set_defaults.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_static_methods/get_transform.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Class;module.import('../../../core/class.js',{\"default\":function(v){Class=v}});var setDefaults;module.import('../../fields/utils/set_defaults.js',{\"default\":function(v){setDefaults=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nfunction getTransform(options) {                                                                                       // 4\n  return this.schema.transform;                                                                                        // 5\n};                                                                                                                     // 6\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getTransform));                                                               // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_type_field.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_static_methods/get_type_field.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction getTypeField() {                                                                                              // 1\n\treturn this.schema.typeField;                                                                                         // 2\n};                                                                                                                     // 3\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getTypeField));                                                               // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"insert.js\":[\"../utils/is_remote.js\",\"../utils/call_meteor_method.js\",\"../utils/class_insert.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_static_methods/insert.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar isRemote;module.import('../utils/is_remote.js',{\"default\":function(v){isRemote=v}});var callMeteorMethod;module.import('../utils/call_meteor_method.js',{\"default\":function(v){callMeteorMethod=v}});var classInsert;module.import('../utils/class_insert.js',{\"default\":function(v){classInsert=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction insert(rawDoc, callback) {                                                                                    // 5\n  var Class = this;                                                                                                    // 6\n  var Collection = Class.getCollection();                                                                              // 7\n                                                                                                                       //\n  // Prepare arguments.                                                                                                //\n  var args = {                                                                                                         // 10\n    className: Class.getName(),                                                                                        // 11\n    rawDoc: rawDoc                                                                                                     // 12\n  };                                                                                                                   // 10\n                                                                                                                       //\n  // Generate ID if not provided.                                                                                      //\n  if (!rawDoc._id) {                                                                                                   // 16\n    var generateId = true;                                                                                             // 17\n    // Don't generate the id if we're the client and the 'outermost' call.                                             //\n    // This optimization saves us passing both the randomSeed and the id.                                              //\n    // Passing both is redundant.                                                                                      //\n    if (Collection._isRemoteCollection()) {                                                                            // 21\n      var enclosing = DDP._CurrentInvocation.get();                                                                    // 22\n      if (!enclosing) {                                                                                                // 23\n        generateId = false;                                                                                            // 24\n      }                                                                                                                // 25\n    }                                                                                                                  // 26\n    if (generateId) {                                                                                                  // 27\n      rawDoc._id = Collection._makeNewID();                                                                            // 28\n    }                                                                                                                  // 29\n  }                                                                                                                    // 30\n                                                                                                                       //\n  // If we are dealing with a remote collection and we are not on the server.                                          //\n  if (isRemote(Class)) {                                                                                               // 33\n    // Prepare meteor method name to be called.                                                                        //\n    var methodName = '/Astronomy/insert';                                                                              // 35\n                                                                                                                       //\n    try {                                                                                                              // 37\n      // Run Meteor method.                                                                                            //\n      return callMeteorMethod(Class, methodName, [args], callback);                                                    // 39\n    }                                                                                                                  // 42\n    // Catch stub exceptions.                                                                                          //\n    catch (err) {                                                                                                      // 44\n      if (callback) {                                                                                                  // 45\n        callback(err);                                                                                                 // 46\n        return null;                                                                                                   // 47\n      }                                                                                                                // 48\n      throw err;                                                                                                       // 49\n    }                                                                                                                  // 50\n  }                                                                                                                    // 51\n                                                                                                                       //\n  // If we can just insert a document without calling the meteor method. We may                                        //\n  // be on the server or the collection may be local.                                                                  //\n  try {                                                                                                                // 55\n    // Set the \"trusted\" argument to true.                                                                             //\n    args.trusted = true;                                                                                               // 57\n    // Insert a document.                                                                                              //\n    var result = classInsert(args);                                                                                    // 59\n    if (callback) {                                                                                                    // 60\n      callback(undefined, result);                                                                                     // 61\n    }                                                                                                                  // 62\n    return result;                                                                                                     // 63\n  } catch (err) {                                                                                                      // 64\n    if (callback) {                                                                                                    // 66\n      callback(err);                                                                                                   // 67\n      return null;                                                                                                     // 68\n    }                                                                                                                  // 69\n    throw err;                                                                                                         // 70\n  }                                                                                                                    // 71\n}                                                                                                                      // 72\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(insert));                                                                     // 74\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"is_secured.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_static_methods/is_secured.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction isSecured(operation) {                                                                                        // 3\n  if (_.has(this.schema.secured, operation)) {                                                                         // 4\n    return this.schema.secured[operation];                                                                             // 5\n  } else {                                                                                                             // 6\n    var common = this.schema.secured.common;                                                                           // 8\n    return common !== undefined ? common : true;                                                                       // 9\n  }                                                                                                                    // 10\n};                                                                                                                     // 11\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(isSecured));                                                                  // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"remove.js\":[\"../utils/is_remote.js\",\"../utils/call_meteor_method.js\",\"../utils/class_remove.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_static_methods/remove.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar isRemote;module.import('../utils/is_remote.js',{\"default\":function(v){isRemote=v}});var callMeteorMethod;module.import('../utils/call_meteor_method.js',{\"default\":function(v){callMeteorMethod=v}});var classRemove;module.import('../utils/class_remove.js',{\"default\":function(v){classRemove=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction remove(selector, options, callback) {                                                                         // 5\n  var Class = this;                                                                                                    // 6\n                                                                                                                       //\n  // If we omit options argument then it may be a callback function.                                                   //\n  if (options instanceof Function) {                                                                                   // 9\n    callback = options;                                                                                                // 10\n    options = {};                                                                                                      // 11\n  }                                                                                                                    // 12\n  // Make sure that options is at least an empty object.                                                               //\n  options = options || {};                                                                                             // 14\n  // Prepare arguments.                                                                                                //\n  var args = {                                                                                                         // 16\n    className: Class.getName(),                                                                                        // 17\n    selector: selector,                                                                                                // 18\n    options: options                                                                                                   // 19\n  };                                                                                                                   // 16\n                                                                                                                       //\n  // If we are dealing with a remote collection and we are not on the server.                                          //\n  if (isRemote(Class)) {                                                                                               // 23\n    // Prepare meteor method name to be called.                                                                        //\n    var methodName = '/Astronomy/remove';                                                                              // 25\n                                                                                                                       //\n    try {                                                                                                              // 27\n      // Run Meteor method.                                                                                            //\n      return callMeteorMethod(Class, methodName, [args], callback);                                                    // 29\n    }                                                                                                                  // 32\n    // Catch stub exceptions.                                                                                          //\n    catch (err) {                                                                                                      // 34\n      if (callback) {                                                                                                  // 35\n        callback(err);                                                                                                 // 36\n        return null;                                                                                                   // 37\n      }                                                                                                                // 38\n      throw err;                                                                                                       // 39\n    }                                                                                                                  // 40\n  }                                                                                                                    // 41\n                                                                                                                       //\n  // If we can just remove a document without calling the meteor method. We may                                        //\n  // be on the server or the collection may be local.                                                                  //\n  try {                                                                                                                // 45\n    // Set the \"trusted\" argument to true.                                                                             //\n    args.trusted = true;                                                                                               // 47\n    // Remove a document.                                                                                              //\n    var result = classRemove(args);                                                                                    // 49\n    if (callback) {                                                                                                    // 50\n      callback(undefined, result);                                                                                     // 51\n    }                                                                                                                  // 52\n    return result;                                                                                                     // 53\n  } catch (err) {                                                                                                      // 54\n    if (callback) {                                                                                                    // 56\n      callback(err);                                                                                                   // 57\n      return null;                                                                                                     // 58\n    }                                                                                                                  // 59\n    throw err;                                                                                                         // 60\n  }                                                                                                                    // 61\n}                                                                                                                      // 62\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(remove));                                                                     // 64\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"update.js\":[\"../utils/is_remote.js\",\"../utils/call_meteor_method.js\",\"../utils/class_update.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_static_methods/update.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar isRemote;module.import('../utils/is_remote.js',{\"default\":function(v){isRemote=v}});var callMeteorMethod;module.import('../utils/call_meteor_method.js',{\"default\":function(v){callMeteorMethod=v}});var classUpdate;module.import('../utils/class_update.js',{\"default\":function(v){classUpdate=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction update(selector, modifier, options, callback) {                                                               // 5\n  var Class = this;                                                                                                    // 6\n                                                                                                                       //\n  // If we omit options argument then it may be a callback function.                                                   //\n  if (options instanceof Function) {                                                                                   // 9\n    callback = options;                                                                                                // 10\n    options = {};                                                                                                      // 11\n  }                                                                                                                    // 12\n  // Make sure that options is at least an empty object.                                                               //\n  options = options || {};                                                                                             // 14\n  // Prepare arguments.                                                                                                //\n  var args = {                                                                                                         // 16\n    className: Class.getName(),                                                                                        // 17\n    selector: selector,                                                                                                // 18\n    modifier: modifier,                                                                                                // 19\n    options: options                                                                                                   // 20\n  };                                                                                                                   // 16\n                                                                                                                       //\n  // If we are dealing with a remote collection and we are not on the server.                                          //\n  if (isRemote(Class)) {                                                                                               // 24\n    // Prepare meteor method name to be called.                                                                        //\n    var methodName = '/Astronomy/update';                                                                              // 26\n                                                                                                                       //\n    try {                                                                                                              // 28\n      // Run Meteor method.                                                                                            //\n      return callMeteorMethod(Class, methodName, [args], callback);                                                    // 30\n    }                                                                                                                  // 33\n    // Catch stub exceptions.                                                                                          //\n    catch (err) {                                                                                                      // 35\n      if (callback) {                                                                                                  // 36\n        callback(err);                                                                                                 // 37\n        return null;                                                                                                   // 38\n      }                                                                                                                // 39\n      throw err;                                                                                                       // 40\n    }                                                                                                                  // 41\n  }                                                                                                                    // 42\n                                                                                                                       //\n  // If we can just remove a document without calling the meteor method. We may                                        //\n  // be on the server or the collection may be local.                                                                  //\n  try {                                                                                                                // 46\n    // Set the \"trusted\" argument to true.                                                                             //\n    args.trusted = true;                                                                                               // 48\n    // Remove a document.                                                                                              //\n    var result = classUpdate(args);                                                                                    // 50\n    if (callback) {                                                                                                    // 51\n      callback(undefined, result);                                                                                     // 52\n    }                                                                                                                  // 53\n    return result;                                                                                                     // 54\n  } catch (err) {                                                                                                      // 55\n    if (callback) {                                                                                                    // 57\n      callback(err);                                                                                                   // 58\n      return null;                                                                                                     // 59\n    }                                                                                                                  // 60\n    throw err;                                                                                                         // 61\n  }                                                                                                                    // 62\n}                                                                                                                      // 63\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(update));                                                                     // 65\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"upsert.js\":[\"../utils/is_remote.js\",\"../utils/call_meteor_method.js\",\"../utils/class_upsert.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/class_static_methods/upsert.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar isRemote;module.import('../utils/is_remote.js',{\"default\":function(v){isRemote=v}});var callMeteorMethod;module.import('../utils/call_meteor_method.js',{\"default\":function(v){callMeteorMethod=v}});var classUpsert;module.import('../utils/class_upsert.js',{\"default\":function(v){classUpsert=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction upsert(selector, modifier, options, callback) {                                                               // 5\n  var Class = this;                                                                                                    // 6\n                                                                                                                       //\n  // If we omit options argument then it may be a callback function.                                                   //\n  if (options instanceof Function) {                                                                                   // 9\n    callback = options;                                                                                                // 10\n    options = {};                                                                                                      // 11\n  }                                                                                                                    // 12\n  // Make sure that options is at least an empty object.                                                               //\n  options = options || {};                                                                                             // 14\n  // Prepare arguments.                                                                                                //\n  var args = {                                                                                                         // 16\n    className: Class.getName(),                                                                                        // 17\n    selector: selector,                                                                                                // 18\n    modifier: modifier,                                                                                                // 19\n    options: options                                                                                                   // 20\n  };                                                                                                                   // 16\n                                                                                                                       //\n  // If we are dealing with a remote collection and we are not on the server.                                          //\n  if (isRemote(Class)) {                                                                                               // 24\n    // Prepare meteor method name to be called.                                                                        //\n    var methodName = '/Astronomy/upsert';                                                                              // 26\n                                                                                                                       //\n    try {                                                                                                              // 28\n      // Run Meteor method.                                                                                            //\n      return callMeteorMethod(Class, methodName, [args], callback);                                                    // 30\n    }                                                                                                                  // 33\n    // Catch stub exceptions.                                                                                          //\n    catch (err) {                                                                                                      // 35\n      if (callback) {                                                                                                  // 36\n        callback(err);                                                                                                 // 37\n        return null;                                                                                                   // 38\n      }                                                                                                                // 39\n      throw err;                                                                                                       // 40\n    }                                                                                                                  // 41\n  }                                                                                                                    // 42\n                                                                                                                       //\n  // If we can just remove a document without calling the meteor method. We may                                        //\n  // be on the server or the collection may be local.                                                                  //\n  try {                                                                                                                // 46\n    // Set the \"trusted\" argument to true.                                                                             //\n    args.trusted = true;                                                                                               // 48\n    // Remove a document.                                                                                              //\n    var result = classUpsert(args);                                                                                    // 50\n    if (callback) {                                                                                                    // 51\n      callback(undefined, result);                                                                                     // 52\n    }                                                                                                                  // 53\n    return result;                                                                                                     // 54\n  } catch (err) {                                                                                                      // 55\n    if (callback) {                                                                                                    // 57\n      callback(err);                                                                                                   // 58\n      return null;                                                                                                     // 59\n    }                                                                                                                  // 60\n    throw err;                                                                                                         // 61\n  }                                                                                                                    // 62\n}                                                                                                                      // 63\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(upsert));                                                                     // 65\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"hooks\":{\"apply_definition.js\":[\"lodash\",\"../../fields/utils/resolve_values.js\",\"../utils/has_meteor_method.js\",\"../class_static_methods/find.js\",\"../class_static_methods/insert.js\",\"../class_static_methods/update.js\",\"../class_static_methods/upsert.js\",\"../class_static_methods/remove.js\",\"../class_prototype_methods/save.js\",\"../class_prototype_methods/remove.js\",\"../class_prototype_methods/reload.js\",\"../class_prototype_methods/copy.js\",\"../class_prototype_methods/get_modifier.js\",\"../class_prototype_methods/get_modified.js\",\"../class_prototype_methods/get_modified_values.js\",\"../class_prototype_methods/is_modified.js\",\"../meteor_methods/insert.js\",\"../meteor_methods/update.js\",\"../meteor_methods/upsert.js\",\"../meteor_methods/remove.js\",\"../class_events/before_init.js\",\"../class_events/after_init.js\",\"../class_events/from_json_value.js\",\"../class_events/to_json_value.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/hooks/apply_definition.js                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var resolveValues;module.import('../../fields/utils/resolve_values.js',{\"default\":function(v){resolveValues=v}});var hasMeteorMethod;module.import('../utils/has_meteor_method.js',{\"default\":function(v){hasMeteorMethod=v}});var find,findOne;module.import('../class_static_methods/find.js',{\"find\":function(v){find=v},\"findOne\":function(v){findOne=v}});var insert;module.import('../class_static_methods/insert.js',{\"default\":function(v){insert=v}});var update;module.import('../class_static_methods/update.js',{\"default\":function(v){update=v}});var upsert;module.import('../class_static_methods/upsert.js',{\"default\":function(v){upsert=v}});var remove;module.import('../class_static_methods/remove.js',{\"default\":function(v){remove=v}});var protoSave;module.import('../class_prototype_methods/save.js',{\"default\":function(v){protoSave=v}});var protoRemove;module.import('../class_prototype_methods/remove.js',{\"default\":function(v){protoRemove=v}});var protoReload;module.import('../class_prototype_methods/reload.js',{\"default\":function(v){protoReload=v}});var protoCopy;module.import('../class_prototype_methods/copy.js',{\"default\":function(v){protoCopy=v}});var protoGetModifier;module.import('../class_prototype_methods/get_modifier.js',{\"default\":function(v){protoGetModifier=v}});var protoGetModified;module.import('../class_prototype_methods/get_modified.js',{\"default\":function(v){protoGetModified=v}});var protoGetModifiedValues;module.import('../class_prototype_methods/get_modified_values.js',{\"default\":function(v){protoGetModifiedValues=v}});var protoIsModified;module.import('../class_prototype_methods/is_modified.js',{\"default\":function(v){protoIsModified=v}});var meteorInsert;module.import('../meteor_methods/insert.js',{\"default\":function(v){meteorInsert=v}});var meteorUpdate;module.import('../meteor_methods/update.js',{\"default\":function(v){meteorUpdate=v}});var meteorUpsert;module.import('../meteor_methods/upsert.js',{\"default\":function(v){meteorUpsert=v}});var meteorRemove;module.import('../meteor_methods/remove.js',{\"default\":function(v){meteorRemove=v}});var beforeInit;module.import('../class_events/before_init.js',{\"default\":function(v){beforeInit=v}});var afterInit;module.import('../class_events/after_init.js',{\"default\":function(v){afterInit=v}});var fromJSONValue;module.import('../class_events/from_json_value.js',{\"default\":function(v){fromJSONValue=v}});var toJSONValue;module.import('../class_events/to_json_value.js',{\"default\":function(v){toJSONValue=v}});\n// Utils.                                                                                                              //\n                                                                                                                       // 3\n                                                                                                                       // 4\n// Class static methods.                                                                                               //\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n                                                                                                                       // 10\n// Class prototype methods.                                                                                            //\n                                                                                                                       // 12\n                                                                                                                       // 13\n                                                                                                                       // 14\n                                                                                                                       // 15\n                                                                                                                       // 16\n                                                                                                                       // 17\n                                                                                                                       // 18\n                                                                                                                       // 19\n// Meteor methods.                                                                                                     //\n                                                                                                                       // 21\n                                                                                                                       // 22\n                                                                                                                       // 23\n                                                                                                                       // 24\n// Class events.                                                                                                       //\n                                                                                                                       // 26\n                                                                                                                       // 27\n                                                                                                                       // 28\n                                                                                                                       // 29\n                                                                                                                       //\nfunction onApplyDefinition(Class, parsedDefinition, className) {                                                       // 31\n  var schema = Class.schema;                                                                                           // 32\n                                                                                                                       //\n  if (parsedDefinition.collection) {                                                                                   // 34\n    (function () {                                                                                                     // 34\n      var Collection = schema.collection = parsedDefinition.collection;                                                // 35\n      var id = Collection._makeNewID();                                                                                // 36\n                                                                                                                       //\n      Class.extend({                                                                                                   // 38\n        // Add the \"_id\" field.                                                                                        //\n        fields: {                                                                                                      // 40\n          _id: {                                                                                                       // 41\n            name: '_id',                                                                                               // 42\n            type: id.constructor,                                                                                      // 43\n            optional: true                                                                                             // 44\n          }                                                                                                            // 41\n        },                                                                                                             // 40\n        // Add storage events.                                                                                         //\n        events: {                                                                                                      // 48\n          beforeInit: [beforeInit],                                                                                    // 49\n          toJSONValue: [toJSONValue],                                                                                  // 50\n          fromJSONValue: [fromJSONValue]                                                                               // 51\n        }                                                                                                              // 48\n      }, ['fields', 'events']);                                                                                        // 38\n                                                                                                                       //\n      // If it's a remote collection then we register methods on the connection                                        //\n      // object of the collection.                                                                                     //\n      var connection = Collection._connection;                                                                         // 57\n      if (connection) {                                                                                                // 58\n        // Prepare meteor methods to be added.                                                                         //\n        var meteorMethods = {                                                                                          // 60\n          '/Astronomy/insert': meteorInsert,                                                                           // 61\n          '/Astronomy/update': meteorUpdate,                                                                           // 62\n          '/Astronomy/upsert': meteorUpsert,                                                                           // 63\n          '/Astronomy/remove': meteorRemove                                                                            // 64\n        };                                                                                                             // 60\n        _.each(meteorMethods, function (meteorMethod, methodName) {                                                    // 66\n          if (!hasMeteorMethod(connection, methodName)) {                                                              // 67\n            // Add meteor method.                                                                                      //\n            connection.methods(_.zipObject([methodName], [meteorMethod]));                                             // 69\n          }                                                                                                            // 70\n        });                                                                                                            // 71\n      }                                                                                                                // 72\n                                                                                                                       //\n      // Class static methods.                                                                                         //\n      Class.find = find;                                                                                               // 75\n      Class.findOne = findOne;                                                                                         // 76\n      Class.insert = insert;                                                                                           // 77\n      Class.update = update;                                                                                           // 78\n      Class.upsert = upsert;                                                                                           // 79\n      Class.remove = remove;                                                                                           // 80\n      // Class prototype methods.                                                                                      //\n      Class.prototype.save = protoSave;                                                                                // 82\n      Class.prototype.remove = protoRemove;                                                                            // 83\n      Class.prototype.reload = protoReload;                                                                            // 84\n      Class.prototype.copy = protoCopy;                                                                                // 85\n      Class.prototype.getModifier = protoGetModifier;                                                                  // 86\n      Class.prototype.getModified = protoGetModified;                                                                  // 87\n      Class.prototype.getModifiedValues = protoGetModifiedValues;                                                      // 88\n      Class.prototype.isModified = protoIsModified;                                                                    // 89\n    })();                                                                                                              // 34\n  }                                                                                                                    // 90\n                                                                                                                       //\n  // Apply type field.                                                                                                 //\n  if (parsedDefinition.typeField) {                                                                                    // 93\n    var _fields;                                                                                                       // 93\n                                                                                                                       //\n    var typeField = schema.typeField = parsedDefinition.typeField;                                                     // 94\n    Class.extend({                                                                                                     // 95\n      // Add the type field.                                                                                           //\n      fields: (_fields = {}, _fields[typeField] = {                                                                    // 97\n        type: String                                                                                                   // 99\n      }, _fields),                                                                                                     // 98\n      events: {                                                                                                        // 102\n        afterInit: [afterInit]                                                                                         // 103\n      }                                                                                                                // 102\n    }, ['fields', 'events']);                                                                                          // 95\n                                                                                                                       //\n    if (parsedDefinition.typeField) {                                                                                  // 107\n      schema.typeField = parsedDefinition.typeField;                                                                   // 108\n    }                                                                                                                  // 109\n  }                                                                                                                    // 110\n                                                                                                                       //\n  // If class has already assigned collection.                                                                         //\n  var Collection = Class.getCollection();                                                                              // 113\n  if (Collection) {                                                                                                    // 114\n    // Apply custom transformation function if the transform property is a                                             //\n    // function.                                                                                                       //\n    if (_.isFunction(parsedDefinition.transform)) {                                                                    // 117\n      schema.transform = function (rawDoc) {                                                                           // 118\n        var resolvedDoc = resolveValues({                                                                              // 119\n          Class: Class,                                                                                                // 120\n          values: rawDoc                                                                                               // 121\n        });                                                                                                            // 119\n        return parsedDefinition.transform(resolvedDoc);                                                                // 123\n      };                                                                                                               // 124\n    } else if (parsedDefinition.transform === null) {                                                                  // 125\n      schema.transform = null;                                                                                         // 127\n    }                                                                                                                  // 128\n                                                                                                                       //\n    if (parsedDefinition.secured !== undefined) {                                                                      // 130\n      _.extend(schema.secured, parsedDefinition.secured);                                                              // 131\n    }                                                                                                                  // 132\n  }                                                                                                                    // 133\n};                                                                                                                     // 134\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onApplyDefinition));                                                          // 136\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"init_class.js\":[\"../class_static_methods/get_collection.js\",\"../class_static_methods/get_type_field.js\",\"../class_static_methods/get_transform.js\",\"../class_static_methods/is_secured.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/hooks/init_class.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar getCollection;module.import('../class_static_methods/get_collection.js',{\"default\":function(v){getCollection=v}});var getTypeField;module.import('../class_static_methods/get_type_field.js',{\"default\":function(v){getTypeField=v}});var getTransform;module.import('../class_static_methods/get_transform.js',{\"default\":function(v){getTransform=v}});var isSecured;module.import('../class_static_methods/is_secured.js',{\"default\":function(v){isSecured=v}});// Class static methods.\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       //\nfunction onInitClass(Class, className) {                                                                               // 7\n  // Class static methods.                                                                                             //\n  Class.getCollection = getCollection;                                                                                 // 9\n  Class.getTypeField = getTypeField;                                                                                   // 10\n  Class.getTransform = getTransform;                                                                                   // 11\n  Class.isSecured = isSecured;                                                                                         // 12\n};                                                                                                                     // 13\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitClass));                                                                // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"init_definition.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/hooks/init_definition.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction onInitDefinition(definition, className) {                                                                     // 1\n  definition.collection = undefined;                                                                                   // 2\n  definition.typeField = undefined;                                                                                    // 3\n  definition.transform = undefined;                                                                                    // 4\n  definition.secured = undefined;                                                                                      // 5\n};                                                                                                                     // 6\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitDefinition));                                                           // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"init_schema.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/hooks/init_schema.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction onInitSchema(schema, className) {                                                                             // 1\n  schema.collection = undefined;                                                                                       // 2\n  schema.typeField = undefined;                                                                                        // 3\n  schema.transform = undefined;                                                                                        // 4\n  schema.secured = {                                                                                                   // 5\n    common: true                                                                                                       // 6\n  };                                                                                                                   // 5\n};                                                                                                                     // 8\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitSchema));                                                               // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"merge_definitions.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/hooks/merge_definitions.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {                                           // 3\n  if (sourceDefinition.collection) {                                                                                   // 4\n    targetDefinition.collection = sourceDefinition.collection;                                                         // 5\n  }                                                                                                                    // 6\n  if (sourceDefinition.typeField) {                                                                                    // 7\n    targetDefinition.typeField = sourceDefinition.typeField;                                                           // 8\n  }                                                                                                                    // 9\n  if (sourceDefinition.transform !== undefined) {                                                                      // 10\n    targetDefinition.transform = sourceDefinition.transform;                                                           // 11\n  }                                                                                                                    // 12\n  if (sourceDefinition.secured !== undefined) {                                                                        // 13\n    targetDefinition.secured = _.extend({}, targetDefinition.secured, sourceDefinition.secured);                       // 14\n  }                                                                                                                    // 19\n};                                                                                                                     // 20\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onMergeDefinitions));                                                         // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"parse_definition.js\":[\"lodash\",\"../../core/utils/throw_parse_error.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/hooks/parse_definition.js                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nfunction onParseDefinition(parsedDefinition, definition, className) {                                                  // 4\n  // Check existence and validity of the \"collection\" property.                                                        //\n  if (definition.collection !== undefined) {                                                                           // 6\n    // The \"collection\" property has to be an instance of the                                                          //\n    // \"Mongo.Collection\".                                                                                             //\n    if (!(definition.collection instanceof Mongo.Collection)) {                                                        // 9\n      throwParseError([{                                                                                               // 10\n        'class': className                                                                                             // 11\n      }, {                                                                                                             // 10\n        'property': 'collection'                                                                                       // 13\n      }, 'Property value has to be an instance of \"Mongo.Collection\"']);                                               // 12\n    }                                                                                                                  // 17\n    parsedDefinition.collection = definition.collection;                                                               // 18\n  }                                                                                                                    // 19\n                                                                                                                       //\n  // Check existence and validity of the \"typeField\" property.                                                         //\n  if (definition.typeField !== undefined) {                                                                            // 22\n    // The \"typeField\" property has to be a string.                                                                    //\n    if (!Match.test(definition.typeField, String)) {                                                                   // 24\n      throwParseError([{                                                                                               // 25\n        'class': className                                                                                             // 26\n      }, {                                                                                                             // 25\n        'property': 'typeField'                                                                                        // 28\n      }, 'Property value has to be a string']);                                                                        // 27\n    }                                                                                                                  // 32\n    parsedDefinition.typeField = definition.typeField;                                                                 // 33\n  }                                                                                                                    // 34\n                                                                                                                       //\n  // Check existence and validity of the \"transform\" property.                                                         //\n  if (definition.transform !== undefined) {                                                                            // 37\n    // The \"transform\" property has to be a function.                                                                  //\n    if (!Match.test(definition.transform, Match.OneOf(Function, null))) {                                              // 39\n      throwParseError([{                                                                                               // 40\n        'class': className                                                                                             // 41\n      }, {                                                                                                             // 40\n        'property': 'transform'                                                                                        // 43\n      }, 'Property value has to be a function or null']);                                                              // 42\n    }                                                                                                                  // 47\n    parsedDefinition.transform = definition.transform;                                                                 // 48\n  }                                                                                                                    // 49\n                                                                                                                       //\n  // Check existence and validity of the \"secured\" property.                                                           //\n  if (definition.secured !== undefined) {                                                                              // 52\n    if (!Match.test(definition.secured, Match.OneOf(Boolean, Object))) {                                               // 53\n      throwParseError([{                                                                                               // 54\n        'class': className                                                                                             // 55\n      }, {                                                                                                             // 54\n        'property': 'secured'                                                                                          // 57\n      }, 'Property value has to be a boolean or an object with keys being ' + 'method name and values being boolean']);\n    }                                                                                                                  // 62\n    if (_.isBoolean(definition.secured)) {                                                                             // 63\n      parsedDefinition.secured = {                                                                                     // 64\n        common: definition.secured                                                                                     // 65\n      };                                                                                                               // 64\n    } else {                                                                                                           // 67\n      parsedDefinition.secured = definition.secured;                                                                   // 69\n    }                                                                                                                  // 70\n  }                                                                                                                    // 71\n};                                                                                                                     // 72\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onParseDefinition));                                                          // 74\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"meteor_methods\":{\"insert.js\":[\"../utils/class_insert.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/meteor_methods/insert.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar classInsert;module.import('../utils/class_insert.js',{\"default\":function(v){classInsert=v}});                      // 1\n                                                                                                                       //\nfunction insert(args) {                                                                                                // 3\n  return classInsert(args);                                                                                            // 4\n};                                                                                                                     // 5\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(insert));                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"remove.js\":[\"../utils/class_remove.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/meteor_methods/remove.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar classRemove;module.import('../utils/class_remove.js',{\"default\":function(v){classRemove=v}});                      // 1\n                                                                                                                       //\nfunction remove(args) {                                                                                                // 3\n  return classRemove(args);                                                                                            // 4\n};                                                                                                                     // 5\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(remove));                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"update.js\":[\"../utils/class_update.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/meteor_methods/update.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar classUpdate;module.import('../utils/class_update.js',{\"default\":function(v){classUpdate=v}});                      // 1\n                                                                                                                       //\nfunction update(args) {                                                                                                // 3\n  return classUpdate(args);                                                                                            // 4\n};                                                                                                                     // 5\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(update));                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"upsert.js\":[\"../utils/class_upsert.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/meteor_methods/upsert.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar classUpsert;module.import('../utils/class_upsert.js',{\"default\":function(v){classUpsert=v}});                      // 1\n                                                                                                                       //\nfunction upsert(args) {                                                                                                // 3\n  return classUpsert(args);                                                                                            // 4\n};                                                                                                                     // 5\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(upsert));                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"utils\":{\"already_in_simulation.js\":[\"meteor/ddp\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/already_in_simulation.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar DDP;module.import('meteor/ddp',{\"DDP\":function(v){DDP=v}});                                                        // 1\n                                                                                                                       //\nfunction alreadyInSimulation() {                                                                                       // 3\n  var enclosing = DDP._CurrentInvocation.get();                                                                        // 4\n  return enclosing && enclosing.isSimulation;                                                                          // 5\n}                                                                                                                      // 6\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(alreadyInSimulation));                                                        // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"apply_modifier.js\":[\"lodash\",\"../../fields/utils/cast_nested.js\",\"../../fields/utils/set_all.js\",\"meteor/minimongo\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/apply_modifier.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var castNested;module.import('../../fields/utils/cast_nested.js',{\"default\":function(v){castNested=v}});var setAll;module.import('../../fields/utils/set_all.js',{\"default\":function(v){setAll=v}});var LocalCollection;module.import('meteor/minimongo',{\"LocalCollection\":function(v){LocalCollection=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       //\nfunction applyModifier(_ref) {                                                                                         // 6\n  var doc = _ref.doc;                                                                                                  // 10\n  var modifier = _ref.modifier;                                                                                        // 10\n  var options = _ref.options;                                                                                          // 10\n                                                                                                                       //\n  // Apply modifier only if provided.                                                                                  //\n  if (modifier && _.size(modifier) > 0) {                                                                              // 12\n    // Get raw object because the \"_modify\" method can only work with plain                                            //\n    // objects.                                                                                                        //\n    var rawDoc = doc.raw();                                                                                            // 15\n    // Use Minimongo's the \"_modify\" method to apply modifier.                                                         //\n    LocalCollection._modify(rawDoc, modifier, options);                                                                // 17\n    // Set all values back again on a document.                                                                        //\n    setAll(doc, rawDoc);                                                                                               // 19\n  }                                                                                                                    // 20\n};                                                                                                                     // 21\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(applyModifier));                                                              // 23\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"call_meteor_method.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/call_meteor_method.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction callMeteorMethod(Class, methodName, methodArgs, callback) {                                                   // 1\n  var Collection = Class.getCollection();                                                                              // 4\n  var connection = Collection && Collection._connection;                                                               // 5\n  if (!connection && (!Collection || !Collection._name)) {                                                             // 6\n    connection = Meteor.connection;                                                                                    // 7\n  }                                                                                                                    // 8\n                                                                                                                       //\n  // Prepare meteor method options.                                                                                    //\n  var methodOptions = {                                                                                                // 11\n    throwStubExceptions: true,                                                                                         // 12\n    returnStubValue: true                                                                                              // 13\n  };                                                                                                                   // 11\n                                                                                                                       //\n  return connection.apply(methodName, methodArgs, methodOptions, callback);                                            // 16\n}                                                                                                                      // 19\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(callMeteorMethod));                                                           // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"class_insert.js\":[\"../../../core/class.js\",\"./document_insert.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/class_insert.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});var documentInsert;module.import('./document_insert.js',{\"default\":function(v){documentInsert=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nfunction classInsert() {                                                                                               // 4\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 4\n  var className = args.className;                                                                                      // 4\n  var rawDoc = args.rawDoc;                                                                                            // 4\n  var stopOnFirstError = args.stopOnFirstError;                                                                        // 4\n  var fields = args.fields;                                                                                            // 4\n  var _args$simulation = args.simulation;                                                                              // 4\n  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 4\n  var _args$trusted = args.trusted;                                                                                    // 4\n  var trusted = _args$trusted === undefined ? false : _args$trusted;                                                   // 4\n                                                                                                                       //\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is                                        //\n  // not set.                                                                                                          //\n                                                                                                                       //\n  if (!simulation && !Meteor.isServer) {                                                                               // 16\n    return;                                                                                                            // 17\n  }                                                                                                                    // 18\n                                                                                                                       //\n  var Class = AstroClass.get(className);                                                                               // 20\n  // Create a new document.                                                                                            //\n  var doc = new Class(rawDoc);                                                                                         // 22\n                                                                                                                       //\n  // Insert a document.                                                                                                //\n  return documentInsert({                                                                                              // 25\n    doc: doc,                                                                                                          // 26\n    stopOnFirstError: stopOnFirstError,                                                                                // 27\n    simulation: simulation,                                                                                            // 28\n    trusted: trusted                                                                                                   // 29\n  });                                                                                                                  // 25\n};                                                                                                                     // 31\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(classInsert));                                                                // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"class_remove.js\":[\"../../../core/class.js\",\"./already_in_simulation.js\",\"./throw_if_selector_is_not_id.js\",\"./document_remove.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/class_remove.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});var alreadyInSimulation;module.import('./already_in_simulation.js',{\"default\":function(v){alreadyInSimulation=v}});var throwIfSelectorIsNotId;module.import('./throw_if_selector_is_not_id.js',{\"default\":function(v){throwIfSelectorIsNotId=v}});var documentRemove;module.import('./document_remove.js',{\"default\":function(v){documentRemove=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       //\nfunction classRemove() {                                                                                               // 6\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 6\n  var className = args.className;                                                                                      // 6\n  var selector = args.selector;                                                                                        // 6\n  var options = args.options;                                                                                          // 6\n  var _args$simulation = args.simulation;                                                                              // 6\n  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 6\n  var _args$trusted = args.trusted;                                                                                    // 6\n  var trusted = _args$trusted === undefined ? false : _args$trusted;                                                   // 6\n                                                                                                                       //\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is                                        //\n  // not set.                                                                                                          //\n                                                                                                                       //\n  if (!simulation && !Meteor.isServer) {                                                                               // 17\n    return;                                                                                                            // 18\n  }                                                                                                                    // 19\n                                                                                                                       //\n  // Throw exception if we are trying to perform an operation on more than one                                         //\n  // document at once and it's not trusted call.                                                                       //\n  if (!trusted && !alreadyInSimulation()) {                                                                            // 23\n    throwIfSelectorIsNotId(selector, 'remove');                                                                        // 24\n  }                                                                                                                    // 25\n                                                                                                                       //\n  var Class = AstroClass.get(className);                                                                               // 27\n  // Get all documents matching selector.                                                                              //\n  var docs = Class.find(selector, options);                                                                            // 29\n  // Prepare result of the method execution.                                                                           //\n  var result = 0;                                                                                                      // 31\n                                                                                                                       //\n  docs.forEach(function (doc) {                                                                                        // 33\n    // Update a document.                                                                                              //\n    result += documentRemove({                                                                                         // 35\n      doc: doc,                                                                                                        // 36\n      simulation: simulation,                                                                                          // 37\n      trusted: trusted                                                                                                 // 38\n    });                                                                                                                // 35\n  });                                                                                                                  // 40\n                                                                                                                       //\n  return result;                                                                                                       // 42\n};                                                                                                                     // 43\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(classRemove));                                                                // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"class_update.js\":[\"lodash\",\"../../../core/class.js\",\"./already_in_simulation.js\",\"./throw_if_selector_is_not_id.js\",\"./document_update.js\",\"./apply_modifier.js\",\"meteor/minimongo\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/class_update.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});var alreadyInSimulation;module.import('./already_in_simulation.js',{\"default\":function(v){alreadyInSimulation=v}});var throwIfSelectorIsNotId;module.import('./throw_if_selector_is_not_id.js',{\"default\":function(v){throwIfSelectorIsNotId=v}});var documentUpdate;module.import('./document_update.js',{\"default\":function(v){documentUpdate=v}});var applyModifier;module.import('./apply_modifier.js',{\"default\":function(v){applyModifier=v}});var Minimongo;module.import('meteor/minimongo',{\"Minimongo\":function(v){Minimongo=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       //\nfunction classUpdate() {                                                                                               // 9\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 9\n  var className = args.className;                                                                                      // 9\n  var selector = args.selector;                                                                                        // 9\n  var modifier = args.modifier;                                                                                        // 9\n  var options = args.options;                                                                                          // 9\n  var stopOnFirstError = args.stopOnFirstError;                                                                        // 9\n  var fields = args.fields;                                                                                            // 9\n  var _args$simulation = args.simulation;                                                                              // 9\n  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 9\n  var _args$trusted = args.trusted;                                                                                    // 9\n  var trusted = _args$trusted === undefined ? false : _args$trusted;                                                   // 9\n                                                                                                                       //\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is                                        //\n  // not set.                                                                                                          //\n                                                                                                                       //\n  if (!simulation && !Meteor.isServer) {                                                                               // 23\n    return;                                                                                                            // 24\n  }                                                                                                                    // 25\n                                                                                                                       //\n  // Throw exception if we are trying to perform an operation on more than one                                         //\n  // document at once and it's not trusted call.                                                                       //\n  if (!trusted && !alreadyInSimulation()) {                                                                            // 29\n    throwIfSelectorIsNotId(selector, 'update');                                                                        // 30\n  }                                                                                                                    // 31\n                                                                                                                       //\n  var Class = AstroClass.get(className);                                                                               // 33\n  // Get all documents matching selector.                                                                              //\n  var docs = void 0;                                                                                                   // 35\n  if (options.multi) {                                                                                                 // 36\n    docs = Class.find(selector, options);                                                                              // 37\n  } else {                                                                                                             // 38\n    docs = Class.find(selector, _.extend(options, {                                                                    // 40\n      limit: 1                                                                                                         // 41\n    }));                                                                                                               // 40\n  }                                                                                                                    // 43\n                                                                                                                       //\n  // Create a minimongo matcher object to find array indexes on the projection                                         //\n  // operator use.                                                                                                     //\n  var matcher = new Minimongo.Matcher(selector);                                                                       // 47\n                                                                                                                       //\n  // Prepare result of the method execution.                                                                           //\n  var result = 0;                                                                                                      // 50\n                                                                                                                       //\n  docs.forEach(function (doc) {                                                                                        // 52\n    // Use matcher to find array indexes in a given document that needs updating                                       //\n    // on the projection operator use.                                                                                 //\n    var queryResult = matcher.documentMatches(doc);                                                                    // 55\n                                                                                                                       //\n    // Apply modifier.                                                                                                 //\n    applyModifier({                                                                                                    // 58\n      doc: doc,                                                                                                        // 59\n      modifier: modifier,                                                                                              // 60\n      options: queryResult.arrayIndices ? {                                                                            // 61\n        arrayIndices: queryResult.arrayIndices                                                                         // 62\n      } : {}                                                                                                           // 61\n    });                                                                                                                // 58\n                                                                                                                       //\n    // Update a document.                                                                                              //\n    result += documentUpdate({                                                                                         // 67\n      doc: doc,                                                                                                        // 68\n      stopOnFirstError: stopOnFirstError,                                                                              // 69\n      simulation: simulation,                                                                                          // 70\n      fields: fields,                                                                                                  // 71\n      trusted: trusted                                                                                                 // 72\n    });                                                                                                                // 67\n  });                                                                                                                  // 74\n                                                                                                                       //\n  return result;                                                                                                       // 76\n};                                                                                                                     // 77\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(classUpdate));                                                                // 79\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"class_upsert.js\":[\"../../../core/class.js\",\"./already_in_simulation.js\",\"./throw_if_selector_is_not_id.js\",\"./document_insert.js\",\"./document_update.js\",\"./apply_modifier.js\",\"meteor/minimongo\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/class_upsert.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});var alreadyInSimulation;module.import('./already_in_simulation.js',{\"default\":function(v){alreadyInSimulation=v}});var throwIfSelectorIsNotId;module.import('./throw_if_selector_is_not_id.js',{\"default\":function(v){throwIfSelectorIsNotId=v}});var documentInsert;module.import('./document_insert.js',{\"default\":function(v){documentInsert=v}});var documentUpdate;module.import('./document_update.js',{\"default\":function(v){documentUpdate=v}});var applyModifier;module.import('./apply_modifier.js',{\"default\":function(v){applyModifier=v}});var Minimongo,LocalCollection;module.import('meteor/minimongo',{\"Minimongo\":function(v){Minimongo=v},\"LocalCollection\":function(v){LocalCollection=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       //\nfunction classUpsert() {                                                                                               // 9\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 9\n  var className = args.className;                                                                                      // 9\n  var selector = args.selector;                                                                                        // 9\n  var modifier = args.modifier;                                                                                        // 9\n  var options = args.options;                                                                                          // 9\n  var stopOnFirstError = args.stopOnFirstError;                                                                        // 9\n  var fields = args.fields;                                                                                            // 9\n  var _args$simulation = args.simulation;                                                                              // 9\n  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 9\n  var _args$trusted = args.trusted;                                                                                    // 9\n  var trusted = _args$trusted === undefined ? false : _args$trusted;                                                   // 9\n                                                                                                                       //\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is                                        //\n  // not set.                                                                                                          //\n                                                                                                                       //\n  if (!simulation && !Meteor.isServer) {                                                                               // 23\n    return;                                                                                                            // 24\n  }                                                                                                                    // 25\n                                                                                                                       //\n  // Throw exception if we are trying to perform an operation on more than one                                         //\n  // document at once and it's not trusted call.                                                                       //\n  if (!trusted && !alreadyInSimulation()) {                                                                            // 29\n    throwIfSelectorIsNotId(selector, 'upsert');                                                                        // 30\n  }                                                                                                                    // 31\n                                                                                                                       //\n  var Class = AstroClass.get(className);                                                                               // 33\n  // Get all documents matching selector.                                                                              //\n  var docs = void 0;                                                                                                   // 35\n  if (options.multi) {                                                                                                 // 36\n    docs = Class.find(selector, options);                                                                              // 37\n  } else {                                                                                                             // 38\n    docs = Class.find(selector, _.extend(options, {                                                                    // 40\n      limit: 1                                                                                                         // 41\n    }));                                                                                                               // 40\n  }                                                                                                                    // 43\n                                                                                                                       //\n  // Create a minimongo matcher object to find array indexes on the projection                                         //\n  // operator use.                                                                                                     //\n  var matcher = new Minimongo.Matcher(selector);                                                                       // 47\n                                                                                                                       //\n  // Prepare result of the method execution.                                                                           //\n  var result = {                                                                                                       // 50\n    numberAffected: 0,                                                                                                 // 51\n    insertedId: null                                                                                                   // 52\n  };                                                                                                                   // 50\n                                                                                                                       //\n  if (docs.count() > 0) {                                                                                              // 55\n    docs.forEach(function (doc) {                                                                                      // 56\n      // Use matcher to find array indexes in a given document that needs updating                                     //\n      // on the projection operator use.                                                                               //\n      var queryResult = matcher.documentMatches(doc);                                                                  // 59\n                                                                                                                       //\n      // Apply modifier.                                                                                               //\n      applyModifier({                                                                                                  // 62\n        doc: doc,                                                                                                      // 63\n        modifier: modifier,                                                                                            // 64\n        options: queryResult.arrayIndices ? {                                                                          // 65\n          arrayIndices: queryResult.arrayIndices                                                                       // 66\n        } : {}                                                                                                         // 65\n      });                                                                                                              // 62\n                                                                                                                       //\n      // Update a document.                                                                                            //\n      result.numberAffected += documentUpdate({                                                                        // 71\n        doc: doc,                                                                                                      // 72\n        stopOnFirstError: stopOnFirstError,                                                                            // 73\n        simulation: simulation,                                                                                        // 74\n        fields: fields,                                                                                                // 75\n        trusted: trusted                                                                                               // 76\n      });                                                                                                              // 71\n    });                                                                                                                // 78\n  } else {                                                                                                             // 79\n    // Create a new document from selector.                                                                            //\n    var doc = new Class(LocalCollection._removeDollarOperators(selector));                                             // 82\n    // Apply modifier for the insert operation.                                                                        //\n    applyModifier({                                                                                                    // 84\n      doc: doc,                                                                                                        // 85\n      modifier: modifier,                                                                                              // 86\n      options: {                                                                                                       // 87\n        isInsert: true                                                                                                 // 88\n      }                                                                                                                // 87\n    });                                                                                                                // 84\n                                                                                                                       //\n    // Insert a document.                                                                                              //\n    result.insertedId = documentInsert({                                                                               // 93\n      doc: doc,                                                                                                        // 94\n      stopOnFirstError: stopOnFirstError,                                                                              // 95\n      simulation: simulation,                                                                                          // 96\n      trusted: trusted                                                                                                 // 97\n    });                                                                                                                // 93\n  }                                                                                                                    // 99\n                                                                                                                       //\n  return result;                                                                                                       // 101\n};                                                                                                                     // 102\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(classUpsert));                                                                // 104\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"document_insert.js\":[\"lodash\",\"../../fields/utils/cast_nested.js\",\"../../fields/utils/raw_all.js\",\"./trigger_before_save.js\",\"./trigger_before_insert.js\",\"./trigger_after_save.js\",\"./trigger_after_insert.js\",\"../../validators/utils/document_validate.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/document_insert.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var castNested;module.import('../../fields/utils/cast_nested.js',{\"default\":function(v){castNested=v}});var rawAll;module.import('../../fields/utils/raw_all.js',{\"default\":function(v){rawAll=v}});var triggerBeforeSave;module.import('./trigger_before_save.js',{\"default\":function(v){triggerBeforeSave=v}});var triggerBeforeInsert;module.import('./trigger_before_insert.js',{\"default\":function(v){triggerBeforeInsert=v}});var triggerAfterSave;module.import('./trigger_after_save.js',{\"default\":function(v){triggerAfterSave=v}});var triggerAfterInsert;module.import('./trigger_after_insert.js',{\"default\":function(v){triggerAfterInsert=v}});var documentValidate;module.import('../../validators/utils/document_validate.js',{\"default\":function(v){documentValidate=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n                                                                                                                       //\nfunction documentInsert() {                                                                                            // 10\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 10\n  var doc = args.doc;                                                                                                  // 10\n  var stopOnFirstError = args.stopOnFirstError;                                                                        // 10\n  var fields = args.fields;                                                                                            // 10\n  var _args$simulation = args.simulation;                                                                              // 10\n  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 10\n  var _args$trusted = args.trusted;                                                                                    // 10\n  var trusted = _args$trusted === undefined ? false : _args$trusted;                                                   // 10\n                                                                                                                       //\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is                                        //\n  // not set.                                                                                                          //\n                                                                                                                       //\n  if (!simulation && !Meteor.isServer) {                                                                               // 21\n    return;                                                                                                            // 22\n  }                                                                                                                    // 23\n                                                                                                                       //\n  var Class = doc.constructor;                                                                                         // 25\n  var Collection = Class.getCollection();                                                                              // 26\n                                                                                                                       //\n  // Generate ID if not provided.                                                                                      //\n  if (!doc._id) {                                                                                                      // 29\n    doc._id = Collection._makeNewID();                                                                                 // 30\n  }                                                                                                                    // 31\n                                                                                                                       //\n  // Check if a class is secured.                                                                                      //\n  if (Class.isSecured('insert') && Meteor.isServer && !trusted) {                                                      // 34\n    throw new Meteor.Error(403, 'Inserting from the client is not allowed');                                           // 35\n  }                                                                                                                    // 36\n                                                                                                                       //\n  // Cast nested documents.                                                                                            //\n  castNested({                                                                                                         // 39\n    doc: doc                                                                                                           // 40\n  });                                                                                                                  // 39\n                                                                                                                       //\n  // Trigger before events.                                                                                            //\n  triggerBeforeSave(doc, trusted);                                                                                     // 44\n  triggerBeforeInsert(doc, trusted);                                                                                   // 45\n                                                                                                                       //\n  // Cast nested documents.                                                                                            //\n  castNested({                                                                                                         // 48\n    doc: doc                                                                                                           // 49\n  });                                                                                                                  // 48\n                                                                                                                       //\n  // Validate a document.                                                                                              //\n  documentValidate({                                                                                                   // 53\n    doc: doc,                                                                                                          // 54\n    fields: fields,                                                                                                    // 55\n    stopOnFirstError: stopOnFirstError,                                                                                // 56\n    simulation: simulation                                                                                             // 57\n  });                                                                                                                  // 53\n                                                                                                                       //\n  // Get plain values of all fields. Pick only values that we want to save.                                            //\n  var values = rawAll(doc, {                                                                                           // 61\n    transient: false                                                                                                   // 62\n  });                                                                                                                  // 61\n  values = _.omitBy(values, _.isUndefined);                                                                            // 64\n                                                                                                                       //\n  // Insert a document.                                                                                                //\n  try {                                                                                                                // 67\n    // There is a difference in what the insert method returns depending on the                                        //\n    // environment. On the client it returns an inserted document id, on the                                           //\n    // server it returns array of inserted documents. So we always return the                                          //\n    // generated id. We can't send an entire document because it could be a                                            //\n    // security issue if we are not subscribed to all fields of a document.                                            //\n    Collection._collection.insert(values);                                                                             // 73\n                                                                                                                       //\n    // Change the \"_isNew\" flag to \"false\". Now a document is not new.                                                 //\n    doc._isNew = false;                                                                                                // 76\n                                                                                                                       //\n    // Trigger after events.                                                                                           //\n    triggerAfterInsert(doc, trusted);                                                                                  // 79\n    triggerAfterSave(doc, trusted);                                                                                    // 80\n                                                                                                                       //\n    return doc._id;                                                                                                    // 82\n  } catch (err) {                                                                                                      // 83\n    if (err.name === 'MongoError' || err.name === 'MinimongoError') {                                                  // 85\n      throw new Meteor.Error(409, err.toString());                                                                     // 86\n    } else {                                                                                                           // 87\n      throw err;                                                                                                       // 89\n    }                                                                                                                  // 90\n  }                                                                                                                    // 91\n};                                                                                                                     // 92\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(documentInsert));                                                             // 94\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"document_remove.js\":[\"./trigger_before_remove.js\",\"./trigger_after_remove.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/document_remove.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar triggerBeforeRemove;module.import('./trigger_before_remove.js',{\"default\":function(v){triggerBeforeRemove=v}});var triggerAfterRemove;module.import('./trigger_after_remove.js',{\"default\":function(v){triggerAfterRemove=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nfunction documentRemove() {                                                                                            // 4\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 4\n  var doc = args.doc;                                                                                                  // 4\n  var _args$simulation = args.simulation;                                                                              // 4\n  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 4\n  var _args$trusted = args.trusted;                                                                                    // 4\n  var trusted = _args$trusted === undefined ? false : _args$trusted;                                                   // 4\n                                                                                                                       //\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is                                        //\n  // not set.                                                                                                          //\n                                                                                                                       //\n  if (!simulation && !Meteor.isServer) {                                                                               // 13\n    return;                                                                                                            // 14\n  }                                                                                                                    // 15\n                                                                                                                       //\n  var Class = doc.constructor;                                                                                         // 17\n  var Collection = Class.getCollection();                                                                              // 18\n                                                                                                                       //\n  // Remove only when document has the \"_id\" field (it's persisted).                                                   //\n  if (doc._isNew || !doc._id) {                                                                                        // 21\n    return 0;                                                                                                          // 22\n  }                                                                                                                    // 23\n                                                                                                                       //\n  // Check if a class is secured.                                                                                      //\n  if (Class.isSecured('remove') && Meteor.isServer && !trusted) {                                                      // 26\n    throw new Meteor.Error(403, 'Removing from the client is not allowed');                                            // 27\n  }                                                                                                                    // 28\n                                                                                                                       //\n  // Trigger before events.                                                                                            //\n  triggerBeforeRemove(doc, trusted);                                                                                   // 31\n                                                                                                                       //\n  // Remove a document.                                                                                                //\n  try {                                                                                                                // 34\n    var result = Collection._collection.remove({                                                                       // 35\n      _id: doc._id                                                                                                     // 36\n    });                                                                                                                // 35\n                                                                                                                       //\n    // Mark a document as new, so it will be possible to save it again.                                                //\n    doc._isNew = true;                                                                                                 // 40\n                                                                                                                       //\n    // Trigger after events.                                                                                           //\n    triggerAfterRemove(doc, trusted);                                                                                  // 43\n                                                                                                                       //\n    return result;                                                                                                     // 45\n  } catch (err) {                                                                                                      // 46\n    if (err.name === 'MongoError' || err.name === 'MinimongoError') {                                                  // 48\n      throw new Meteor.Error(409, err.toString());                                                                     // 49\n    } else {                                                                                                           // 50\n      throw err;                                                                                                       // 52\n    }                                                                                                                  // 53\n  }                                                                                                                    // 54\n};                                                                                                                     // 55\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(documentRemove));                                                             // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"document_update.js\":[\"lodash\",\"../../fields/utils/cast_nested.js\",\"./trigger_before_save.js\",\"./trigger_before_update.js\",\"./trigger_after_save.js\",\"./trigger_after_update.js\",\"./is_modified.js\",\"./get_modifier.js\",\"../../validators/utils/document_validate.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/document_update.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var castNested;module.import('../../fields/utils/cast_nested.js',{\"default\":function(v){castNested=v}});var triggerBeforeSave;module.import('./trigger_before_save.js',{\"default\":function(v){triggerBeforeSave=v}});var triggerBeforeUpdate;module.import('./trigger_before_update.js',{\"default\":function(v){triggerBeforeUpdate=v}});var triggerAfterSave;module.import('./trigger_after_save.js',{\"default\":function(v){triggerAfterSave=v}});var triggerAfterUpdate;module.import('./trigger_after_update.js',{\"default\":function(v){triggerAfterUpdate=v}});var isModified;module.import('./is_modified.js',{\"default\":function(v){isModified=v}});var getModifier;module.import('./get_modifier.js',{\"default\":function(v){getModifier=v}});var documentValidate;module.import('../../validators/utils/document_validate.js',{\"default\":function(v){documentValidate=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n                                                                                                                       //\nfunction documentUpdate() {                                                                                            // 11\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 11\n  var doc = args.doc;                                                                                                  // 11\n  var stopOnFirstError = args.stopOnFirstError;                                                                        // 11\n  var fields = args.fields;                                                                                            // 11\n  var _args$simulation = args.simulation;                                                                              // 11\n  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 11\n  var _args$trusted = args.trusted;                                                                                    // 11\n  var trusted = _args$trusted === undefined ? false : _args$trusted;                                                   // 11\n                                                                                                                       //\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is                                        //\n  // not set.                                                                                                          //\n                                                                                                                       //\n  if (!simulation && !Meteor.isServer) {                                                                               // 22\n    return;                                                                                                            // 23\n  }                                                                                                                    // 24\n                                                                                                                       //\n  var Class = doc.constructor;                                                                                         // 26\n  var Collection = Class.getCollection();                                                                              // 27\n                                                                                                                       //\n  // Return if there were no modifications.                                                                            //\n  if (!isModified({                                                                                                    // 30\n    doc: doc,                                                                                                          // 31\n    fields: fields                                                                                                     // 32\n  })) {                                                                                                                // 30\n    // Validate a document even if there were no modifications.                                                        //\n    documentValidate({                                                                                                 // 35\n      doc: doc,                                                                                                        // 36\n      fields: fields,                                                                                                  // 37\n      stopOnFirstError: stopOnFirstError,                                                                              // 38\n      simulation: simulation                                                                                           // 39\n    });                                                                                                                // 35\n    // 0 documents were modified.                                                                                      //\n    return 0;                                                                                                          // 42\n  }                                                                                                                    // 43\n                                                                                                                       //\n  // Check if a class is secured.                                                                                      //\n  if (Class.isSecured('update') && Meteor.isServer && !trusted) {                                                      // 46\n    throw new Meteor.Error(403, 'Updating from the client is not allowed');                                            // 47\n  }                                                                                                                    // 48\n                                                                                                                       //\n  // Cast nested documents.                                                                                            //\n  castNested({                                                                                                         // 51\n    doc: doc                                                                                                           // 52\n  });                                                                                                                  // 51\n                                                                                                                       //\n  // Trigger before events.                                                                                            //\n  triggerBeforeSave(doc, trusted);                                                                                     // 56\n  triggerBeforeUpdate(doc, trusted);                                                                                   // 57\n                                                                                                                       //\n  // Cast nested documents.                                                                                            //\n  castNested({                                                                                                         // 60\n    doc: doc                                                                                                           // 61\n  });                                                                                                                  // 60\n                                                                                                                       //\n  // Validate a document.                                                                                              //\n  documentValidate({                                                                                                   // 65\n    doc: doc,                                                                                                          // 66\n    fields: fields,                                                                                                    // 67\n    stopOnFirstError: stopOnFirstError,                                                                                // 68\n    simulation: simulation                                                                                             // 69\n  });                                                                                                                  // 65\n                                                                                                                       //\n  // Get modifier.                                                                                                     //\n  var modifier = getModifier({                                                                                         // 73\n    doc: doc,                                                                                                          // 74\n    fields: fields                                                                                                     // 75\n  });                                                                                                                  // 73\n  // Stop execution is a modifier is empty.                                                                            //\n  if (_.size(modifier) === 0) {                                                                                        // 78\n    return 0;                                                                                                          // 79\n  }                                                                                                                    // 80\n  // Update a document.                                                                                                //\n  try {                                                                                                                // 82\n    var result = Collection._collection.update({                                                                       // 83\n      _id: doc._id                                                                                                     // 84\n    }, modifier);                                                                                                      // 83\n                                                                                                                       //\n    // Trigger after events.                                                                                           //\n    triggerAfterUpdate(doc, trusted);                                                                                  // 88\n    triggerAfterSave(doc, trusted);                                                                                    // 89\n                                                                                                                       //\n    return result;                                                                                                     // 91\n  } catch (err) {                                                                                                      // 92\n    if (err.name === 'MongoError' || err.name === 'MinimongoError') {                                                  // 94\n      throw new Meteor.Error(409, err.toString());                                                                     // 95\n    } else {                                                                                                           // 96\n      throw err;                                                                                                       // 98\n    }                                                                                                                  // 99\n  }                                                                                                                    // 100\n};                                                                                                                     // 101\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(documentUpdate));                                                             // 103\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_modified.js\":[\"babel-runtime/helpers/toConsumableArray\",\"lodash\",\"../../../core/class.js\",\"../../core/utils/throw_parse_error.js\",\"../../fields/utils/raw_many.js\",\"./omit_undefined.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/get_modified.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _toConsumableArray;module.import('babel-runtime/helpers/toConsumableArray',{\"default\":function(v){_toConsumableArray=v}});var _;module.import('lodash',{\"default\":function(v){_=v}});var AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});var rawMany;module.import('../../fields/utils/raw_many.js',{\"default\":function(v){rawMany=v}});var omitUndefined;module.import('./omit_undefined.js',{\"default\":function(v){omitUndefined=v}});\n                                                                                                                       // 1\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       //\nfunction diff(_ref) {                                                                                                  // 7\n  var newDoc = _ref.newDoc;                                                                                            // 11\n  var oldDoc = _ref.oldDoc;                                                                                            // 11\n  var _ref$prefix = _ref.prefix;                                                                                       // 11\n  var prefix = _ref$prefix === undefined ? '' : _ref$prefix;                                                           // 11\n                                                                                                                       //\n  var result = [];                                                                                                     // 12\n                                                                                                                       //\n  var fieldsNames = _.union(_.keys(oldDoc), _.keys(newDoc));                                                           // 14\n  _.each(fieldsNames, function (fieldName) {                                                                           // 15\n    var oldValue = oldDoc[fieldName];                                                                                  // 16\n    var newValue = newDoc[fieldName];                                                                                  // 17\n                                                                                                                       //\n    if (!EJSON.equals(oldValue, newValue)) {                                                                           // 19\n      (function () {                                                                                                   // 19\n        var nestedPrefix = (prefix && prefix + '.') + fieldName;                                                       // 20\n        result.push(nestedPrefix);                                                                                     // 21\n                                                                                                                       //\n        // Compare two objects.                                                                                        //\n        if (_.isPlainObject(oldValue) && _.isPlainObject(newValue)) {                                                  // 24\n                                                                                                                       //\n          result.push.apply(result, _toConsumableArray(diff({                                                          // 26\n            oldDoc: oldValue,                                                                                          // 27\n            newDoc: newValue,                                                                                          // 28\n            prefix: nestedPrefix                                                                                       // 29\n          })));                                                                                                        // 26\n        }                                                                                                              // 32\n        // Compare two arrays.                                                                                         //\n        else if (_.isArray(oldValue) && _.isArray(newValue)) {                                                         // 24\n                                                                                                                       //\n            var maxLength = Math.max(oldValue.length, newValue.length);                                                // 36\n            _.each(_.range(maxLength), function (index) {                                                              // 37\n              var arrayPrefix = nestedPrefix + '.' + index;                                                            // 38\n              var oldElement = oldValue[index];                                                                        // 39\n              var newElement = newValue[index];                                                                        // 40\n              if (!EJSON.equals(oldElement, newElement)) {                                                             // 41\n                result.push(arrayPrefix);                                                                              // 42\n                // If both array elements are object, then we perform diff between                                     //\n                // them.                                                                                               //\n                if (_.isPlainObject(oldElement) && _.isPlainObject(newElement)) {                                      // 45\n                  // Get a difference between elements.                                                                //\n                  result.push.apply(result, _toConsumableArray(diff({                                                  // 47\n                    oldDoc: oldElement,                                                                                // 48\n                    newDoc: newElement,                                                                                // 49\n                    prefix: arrayPrefix                                                                                // 50\n                  })));                                                                                                // 47\n                }                                                                                                      // 52\n              }                                                                                                        // 53\n            });                                                                                                        // 54\n          }                                                                                                            // 56\n      })();                                                                                                            // 19\n    }                                                                                                                  // 57\n  });                                                                                                                  // 58\n                                                                                                                       //\n  return result;                                                                                                       // 60\n}                                                                                                                      // 61\n                                                                                                                       //\nfunction getModified() {                                                                                               // 63\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                               // 63\n  var newDoc = options.doc;                                                                                            // 63\n  var _options$transient = options.transient;                                                                          // 63\n  var transient = _options$transient === undefined ? false : _options$transient;                                       // 63\n  var _options$immutable = options.immutable;                                                                          // 63\n  var immutable = _options$immutable === undefined ? false : _options$immutable;                                       // 63\n  var fields = options.fields;                                                                                         // 63\n                                                                                                                       //\n                                                                                                                       //\n  var Class = newDoc.constructor;                                                                                      // 71\n  var opts = {                                                                                                         // 72\n    defaults: false                                                                                                    // 73\n  };                                                                                                                   // 72\n  var oldDoc = newDoc._isNew ? new Class({}, opts) : Class.findOne(newDoc._id, opts);                                  // 75\n  // If there is no document before modifications that may mean that we are not                                        //\n  // subscribed to the publication publishing given document or we modified the                                        //\n  // _id of a document.                                                                                                //\n  if (!oldDoc) {                                                                                                       // 80\n    throwParseError([{                                                                                                 // 81\n      'module': 'storage'                                                                                              // 82\n    }, {                                                                                                               // 81\n      'utility': 'getModified'                                                                                         // 84\n    }, 'Can not get a document before modifications. You are not subscribed ' + ('to the publication publishing a \"' + Class.getName() + '\" document with ') + ('the id \"' + newDoc._id + '\" or you have modified the \"_id\" field')]);\n  }                                                                                                                    // 90\n                                                                                                                       //\n  // If there are not fields specified, then get all of them.                                                          //\n  if (!fields) {                                                                                                       // 93\n    fields = Class.getFieldsNames();                                                                                   // 94\n  }                                                                                                                    // 95\n                                                                                                                       //\n  return diff({                                                                                                        // 97\n    // Get raw data from the docs.                                                                                     //\n    oldDoc: omitUndefined(rawMany(oldDoc, fields, {                                                                    // 99\n      transient: transient,                                                                                            // 100\n      immutable: immutable                                                                                             // 101\n    })),                                                                                                               // 99\n    newDoc: omitUndefined(rawMany(newDoc, fields, {                                                                    // 103\n      transient: transient,                                                                                            // 104\n      immutable: immutable                                                                                             // 105\n    }))                                                                                                                // 103\n  });                                                                                                                  // 97\n};                                                                                                                     // 108\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getModified));                                                                // 110\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_modifier.js\":[\"lodash\",\"../../core/utils/throw_parse_error.js\",\"../../fields/utils/raw_many.js\",\"./omit_undefined.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/get_modifier.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});var rawMany;module.import('../../fields/utils/raw_many.js',{\"default\":function(v){rawMany=v}});var omitUndefined;module.import('./omit_undefined.js',{\"default\":function(v){omitUndefined=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       //\nfunction diff(_ref) {                                                                                                  // 6\n  var oldDoc = _ref.oldDoc;                                                                                            // 10\n  var newDoc = _ref.newDoc;                                                                                            // 10\n  var _ref$prefix = _ref.prefix;                                                                                       // 10\n  var prefix = _ref$prefix === undefined ? '' : _ref$prefix;                                                           // 10\n                                                                                                                       //\n  var $set = {};                                                                                                       // 11\n  var $unset = {};                                                                                                     // 12\n  var $push = {};                                                                                                      // 13\n                                                                                                                       //\n  var fieldsNames = _.union(_.keys(oldDoc), _.keys(newDoc));                                                           // 15\n  _.each(fieldsNames, function (fieldName) {                                                                           // 16\n    var oldValue = oldDoc[fieldName];                                                                                  // 17\n    var newValue = newDoc[fieldName];                                                                                  // 18\n                                                                                                                       //\n    if (!EJSON.equals(oldValue, newValue)) {                                                                           // 20\n      (function () {                                                                                                   // 20\n        var nestedPrefix = (prefix && prefix + '.') + fieldName;                                                       // 21\n                                                                                                                       //\n        // Compare two objects.                                                                                        //\n        if (_.isPlainObject(oldValue) && _.isPlainObject(newValue)) {                                                  // 24\n          var _diff = diff({                                                                                           // 24\n            oldDoc: oldValue,                                                                                          // 31\n            newDoc: newValue,                                                                                          // 32\n            prefix: nestedPrefix                                                                                       // 33\n          });                                                                                                          // 30\n                                                                                                                       //\n          var $nestedSet = _diff.$set;                                                                                 // 24\n          var $nestedUnset = _diff.$unset;                                                                             // 24\n          var $nestedPush = _diff.$push;                                                                               // 24\n                                                                                                                       //\n          _.extend($set, $nestedSet);                                                                                  // 35\n          _.extend($unset, $nestedUnset);                                                                              // 36\n          _.extend($push, $nestedPush);                                                                                // 37\n        }                                                                                                              // 39\n        // Compare two arrays.                                                                                         //\n        else if (_.isArray(oldValue) && _.isArray(newValue)) {                                                         // 24\n            (function () {                                                                                             // 41\n                                                                                                                       //\n              // NOTE: We need check a new array size. If its length increased or                                      //\n              // stayed the same then all changes can be registered using the $set                                     //\n              // modifier. If an array length decreased, then we should slice it.                                      //\n              // However it may not be possible if some element has also changed.                                      //\n              // In such situation we have to override entire array.                                                   //\n              var $arraySet = {};                                                                                      // 48\n              var $arrayUnset = {};                                                                                    // 49\n              var $arrayPush = {};                                                                                     // 50\n              // Compare up to number of elements in the array after the change.                                       //\n              _.each(newValue, function (newElement, index) {                                                          // 52\n                var arrayPrefix = nestedPrefix + '.' + index;                                                          // 53\n                var oldElement = oldValue[index];                                                                      // 54\n                if (!EJSON.equals(oldElement, newElement)) {                                                           // 55\n                  // If both array elements are object, then we perform diff between                                   //\n                  // them.                                                                                             //\n                  if (_.isPlainObject(oldElement) && _.isPlainObject(newElement)) {                                    // 58\n                    // Get a difference between elements.                                                              //\n                                                                                                                       //\n                    var _diff2 = diff({                                                                                // 58\n                      oldDoc: oldElement,                                                                              // 65\n                      newDoc: newElement,                                                                              // 66\n                      prefix: arrayPrefix                                                                              // 67\n                    });                                                                                                // 64\n                                                                                                                       //\n                    var $elementSet = _diff2.$set;                                                                     // 58\n                    var $elementUnset = _diff2.$unset;                                                                 // 58\n                    var $elementPush = _diff2.$push;                                                                   // 58\n                                                                                                                       //\n                    _.extend($arraySet, $elementSet);                                                                  // 69\n                    _.extend($arrayUnset, $elementUnset);                                                              // 70\n                    _.extend($arrayPush, $elementPush);                                                                // 71\n                  } else {                                                                                             // 72\n                    $arraySet[arrayPrefix] = newElement;                                                               // 74\n                  }                                                                                                    // 75\n                }                                                                                                      // 76\n              });                                                                                                      // 77\n                                                                                                                       //\n              // If an array was empty, then we override entire field with a new                                       //\n              // array. That way we solve a problem with treating array indexes as                                     //\n              // object keys, which cause inserting Object instead of Array into the                                   //\n              // Mongo collection.                                                                                     //\n              if (oldValue.length === 0 && newValue.length > 0) {                                                      // 83\n                $set[nestedPrefix] = newValue;                                                                         // 84\n              }                                                                                                        // 85\n              // Array length increased or stayed the same.                                                            //\n              else if (newValue.length >= oldValue.length) {                                                           // 83\n                  _.extend($set, $arraySet);                                                                           // 88\n                  _.extend($unset, $arrayUnset);                                                                       // 89\n                  _.extend($push, $arrayPush);                                                                         // 90\n                }                                                                                                      // 91\n                // Array length decreased.                                                                             //\n                else {                                                                                                 // 87\n                    // At least one array element has changed.                                                         //\n                    // FIXME: Due to an error in MiniMongo it's not possible to apply                                  //\n                    // $push modifier with the $slice operator set to positive number.                                 //\n                    // That's why the following \"if\" statement is always true and we                                   //\n                    // have to override entire array when it was shrinked.                                             //\n                    if (true || _.size($arraySet) > 0 || _.size($arrayPush) > 0) {                                     // 99\n                      // So, we need to override entire array with its new state.                                      //\n                      $set[nestedPrefix] = newValue;                                                                   // 101\n                    }                                                                                                  // 102\n                    // Array elements have not changed. The array length just shrinked.                                //\n                    else {                                                                                             // 99\n                        $push[nestedPrefix] = {                                                                        // 105\n                          // We do not want to add any elements, we just want to slice an                              //\n                          // array.                                                                                    //\n                          $each: [],                                                                                   // 108\n                          // Slice array to new array length.                                                          //\n                          $slice: newValue.length                                                                      // 110\n                        };                                                                                             // 105\n                      }                                                                                                // 112\n                  }                                                                                                    // 113\n            })();                                                                                                      // 41\n          } else {                                                                                                     // 115\n                                                                                                                       //\n            if (newValue !== undefined) {                                                                              // 118\n              $set[nestedPrefix] = newValue;                                                                           // 119\n            } else {                                                                                                   // 120\n              $unset[nestedPrefix] = '';                                                                               // 122\n            }                                                                                                          // 123\n          }                                                                                                            // 124\n      })();                                                                                                            // 20\n    }                                                                                                                  // 125\n  });                                                                                                                  // 126\n                                                                                                                       //\n  // Return only non empty modifiers.                                                                                  //\n  var modifier = {};                                                                                                   // 129\n  if (_.size($set)) {                                                                                                  // 130\n    modifier.$set = $set;                                                                                              // 131\n  }                                                                                                                    // 132\n  if (_.size($unset)) {                                                                                                // 133\n    modifier.$unset = $unset;                                                                                          // 134\n  }                                                                                                                    // 135\n  if (_.size($push)) {                                                                                                 // 136\n    modifier.$push = $push;                                                                                            // 137\n  }                                                                                                                    // 138\n  return modifier;                                                                                                     // 139\n};                                                                                                                     // 140\n                                                                                                                       //\nfunction getModifier(options) {                                                                                        // 142\n  var newDoc = options.doc;                                                                                            // 142\n  var _options$transient = options.transient;                                                                          // 142\n  var transient = _options$transient === undefined ? false : _options$transient;                                       // 142\n  var _options$immutable = options.immutable;                                                                          // 142\n  var immutable = _options$immutable === undefined ? false : _options$immutable;                                       // 142\n  var fields = options.fields;                                                                                         // 142\n                                                                                                                       //\n                                                                                                                       //\n  var Class = newDoc.constructor;                                                                                      // 150\n  var opts = {                                                                                                         // 151\n    defaults: false                                                                                                    // 152\n  };                                                                                                                   // 151\n  var oldDoc = newDoc._isNew ? new Class({}, opts) : Class.findOne(newDoc._id, opts);                                  // 154\n  // If there is no document before modifications that may mean that we are not                                        //\n  // subscribed to the publication publishing given document or we modified the                                        //\n  // _id of a document.                                                                                                //\n  if (!oldDoc) {                                                                                                       // 159\n    throwParseError([{                                                                                                 // 160\n      'module': 'storage'                                                                                              // 161\n    }, {                                                                                                               // 160\n      'utility': 'getModified'                                                                                         // 163\n    }, 'Can not get a document before modifications. You are not subscribed ' + ('to the publication publishing a \"' + Class.getName() + '\" document with ') + ('the id \"' + newDoc._id + '\" or you have modified the \"_id\" field')]);\n  }                                                                                                                    // 169\n                                                                                                                       //\n  // If there are not fields specified, then get all of them.                                                          //\n  if (!fields) {                                                                                                       // 172\n    fields = Class.getFieldsNames();                                                                                   // 173\n  }                                                                                                                    // 174\n                                                                                                                       //\n  return diff({                                                                                                        // 176\n    // Get raw data from the docs.                                                                                     //\n    oldDoc: omitUndefined(rawMany(oldDoc, fields, {                                                                    // 178\n      transient: transient,                                                                                            // 179\n      immutable: immutable                                                                                             // 180\n    })),                                                                                                               // 178\n    newDoc: omitUndefined(rawMany(newDoc, fields, {                                                                    // 182\n      transient: transient,                                                                                            // 183\n      immutable: immutable                                                                                             // 184\n    }))                                                                                                                // 182\n  });                                                                                                                  // 176\n};                                                                                                                     // 187\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getModifier));                                                                // 189\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"has_meteor_method.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/has_meteor_method.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction hasMeteorMethod(connection, methodName) {                                                                     // 3\n  // There is inconsistency between client and server. On the client connection                                        //\n  // object contains the \"_methodHandlers\" property and on the server the                                              //\n  // \"method_handlers\" property.                                                                                       //\n  var methodHandlers = connection._methodHandlers || connection.method_handlers;                                       // 7\n                                                                                                                       //\n  return _.has(methodHandlers, methodName);                                                                            // 9\n};                                                                                                                     // 10\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(hasMeteorMethod));                                                            // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"is_modified.js\":[\"lodash\",\"./get_modified.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/is_modified.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var getModified;module.import('./get_modified.js',{\"default\":function(v){getModified=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nfunction isModified() {                                                                                                // 4\n\tvar options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                // 4\n\tvar doc = options.doc;                                                                                                // 4\n\tvar pattern = options.pattern;                                                                                        // 4\n\tvar _options$transient = options.transient;                                                                           // 4\n\tvar transient = _options$transient === undefined ? false : _options$transient;                                        // 4\n\tvar _options$immutable = options.immutable;                                                                           // 4\n\tvar immutable = _options$immutable === undefined ? false : _options$immutable;                                        // 4\n                                                                                                                       //\n                                                                                                                       //\n\tvar modified = getModified({                                                                                          // 12\n\t\tdoc: doc,                                                                                                            // 13\n\t\ttransient: transient,                                                                                                // 14\n\t\timmutable: immutable                                                                                                 // 15\n\t});                                                                                                                   // 12\n                                                                                                                       //\n\tif (pattern) {                                                                                                        // 18\n\t\treturn _.includes(modified, pattern);                                                                                // 19\n\t} else {                                                                                                              // 20\n\t\treturn modified.length > 0;                                                                                          // 22\n\t}                                                                                                                     // 23\n};                                                                                                                     // 24\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(isModified));                                                                 // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"is_remote.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/is_remote.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction isRemote(Class) {                                                                                             // 1\n  var Collection = Class.getCollection();                                                                              // 2\n  if (!Collection) {                                                                                                   // 3\n    return false;                                                                                                      // 4\n  }                                                                                                                    // 5\n  var connection = Collection._connection;                                                                             // 6\n                                                                                                                       //\n  return connection && connection !== Meteor.server;                                                                   // 8\n}                                                                                                                      // 9\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(isRemote));                                                                   // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"omit_undefined.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/omit_undefined.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction omitUndefined(obj) {                                                                                          // 3\n  return _.transform(obj, function (result, value, key) {                                                              // 4\n    if (_.isPlainObject(value)) {                                                                                      // 5\n      result[key] = omitUndefined(value);                                                                              // 6\n    } else if (!_.isUndefined(value)) {                                                                                // 7\n      result[key] = value;                                                                                             // 9\n    }                                                                                                                  // 10\n  });                                                                                                                  // 11\n}                                                                                                                      // 12\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(omitUndefined));                                                              // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"throw_if_selector_is_not_id.js\":[\"meteor/minimongo\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/throw_if_selector_is_not_id.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar LocalCollection;module.import('meteor/minimongo',{\"LocalCollection\":function(v){LocalCollection=v}});              // 1\n                                                                                                                       //\nfunction throwIfSelectorIsNotId(selector, methodName) {                                                                // 3\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {                                                       // 4\n    throw new Meteor.Error(403, 'Not permitted. Untrusted code may only ' + methodName + ' documents by ID.');         // 5\n  }                                                                                                                    // 9\n};                                                                                                                     // 10\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(throwIfSelectorIsNotId));                                                     // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"transform_to_class.js\":[\"lodash\",\"../../../core/class.js\",\"../../fields/utils/resolve_values.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/transform_to_class.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});var resolveValues;module.import('../../fields/utils/resolve_values.js',{\"default\":function(v){resolveValues=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction transformToClass(className) {                                                                                 // 5\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                               // 5\n                                                                                                                       //\n  // Set default options.                                                                                              //\n  _.defaults(options, {                                                                                                // 7\n    defaults: true                                                                                                     // 8\n  });                                                                                                                  // 7\n  options.clone = false;                                                                                               // 10\n                                                                                                                       //\n  return function (rawDoc) {                                                                                           // 12\n    var Class = AstroClass.get(className);                                                                             // 13\n                                                                                                                       //\n    if (Class) {                                                                                                       // 15\n      var typeField = Class.getTypeField();                                                                            // 16\n      if (typeField) {                                                                                                 // 17\n        var TypeClass = AstroClass.get(rawDoc[typeField]);                                                             // 18\n        if (TypeClass) {                                                                                               // 19\n          Class = TypeClass;                                                                                           // 20\n        }                                                                                                              // 21\n      }                                                                                                                // 22\n                                                                                                                       //\n      // Resolve values using the \"resolveValue\" method if provided.                                                   //\n      var resolvedDoc = resolveValues({                                                                                // 25\n        Class: Class,                                                                                                  // 26\n        values: rawDoc                                                                                                 // 27\n      });                                                                                                              // 25\n                                                                                                                       //\n      var doc = new Class(resolvedDoc, options);                                                                       // 30\n      doc._isNew = false;                                                                                              // 31\n      return doc;                                                                                                      // 32\n    }                                                                                                                  // 33\n                                                                                                                       //\n    return rawDoc;                                                                                                     // 35\n  };                                                                                                                   // 36\n};                                                                                                                     // 37\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(transformToClass));                                                           // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"trigger_after_insert.js\":[\"../../events/event.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/trigger_after_insert.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Event;module.import('../../events/event.js',{\"default\":function(v){Event=v}});                                     // 1\n                                                                                                                       //\nfunction triggerAfterInsert(doc, trusted) {                                                                            // 3\n\t// Trigger the \"afterInsert\" event handlers.                                                                          //\n\tdoc.dispatchEvent(new Event('afterInsert', {                                                                          // 5\n\t\tpropagates: true,                                                                                                    // 6\n\t\ttrusted: trusted                                                                                                     // 7\n\t}));                                                                                                                  // 5\n};                                                                                                                     // 9\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(triggerAfterInsert));                                                         // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"trigger_after_remove.js\":[\"../../events/event.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/trigger_after_remove.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Event;module.import('../../events/event.js',{\"default\":function(v){Event=v}});                                     // 1\n                                                                                                                       //\nfunction triggerAfterRemove(doc, trusted) {                                                                            // 3\n\t// Trigger the \"afterRemove\" event handlers.                                                                          //\n\tdoc.dispatchEvent(new Event('afterRemove', {                                                                          // 5\n\t\tpropagates: true,                                                                                                    // 6\n\t\ttrusted: trusted                                                                                                     // 7\n\t}));                                                                                                                  // 5\n};                                                                                                                     // 9\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(triggerAfterRemove));                                                         // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"trigger_after_save.js\":[\"../../events/event.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/trigger_after_save.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Event;module.import('../../events/event.js',{\"default\":function(v){Event=v}});                                     // 1\n                                                                                                                       //\nfunction triggerAfterSave(doc, trusted) {                                                                              // 3\n\t// Trigger the \"afterSave\" event handlers.                                                                            //\n\tdoc.dispatchEvent(new Event('afterSave', {                                                                            // 5\n\t\tpropagates: true,                                                                                                    // 6\n\t\ttrusted: trusted                                                                                                     // 7\n\t}));                                                                                                                  // 5\n};                                                                                                                     // 9\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(triggerAfterSave));                                                           // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"trigger_after_update.js\":[\"../../events/event.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/trigger_after_update.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Event;module.import('../../events/event.js',{\"default\":function(v){Event=v}});                                     // 1\n                                                                                                                       //\nfunction triggerAfterUpdate(doc, trusted) {                                                                            // 3\n\t// Trigger the \"afterUpdate\" event handlers.                                                                          //\n\tdoc.dispatchEvent(new Event('afterUpdate', {                                                                          // 5\n\t\tpropagates: true,                                                                                                    // 6\n\t\ttrusted: trusted                                                                                                     // 7\n\t}));                                                                                                                  // 5\n};                                                                                                                     // 9\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(triggerAfterUpdate));                                                         // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"trigger_before_insert.js\":[\"../../events/event.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/trigger_before_insert.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Event;module.import('../../events/event.js',{\"default\":function(v){Event=v}});                                     // 1\n                                                                                                                       //\nfunction triggerBeforeInsert(doc, trusted) {                                                                           // 3\n\t// Trigger the \"beforeInsert\" event handlers.                                                                         //\n\tif (!doc.dispatchEvent(new Event('beforeInsert', {                                                                    // 5\n\t\tcancelable: true,                                                                                                    // 6\n\t\tpropagates: true,                                                                                                    // 7\n\t\ttrusted: trusted                                                                                                     // 8\n\t}))) {                                                                                                                // 5\n\t\t// If an event was prevented, then we stop here.                                                                     //\n\t\tthrow new Meteor.Error('prevented', 'Operation prevented', {                                                         // 11\n\t\t\teventName: 'beforeInsert'                                                                                           // 12\n\t\t});                                                                                                                  // 11\n\t}                                                                                                                     // 14\n};                                                                                                                     // 15\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(triggerBeforeInsert));                                                        // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"trigger_before_remove.js\":[\"../../events/event.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/trigger_before_remove.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Event;module.import('../../events/event.js',{\"default\":function(v){Event=v}});                                     // 1\n                                                                                                                       //\nfunction triggerBeforeRemove(doc, trusted) {                                                                           // 3\n\t// Trigger the \"beforeRemove\" event handlers.                                                                         //\n\tif (!doc.dispatchEvent(new Event('beforeRemove', {                                                                    // 5\n\t\tcancelable: true,                                                                                                    // 6\n\t\tpropagates: true,                                                                                                    // 7\n\t\ttrusted: trusted                                                                                                     // 8\n\t}))) {                                                                                                                // 5\n\t\t// If an event was prevented, then we stop here.                                                                     //\n\t\tthrow new Meteor.Error('prevented', 'Operation prevented', {                                                         // 11\n\t\t\teventName: 'beforeRemove'                                                                                           // 12\n\t\t});                                                                                                                  // 11\n\t}                                                                                                                     // 14\n};                                                                                                                     // 15\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(triggerBeforeRemove));                                                        // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"trigger_before_save.js\":[\"../../events/event.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/trigger_before_save.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Event;module.import('../../events/event.js',{\"default\":function(v){Event=v}});                                     // 1\n                                                                                                                       //\nfunction triggerBeforeSave(doc, trusted) {                                                                             // 3\n\t// Trigger the \"beforeSave\" event handlers.                                                                           //\n\tif (!doc.dispatchEvent(new Event('beforeSave', {                                                                      // 5\n\t\tcancelable: true,                                                                                                    // 6\n\t\tpropagates: true,                                                                                                    // 7\n\t\ttrusted: trusted                                                                                                     // 8\n\t}))) {                                                                                                                // 5\n\t\t// If an event was prevented, then we stop here.                                                                     //\n\t\tthrow new Meteor.Error('prevented', 'Operation prevented', {                                                         // 11\n\t\t\teventName: 'beforeSave'                                                                                             // 12\n\t\t});                                                                                                                  // 11\n\t}                                                                                                                     // 14\n};                                                                                                                     // 15\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(triggerBeforeSave));                                                          // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"trigger_before_update.js\":[\"../../events/event.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/storage/utils/trigger_before_update.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Event;module.import('../../events/event.js',{\"default\":function(v){Event=v}});                                     // 1\n                                                                                                                       //\nfunction triggerBeforeUpdate(doc, trusted) {                                                                           // 3\n\t// Trigger the \"beforeUpdate\" event handlers.                                                                         //\n\tif (!doc.dispatchEvent(new Event('beforeUpdate', {                                                                    // 5\n\t\tcancelable: true,                                                                                                    // 6\n\t\tpropagates: true,                                                                                                    // 7\n\t\ttrusted: trusted                                                                                                     // 8\n\t}))) {                                                                                                                // 5\n\t\t// If an event was prevented, then we stop here.                                                                     //\n\t\tthrow new Meteor.Error('prevented', 'Operation prevented', {                                                         // 11\n\t\t\teventName: 'beforeUpdate'                                                                                           // 12\n\t\t});                                                                                                                  // 11\n\t}                                                                                                                     // 14\n};                                                                                                                     // 15\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(triggerBeforeUpdate));                                                        // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"validators\":{\"module.js\":[\"../../core/module.js\",\"./validators/comparison/choice.js\",\"./validators/comparison/email.js\",\"./validators/comparison/equal.js\",\"./validators/comparison/not_equal.js\",\"./validators/comparison/regexp.js\",\"./validators/existence/null.js\",\"./validators/existence/not_null.js\",\"./validators/existence/required.js\",\"./validators/logical/and.js\",\"./validators/logical/or.js\",\"./validators/nested/every.js\",\"./validators/nested/has.js\",\"./validators/nested/includes.js\",\"./validators/size/gt.js\",\"./validators/size/gte.js\",\"./validators/size/length.js\",\"./validators/size/lt.js\",\"./validators/size/lte.js\",\"./validators/size/max_length.js\",\"./validators/size/min_length.js\",\"./validators/type/array.js\",\"./validators/type/boolean.js\",\"./validators/type/class.js\",\"./validators/type/date.js\",\"./validators/type/integer.js\",\"./validators/type/mongo_object_id.js\",\"./validators/type/number.js\",\"./validators/type/object.js\",\"./validators/type/string.js\",\"./utils/document_validate.js\",\"./utils/parse_validators.js\",\"./hooks/init_schema.js\",\"./hooks/init_definition.js\",\"./hooks/parse_definition.js\",\"./hooks/merge_definitions.js\",\"./hooks/apply_definition.js\",\"./hooks/init_class.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/module.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Module;module.import('../../core/module.js',{\"default\":function(v){Module=v}});module.import('./validators/comparison/choice.js');module.import('./validators/comparison/email.js');module.import('./validators/comparison/equal.js');module.import('./validators/comparison/not_equal.js');module.import('./validators/comparison/regexp.js');module.import('./validators/existence/null.js');module.import('./validators/existence/not_null.js');module.import('./validators/existence/required.js');module.import('./validators/logical/and.js');module.import('./validators/logical/or.js');module.import('./validators/nested/every.js');module.import('./validators/nested/has.js');module.import('./validators/nested/includes.js');module.import('./validators/size/gt.js');module.import('./validators/size/gte.js');module.import('./validators/size/length.js');module.import('./validators/size/lt.js');module.import('./validators/size/lte.js');module.import('./validators/size/max_length.js');module.import('./validators/size/min_length.js');module.import('./validators/type/array.js');module.import('./validators/type/boolean.js');module.import('./validators/type/class.js');module.import('./validators/type/date.js');module.import('./validators/type/integer.js');module.import('./validators/type/mongo_object_id.js');module.import('./validators/type/number.js');module.import('./validators/type/object.js');module.import('./validators/type/string.js');var documentValidate;module.import('./utils/document_validate.js',{\"default\":function(v){documentValidate=v}});var parseValidators;module.import('./utils/parse_validators.js',{\"default\":function(v){parseValidators=v}});var onInitSchema;module.import('./hooks/init_schema.js',{\"default\":function(v){onInitSchema=v}});var onInitDefinition;module.import('./hooks/init_definition.js',{\"default\":function(v){onInitDefinition=v}});var onParseDefinition;module.import('./hooks/parse_definition.js',{\"default\":function(v){onParseDefinition=v}});var onMergeDefinitions;module.import('./hooks/merge_definitions.js',{\"default\":function(v){onMergeDefinitions=v}});var onApplyDefinition;module.import('./hooks/apply_definition.js',{\"default\":function(v){onApplyDefinition=v}});var onInitClass;module.import('./hooks/init_class.js',{\"default\":function(v){onInitClass=v}});\n// Validators.                                                                                                         //\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n                                                                                                                       // 10\n                                                                                                                       // 11\n                                                                                                                       // 12\n                                                                                                                       // 13\n                                                                                                                       // 14\n                                                                                                                       // 15\n                                                                                                                       // 16\n                                                                                                                       // 17\n                                                                                                                       // 18\n                                                                                                                       // 19\n                                                                                                                       // 20\n                                                                                                                       // 21\n                                                                                                                       // 22\n                                                                                                                       // 23\n                                                                                                                       // 24\n                                                                                                                       // 25\n                                                                                                                       // 26\n                                                                                                                       // 27\n                                                                                                                       // 28\n                                                                                                                       // 29\n                                                                                                                       // 30\n                                                                                                                       // 31\n// Utils.                                                                                                              //\n                                                                                                                       // 33\n                                                                                                                       // 34\n// Hooks.                                                                                                              //\n                                                                                                                       // 36\n                                                                                                                       // 37\n                                                                                                                       // 38\n                                                                                                                       // 39\n                                                                                                                       // 40\n                                                                                                                       // 41\n                                                                                                                       //\nModule.create({                                                                                                        // 43\n\tname: 'validators',                                                                                                   // 44\n\tonInitSchema: onInitSchema,                                                                                           // 45\n\tonInitDefinition: onInitDefinition,                                                                                   // 46\n\tonParseDefinition: onParseDefinition,                                                                                 // 47\n\tonMergeDefinitions: onMergeDefinitions,                                                                               // 48\n\tonApplyDefinition: onApplyDefinition,                                                                                 // 49\n\tonInitClass: onInitClass,                                                                                             // 50\n\tutils: {                                                                                                              // 51\n\t\tdocumentValidate: documentValidate,                                                                                  // 52\n\t\tparseValidators: parseValidators                                                                                     // 53\n\t}                                                                                                                     // 51\n});                                                                                                                    // 43\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"validator.js\":[\"babel-runtime/helpers/classCallCheck\",\"meteor/mdg:validation-error\",\"./validators.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validator.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var ValidationError;module.import('meteor/mdg:validation-error',{\"ValidationError\":function(v){ValidationError=v}});var Validators;module.import('./validators.js',{\"default\":function(v){Validators=v}});\n                                                                                                                       // 1\n                                                                                                                       // 2\n                                                                                                                       //\nvar Validator = function () {                                                                                          //\n  function Validator(definition) {                                                                                     // 5\n    _classCallCheck(this, Validator);                                                                                  // 5\n                                                                                                                       //\n    this.name = definition.name;                                                                                       // 6\n    if (definition.parseParam) {                                                                                       // 7\n      this.parseParam = definition.parseParam;                                                                         // 8\n    }                                                                                                                  // 9\n    if (definition.isValid) {                                                                                          // 10\n      this.isValid = definition.isValid;                                                                               // 11\n    }                                                                                                                  // 12\n    if (definition.validate) {                                                                                         // 13\n      this.validate = definition.validate;                                                                             // 14\n    }                                                                                                                  // 15\n    if (definition.resolveError) {                                                                                     // 16\n      this.resolveError = definition.resolveError;                                                                     // 17\n    }                                                                                                                  // 18\n  }                                                                                                                    // 19\n                                                                                                                       //\n  Validator.prototype.validate = function validate(_ref) {                                                             //\n    var _this = this;                                                                                                  // 30\n                                                                                                                       //\n    var doc = _ref.doc;                                                                                                // 30\n    var name = _ref.name;                                                                                              // 30\n    var nestedName = _ref.nestedName;                                                                                  // 30\n    var value = _ref.value;                                                                                            // 30\n    var param = _ref.param;                                                                                            // 30\n    var resolveParam = _ref.resolveParam;                                                                              // 30\n    var message = _ref.message;                                                                                        // 30\n    var resolveError = _ref.resolveError;                                                                              // 30\n                                                                                                                       //\n    // Get the class name, which will be used later for letting know what class                                        //\n    // thrown error.                                                                                                   //\n    var className = doc.constructor.getName();                                                                         // 33\n                                                                                                                       //\n    // Resolve param is the \"resolveParam\" function is provided.                                                       //\n    if (Match.test(resolveParam, Function)) {                                                                          // 36\n      param = resolveParam({                                                                                           // 37\n        doc: doc,                                                                                                      // 38\n        name: name,                                                                                                    // 39\n        nestedName: nestedName,                                                                                        // 40\n        value: value                                                                                                   // 41\n      });                                                                                                              // 37\n    }                                                                                                                  // 43\n    // Parse param type if validator has parsing function.                                                             //\n    if (Match.test(this.parseParam, Function)) {                                                                       // 45\n      this.parseParam(param);                                                                                          // 46\n    }                                                                                                                  // 47\n    // Prepare data for validation.                                                                                    //\n    var args = {                                                                                                       // 49\n      className: className,                                                                                            // 50\n      doc: doc,                                                                                                        // 51\n      name: name,                                                                                                      // 52\n      nestedName: nestedName,                                                                                          // 53\n      value: value,                                                                                                    // 54\n      param: param,                                                                                                    // 55\n      validator: this.name                                                                                             // 56\n    };                                                                                                                 // 49\n    // Perform validation.                                                                                             //\n    if (!this.isValid(args)) {                                                                                         // 59\n      // Prepare function for throwing validation error.                                                               //\n      var throwError = function throwError(message) {                                                                  // 61\n        // Throw error only if the error message has been successfully                                                 //\n        // generated.                                                                                                  //\n        if (!message) {                                                                                                // 64\n          return;                                                                                                      // 65\n        }                                                                                                              // 66\n        // Throw error.                                                                                                //\n        throw new ValidationError([{                                                                                   // 68\n          className: className,                                                                                        // 69\n          type: _this.name,                                                                                            // 70\n          name: name,                                                                                                  // 71\n          nestedName: nestedName,                                                                                      // 72\n          value: value,                                                                                                // 73\n          param: param,                                                                                                // 74\n          message: message                                                                                             // 75\n        }], message);                                                                                                  // 68\n      };                                                                                                               // 77\n                                                                                                                       //\n      // Generate error message using the \"resolveError\" function if provided.                                         //\n      if (Match.test(resolveError, Function)) {                                                                        // 80\n        throwError(resolveError(args));                                                                                // 81\n      }                                                                                                                // 82\n      // Get error message from the string if provided.                                                                //\n      if (Match.test(message, String)) {                                                                               // 84\n        throwError(message);                                                                                           // 85\n      }                                                                                                                // 86\n      // Get error by executing a class level \"resolveError\" function.                                                 //\n      var Class = doc.constructor;                                                                                     // 88\n      var classResolveError = Class.getResolveError();                                                                 // 89\n      if (classResolveError instanceof Function) {                                                                     // 90\n        throwError(classResolveError(args));                                                                           // 91\n      }                                                                                                                // 92\n      // Get default error message.                                                                                    //\n      if (this.resolveError instanceof Function) {                                                                     // 94\n        throwError(this.resolveError(args));                                                                           // 95\n      }                                                                                                                // 96\n      throwError(ValidationError.DEFAULT_REASON);                                                                      // 97\n    }                                                                                                                  // 98\n  };                                                                                                                   // 99\n                                                                                                                       //\n  Validator.create = function create(definition) {                                                                     //\n    var validator = new Validator(definition);                                                                         // 102\n    Validator.validators[validator.name] = validator;                                                                  // 103\n                                                                                                                       //\n    // Create a validation function.                                                                                   //\n    return Validators[validator.name] = function (options) {                                                           // 106\n      validator.validate(options);                                                                                     // 107\n    };                                                                                                                 // 108\n  };                                                                                                                   // 109\n                                                                                                                       //\n  return Validator;                                                                                                    //\n}();                                                                                                                   //\n                                                                                                                       //\n;                                                                                                                      // 110\n                                                                                                                       //\nValidator.validators = {};                                                                                             // 112\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(Validator));                                                                  // 114\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"validators.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Validators = {};                                                                                                   // 1\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(Validators));                                                                 // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"class_prototype_methods\":{\"validate.js\":[\"../../fields/utils/cast_nested.js\",\"../utils/document_validate.js\",\"../../storage/utils/call_meteor_method.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/class_prototype_methods/validate.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar castNested;module.import('../../fields/utils/cast_nested.js',{\"default\":function(v){castNested=v}});var documentValidate;module.import('../utils/document_validate.js',{\"default\":function(v){documentValidate=v}});var callMeteorMethod;module.import('../../storage/utils/call_meteor_method.js',{\"default\":function(v){callMeteorMethod=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction validate() {                                                                                                  // 5\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 5\n  var callback = arguments[1];                                                                                         // 5\n                                                                                                                       //\n  var doc = this;                                                                                                      // 6\n  var Class = doc.constructor;                                                                                         // 7\n  var Collection = Class.getCollection();                                                                              // 8\n  var connection = Collection && Collection._connection;                                                               // 9\n  if (!connection && (!Collection || !Collection._name)) {                                                             // 10\n    connection = Meteor.connection;                                                                                    // 11\n  }                                                                                                                    // 12\n                                                                                                                       //\n  // If the first argument is callback function then reassign values.                                                  //\n  if (arguments.length === 1 && Match.test(args, Function)) {                                                          // 15\n    callback = args;                                                                                                   // 16\n    args = {};                                                                                                         // 17\n  }                                                                                                                    // 18\n                                                                                                                       //\n  var _args = args;                                                                                                    // 5\n  var _args$fields = _args.fields;                                                                                     // 5\n  var fields = _args$fields === undefined ? Class.getValidationOrder() : _args$fields;                                 // 5\n  var _args$stopOnFirstErro = _args.stopOnFirstError;                                                                  // 5\n  var stopOnFirstError = _args$stopOnFirstErro === undefined ? true : _args$stopOnFirstErro;                           // 5\n  var _args$simulation = _args.simulation;                                                                             // 5\n  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 5\n                                                                                                                       //\n  // If a fields property is a string then put it into array.                                                          //\n                                                                                                                       //\n  if (Match.test(fields, String)) {                                                                                    // 27\n    fields = [fields];                                                                                                 // 28\n  }                                                                                                                    // 29\n                                                                                                                       //\n  // Cast nested documents.                                                                                            //\n  castNested({                                                                                                         // 32\n    doc: doc                                                                                                           // 33\n  });                                                                                                                  // 32\n                                                                                                                       //\n  // Prepare arguments for meteor method and utility.                                                                  //\n  var methodArgs = {                                                                                                   // 37\n    doc: doc,                                                                                                          // 38\n    fields: fields,                                                                                                    // 39\n    stopOnFirstError: stopOnFirstError,                                                                                // 40\n    simulation: simulation                                                                                             // 41\n  };                                                                                                                   // 37\n                                                                                                                       //\n  // If we are dealing with a remote collection and we are not on the server.                                          //\n  if (connection && connection !== Meteor.server) {                                                                    // 45\n    // Prepare arguments for meteor method.                                                                            //\n    var methodName = '/Astronomy/validate';                                                                            // 47\n                                                                                                                       //\n    try {                                                                                                              // 49\n      // Run Meteor method.                                                                                            //\n      return callMeteorMethod(Class, methodName, [methodArgs], callback);                                              // 51\n    }                                                                                                                  // 54\n    // Catch stub exceptions.                                                                                          //\n    catch (err) {                                                                                                      // 56\n      if (callback) {                                                                                                  // 57\n        callback(err);                                                                                                 // 58\n        return null;                                                                                                   // 59\n      }                                                                                                                // 60\n      throw err;                                                                                                       // 61\n    }                                                                                                                  // 62\n  }                                                                                                                    // 63\n                                                                                                                       //\n  // If we can just validate a document without calling the meteor method. We                                          //\n  // may be on the server or the collection may be local.                                                              //\n  try {                                                                                                                // 67\n    // Validate a document.                                                                                            //\n    var result = documentValidate(methodArgs);                                                                         // 69\n    if (callback) {                                                                                                    // 70\n      callback();                                                                                                      // 71\n    }                                                                                                                  // 72\n    return result;                                                                                                     // 73\n  } catch (err) {                                                                                                      // 74\n    if (callback) {                                                                                                    // 76\n      callback(err);                                                                                                   // 77\n      return null;                                                                                                     // 78\n    }                                                                                                                  // 79\n    throw err;                                                                                                         // 80\n  }                                                                                                                    // 81\n}                                                                                                                      // 82\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(validate));                                                                   // 84\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"validate_all.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/class_prototype_methods/validate_all.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction validateAll() {                                                                                               // 3\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                               // 3\n  var callback = arguments[1];                                                                                         // 3\n                                                                                                                       //\n  var doc = this;                                                                                                      // 4\n  var Class = doc.constructor;                                                                                         // 5\n                                                                                                                       //\n  // If the first argument is callback function then reassign values.                                                  //\n  if (arguments.length === 1 && Match.test(options, Function)) {                                                       // 8\n    callback = options;                                                                                                // 9\n    options = {};                                                                                                      // 10\n  }                                                                                                                    // 11\n                                                                                                                       //\n  _.extend(options, {                                                                                                  // 13\n    fields: Class.getValidationOrder(),                                                                                // 14\n    stopOnFirstError: false                                                                                            // 15\n  });                                                                                                                  // 13\n                                                                                                                       //\n  doc.validate(options, callback);                                                                                     // 18\n};                                                                                                                     // 19\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(validateAll));                                                                // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"class_static_methods\":{\"getCheckPattern.js\":[\"meteor/check\",\"meteor/mdg:validation-error\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/class_static_methods/getCheckPattern.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Match;module.import('meteor/check',{\"Match\":function(v){Match=v}});var ValidationError;module.import('meteor/mdg:validation-error',{\"ValidationError\":function(v){ValidationError=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nfunction getCheckPattern() {                                                                                           // 4\n  var Class = this;                                                                                                    // 5\n  return Match.Where(function (doc) {                                                                                  // 6\n    try {                                                                                                              // 7\n      doc.validate();                                                                                                  // 8\n    } catch (err) {                                                                                                    // 9\n      if (ValidationError.is(err)) {                                                                                   // 11\n        var firstError = err.details[0];                                                                               // 12\n        var matchError = new Match.Error(firstError.message);                                                          // 13\n        matchError.sanitizedError = err;                                                                               // 14\n        throw matchError;                                                                                              // 15\n      } else {                                                                                                         // 16\n        throw err;                                                                                                     // 18\n      }                                                                                                                // 19\n    }                                                                                                                  // 20\n    return true;                                                                                                       // 21\n  });                                                                                                                  // 22\n};                                                                                                                     // 23\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getCheckPattern));                                                            // 25\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_resolve_error.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/class_static_methods/get_resolve_error.js                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction getResolveError() {                                                                                           // 1\n\tvar Class = this;                                                                                                     // 2\n                                                                                                                       //\n\treturn Class.schema.resolveError;                                                                                     // 4\n};                                                                                                                     // 5\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getResolveError));                                                            // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"get_validation_order.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/class_static_methods/get_validation_order.js                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction getValidationOrder() {                                                                                        // 3\n\tvar Class = this;                                                                                                     // 4\n                                                                                                                       //\n\t// Get all validators.                                                                                                //\n\tvar validators = Class.getValidators();                                                                               // 7\n\t// Get fields names for defined validators.                                                                           //\n\tvar fieldsNames = Class.getFieldsNames();                                                                             // 9\n\t// Make variable name shorter.                                                                                        //\n\tvar validationOrder = Class.schema.validationOrder;                                                                   // 11\n                                                                                                                       //\n\t// If there is a validation order provided, then combine fields provided in                                           //\n\t// the validation order with the order of validators.                                                                 //\n\tif (validationOrder) {                                                                                                // 15\n\t\t// Detect what fields are not present in the validation order.                                                       //\n\t\tvar diff = _.difference(fieldsNames, validationOrder);                                                               // 17\n\t\t// Combine validation order with fields that left.                                                                   //\n\t\treturn validationOrder.concat(diff);                                                                                 // 19\n\t}                                                                                                                     // 20\n\t// If there is no validation order, then just return fields names in the order                                        //\n\t// in which validators were defined.                                                                                  //\n\telse {                                                                                                                // 15\n\t\t\treturn fieldsNames;                                                                                                 // 24\n\t\t}                                                                                                                    // 25\n};                                                                                                                     // 26\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getValidationOrder));                                                         // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get_validators.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/class_static_methods/get_validators.js                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction getValidators(fieldName) {                                                                                    // 1\n\tvar Class = this;                                                                                                     // 2\n                                                                                                                       //\n\tif (!Match.test(fieldName, Match.Optional(String))) {                                                                 // 4\n\t\tthrow TypeError('The first argument of the \"getValidators\" function has to be a string ' + 'or left empty');         // 5\n\t}                                                                                                                     // 9\n                                                                                                                       //\n\tif (fieldName) {                                                                                                      // 11\n\t\treturn Class.schema.validators[fieldName];                                                                           // 12\n\t} else {                                                                                                              // 13\n\t\treturn Class.schema.validators;                                                                                      // 15\n\t}                                                                                                                     // 16\n};                                                                                                                     // 17\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(getValidators));                                                              // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"validate.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/class_static_methods/validate.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction validate(rawDoc) {                                                                                            // 3\n  var Class = this;                                                                                                    // 4\n  var doc = new Class(rawDoc);                                                                                         // 5\n  var args = _.tail(arguments);                                                                                        // 6\n  return doc.validate.apply(doc, args);                                                                                // 7\n};                                                                                                                     // 8\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(validate));                                                                   // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"validateAll.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/class_static_methods/validateAll.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction validateAll(rawDoc) {                                                                                         // 3\n  var Class = this;                                                                                                    // 4\n  var doc = new Class(rawDoc);                                                                                         // 5\n  var args = _.tail(arguments);                                                                                        // 6\n  return doc.validateAll.apply(doc, args);                                                                             // 7\n};                                                                                                                     // 8\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(validateAll));                                                                // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"hooks\":{\"apply_definition.js\":[\"lodash\",\"../../storage/utils/has_meteor_method.js\",\"../meteor_methods/validate.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/hooks/apply_definition.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var hasMeteorMethod;module.import('../../storage/utils/has_meteor_method.js',{\"default\":function(v){hasMeteorMethod=v}});var meteorValidate;module.import('../meteor_methods/validate.js',{\"default\":function(v){meteorValidate=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction onApplyDefinition(Class, parsedDefinition, className) {                                                       // 5\n  _.each(parsedDefinition.validators, function (validators, fieldName) {                                               // 6\n    Class.schema.validators[fieldName] = Class.schema.validators[fieldName] || [];                                     // 7\n    _.each(validators, function (validator) {                                                                          // 9\n      Class.schema.validators[fieldName] = Class.schema.validators[fieldName].concat(validator);                       // 10\n    });                                                                                                                // 12\n  });                                                                                                                  // 13\n                                                                                                                       //\n  // Add the \"/Astronomy/validate\" meteor method only when a class has assigned                                        //\n  // collection.                                                                                                       //\n  var Collection = Class.getCollection();                                                                              // 17\n  // If it's a remote collection then we register methods on the connection                                            //\n  // object of the collection.                                                                                         //\n  var connection = Collection && Collection._connection;                                                               // 20\n  // If it's not a remote collection than use main Meteor connection.                                                  //\n  if (!connection && (!Collection || !Collection._name)) {                                                             // 22\n    connection = Meteor.connection || Meteor.server;                                                                   // 23\n  }                                                                                                                    // 24\n  if (connection) {                                                                                                    // 25\n    // Prepare meteor methods to be added.                                                                             //\n    var meteorMethods = {                                                                                              // 27\n      '/Astronomy/validate': meteorValidate                                                                            // 28\n    };                                                                                                                 // 27\n    _.each(meteorMethods, function (meteorMethod, methodName) {                                                        // 30\n      if (!hasMeteorMethod(connection, methodName)) {                                                                  // 31\n        // Add meteor method.                                                                                          //\n        connection.methods(_.zipObject([methodName], [meteorMethod]));                                                 // 33\n      }                                                                                                                // 34\n    });                                                                                                                // 35\n  }                                                                                                                    // 36\n                                                                                                                       //\n  Class.schema.resolveError = parsedDefinition.resolveError;                                                           // 38\n};                                                                                                                     // 39\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onApplyDefinition));                                                          // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"init_class.js\":[\"../class_static_methods/get_resolve_error.js\",\"../class_static_methods/get_validation_order.js\",\"../class_static_methods/get_validators.js\",\"../class_static_methods/validate.js\",\"../class_static_methods/validateAll.js\",\"../class_static_methods/getCheckPattern.js\",\"../class_prototype_methods/validate.js\",\"../class_prototype_methods/validate_all.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/hooks/init_class.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar getResolveError;module.import('../class_static_methods/get_resolve_error.js',{\"default\":function(v){getResolveError=v}});var getValidationOrder;module.import('../class_static_methods/get_validation_order.js',{\"default\":function(v){getValidationOrder=v}});var getValidators;module.import('../class_static_methods/get_validators.js',{\"default\":function(v){getValidators=v}});var validateStatic;module.import('../class_static_methods/validate.js',{\"default\":function(v){validateStatic=v}});var validateAllStatic;module.import('../class_static_methods/validateAll.js',{\"default\":function(v){validateAllStatic=v}});var getCheckPatternStatic;module.import('../class_static_methods/getCheckPattern.js',{\"default\":function(v){getCheckPatternStatic=v}});var validate;module.import('../class_prototype_methods/validate.js',{\"default\":function(v){validate=v}});var validateAll;module.import('../class_prototype_methods/validate_all.js',{\"default\":function(v){validateAll=v}});// Class static methods.\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n// Class prototype methods.                                                                                            //\n                                                                                                                       // 9\n                                                                                                                       // 10\n                                                                                                                       //\nfunction onInitClass(Class, className) {                                                                               // 12\n\t// Class static methods.                                                                                              //\n\tClass.getResolveError = getResolveError;                                                                              // 14\n\tClass.getValidationOrder = getValidationOrder;                                                                        // 15\n\tClass.getValidators = getValidators;                                                                                  // 16\n\tClass.validate = validateStatic;                                                                                      // 17\n\tClass.validateAll = validateAllStatic;                                                                                // 18\n\tClass.getCheckPattern = getCheckPatternStatic;                                                                        // 19\n\t// Class prototype methods.                                                                                           //\n\tClass.prototype.validate = validate;                                                                                  // 21\n\tClass.prototype.validateAll = validateAll;                                                                            // 22\n};                                                                                                                     // 23\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitClass));                                                                // 25\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"init_definition.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/hooks/init_definition.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction onInitDefinition(definition, className) {                                                                     // 1\n\tdefinition.validators = {};                                                                                           // 2\n\tdefinition.resolveError = undefined;                                                                                  // 3\n};                                                                                                                     // 4\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitDefinition));                                                           // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"init_schema.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/hooks/init_schema.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction onInitSchema(schema, className) {                                                                             // 1\n\tschema.validators = {};                                                                                               // 2\n\tschema.resolveError = undefined;                                                                                      // 3\n};                                                                                                                     // 4\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onInitSchema));                                                               // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"merge_definitions.js\":[\"lodash\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/hooks/merge_definitions.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});                                                            // 1\n                                                                                                                       //\nfunction onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {                                           // 3\n\t_.each(sourceDefinition.validators, function (validators, fieldName) {                                                // 4\n\t\ttargetDefinition.validators[fieldName] = targetDefinition.validators[fieldName] || [];                               // 5\n\t\ttargetDefinition.validators[fieldName] = targetDefinition.validators[fieldName].concat(validators);                  // 7\n\t});                                                                                                                   // 9\n                                                                                                                       //\n\ttargetDefinition.resolveError = sourceDefinition.resolveError;                                                        // 11\n};                                                                                                                     // 12\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onMergeDefinitions));                                                         // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"parse_definition.js\":[\"lodash\",\"../../core/utils/throw_parse_error.js\",\"../utils/parse_validators.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/hooks/parse_definition.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});var parseValidators;module.import('../utils/parse_validators.js',{\"default\":function(v){parseValidators=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nfunction onParseDefinition(parsedDefinition, definition, className) {                                                  // 5\n\tif (definition.resolveError) {                                                                                        // 6\n\t\tif (!Match.test(definition.resolveError, Function)) {                                                                // 7\n\t\t\tthrowParseError([{                                                                                                  // 8\n\t\t\t\t'class': className                                                                                                 // 9\n\t\t\t}, {                                                                                                                // 8\n\t\t\t\t'property': 'resolveError'                                                                                         // 11\n\t\t\t}, 'Property values has to be a function']);                                                                        // 10\n\t\t}                                                                                                                    // 15\n                                                                                                                       //\n\t\tparsedDefinition.resolveError = definition.resolveError;                                                             // 17\n\t}                                                                                                                     // 18\n                                                                                                                       //\n\tif (definition.fields) {                                                                                              // 20\n\t\t_.each(definition.fields, function (fieldDefinition, fieldName) {                                                    // 21\n\t\t\tif (_.has(fieldDefinition, 'validators')) {                                                                         // 22\n\t\t\t\tparseValidators(fieldDefinition.validators, [{                                                                     // 23\n\t\t\t\t\t'class': className                                                                                                // 25\n\t\t\t\t}, {                                                                                                               // 24\n\t\t\t\t\t'property': 'fields'                                                                                              // 27\n\t\t\t\t}, {                                                                                                               // 26\n\t\t\t\t\t'field': fieldName                                                                                                // 29\n\t\t\t\t}, {                                                                                                               // 28\n\t\t\t\t\t'property': 'validators'                                                                                          // 31\n\t\t\t\t}]);                                                                                                               // 30\n                                                                                                                       //\n\t\t\t\tparsedDefinition.validators[fieldName] = fieldDefinition.validators;                                               // 35\n\t\t\t\tfieldDefinition.validators = undefined;                                                                            // 36\n\t\t\t}                                                                                                                   // 37\n\t\t});                                                                                                                  // 38\n\t}                                                                                                                     // 39\n                                                                                                                       //\n\tif (definition.validators) {                                                                                          // 41\n\t\t_.each(definition.validators, function (validators, fieldName) {                                                     // 42\n\t\t\tparseValidators(validators, [{                                                                                      // 43\n\t\t\t\t'class': className                                                                                                 // 45\n\t\t\t}, {                                                                                                                // 44\n\t\t\t\t'property': 'validators'                                                                                           // 47\n\t\t\t}]);                                                                                                                // 46\n                                                                                                                       //\n\t\t\tparsedDefinition.validators[fieldName] = validators;                                                                // 51\n\t\t});                                                                                                                  // 52\n\t}                                                                                                                     // 53\n};                                                                                                                     // 54\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(onParseDefinition));                                                          // 56\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"meteor_methods\":{\"validate.js\":[\"../utils/document_validate.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/meteor_methods/validate.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar documentValidate;module.import('../utils/document_validate.js',{\"default\":function(v){documentValidate=v}});       // 1\n                                                                                                                       //\nfunction validate(options) {                                                                                           // 3\n  return documentValidate(options);                                                                                    // 4\n};                                                                                                                     // 5\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(validate));                                                                   // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"utils\":{\"document_validate.js\":[\"lodash\",\"../../../core/class.js\",\"../../core/utils/throw_parse_error.js\",\"../../fields/utils/cast_nested.js\",\"../../fields/utils/is_nested_field_name.js\",\"../../fields/utils/traverse.js\",\"../../fields/ObjectField\",\"../../fields/ListField\",\"../validators.js\",\"meteor/mdg:validation-error\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/utils/document_validate.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});var castNested;module.import('../../fields/utils/cast_nested.js',{\"default\":function(v){castNested=v}});var isNestedFieldName;module.import('../../fields/utils/is_nested_field_name.js',{\"default\":function(v){isNestedFieldName=v}});var traverse;module.import('../../fields/utils/traverse.js',{\"default\":function(v){traverse=v}});var ObjectField;module.import('../../fields/ObjectField',{\"default\":function(v){ObjectField=v}});var ListField;module.import('../../fields/ListField',{\"default\":function(v){ListField=v}});var Validators;module.import('../validators.js',{\"default\":function(v){Validators=v}});var ValidationError;module.import('meteor/mdg:validation-error',{\"ValidationError\":function(v){ValidationError=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n                                                                                                                       // 10\n                                                                                                                       //\nfunction documentValidate() {                                                                                          // 12\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                               // 12\n  var doc = options.doc;                                                                                               // 12\n  var fields = options.fields;                                                                                         // 12\n  var _options$prefix = options.prefix;                                                                                // 12\n  var prefix = _options$prefix === undefined ? '' : _options$prefix;                                                   // 12\n  var _options$stopOnFirstE = options.stopOnFirstError;                                                                // 12\n  var stopOnFirstError = _options$stopOnFirstE === undefined ? true : _options$stopOnFirstE;                           // 12\n  var _options$simulation = options.simulation;                                                                        // 12\n  var simulation = _options$simulation === undefined ? true : _options$simulation;                                     // 12\n                                                                                                                       //\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is                                        //\n  // not set.                                                                                                          //\n                                                                                                                       //\n  if (!simulation && !Meteor.isServer) {                                                                               // 23\n    return;                                                                                                            // 24\n  }                                                                                                                    // 25\n                                                                                                                       //\n  var Class = doc.constructor;                                                                                         // 27\n                                                                                                                       //\n  // Cast nested fields.                                                                                               //\n  castNested({                                                                                                         // 30\n    doc: doc                                                                                                           // 31\n  });                                                                                                                  // 30\n                                                                                                                       //\n  // Prepare array for storing errors list.                                                                            //\n  var errors = [];                                                                                                     // 35\n                                                                                                                       //\n  // Helper function for catching and collecting errors.                                                               //\n  var catchValidationError = function catchValidationError(func) {                                                     // 38\n    try {                                                                                                              // 39\n      func();                                                                                                          // 40\n    } catch (err) {                                                                                                    // 41\n      // If it's ValidationError.                                                                                      //\n      if (ValidationError.is(err)) {                                                                                   // 44\n        // If we stop on first error then just throw error again.                                                      //\n        if (stopOnFirstError) {                                                                                        // 46\n          throw err;                                                                                                   // 47\n        }                                                                                                              // 48\n        // Otherwise we collect errors.                                                                                //\n        else {                                                                                                         // 46\n            _.each(err.details, function (details) {                                                                   // 51\n              errors.push(details);                                                                                    // 52\n            });                                                                                                        // 53\n          }                                                                                                            // 54\n      }                                                                                                                // 55\n      // It it's not ValidationError, then we throw error again.                                                       //\n      else {                                                                                                           // 44\n          throw err;                                                                                                   // 58\n        }                                                                                                              // 59\n    }                                                                                                                  // 60\n  };                                                                                                                   // 61\n                                                                                                                       //\n  // If no fields were passed to validation, then we pick default validation                                           //\n  // order.                                                                                                            //\n  if (!fields) {                                                                                                       // 65\n    fields = Class.getValidationOrder();                                                                               // 66\n  }                                                                                                                    // 67\n                                                                                                                       //\n  _.each(fields, function (name) {                                                                                     // 69\n    // If it is a nested field pattern name then we have to look for the most                                          //\n    // nested document and validate the nested field.                                                                  //\n    if (isNestedFieldName(name)) {                                                                                     // 72\n      traverse(doc, name, function (nestedDoc, nestedName, field) {                                                    // 73\n        catchValidationError(function () {                                                                             // 74\n          documentValidate({                                                                                           // 75\n            doc: nestedDoc,                                                                                            // 76\n            fields: [nestedName],                                                                                      // 77\n            prefix: name.substr(0, name.lastIndexOf(nestedName)),                                                      // 78\n            stopOnFirstError: stopOnFirstError,                                                                        // 79\n            simulation: simulation                                                                                     // 80\n          });                                                                                                          // 75\n        });                                                                                                            // 82\n      });                                                                                                              // 83\n      return;                                                                                                          // 84\n    }                                                                                                                  // 85\n                                                                                                                       //\n    var field = Class.getField(name);                                                                                  // 87\n                                                                                                                       //\n    // Move to the next one if a field does not exist.                                                                 //\n    if (!field) {                                                                                                      // 90\n      return;                                                                                                          // 91\n    }                                                                                                                  // 92\n                                                                                                                       //\n    // We do not validate transient fields.                                                                            //\n    if (field.transient) {                                                                                             // 95\n      return;                                                                                                          // 96\n    }                                                                                                                  // 97\n                                                                                                                       //\n    // Get value of the field.                                                                                         //\n    var value = doc.get(name);                                                                                         // 100\n                                                                                                                       //\n    // If a field is optional and value is undefined then we do not validate.                                          //\n    if (field.getOptional(doc) && _.isNil(value)) {                                                                    // 103\n      return;                                                                                                          // 104\n    }                                                                                                                  // 105\n                                                                                                                       //\n    // Execute validation in the try-catch block. That's because we want to                                            //\n    // continue validation if the \"stopOnFirstError\" flag is set to false.                                             //\n    catchValidationError(function () {                                                                                 // 109\n      // First, execute type level validators.                                                                         //\n      field.validate({                                                                                                 // 111\n        doc: doc,                                                                                                      // 112\n        name: prefix + name,                                                                                           // 113\n        nestedName: name,                                                                                              // 114\n        value: value                                                                                                   // 115\n      });                                                                                                              // 111\n      // Get validators for a given field.                                                                             //\n      var validators = Class.getValidators(name);                                                                      // 118\n      _.each(validators, function (_ref) {                                                                             // 119\n        var type = _ref.type;                                                                                          // 125\n        var param = _ref.param;                                                                                        // 125\n        var resolveParam = _ref.resolveParam;                                                                          // 125\n        var message = _ref.message;                                                                                    // 125\n        var resolveError = _ref.resolveError;                                                                          // 125\n                                                                                                                       //\n        // Get validation helper function.                                                                             //\n        var validationFunction = Validators[type];                                                                     // 127\n        // Execute single validator.                                                                                   //\n        validationFunction({                                                                                           // 129\n          doc: doc,                                                                                                    // 130\n          name: prefix + name,                                                                                         // 131\n          nestedName: name,                                                                                            // 132\n          value: value,                                                                                                // 133\n          param: param,                                                                                                // 134\n          resolveParam: resolveParam,                                                                                  // 135\n          message: message,                                                                                            // 136\n          resolveError: resolveError                                                                                   // 137\n        });                                                                                                            // 129\n      });                                                                                                              // 139\n    });                                                                                                                // 140\n                                                                                                                       //\n    // If it is the object field then validate it.                                                                     //\n    if (field instanceof ObjectField) {                                                                                // 143\n      if (value instanceof AstroClass) {                                                                               // 144\n        catchValidationError(function () {                                                                             // 145\n          documentValidate({                                                                                           // 146\n            doc: value,                                                                                                // 147\n            fields: value.constructor.getValidationOrder(),                                                            // 148\n            prefix: field.name + '.',                                                                                  // 149\n            stopOnFirstError: stopOnFirstError                                                                         // 150\n          });                                                                                                          // 146\n        });                                                                                                            // 152\n      }                                                                                                                // 153\n    }                                                                                                                  // 154\n    // If it is the list field then validate each one.                                                                 //\n    else if (field instanceof ListField && field.isClass) {                                                            // 143\n        _.each(value, function (element, index) {                                                                      // 157\n          if (element instanceof AstroClass) {                                                                         // 158\n            catchValidationError(function () {                                                                         // 159\n              documentValidate({                                                                                       // 160\n                doc: element,                                                                                          // 161\n                fields: element.constructor.getValidationOrder(),                                                      // 162\n                prefix: field.name + '.' + index + '.',                                                                // 163\n                stopOnFirstError: stopOnFirstError                                                                     // 164\n              });                                                                                                      // 160\n            });                                                                                                        // 166\n          }                                                                                                            // 167\n        });                                                                                                            // 168\n      }                                                                                                                // 169\n  });                                                                                                                  // 170\n                                                                                                                       //\n  // If we have not thrown any error yet then it means that there are no errors                                        //\n  // or we do not throw on the first error.                                                                            //\n  if (errors.length > 0) {                                                                                             // 174\n    throw new ValidationError(errors, errors[0].message);                                                              // 175\n  }                                                                                                                    // 176\n};                                                                                                                     // 177\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(documentValidate));                                                           // 179\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"parse_validators.js\":[\"lodash\",\"../../core/utils/throw_parse_error.js\",\"../validators.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/utils/parse_validators.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});var Validators;module.import('../validators.js',{\"default\":function(v){Validators=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nvar validatorsPattern = [{                                                                                             // 5\n  type: String,                                                                                                        // 6\n  param: Match.Optional(Match.Any),                                                                                    // 7\n  resolveParam: Match.Optional(Function),                                                                              // 8\n  message: Match.Optional(String),                                                                                     // 9\n  resolveError: Match.Optional(Function)                                                                               // 10\n}];                                                                                                                    // 5\n                                                                                                                       //\nfunction parseValidators(validators, parseContext) {                                                                   // 13\n  // Validators list is an array of object that should include at least the                                            //\n  // \"type\" property.                                                                                                  //\n  if (validators && !Match.test(validators, validatorsPattern)) {                                                      // 16\n    throwParseError(_.union(parseContext, ['Validators definition has to be an array of objects']));                   // 17\n  }                                                                                                                    // 20\n                                                                                                                       //\n  _.forEach(validators, function (validator) {                                                                         // 22\n    // Check if a validator of a given type exists.                                                                    //\n    if (!_.has(Validators, validator.type)) {                                                                          // 24\n      throwParseError(_.union(parseContext, ['There is no \"' + validator.type + '\" validator']));                      // 25\n    }                                                                                                                  // 28\n  });                                                                                                                  // 29\n};                                                                                                                     // 30\n                                                                                                                       //\nmodule.export(\"default\",exports.default=(parseValidators));                                                            // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"validators\":{\"comparison\":{\"choice.js\":[\"lodash\",\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/comparison/choice.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nValidator.create({                                                                                                     // 4\n  name: 'choice',                                                                                                      // 5\n  parseParam: function parseParam(param) {                                                                             // 6\n    if (!Match.test(param, [Match.Any])) {                                                                             // 7\n      throw new TypeError('Parameter for the \"choice\" validator has to be an array of values');                        // 8\n    }                                                                                                                  // 11\n  },                                                                                                                   // 12\n  isValid: function isValid(_ref) {                                                                                    // 13\n    var value = _ref.value;                                                                                            // 13\n    var param = _ref.param;                                                                                            // 13\n                                                                                                                       //\n    return _.includes(param, value);                                                                                   // 14\n  },                                                                                                                   // 15\n  resolveError: function resolveError(_ref2) {                                                                         // 16\n    var name = _ref2.name;                                                                                             // 16\n    var param = _ref2.param;                                                                                           // 16\n                                                                                                                       //\n    var choices = param.join(', ');                                                                                    // 17\n    return '\"' + name + '\" has to be one of the values ' + choices;                                                    // 18\n  }                                                                                                                    // 19\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"email.js\":[\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/comparison/email.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});                                // 1\n                                                                                                                       //\n// Email regular expression.                                                                                           //\nvar re = /^[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,}$/i;                                                               // 4\n                                                                                                                       //\nValidator.create({                                                                                                     // 6\n  name: 'email',                                                                                                       // 7\n  isValid: function isValid(_ref) {                                                                                    // 8\n    var value = _ref.value;                                                                                            // 8\n                                                                                                                       //\n    return re.test(value);                                                                                             // 9\n  },                                                                                                                   // 10\n  resolveError: function resolveError(_ref2) {                                                                         // 11\n    var name = _ref2.name;                                                                                             // 11\n    var param = _ref2.param;                                                                                           // 11\n                                                                                                                       //\n    return '\"' + name + '\" should be a valid email address';                                                           // 12\n  }                                                                                                                    // 13\n});                                                                                                                    // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"equal.js\":[\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/comparison/equal.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});                                // 1\n                                                                                                                       //\nValidator.create({                                                                                                     // 3\n  name: 'equal',                                                                                                       // 4\n  isValid: function isValid(_ref) {                                                                                    // 5\n    var value = _ref.value;                                                                                            // 5\n    var param = _ref.param;                                                                                            // 5\n                                                                                                                       //\n    return EJSON.equals(value, param);                                                                                 // 6\n  },                                                                                                                   // 7\n  resolveError: function resolveError(_ref2) {                                                                         // 8\n    var name = _ref2.name;                                                                                             // 8\n    var param = _ref2.param;                                                                                           // 8\n                                                                                                                       //\n    return '\"' + name + '\" should be equal ' + param;                                                                  // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"not_equal.js\":[\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/comparison/not_equal.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});                                // 1\n                                                                                                                       //\nValidator.create({                                                                                                     // 3\n  name: 'notEqual',                                                                                                    // 4\n  isValid: function isValid(_ref) {                                                                                    // 5\n    var value = _ref.value;                                                                                            // 5\n    var param = _ref.param;                                                                                            // 5\n                                                                                                                       //\n    return !EJSON.equals(value, param);                                                                                // 6\n  },                                                                                                                   // 7\n  resolveError: function resolveError(_ref2) {                                                                         // 8\n    var name = _ref2.name;                                                                                             // 8\n    var param = _ref2.param;                                                                                           // 8\n                                                                                                                       //\n    return '\"' + name + '\" should not to be equal ' + param;                                                           // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"regexp.js\":[\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/comparison/regexp.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});                                // 1\n                                                                                                                       //\nValidator.create({                                                                                                     // 3\n  name: 'regexp',                                                                                                      // 4\n  parseParam: function parseParam(param) {                                                                             // 5\n    if (!Match.test(param, RegExp)) {                                                                                  // 6\n      throw new TypeError('Parameter for the \"regexp\" validator has to be a regular expression');                      // 7\n    }                                                                                                                  // 10\n  },                                                                                                                   // 11\n  isValid: function isValid(_ref) {                                                                                    // 12\n    var value = _ref.value;                                                                                            // 12\n    var param = _ref.param;                                                                                            // 12\n                                                                                                                       //\n    return param.test(value);                                                                                          // 13\n  },                                                                                                                   // 14\n  resolveError: function resolveError(_ref2) {                                                                         // 15\n    var name = _ref2.name;                                                                                             // 15\n    var param = _ref2.param;                                                                                           // 15\n                                                                                                                       //\n    return '\"' + name + '\" does not match the \"' + param.toString() + '\" regular expression';                          // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"existence\":{\"not_null.js\":[\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/existence/not_null.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});                                // 1\n                                                                                                                       //\nValidator.create({                                                                                                     // 3\n  name: 'notNull',                                                                                                     // 4\n  isValid: function isValid(_ref) {                                                                                    // 5\n    var value = _ref.value;                                                                                            // 5\n                                                                                                                       //\n    return value !== null;                                                                                             // 6\n  },                                                                                                                   // 7\n  resolveError: function resolveError(_ref2) {                                                                         // 8\n    var name = _ref2.name;                                                                                             // 8\n                                                                                                                       //\n    return '\"' + name + '\" should not be null';                                                                        // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"null.js\":[\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/existence/null.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});                                // 1\n                                                                                                                       //\nValidator.create({                                                                                                     // 3\n  name: 'null',                                                                                                        // 4\n  isValid: function isValid(_ref) {                                                                                    // 5\n    var value = _ref.value;                                                                                            // 5\n                                                                                                                       //\n    return value === null;                                                                                             // 6\n  },                                                                                                                   // 7\n  resolveError: function resolveError(_ref2) {                                                                         // 8\n    var name = _ref2.name;                                                                                             // 8\n                                                                                                                       //\n    return '\"' + name + '\" should be null';                                                                            // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"required.js\":[\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/existence/required.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});                                // 1\n                                                                                                                       //\nValidator.create({                                                                                                     // 3\n  name: 'required',                                                                                                    // 4\n  isValid: function isValid(_ref) {                                                                                    // 5\n    var value = _ref.value;                                                                                            // 5\n                                                                                                                       //\n    return value !== null && value !== undefined;                                                                      // 6\n  },                                                                                                                   // 7\n  resolveError: function resolveError(_ref2) {                                                                         // 8\n    var name = _ref2.name;                                                                                             // 8\n                                                                                                                       //\n    return '\"' + name + '\" is required';                                                                               // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"logical\":{\"and.js\":[\"lodash\",\"../../utils/parse_validators.js\",\"../../validator.js\",\"../../validators.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/logical/and.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var parseValidators;module.import('../../utils/parse_validators.js',{\"default\":function(v){parseValidators=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});var Validators;module.import('../../validators.js',{\"default\":function(v){Validators=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       //\nValidator.create({                                                                                                     // 6\n  name: 'and',                                                                                                         // 7\n  parseParam: function parseParam(param) {                                                                             // 8\n    parseValidators(param);                                                                                            // 9\n  },                                                                                                                   // 10\n  validate: function validate(_ref) {                                                                                  // 11\n    var doc = _ref.doc;                                                                                                // 16\n    var name = _ref.name;                                                                                              // 16\n    var value = _ref.value;                                                                                            // 16\n    var validators = _ref.param;                                                                                       // 16\n                                                                                                                       //\n    _.each(validators, function (validator) {                                                                          // 17\n      // Get validator.                                                                                                //\n      var validationFunction = Validators[validator.type];                                                             // 19\n      // Execute single validator.                                                                                     //\n      validationFunction({                                                                                             // 21\n        doc: doc,                                                                                                      // 22\n        name: name,                                                                                                    // 23\n        value: value,                                                                                                  // 24\n        param: validator.param                                                                                         // 25\n      });                                                                                                              // 21\n    });                                                                                                                // 27\n  }                                                                                                                    // 28\n});                                                                                                                    // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"or.js\":[\"lodash\",\"../../utils/parse_validators.js\",\"../../validator.js\",\"../../validators.js\",\"meteor/mdg:validation-error\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/logical/or.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var parseValidators;module.import('../../utils/parse_validators.js',{\"default\":function(v){parseValidators=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});var Validators;module.import('../../validators.js',{\"default\":function(v){Validators=v}});var ValidationError;module.import('meteor/mdg:validation-error',{\"ValidationError\":function(v){ValidationError=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       // 5\n                                                                                                                       //\nValidator.create({                                                                                                     // 7\n  name: 'or',                                                                                                          // 8\n  parseParam: function parseParam(param) {                                                                             // 9\n    parseValidators(param);                                                                                            // 10\n  },                                                                                                                   // 11\n  validate: function validate(_ref) {                                                                                  // 12\n    var doc = _ref.doc;                                                                                                // 17\n    var name = _ref.name;                                                                                              // 17\n    var value = _ref.value;                                                                                            // 17\n    var validators = _ref.param;                                                                                       // 17\n                                                                                                                       //\n    var firstError = void 0;                                                                                           // 18\n    var isValid = _.some(validators, function (validator) {                                                            // 19\n      // Get validator.                                                                                                //\n      var validationFunction = Validators[validator.type];                                                             // 21\n      // Execute single validator.                                                                                     //\n      try {                                                                                                            // 23\n        validationFunction({                                                                                           // 24\n          doc: doc,                                                                                                    // 25\n          name: name,                                                                                                  // 26\n          value: value,                                                                                                // 27\n          param: validator.param                                                                                       // 28\n        });                                                                                                            // 24\n        return true;                                                                                                   // 30\n      } catch (err) {                                                                                                  // 31\n        if (ValidationError.is(err)) {                                                                                 // 33\n          // Collect only the first error that occured.                                                                //\n          if (!firstError) {                                                                                           // 35\n            firstError = err;                                                                                          // 36\n          }                                                                                                            // 37\n          return false;                                                                                                // 38\n        } else {                                                                                                       // 39\n          throw err;                                                                                                   // 41\n        }                                                                                                              // 42\n      }                                                                                                                // 43\n    });                                                                                                                // 44\n                                                                                                                       //\n    if (!isValid) {                                                                                                    // 46\n      throw firstError;                                                                                                // 47\n    }                                                                                                                  // 48\n  }                                                                                                                    // 49\n});                                                                                                                    // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"nested\":{\"every.js\":[\"lodash\",\"../../utils/parse_validators.js\",\"../../validator.js\",\"../../validators.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/nested/every.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var parseValidators;module.import('../../utils/parse_validators.js',{\"default\":function(v){parseValidators=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});var Validators;module.import('../../validators.js',{\"default\":function(v){Validators=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       // 4\n                                                                                                                       //\nValidator.create({                                                                                                     // 6\n  name: 'every',                                                                                                       // 7\n  parseParam: function parseParam(param) {                                                                             // 8\n    parseValidators(param);                                                                                            // 9\n  },                                                                                                                   // 10\n  validate: function validate(_ref) {                                                                                  // 11\n    var doc = _ref.doc;                                                                                                // 17\n    var name = _ref.name;                                                                                              // 17\n    var nestedName = _ref.nestedName;                                                                                  // 17\n    var value = _ref.value;                                                                                            // 17\n    var validators = _ref.param;                                                                                       // 17\n                                                                                                                       //\n    if (!_.isArray(value)) {                                                                                           // 18\n      throw new TypeError('The \"every\" validator can only work with arrays');                                          // 19\n    }                                                                                                                  // 22\n                                                                                                                       //\n    // Execute validators for each array element.                                                                      //\n    _.each(value, function (element, index) {                                                                          // 25\n      // Execute each validator.                                                                                       //\n      _.each(validators, function (validator) {                                                                        // 27\n        // Get validator.                                                                                              //\n        var validationFunction = Validators[validator.type];                                                           // 29\n        // Execute single validator.                                                                                   //\n        validationFunction({                                                                                           // 31\n          doc: doc,                                                                                                    // 32\n          name: name + '.' + index,                                                                                    // 33\n          nestedName: nestedName + '.' + index,                                                                        // 34\n          value: element,                                                                                              // 35\n          param: validator.param                                                                                       // 36\n        });                                                                                                            // 31\n      });                                                                                                              // 38\n    });                                                                                                                // 39\n  }                                                                                                                    // 40\n});                                                                                                                    // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"has.js\":[\"lodash\",\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/nested/has.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nValidator.create({                                                                                                     // 4\n  name: 'has',                                                                                                         // 5\n  isValid: function isValid(_ref) {                                                                                    // 6\n    var value = _ref.value;                                                                                            // 6\n    var param = _ref.param;                                                                                            // 6\n                                                                                                                       //\n    if (!_.isObject(value)) {                                                                                          // 7\n      throw new TypeError('The \"has\" validator can only work with objects');                                           // 8\n    }                                                                                                                  // 11\n    return _.has(value, param);                                                                                        // 12\n  },                                                                                                                   // 13\n  resolveError: function resolveError(_ref2) {                                                                         // 14\n    var name = _ref2.name;                                                                                             // 14\n    var param = _ref2.param;                                                                                           // 14\n                                                                                                                       //\n    return 'The \"' + name + '\" field does not have the \"' + param + '\" property';                                      // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"includes.js\":[\"lodash\",\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/nested/includes.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nValidator.create({                                                                                                     // 4\n  name: 'includes',                                                                                                    // 5\n  isValid: function isValid(_ref) {                                                                                    // 6\n    var value = _ref.value;                                                                                            // 6\n    var param = _ref.param;                                                                                            // 6\n                                                                                                                       //\n    if (!_.isArray(value) && !_.isArray(object)) {                                                                     // 7\n      throw new TypeError('The \"includes\" validator can only work with arrays and objects');                           // 8\n    }                                                                                                                  // 11\n    return _.includes(value, param);                                                                                   // 12\n  },                                                                                                                   // 13\n  resolveError: function resolveError(_ref2) {                                                                         // 14\n    var name = _ref2.name;                                                                                             // 14\n    var param = _ref2.param;                                                                                           // 14\n                                                                                                                       //\n    return 'The \"' + name + '\" field does not contain the \"' + param + '\" value';                                      // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"size\":{\"gt.js\":[\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/size/gt.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});                                // 1\n                                                                                                                       //\nValidator.create({                                                                                                     // 3\n  name: 'gt',                                                                                                          // 4\n  isValid: function isValid(_ref) {                                                                                    // 5\n    var value = _ref.value;                                                                                            // 5\n    var param = _ref.param;                                                                                            // 5\n                                                                                                                       //\n    return value > param;                                                                                              // 6\n  },                                                                                                                   // 7\n  resolveError: function resolveError(_ref2) {                                                                         // 8\n    var name = _ref2.name;                                                                                             // 8\n    var param = _ref2.param;                                                                                           // 8\n                                                                                                                       //\n    return '\"' + name + '\" has to be greater than ' + param;                                                           // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"gte.js\":[\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/size/gte.js                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});                                // 1\n                                                                                                                       //\nValidator.create({                                                                                                     // 3\n  name: 'gte',                                                                                                         // 4\n  isValid: function isValid(_ref) {                                                                                    // 5\n    var value = _ref.value;                                                                                            // 5\n    var param = _ref.param;                                                                                            // 5\n                                                                                                                       //\n    return value >= param;                                                                                             // 6\n  },                                                                                                                   // 7\n  resolveError: function resolveError(_ref2) {                                                                         // 8\n    var name = _ref2.name;                                                                                             // 8\n    var param = _ref2.param;                                                                                           // 8\n                                                                                                                       //\n    return '\"' + name + '\" has to be greater than or equal ' + param;                                                  // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"length.js\":[\"lodash\",\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/size/length.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nValidator.create({                                                                                                     // 4\n  name: 'length',                                                                                                      // 5\n  parseParam: function parseParam(param) {                                                                             // 6\n    if (!Match.test(param, Number)) {                                                                                  // 7\n      throw new TypeError('Parameter for the \"length\" validator has to be a number');                                  // 8\n    }                                                                                                                  // 11\n  },                                                                                                                   // 12\n  isValid: function isValid(_ref) {                                                                                    // 13\n    var value = _ref.value;                                                                                            // 13\n    var param = _ref.param;                                                                                            // 13\n                                                                                                                       //\n    if (!_.has(value, 'length')) {                                                                                     // 14\n      throw new TypeError('Length of the value can not be measured');                                                  // 15\n    }                                                                                                                  // 18\n    return value.length === param;                                                                                     // 19\n  },                                                                                                                   // 20\n  resolveError: function resolveError(_ref2) {                                                                         // 21\n    var name = _ref2.name;                                                                                             // 21\n    var param = _ref2.param;                                                                                           // 21\n                                                                                                                       //\n    return 'Length of \"' + name + '\" has to be ' + param;                                                              // 22\n  }                                                                                                                    // 23\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"lt.js\":[\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/size/lt.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});                                // 1\n                                                                                                                       //\nValidator.create({                                                                                                     // 3\n  name: 'lt',                                                                                                          // 4\n  isValid: function isValid(_ref) {                                                                                    // 5\n    var value = _ref.value;                                                                                            // 5\n    var param = _ref.param;                                                                                            // 5\n                                                                                                                       //\n    return value < param;                                                                                              // 6\n  },                                                                                                                   // 7\n  resolveError: function resolveError(_ref2) {                                                                         // 8\n    var name = _ref2.name;                                                                                             // 8\n    var param = _ref2.param;                                                                                           // 8\n                                                                                                                       //\n    return '\"' + name + '\" has to be less than ' + param;                                                              // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"lte.js\":[\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/size/lte.js                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});                                // 1\n                                                                                                                       //\nValidator.create({                                                                                                     // 3\n  name: 'lte',                                                                                                         // 4\n  isValid: function isValid(_ref) {                                                                                    // 5\n    var value = _ref.value;                                                                                            // 5\n    var param = _ref.param;                                                                                            // 5\n                                                                                                                       //\n    return value <= param;                                                                                             // 6\n  },                                                                                                                   // 7\n  resolveError: function resolveError(_ref2) {                                                                         // 8\n    var name = _ref2.name;                                                                                             // 8\n    var param = _ref2.param;                                                                                           // 8\n                                                                                                                       //\n    return '\"' + name + '\" has to be less than or equal ' + param;                                                     // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"max_length.js\":[\"lodash\",\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/size/max_length.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nValidator.create({                                                                                                     // 4\n  name: 'maxLength',                                                                                                   // 5\n  parseParam: function parseParam(param) {                                                                             // 6\n    if (!Match.test(param, Number)) {                                                                                  // 7\n      throw new TypeError('Parameter for the \"maxLength\" validator has to be a number');                               // 8\n    }                                                                                                                  // 11\n  },                                                                                                                   // 12\n  isValid: function isValid(_ref) {                                                                                    // 13\n    var value = _ref.value;                                                                                            // 13\n    var param = _ref.param;                                                                                            // 13\n                                                                                                                       //\n    if (!_.has(value, 'length')) {                                                                                     // 14\n      return false;                                                                                                    // 15\n    }                                                                                                                  // 16\n    return value.length <= param;                                                                                      // 17\n  },                                                                                                                   // 18\n  resolveError: function resolveError(_ref2) {                                                                         // 19\n    var name = _ref2.name;                                                                                             // 19\n    var param = _ref2.param;                                                                                           // 19\n                                                                                                                       //\n    return 'Length of \"' + name + '\" has to be at most ' + param;                                                      // 20\n  }                                                                                                                    // 21\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"min_length.js\":[\"lodash\",\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/size/min_length.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nValidator.create({                                                                                                     // 4\n  name: 'minLength',                                                                                                   // 5\n  parseParam: function parseParam(param) {                                                                             // 6\n    if (!Match.test(param, Number)) {                                                                                  // 7\n      throw new TypeError('Parameter for the \"minLength\" validator has to be a number');                               // 8\n    }                                                                                                                  // 11\n  },                                                                                                                   // 12\n  isValid: function isValid(_ref) {                                                                                    // 13\n    var value = _ref.value;                                                                                            // 13\n    var param = _ref.param;                                                                                            // 13\n                                                                                                                       //\n    if (!_.has(value, 'length')) {                                                                                     // 14\n      return false;                                                                                                    // 15\n    }                                                                                                                  // 16\n    return value.length >= param;                                                                                      // 17\n  },                                                                                                                   // 18\n  resolveError: function resolveError(_ref2) {                                                                         // 19\n    var name = _ref2.name;                                                                                             // 19\n    var param = _ref2.param;                                                                                           // 19\n                                                                                                                       //\n    return 'Length of \"' + name + '\" has to be at least ' + param;                                                     // 20\n  }                                                                                                                    // 21\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"type\":{\"array.js\":[\"lodash\",\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/type/array.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nValidator.create({                                                                                                     // 4\n  name: 'array',                                                                                                       // 5\n  isValid: function isValid(_ref) {                                                                                    // 6\n    var value = _ref.value;                                                                                            // 6\n                                                                                                                       //\n    return _.isArray(value);                                                                                           // 7\n  },                                                                                                                   // 8\n  resolveError: function resolveError(_ref2) {                                                                         // 9\n    var name = _ref2.name;                                                                                             // 9\n                                                                                                                       //\n    return '\"' + name + '\" has to be an array';                                                                        // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"boolean.js\":[\"lodash\",\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/type/boolean.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nValidator.create({                                                                                                     // 4\n  name: 'boolean',                                                                                                     // 5\n  isValid: function isValid(_ref) {                                                                                    // 6\n    var value = _ref.value;                                                                                            // 6\n                                                                                                                       //\n    return _.isBoolean(value);                                                                                         // 7\n  },                                                                                                                   // 8\n  resolveError: function resolveError(_ref2) {                                                                         // 9\n    var name = _ref2.name;                                                                                             // 9\n                                                                                                                       //\n    return '\"' + name + '\" has to be a boolean';                                                                       // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"class.js\":[\"../../validator.js\",\"../../../../core/class.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/type/class.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});var AstroClass;module.import('../../../../core/class.js',{\"default\":function(v){AstroClass=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nValidator.create({                                                                                                     // 4\n  name: 'class',                                                                                                       // 5\n  parseParam: function parseParam(param) {                                                                             // 6\n    if (!AstroClass.isParentOf(param)) {                                                                               // 7\n      throw new TypeError('Parameter for the \"class\" validator has to be an Astronomy class');                         // 8\n    }                                                                                                                  // 11\n  },                                                                                                                   // 12\n  isValid: function isValid(_ref) {                                                                                    // 13\n    var value = _ref.value;                                                                                            // 16\n    var Class = _ref.param;                                                                                            // 16\n                                                                                                                       //\n    return value instanceof Class;                                                                                     // 17\n  },                                                                                                                   // 18\n  resolveError: function resolveError(_ref2) {                                                                         // 19\n    var name = _ref2.name;                                                                                             // 22\n    var Class = _ref2.param;                                                                                           // 22\n                                                                                                                       //\n    var className = Class.getName();                                                                                   // 23\n    return '\"' + name + '\" has to be ' + className;                                                                    // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"date.js\":[\"lodash\",\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/type/date.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nValidator.create({                                                                                                     // 4\n  name: 'date',                                                                                                        // 5\n  isValid: function isValid(_ref) {                                                                                    // 6\n    var value = _ref.value;                                                                                            // 6\n                                                                                                                       //\n    return _.isDate(value);                                                                                            // 7\n  },                                                                                                                   // 8\n  resolveError: function resolveError(_ref2) {                                                                         // 9\n    var name = _ref2.name;                                                                                             // 9\n                                                                                                                       //\n    return '\"' + name + '\" has to be a date';                                                                          // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"integer.js\":[\"lodash\",\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/type/integer.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nValidator.create({                                                                                                     // 4\n  name: 'integer',                                                                                                     // 5\n  isValid: function isValid(_ref) {                                                                                    // 6\n    var value = _ref.value;                                                                                            // 6\n                                                                                                                       //\n    return _.isInteger(value);                                                                                         // 7\n  },                                                                                                                   // 8\n  resolveError: function resolveError(_ref2) {                                                                         // 9\n    var name = _ref2.name;                                                                                             // 9\n                                                                                                                       //\n    return '\"' + name + '\" has to be an integer';                                                                      // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"mongo_object_id.js\":[\"../../validator.js\",\"meteor/check\",\"meteor/mongo\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/type/mongo_object_id.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});var Match;module.import('meteor/check',{\"Match\":function(v){Match=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});\n                                                                                                                       // 2\n                                                                                                                       // 3\n                                                                                                                       //\nValidator.create({                                                                                                     // 5\n  name: 'mongoObjectID',                                                                                               // 6\n  isValid: function isValid(_ref) {                                                                                    // 7\n    var value = _ref.value;                                                                                            // 7\n                                                                                                                       //\n    return Match.test(value, Mongo.ObjectID);;                                                                         // 8\n  },                                                                                                                   // 9\n  resolveError: function resolveError(_ref2) {                                                                         // 10\n    var name = _ref2.name;                                                                                             // 10\n                                                                                                                       //\n    return '\"' + name + '\" has to be a Mongo.ObjectID';                                                                // 11\n  }                                                                                                                    // 12\n});                                                                                                                    // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"number.js\":[\"lodash\",\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/type/number.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nValidator.create({                                                                                                     // 4\n  name: 'number',                                                                                                      // 5\n  isValid: function isValid(_ref) {                                                                                    // 6\n    var value = _ref.value;                                                                                            // 6\n                                                                                                                       //\n    return _.isNumber(value);                                                                                          // 7\n  },                                                                                                                   // 8\n  resolveError: function resolveError(_ref2) {                                                                         // 9\n    var name = _ref2.name;                                                                                             // 9\n                                                                                                                       //\n    return '\"' + name + '\" has to be a number';                                                                        // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"object.js\":[\"lodash\",\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/type/object.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nValidator.create({                                                                                                     // 4\n  name: 'object',                                                                                                      // 5\n  isValid: function isValid(_ref) {                                                                                    // 6\n    var value = _ref.value;                                                                                            // 6\n                                                                                                                       //\n    return _.isObject(value);                                                                                          // 7\n  },                                                                                                                   // 8\n  resolveError: function resolveError(_ref2) {                                                                         // 9\n    var name = _ref2.name;                                                                                             // 9\n                                                                                                                       //\n    return '\"' + name + '\" has to be an object';                                                                       // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"string.js\":[\"lodash\",\"../../validator.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jagi_astronomy/lib/modules/validators/validators/type/string.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _;module.import('lodash',{\"default\":function(v){_=v}});var Validator;module.import('../../validator.js',{\"default\":function(v){Validator=v}});\n                                                                                                                       // 2\n                                                                                                                       //\nValidator.create({                                                                                                     // 4\n  name: 'string',                                                                                                      // 5\n  isValid: function isValid(_ref) {                                                                                    // 6\n    var value = _ref.value;                                                                                            // 6\n                                                                                                                       //\n    return _.isString(value);                                                                                          // 7\n  },                                                                                                                   // 8\n  resolveError: function resolveError(_ref2) {                                                                         // 9\n    var name = _ref2.name;                                                                                             // 9\n                                                                                                                       //\n    return '\"' + name + '\" has to be a string';                                                                        // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}}},\"node_modules\":{\"lodash\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../npm/node_modules/lodash/package.json                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash\";\nexports.version = \"4.14.1\";\nexports.main = \"lodash.js\";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lodash.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/jagi:astronomy/node_modules/lodash/lodash.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * @license\n * lodash <https://lodash.com/>\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.14.1';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Used as the `TypeError` message for \"Functions\" methods. */\n  var FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for function metadata. */\n  var BIND_FLAG = 1,\n      BIND_KEY_FLAG = 2,\n      CURRY_BOUND_FLAG = 4,\n      CURRY_FLAG = 8,\n      CURRY_RIGHT_FLAG = 16,\n      PARTIAL_FLAG = 32,\n      PARTIAL_RIGHT_FLAG = 64,\n      ARY_FLAG = 128,\n      REARG_FLAG = 256,\n      FLIP_FLAG = 512;\n\n  /** Used to compose bitmasks for comparison styles. */\n  var UNORDERED_COMPARE_FLAG = 1,\n      PARTIAL_COMPARE_FLAG = 2;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 150,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', ARY_FLAG],\n    ['bind', BIND_FLAG],\n    ['bindKey', BIND_KEY_FLAG],\n    ['curry', CURRY_FLAG],\n    ['curryRight', CURRY_RIGHT_FLAG],\n    ['flip', FLIP_FLAG],\n    ['partial', PARTIAL_FLAG],\n    ['partialRight', PARTIAL_RIGHT_FLAG],\n    ['rearg', REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,\n      reUnescapedHtml = /[&<>\"'`]/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      reLeadingDot = /^\\./,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g,\n      reTrimStart = /^\\s+/,\n      reTrimEnd = /\\s+$/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match non-compound words composed of alphanumeric characters. */\n  var reBasicWord = /[a-zA-Z0-9]+/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect hexadecimal string values. */\n  var reHasHexPrefix = /^0x/i;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */\n  var reLatin1 = /[\\xc0-\\xd6\\xd8-\\xde\\xdf-\\xf6\\xf8-\\xff]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reComplexWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',\n    rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,\n    rsUpper + '+' + rsOptUpperContr,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasComplexWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError',\n    'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map latin-1 supplementary letters to basic latin letters. */\n  var deburredLetters = {\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcC': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xeC': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '`': '&#96;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\",\n    '&#96;': '`'\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      return freeProcess && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Adds the key-value `pair` to `map`.\n   *\n   * @private\n   * @param {Object} map The map to modify.\n   * @param {Array} pair The key-value pair to add.\n   * @returns {Object} Returns `map`.\n   */\n  function addMapEntry(map, pair) {\n    // Don't return `map.set` because it's not chainable in IE 11.\n    map.set(pair[0], pair[1]);\n    return map;\n  }\n\n  /**\n   * Adds `value` to `set`.\n   *\n   * @private\n   * @param {Object} set The set to modify.\n   * @param {*} value The value to add.\n   * @returns {Object} Returns `set`.\n   */\n  function addSetEntry(set, value) {\n    // Don't return `set.add` because it's not chainable in IE 11.\n    set.add(value);\n    return set;\n  }\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array ? array.length : 0;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array ? array.length : 0,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to search.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array ? array.length : 0;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to search.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array ? array.length : 0,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array ? array.length : 0;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to search.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    if (value !== value) {\n      return baseFindIndex(array, baseIsNaN, fromIndex);\n    }\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array ? array.length : 0;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a cache value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        result++;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `value` is a host object in IE < 9.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n   */\n  function isHostObject(value) {\n    // Many host objects are `Object` objects that can coerce to strings\n    // despite having improperly defined `toString` methods.\n    var result = false;\n    if (value != null && typeof value.toString != 'function') {\n      try {\n        result = !!(value + '');\n      } catch (e) {}\n    }\n    return result;\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a function that invokes `func` with its first argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    if (!(string && reHasComplexSymbol.test(string))) {\n      return string.length;\n    }\n    var result = reComplexSymbol.lastIndex = 0;\n    while (reComplexSymbol.test(string)) {\n      result++;\n    }\n    return result;\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return string.match(reComplexSymbol);\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Use `context` to stub `Date#getTime` use in `_.now`.\n   * var stubbed = _.runInContext({\n   *   'Date': function() {\n   *     return { 'getTime': stubGetTime };\n   *   }\n   * });\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  function runInContext(context) {\n    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Math = context.Math,\n        RegExp = context.RegExp,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = context.Array.prototype,\n        objectProto = context.Object.prototype,\n        stringProto = context.String.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = context.Function.prototype.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var objectToString = objectProto.toString;\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Reflect = context.Reflect,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        enumerate = Reflect ? Reflect.enumerate : undefined,\n        iteratorSymbol = Symbol ? Symbol.iterator : undefined,\n        objectCreate = context.Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n    /** Built-in method references that are mockable. */\n    var clearTimeout = function(id) { return context.clearTimeout.call(root, id); },\n        setTimeout = function(func, wait) { return context.setTimeout.call(root, func, wait); };\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetPrototype = Object.getPrototypeOf,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = Object.keys,\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReplace = stringProto.replace,\n        nativeReverse = arrayProto.reverse,\n        nativeSplit = stringProto.split;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(context.Object, 'create');\n\n    /* Used to set `toString` methods. */\n    var defineProperty = (function() {\n      var func = getNative(context.Object, 'defineProperty'),\n          name = getNative.name;\n\n      return (name && name.length > 2) ? func : undefined;\n    }());\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */\n    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array of at least `200` elements\n     * and any iteratees accept only one argument. The heuristic for whether a\n     * section qualifies for shortcut fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB). Change the following template settings to use\n     * alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||\n          (arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries ? entries.length : 0;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      return this.has(key) && delete this.__data__[key];\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries ? entries.length : 0;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries ? entries.length : 0;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      return getMapData(this, key)['delete'](key);\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      getMapData(this, key).set(key, value);\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values ? values.length : 0;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      this.__data__ = new ListCache(entries);\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      return this.__data__['delete'](key);\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var cache = this.__data__;\n      if (cache instanceof ListCache) {\n        var pairs = cache.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          return this;\n        }\n        cache = this.__data__ = new MapCache(pairs);\n      }\n      cache.set(key, value);\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function assignInDefaults(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (typeof key == 'number' && value === undefined && !(key in object))) {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths of elements to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          isNil = object == null,\n          length = paths.length,\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = isNil ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @param {boolean} [isFull] Specify a clone including symbols.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n      var result;\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          if (isHostObject(value)) {\n            return object ? value : {};\n          }\n          result = initCloneObject(isFunc ? {} : value);\n          if (!isDeep) {\n            return copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, baseClone, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      if (!isArr) {\n        var props = isFull ? getAllKeys(value) : keys(value);\n      }\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      var index = length;\n      while (index--) {\n        var key = props[index],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined &&\n            !(key in Object(object))) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} prototype The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    function baseCreate(proto) {\n      return isObject(proto) ? objectCreate(proto) : {};\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number} Returns the timer id.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = isKey(path, object) ? [path] : castPath(path);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      return objectToString.call(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,\n      // that are composed entirely of index properties, return `false` for\n      // `hasOwnProperty` checks of them.\n      return object != null &&\n        (hasOwnProperty.call(object, key) ||\n          (typeof object == 'object' && key in object && getPrototype(object) === null));\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      if (!isKey(path, object)) {\n        path = castPath(path);\n        object = parent(object, path);\n        path = last(path);\n      }\n      var func = object == null ? object : object[toKey(path)];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && objectToString.call(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {boolean} [bitmask] The bitmask of comparison flags.\n     *  The bitmask may be composed of the following flags:\n     *     1 - Unordered comparison\n     *     2 - Partial comparison\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, customizer, bitmask, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = arrayTag,\n          othTag = arrayTag;\n\n      if (!objIsArr) {\n        objTag = getTag(object);\n        objTag = objTag == argsTag ? objectTag : objTag;\n      }\n      if (!othIsArr) {\n        othTag = getTag(other);\n        othTag = othTag == argsTag ? objectTag : othTag;\n      }\n      var objIsObj = objTag == objectTag && !isHostObject(object),\n          othIsObj = othTag == objectTag && !isHostObject(other),\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\n          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n      }\n      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObject(value) && objectToString.call(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't skip the constructor\n     * property of prototypes or treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    var baseKeys = overArg(nativeKeys, Object);\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't skip the constructor\n     * property of prototypes or treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      object = object == null ? object : Object(object);\n\n      var result = [];\n      for (var key in object) {\n        result.push(key);\n      }\n      return result;\n    }\n\n    // Fallback for IE < 9 with es6-shim.\n    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {\n      baseKeysIn = function(object) {\n        return iteratorToArray(enumerate(object));\n      };\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      if (!(isArray(source) || isTypedArray(source))) {\n        var props = keysIn(source);\n      }\n      arrayEach(props || source, function(srcValue, key) {\n        if (props) {\n          key = srcValue;\n          srcValue = source[key];\n        }\n        if (isObject(srcValue)) {\n          stack || (stack = new Stack);\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(object[key], srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      });\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = object[key],\n          srcValue = source[key],\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        newValue = srcValue;\n        if (isArray(srcValue) || isTypedArray(srcValue)) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else {\n            isCommon = false;\n            newValue = baseClone(srcValue, true);\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n            isCommon = false;\n            newValue = baseClone(srcValue, true);\n          }\n          else {\n            newValue = objValue;\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      var index = -1;\n      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} props The property identifiers to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, props) {\n      object = Object(object);\n      return basePickBy(object, props, function(value, key) {\n        return key in object;\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} props The property identifiers to pick from.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, props, predicate) {\n      var index = -1,\n          length = props.length,\n          result = {};\n\n      while (++index < length) {\n        var key = props[index],\n            value = object[key];\n\n        if (predicate(value, key)) {\n          result[key] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          }\n          else if (!isKey(index, array)) {\n            var path = castPath(index),\n                object = parent(array, path);\n\n            if (object != null) {\n              delete object[toKey(last(path))];\n            }\n          }\n          else {\n            delete array[toKey(index)];\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = array;\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      path = isKey(path, object) ? [path] : castPath(path);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]);\n        if (isObject(nested)) {\n          var newValue = value;\n          if (index != lastIndex) {\n            var objValue = nested[key];\n            newValue = customizer ? customizer(objValue, key, nested) : undefined;\n            if (newValue === undefined) {\n              newValue = objValue == null\n                ? (isIndex(path[index + 1]) ? [] : {})\n                : objValue;\n            }\n          }\n          assignValue(nested, key, newValue);\n        }\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop detection.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array ? array.length : low;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      value = iteratee(value);\n\n      var low = 0,\n          high = array ? array.length : 0,\n          valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = isKey(path, object) ? [path] : castPath(path);\n      object = parent(object, path);\n\n      var key = toKey(last(path));\n      return !(object != null && baseHas(object, key)) || delete object[key];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var index = -1,\n          length = arrays.length;\n\n      while (++index < length) {\n        var result = result\n          ? arrayPush(\n              baseDifference(result, arrays[index], iteratee, comparator),\n              baseDifference(arrays[index], result, iteratee, comparator)\n            )\n          : arrays[index];\n      }\n      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value) {\n      return isArray(value) ? value : stringToPath(value);\n    }\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var result = new buffer.constructor(buffer.length);\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `map`.\n     *\n     * @private\n     * @param {Object} map The map to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned map.\n     */\n    function cloneMap(map, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n      return arrayReduce(array, addMapEntry, new map.constructor);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of `set`.\n     *\n     * @private\n     * @param {Object} set The set to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned set.\n     */\n    function cloneSet(set, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n      return arrayReduce(array, addSetEntry, new set.constructor);\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        assignValue(object, key, newValue === undefined ? source[key] : newValue);\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbol properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = reHasComplexSymbol.test(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return baseRest(function(funcs) {\n        funcs = baseFlatten(funcs, 1);\n\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 &&\n              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & ARY_FLAG,\n          isBind = bitmask & BIND_FLAG,\n          isBindKey = bitmask & BIND_KEY_FLAG,\n          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),\n          isFlip = bitmask & FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return baseRest(function(iteratees) {\n        iteratees = (iteratees.length == 1 && isArray(iteratees[0]))\n          ? arrayMap(iteratees[0], baseUnary(getIteratee()))\n          : arrayMap(baseFlatten(iteratees, 1), baseUnary(getIteratee()));\n\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return reHasComplexSymbol.test(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);\n\n      if (!(bitmask & CURRY_BOUND_FLAG)) {\n        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = nativeMin(toInteger(precision), 292);\n        if (precision) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *  The bitmask may be composed of the following flags:\n     *     1 - `_.bind`\n     *     2 - `_.bindKey`\n     *     4 - `_.curry` or `_.curryRight` of a bound function\n     *     8 - `_.curry`\n     *    16 - `_.curryRight`\n     *    32 - `_.partial`\n     *    64 - `_.partialRight`\n     *   128 - `_.rearg`\n     *   256 - `_.ary`\n     *   512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] == null\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(array);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!seen.has(othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n                  return seen.add(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, customizer, bitmask, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= UNORDERED_COMPARE_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n          objProps = keys(object),\n          objLength = objProps.length,\n          othProps = keys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : baseHas(other, key))) {\n          return false;\n        }\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the \"length\" property value of `object`.\n     *\n     * **Note:** This function is used to avoid a\n     * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects\n     * Safari on at least iOS 8.1-8.3 ARM64.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {*} Returns the \"length\" value.\n     */\n    var getLength = baseProperty('length');\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * Gets the `[[Prototype]]` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {null|Object} Returns the `[[Prototype]]`.\n     */\n    var getPrototype = overArg(nativeGetPrototype, Object);\n\n    /**\n     * Creates an array of the own enumerable symbol properties of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n    /**\n     * Creates an array of the own and inherited enumerable symbol properties\n     * of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11,\n    // for data views in Edge, and promises in Node.js.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = objectToString.call(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : undefined;\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = isKey(path, object) ? [path] : castPath(path);\n\n      var result,\n          index = -1,\n          length = path.length;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result) {\n        return result;\n      }\n      var length = object ? object.length : 0;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isString(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, cloneFunc, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return cloneMap(object, isDeep, cloneFunc);\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return cloneSet(object, isDeep, cloneFunc);\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Creates an array of index keys for `object` values of arrays,\n     * `arguments` objects, and strings, otherwise `null` is returned.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array|null} Returns index keys, else `null`.\n     */\n    function indexKeys(object) {\n      var length = object ? object.length : undefined;\n      if (isLength(length) &&\n          (isArray(object) || isString(object) || isArguments(object))) {\n        return baseTimes(length, String);\n      }\n      return null;\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length,\n          lastIndex = length - 1;\n\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      length = length == null ? MAX_SAFE_INTEGER : length;\n      return !!length &&\n        (typeof value == 'number' || reIsUint.test(value)) &&\n        (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||\n        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function mergeDefaults(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = (function() {\n      var count = 0,\n          lastCalled = 0;\n\n      return function(key, value) {\n        var stamp = now(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return key;\n          }\n        } else {\n          count = 0;\n        }\n        return baseSetData(key, value);\n      };\n    }());\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    var setWrapToString = !defineProperty ? identity : function(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return defineProperty(wrapper, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)))\n      });\n    };\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoize(function(string) {\n      string = toString(string);\n\n      var result = [];\n      if (reLeadingDot.test(string)) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, string) {\n        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to process.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array ? array.length : 0;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array ? array.length : 0,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length,\n          args = Array(length ? length - 1 : 0),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return length\n        ? arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1))\n        : [];\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons. The order of result values is determined by the\n     * order they occur in the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. Result values are chosen from the first array.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. Result values\n     * are chosen from the first array. The comparator is invoked with two arguments:\n     * (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to search.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to search.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array ? array.length : 0;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array ? array.length : 0;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs ? pairs.length : 0,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      return dropRight(array, 1);\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons. The order of result values is determined by the\n     * order they occur in the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. Result values are chosen from the first array.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. Result values are chosen\n     * from the first array. The comparator is invoked with two arguments:\n     * (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (comparator === last(mapped)) {\n        comparator = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array ? nativeJoin.call(array, separator) : '';\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array ? array.length : 0;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = (\n          index < 0\n            ? nativeMax(length + index, 0)\n            : nativeMin(index, length - 1)\n        ) + 1;\n      }\n      if (value !== value) {\n        return baseFindIndex(array, baseIsNaN, index - 1, true);\n      }\n      while (index--) {\n        if (array[index] === value) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = baseRest(function(array, indexes) {\n      indexes = baseFlatten(indexes, 1);\n\n      var length = array ? array.length : 0,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array ? nativeReverse.call(array) : array;\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array ? array.length : 0;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array ? array.length : 0;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      return drop(array, 1);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false},\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each\n     * element is kept.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length)\n        ? baseUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The comparator is invoked with\n     * two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      return (array && array.length)\n        ? baseUniq(array, undefined, comparator)\n        : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The comparator is invoked with\n     * two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths of elements to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = baseRest(function(paths) {\n      paths = baseFlatten(paths, 1);\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to search.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to search.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity]\n     *  The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity]\n     *  The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity]\n     *  The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _([1, 2]).forEach(function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        result[key] = [value];\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to search.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          isProp = isKey(path),\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);\n        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      result[key] = value;\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var array = isArrayLike(collection) ? collection : values(collection),\n          length = array.length;\n\n      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      var index = -1,\n          result = toArray(collection),\n          length = result.length,\n          lastIndex = length - 1;\n\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = baseClamp(toInteger(n), 0, length);\n      }\n      while (++index < n) {\n        var rand = baseRandom(index, lastIndex),\n            value = result[rand];\n\n        result[rand] = result[index];\n        result[index] = value;\n      }\n      result.length = n;\n      return result;\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      return sampleSize(collection, MAX_ARRAY_LENGTH);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        var result = collection.length;\n        return (result && isString(collection)) ? stringSize(collection) : result;\n      }\n      if (isObjectLike(collection)) {\n        var tag = getTag(collection);\n        if (tag == mapTag || tag == setTag) {\n          return collection.size;\n        }\n      }\n      return keys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, function(o) { return o.user; });\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n     *\n     * _.sortBy(users, 'user', function(o) {\n     *   return Math.floor(o.age / 10);\n     * });\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    function now() {\n      return Date.now();\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = BIND_FLAG | BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            result = wait - timeSinceLastCall;\n\n        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one or more milliseconds.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result);\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Assign cache to `_.memoize`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = baseRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = baseRest(function(func, indexes) {\n      return createWrap(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/6.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      wrapper = wrapper == null ? identity : wrapper;\n      return partial(wrapper, value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, false, true);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      return baseClone(value, false, true, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, true, true);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      return baseClone(value, true, true, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    function isArguments(value) {\n      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.\n      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n    }\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(getLength(value)) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && objectToString.call(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element,\n     *  else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (isArrayLike(value) &&\n          (isArray(value) || isString(value) || isFunction(value.splice) ||\n            isArguments(value) || isBuffer(value))) {\n        return !value.length;\n      }\n      if (isObjectLike(value)) {\n        var tag = getTag(value);\n        if (tag == mapTag || tag == setTag) {\n          return !value.size;\n        }\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return !(nonEnumShadows && keys(value).length);\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are **not** supported.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent,\n     *  else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent,\n     *  else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object,\n     *  else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      return (objectToString.call(value) == errorTag) ||\n        (typeof value.message == 'string' && typeof value.name == 'string');\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number,\n     *  else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 8 which returns 'object' for typed array and weak map constructors,\n      // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.\n      var tag = isObject(value) ? objectToString.call(value) : '';\n      return tag == funcTag || tag == genTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This function is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length,\n     *  else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return !!value && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return !!value && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method supports comparing the same values as `_.isEqual`\n     * and is equivalent to `_.matches` when `source` is partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error('This method is not supported with core-js. Try https://github.com/es-shims.');\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && objectToString.call(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object,\n     *  else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) ||\n          objectToString.call(value) != objectTag || isHostObject(value)) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return (typeof Ctor == 'function' &&\n        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer,\n     *  else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && objectToString.call(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && objectToString.call(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (iteratorSymbol && value[iteratorSymbol]) {\n        return iteratorToArray(value[iteratorSymbol]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = isFunction(value.valueOf) ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = value.replace(reTrim, '');\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keysIn(source), object);\n        return;\n      }\n      for (var key in source) {\n        assignValue(object, key, source[key]);\n      }\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths of elements to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = baseRest(function(object, paths) {\n      return baseAt(object, baseFlatten(paths, 1));\n    });\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties ? baseAssign(result, properties) : result;\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(args) {\n      args.push(undefined, assignInDefaults);\n      return apply(assignInWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, mergeDefaults);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to search.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to search.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      var isProto = isPrototype(object);\n      if (!(isProto || isArrayLike(object))) {\n        return baseKeys(object);\n      }\n      var indexes = indexKeys(object),\n          skipIndexes = !!indexes,\n          result = indexes || [],\n          length = result.length;\n\n      for (var key in object) {\n        if (baseHas(object, key) &&\n            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&\n            !(isProto && key == 'constructor')) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      var index = -1,\n          isProto = isPrototype(object),\n          props = baseKeysIn(object),\n          propsLength = props.length,\n          indexes = indexKeys(object),\n          skipIndexes = !!indexes,\n          result = indexes || [],\n          length = result.length;\n\n      while (++index < propsLength) {\n        var key = props[index];\n        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&\n            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        result[iteratee(value, key, object)] = value;\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        result[key] = iteratee(value, key, object);\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with seven arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable string keyed properties of `object` that are\n     * not omitted.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [props] The property identifiers to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = baseRest(function(object, props) {\n      if (object == null) {\n        return {};\n      }\n      props = arrayMap(baseFlatten(props, 1), toKey);\n      return basePick(object, baseDifference(getAllKeysIn(object), props));\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [props] The property identifiers to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = baseRest(function(object, props) {\n      return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      return object == null ? {} : basePickBy(object, getAllKeysIn(object), getIteratee(predicate));\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = isKey(path, object) ? [path] : castPath(path);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        object = undefined;\n        length = 1;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object) || isTypedArray(object);\n      iteratee = getIteratee(iteratee, 4);\n\n      if (accumulator == null) {\n        if (isArr || isObject(object)) {\n          var Ctor = object.constructor;\n          if (isArr) {\n            accumulator = isArray(object) ? new Ctor : [];\n          } else {\n            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n          }\n        } else {\n          accumulator = {};\n        }\n      }\n      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object ? baseValues(object, keys(object)) : [];\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * to basic latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to search.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\" in `string` to\n     * their corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * Backticks are escaped because in IE < 9, they can break out of\n     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),\n     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\n     * [#133](https://html5sec.org/#133) of the\n     * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      // Chrome fails to trim leading <BOM> whitespace characters.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=3109 for more details.\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      string = toString(string).replace(reTrim, '');\n      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : nativeReplace.call(string, args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (separator == '' && reHasComplexSymbol.test(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return nativeSplit.call(string, separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to search.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = baseClamp(toInteger(position), 0, string.length);\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES delimiter as an alternative to the default \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, assignInDefaults);\n\n      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      var sourceURL = '//# sourceURL=' +\n        ('sourceURL' in options\n          ? options.sourceURL\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrim, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimEnd, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (reHasComplexSymbol.test(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = baseRest(function(object, methodNames) {\n      arrayEach(baseFlatten(methodNames, 1), function(key) {\n        key = toKey(key);\n        object[key] = bind(object[key], object);\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs ? pairs.length : 0,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, true));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function supports comparing the same values as\n     * `_.isEqual` is equivalent to `_.isMatch` with `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, true));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** This method supports comparing the same values as `_.isEqual`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, true));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(value));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        var filtered = this.__filtered__;\n        if (filtered && !index) {\n          return new LazyWrapper(this);\n        }\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = this.clone();\n        if (filtered) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = (lodashFunc.name + ''),\n            names = realNames[key] || (realNames[key] = []);\n\n        names.push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (iteratorSymbol) {\n      lodash.prototype[iteratorSymbol] = wrapperToIterator;\n    }\n    return lodash;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    define(function() {\n      return _;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else if (freeModule) {\n    // Export for Node.js.\n    (freeModule.exports = _)._ = _;\n    // Export for CommonJS support.\n    freeExports._ = _;\n  }\n  else {\n    // Export to the global object.\n    root._ = _;\n  }\n}.call(this));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/jagi:astronomy/lib/main.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['jagi:astronomy'] = exports, {\n  Astro: Astro\n});\n\n})();\n","servePath":"/packages/jagi_astronomy.js","sourceMap":{"version":3,"sources":["/packages/jagi:astronomy/lib/main.js","/packages/jagi:astronomy/lib/core/class.js","/packages/jagi:astronomy/lib/core/config.js","/packages/jagi:astronomy/lib/core/ejson.js","/packages/jagi:astronomy/lib/core/module.js","/packages/jagi:astronomy/lib/core/reserved_keywords.js","/packages/jagi:astronomy/lib/modules/behaviors/behavior.js","/packages/jagi:astronomy/lib/modules/behaviors/module.js","/packages/jagi:astronomy/lib/modules/behaviors/class_static_methods/get_behavior.js","/packages/jagi:astronomy/lib/modules/behaviors/class_static_methods/get_behaviors.js","/packages/jagi:astronomy/lib/modules/behaviors/class_static_methods/has_behavior.js","/packages/jagi:astronomy/lib/modules/behaviors/hooks/apply_definition.js","/packages/jagi:astronomy/lib/modules/behaviors/hooks/init_class.js","/packages/jagi:astronomy/lib/modules/behaviors/hooks/init_definition.js","/packages/jagi:astronomy/lib/modules/behaviors/hooks/init_schema.js","/packages/jagi:astronomy/lib/modules/behaviors/hooks/merge_definitions.js","/packages/jagi:astronomy/lib/modules/behaviors/hooks/parse_definition.js","/packages/jagi:astronomy/lib/modules/core/module.js","/packages/jagi:astronomy/lib/modules/core/utils/clone_definition.js","/packages/jagi:astronomy/lib/modules/core/utils/override_method.js","/packages/jagi:astronomy/lib/modules/core/utils/throw_parse_error.js","/packages/jagi:astronomy/lib/modules/core/utils/warn.js","/packages/jagi:astronomy/lib/modules/events/event.js","/packages/jagi:astronomy/lib/modules/events/module.js","/packages/jagi:astronomy/lib/modules/events/class_prototype_methods/dispatch_event.js","/packages/jagi:astronomy/lib/modules/events/class_static_methods/dispatch_event.js","/packages/jagi:astronomy/lib/modules/events/class_static_methods/get_events.js","/packages/jagi:astronomy/lib/modules/events/class_static_methods/has_event.js","/packages/jagi:astronomy/lib/modules/events/hooks/apply_definition.js","/packages/jagi:astronomy/lib/modules/events/hooks/init_class.js","/packages/jagi:astronomy/lib/modules/events/hooks/init_definition.js","/packages/jagi:astronomy/lib/modules/events/hooks/init_schema.js","/packages/jagi:astronomy/lib/modules/events/hooks/merge_definitions.js","/packages/jagi:astronomy/lib/modules/events/hooks/parse_definition.js","/packages/jagi:astronomy/lib/modules/fields/Field.js","/packages/jagi:astronomy/lib/modules/fields/ListField.js","/packages/jagi:astronomy/lib/modules/fields/ObjectField.js","/packages/jagi:astronomy/lib/modules/fields/ScalarField.js","/packages/jagi:astronomy/lib/modules/fields/enum.js","/packages/jagi:astronomy/lib/modules/fields/module.js","/packages/jagi:astronomy/lib/modules/fields/type.js","/packages/jagi:astronomy/lib/modules/fields/class_events/from_json_value.js","/packages/jagi:astronomy/lib/modules/fields/class_events/to_json_value.js","/packages/jagi:astronomy/lib/modules/fields/class_prototype_methods/get.js","/packages/jagi:astronomy/lib/modules/fields/class_prototype_methods/raw.js","/packages/jagi:astronomy/lib/modules/fields/class_prototype_methods/set.js","/packages/jagi:astronomy/lib/modules/fields/class_static_methods/get_field.js","/packages/jagi:astronomy/lib/modules/fields/class_static_methods/get_fields.js","/packages/jagi:astronomy/lib/modules/fields/class_static_methods/get_fields_names.js","/packages/jagi:astronomy/lib/modules/fields/class_static_methods/get_list_fields.js","/packages/jagi:astronomy/lib/modules/fields/class_static_methods/get_object_fields.js","/packages/jagi:astronomy/lib/modules/fields/class_static_methods/get_scalar_fields.js","/packages/jagi:astronomy/lib/modules/fields/class_static_methods/has_field.js","/packages/jagi:astronomy/lib/modules/fields/hooks/apply_definition.js","/packages/jagi:astronomy/lib/modules/fields/hooks/init_class.js","/packages/jagi:astronomy/lib/modules/fields/hooks/init_definition.js","/packages/jagi:astronomy/lib/modules/fields/hooks/init_schema.js","/packages/jagi:astronomy/lib/modules/fields/hooks/merge_definitions.js","/packages/jagi:astronomy/lib/modules/fields/hooks/parse_definition.js","/packages/jagi:astronomy/lib/modules/fields/types/boolean.js","/packages/jagi:astronomy/lib/modules/fields/types/date.js","/packages/jagi:astronomy/lib/modules/fields/types/mongo_object_id.js","/packages/jagi:astronomy/lib/modules/fields/types/number.js","/packages/jagi:astronomy/lib/modules/fields/types/object.js","/packages/jagi:astronomy/lib/modules/fields/types/string.js","/packages/jagi:astronomy/lib/modules/fields/utils/castToClass.js","/packages/jagi:astronomy/lib/modules/fields/utils/cast_nested.js","/packages/jagi:astronomy/lib/modules/fields/utils/get_all.js","/packages/jagi:astronomy/lib/modules/fields/utils/get_many.js","/packages/jagi:astronomy/lib/modules/fields/utils/get_one.js","/packages/jagi:astronomy/lib/modules/fields/utils/is_nested_field_name.js","/packages/jagi:astronomy/lib/modules/fields/utils/raw_all.js","/packages/jagi:astronomy/lib/modules/fields/utils/raw_many.js","/packages/jagi:astronomy/lib/modules/fields/utils/raw_one.js","/packages/jagi:astronomy/lib/modules/fields/utils/resolve_values.js","/packages/jagi:astronomy/lib/modules/fields/utils/set_all.js","/packages/jagi:astronomy/lib/modules/fields/utils/set_defaults.js","/packages/jagi:astronomy/lib/modules/fields/utils/set_many.js","/packages/jagi:astronomy/lib/modules/fields/utils/set_one.js","/packages/jagi:astronomy/lib/modules/fields/utils/traverse.js","/packages/jagi:astronomy/lib/modules/indexes/module.js","/packages/jagi:astronomy/lib/modules/indexes/class_static_methods/get_index.js","/packages/jagi:astronomy/lib/modules/indexes/class_static_methods/get_indexes.js","/packages/jagi:astronomy/lib/modules/indexes/class_static_methods/has_index.js","/packages/jagi:astronomy/lib/modules/indexes/hooks/apply_definition.js","/packages/jagi:astronomy/lib/modules/indexes/hooks/init_class.js","/packages/jagi:astronomy/lib/modules/indexes/hooks/init_definition.js","/packages/jagi:astronomy/lib/modules/indexes/hooks/init_schema.js","/packages/jagi:astronomy/lib/modules/indexes/hooks/merge_definitions.js","/packages/jagi:astronomy/lib/modules/indexes/hooks/parse_definition.js","/packages/jagi:astronomy/lib/modules/methods/module.js","/packages/jagi:astronomy/lib/modules/methods/class_static_methods/get_method.js","/packages/jagi:astronomy/lib/modules/methods/class_static_methods/get_methods.js","/packages/jagi:astronomy/lib/modules/methods/class_static_methods/has_method.js","/packages/jagi:astronomy/lib/modules/methods/hooks/apply_definition.js","/packages/jagi:astronomy/lib/modules/methods/hooks/init_class.js","/packages/jagi:astronomy/lib/modules/methods/hooks/init_definition.js","/packages/jagi:astronomy/lib/modules/methods/hooks/init_schema.js","/packages/jagi:astronomy/lib/modules/methods/hooks/merge_definitions.js","/packages/jagi:astronomy/lib/modules/methods/hooks/parse_definition.js","/packages/jagi:astronomy/lib/modules/storage/module.js","/packages/jagi:astronomy/lib/modules/storage/class_events/after_init.js","/packages/jagi:astronomy/lib/modules/storage/class_events/before_init.js","/packages/jagi:astronomy/lib/modules/storage/class_events/from_json_value.js","/packages/jagi:astronomy/lib/modules/storage/class_events/to_json_value.js","/packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/copy.js","/packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/get_modified.js","/packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/get_modified_values.js","/packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/get_modifier.js","/packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/is_modified.js","/packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/reload.js","/packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/remove.js","/packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/save.js","/packages/jagi:astronomy/lib/modules/storage/class_static_methods/find.js","/packages/jagi:astronomy/lib/modules/storage/class_static_methods/get_collection.js","/packages/jagi:astronomy/lib/modules/storage/class_static_methods/get_transform.js","/packages/jagi:astronomy/lib/modules/storage/class_static_methods/get_type_field.js","/packages/jagi:astronomy/lib/modules/storage/class_static_methods/insert.js","/packages/jagi:astronomy/lib/modules/storage/class_static_methods/is_secured.js","/packages/jagi:astronomy/lib/modules/storage/class_static_methods/remove.js","/packages/jagi:astronomy/lib/modules/storage/class_static_methods/update.js","/packages/jagi:astronomy/lib/modules/storage/class_static_methods/upsert.js","/packages/jagi:astronomy/lib/modules/storage/hooks/apply_definition.js","/packages/jagi:astronomy/lib/modules/storage/hooks/init_class.js","/packages/jagi:astronomy/lib/modules/storage/hooks/init_definition.js","/packages/jagi:astronomy/lib/modules/storage/hooks/init_schema.js","/packages/jagi:astronomy/lib/modules/storage/hooks/merge_definitions.js","/packages/jagi:astronomy/lib/modules/storage/hooks/parse_definition.js","/packages/jagi:astronomy/lib/modules/storage/meteor_methods/insert.js","/packages/jagi:astronomy/lib/modules/storage/meteor_methods/remove.js","/packages/jagi:astronomy/lib/modules/storage/meteor_methods/update.js","/packages/jagi:astronomy/lib/modules/storage/meteor_methods/upsert.js","/packages/jagi:astronomy/lib/modules/storage/utils/already_in_simulation.js","/packages/jagi:astronomy/lib/modules/storage/utils/apply_modifier.js","/packages/jagi:astronomy/lib/modules/storage/utils/call_meteor_method.js","/packages/jagi:astronomy/lib/modules/storage/utils/class_insert.js","/packages/jagi:astronomy/lib/modules/storage/utils/class_remove.js","/packages/jagi:astronomy/lib/modules/storage/utils/class_update.js","/packages/jagi:astronomy/lib/modules/storage/utils/class_upsert.js","/packages/jagi:astronomy/lib/modules/storage/utils/document_insert.js","/packages/jagi:astronomy/lib/modules/storage/utils/document_remove.js","/packages/jagi:astronomy/lib/modules/storage/utils/document_update.js","/packages/jagi:astronomy/lib/modules/storage/utils/get_modified.js","/packages/jagi:astronomy/lib/modules/storage/utils/get_modifier.js","/packages/jagi:astronomy/lib/modules/storage/utils/has_meteor_method.js","/packages/jagi:astronomy/lib/modules/storage/utils/is_modified.js","/packages/jagi:astronomy/lib/modules/storage/utils/is_remote.js","/packages/jagi:astronomy/lib/modules/storage/utils/omit_undefined.js","/packages/jagi:astronomy/lib/modules/storage/utils/throw_if_selector_is_not_id.js","/packages/jagi:astronomy/lib/modules/storage/utils/transform_to_class.js","/packages/jagi:astronomy/lib/modules/storage/utils/trigger_after_insert.js","/packages/jagi:astronomy/lib/modules/storage/utils/trigger_after_remove.js","/packages/jagi:astronomy/lib/modules/storage/utils/trigger_after_save.js","/packages/jagi:astronomy/lib/modules/storage/utils/trigger_after_update.js","/packages/jagi:astronomy/lib/modules/storage/utils/trigger_before_insert.js","/packages/jagi:astronomy/lib/modules/storage/utils/trigger_before_remove.js","/packages/jagi:astronomy/lib/modules/storage/utils/trigger_before_save.js","/packages/jagi:astronomy/lib/modules/storage/utils/trigger_before_update.js","/packages/jagi:astronomy/lib/modules/validators/module.js","/packages/jagi:astronomy/lib/modules/validators/validator.js","/packages/jagi:astronomy/lib/modules/validators/validators.js","/packages/jagi:astronomy/lib/modules/validators/class_prototype_methods/validate.js","/packages/jagi:astronomy/lib/modules/validators/class_prototype_methods/validate_all.js","/packages/jagi:astronomy/lib/modules/validators/class_static_methods/getCheckPattern.js","/packages/jagi:astronomy/lib/modules/validators/class_static_methods/get_resolve_error.js","/packages/jagi:astronomy/lib/modules/validators/class_static_methods/get_validation_order.js","/packages/jagi:astronomy/lib/modules/validators/class_static_methods/get_validators.js","/packages/jagi:astronomy/lib/modules/validators/class_static_methods/validate.js","/packages/jagi:astronomy/lib/modules/validators/class_static_methods/validateAll.js","/packages/jagi:astronomy/lib/modules/validators/hooks/apply_definition.js","/packages/jagi:astronomy/lib/modules/validators/hooks/init_class.js","/packages/jagi:astronomy/lib/modules/validators/hooks/init_definition.js","/packages/jagi:astronomy/lib/modules/validators/hooks/init_schema.js","/packages/jagi:astronomy/lib/modules/validators/hooks/merge_definitions.js","/packages/jagi:astronomy/lib/modules/validators/hooks/parse_definition.js","/packages/jagi:astronomy/lib/modules/validators/meteor_methods/validate.js","/packages/jagi:astronomy/lib/modules/validators/utils/document_validate.js","/packages/jagi:astronomy/lib/modules/validators/utils/parse_validators.js","/packages/jagi:astronomy/lib/modules/validators/validators/comparison/choice.js","/packages/jagi:astronomy/lib/modules/validators/validators/comparison/email.js","/packages/jagi:astronomy/lib/modules/validators/validators/comparison/equal.js","/packages/jagi:astronomy/lib/modules/validators/validators/comparison/not_equal.js","/packages/jagi:astronomy/lib/modules/validators/validators/comparison/regexp.js","/packages/jagi:astronomy/lib/modules/validators/validators/existence/not_null.js","/packages/jagi:astronomy/lib/modules/validators/validators/existence/null.js","/packages/jagi:astronomy/lib/modules/validators/validators/existence/required.js","/packages/jagi:astronomy/lib/modules/validators/validators/logical/and.js","/packages/jagi:astronomy/lib/modules/validators/validators/logical/or.js","/packages/jagi:astronomy/lib/modules/validators/validators/nested/every.js","/packages/jagi:astronomy/lib/modules/validators/validators/nested/has.js","/packages/jagi:astronomy/lib/modules/validators/validators/nested/includes.js","/packages/jagi:astronomy/lib/modules/validators/validators/size/gt.js","/packages/jagi:astronomy/lib/modules/validators/validators/size/gte.js","/packages/jagi:astronomy/lib/modules/validators/validators/size/length.js","/packages/jagi:astronomy/lib/modules/validators/validators/size/lt.js","/packages/jagi:astronomy/lib/modules/validators/validators/size/lte.js","/packages/jagi:astronomy/lib/modules/validators/validators/size/max_length.js","/packages/jagi:astronomy/lib/modules/validators/validators/size/min_length.js","/packages/jagi:astronomy/lib/modules/validators/validators/type/array.js","/packages/jagi:astronomy/lib/modules/validators/validators/type/boolean.js","/packages/jagi:astronomy/lib/modules/validators/validators/type/class.js","/packages/jagi:astronomy/lib/modules/validators/validators/type/date.js","/packages/jagi:astronomy/lib/modules/validators/validators/type/integer.js","/packages/jagi:astronomy/lib/modules/validators/validators/type/mongo_object_id.js","/packages/jagi:astronomy/lib/modules/validators/validators/type/number.js","/packages/jagi:astronomy/lib/modules/validators/validators/type/object.js","/packages/jagi:astronomy/lib/modules/validators/validators/type/string.js","../npm/node_modules/lodash/package.json"],"names":[],"mappings":"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","file":"/packages/jagi_astronomy.js","sourcesContent":["import './core/ejson.js';\nimport './modules/core/module.js';\nimport './modules/storage/module.js';\nimport './modules/behaviors/module.js';\nimport './modules/events/module.js';\nimport './modules/methods/module.js';\nimport './modules/fields/module.js';\nimport './modules/indexes/module.js';\nimport './modules/validators/module.js';\n\nimport Config from './core/config.js';\nimport Module from './core/module.js';\nimport Class from './core/class.js';\nimport reservedKeywords from './core/reserved_keywords.js';\nimport Enum from './modules/fields/enum.js';\nimport Type from './modules/fields/type.js';\nimport Field from './modules/fields/Field';\nimport ScalarField from './modules/fields/ScalarField';\nimport ObjectField from './modules/fields/ObjectField';\nimport ListField from './modules/fields/ListField';\nimport Behavior from './modules/behaviors/behavior.js';\nimport Validator from './modules/validators/validator.js';\nimport Validators from './modules/validators/validators.js';\nimport { ValidationError } from 'meteor/mdg:validation-error';\nimport Event from './modules/events/event.js';\n\nconst Astro = {\n  Config,\n  Module,\n  Class,\n  Enum,\n  Type,\n  Field,\n  ScalarField,\n  ObjectField,\n  ListField,\n  Behavior,\n  Validator,\n  Validators,\n  ValidationError,\n  Event,\n  reservedKeywords\n};\n\nexport {\n  Astro,\n  Module,\n  Class,\n  Enum,\n  Type,\n  Field,\n  ScalarField,\n  ObjectField,\n  ListField,\n  Behavior,\n  Validator,\n  Validators,\n  ValidationError,\n  Event,\n  reservedKeywords\n};","import _ from 'lodash';\nimport { EJSON } from 'meteor/ejson';\nimport throwParseError from '../modules/core/utils/throw_parse_error.js';\nimport cloneDefinition from '../modules/core/utils/clone_definition.js';\nimport setDefaults from '../modules/fields/utils/set_defaults.js';\nimport castNested from '../modules/fields/utils/cast_nested.js';\nimport Module from './module.js';\nimport Event from '../modules/events/event.js';\nimport Type from '../modules/fields/type.js';\nimport Validators from '../modules/validators/validators.js';\n\nlet initClass = function(Class) {\n  // Create and store the schema \"definition\" object in the class constructor.\n  // It's a combination of all parent definitions and a definition that\n  // created this class. It's used to create child classes.\n  Class.definition = {};\n  // Create and store the \"schema\" object in the class constructor. It's an\n  // object that contains all the data related with a given class. The\n  // \"schema\" object contains \"computed\" data of the schema \"definition\".\n  // Thanks to that, Astronomy does not need to compute data on the fly and\n  // everything works faster.\n  Class.schema = {};\n  // Create empty array for storing child classes.\n  Class.children = [];\n  // Init the class schema and schema definition.\n  Module.forEach((module) => {\n    module.onInitSchema(Class.schema, Class.getName());\n    module.onInitDefinition(Class.definition, Class.getName());\n  });\n  // We have to call the \"onInitClass\" hooks in the separate loop after\n  // initiation of the schema and schema definition, because some\n  // \"onInitClass\" hooks can execute the \"Class.extend\" method which requires\n  // schema and schama definition to be initalized.\n  Module.forEach((module) => {\n    module.onInitClass(Class, Class.getName());\n  });\n};\n\n// Helper variables for passing information about options to nested documents\n// being initialised during construction.\nlet callsCount = 0;\nlet cloneArgs = null;\n\nclass Class {\n  constructor(rawDoc, options = {}) {\n    // Set default options.\n    _.defaults(options, {\n      defaults: true,\n      clone: true\n    });\n\n    if (callsCount === 0 && cloneArgs === null) {\n      cloneArgs = options.clone;\n    }\n    callsCount++;\n\n    const doc = this;\n    const Class = doc.constructor;\n\n    if (!Class.getName()) {\n      throw new Error(\n        'Can not create instance of the \"Astro.Class\" class'\n      );\n    }\n\n    // Trigger the \"beforeInit\" event handlers.\n    doc.dispatchEvent(new Event('beforeInit'));\n\n    // Clone an argument if the \"clone\" option is set.\n    rawDoc = rawDoc || {};\n    if (cloneArgs) {\n      rawDoc = EJSON.clone(rawDoc);\n    }\n\n    // Set values in a document.\n    const fields = Class.getFields();\n    _.each(fields, (field) => {\n      doc[field.name] = rawDoc[field.name];\n    });\n\n    // Set default values if the \"defaults\" option is set.\n    if (options.defaults) {\n      setDefaults({\n        doc\n      });\n    }\n    // Cast nested documents.\n    castNested({\n      doc,\n      options: {\n        clone: options.clone\n      }\n    });\n\n    // Trigger the \"afterInit\" event handlers.\n    doc.dispatchEvent(new Event('afterInit'));\n\n    // Decrease number of nested documents being initialised.\n    if (callsCount > 0) {\n      callsCount--;\n    }\n    if (callsCount === 0) {\n      cloneArgs = null;\n    }\n  }\n\n  // Method needed for EJSONification.\n  typeName() {\n    return 'Astronomy';\n  }\n\n  toJSONValue(args) {\n    let doc = this;\n    let Class = doc.constructor;\n\n    let json = {\n      class: Class.getName()\n    };\n\n    // Trigger the \"toJSONValue\" event handlers.\n    doc.dispatchEvent(new Event('toJSONValue', {\n      json: json\n    }));\n\n    return json;\n  }\n\n  static getName() {\n    return this.className;\n  }\n\n  static getParent() {\n    if (this.parentClassName) {\n      return this.get(this.parentClassName);\n    }\n  }\n\n  static getChildren() {\n    return this.children;\n  }\n\n  static create(definition) {\n    // Get class name.\n    let className = definition.name;\n    // Extend the Astro.Class class.\n    let Class = this.classes[className] = class Class extends this {};\n    // Store the class name in the constructor.\n    Class.className = className;\n    // Initialize class.\n    initClass(Class);\n    // Extend class with a definition.\n    Class.extend(definition);\n    // Register a new type.\n    Type.create({\n      name: className,\n      class: Class,\n      validate(args) {\n        // Add current class as a param of validator.\n        args.param = Class;\n        Validators.class(args);\n      }\n    });\n\n    return Class;\n  }\n\n  static inherit(definition) {\n    const Parent = this;\n    const className = definition.name;\n\n    // Extend the parent class.\n    const Class = this.classes[className] = class Class extends Parent {};\n\n    // Store the class name in the constructor.\n    Class.className = className;\n    // Store the parent class name in the constructor.\n    Class.parentClassName = Parent.getName();\n    // Initialize class.\n    initClass(Class);\n    // Store child class in the parent class.\n    Parent.children.push(Class);\n    // Extend class with the parent class definition.\n    Class.extend(Parent.definition);\n    // Extend class with the definition.\n    Class.extend(definition);\n    // Register a new type.\n    Type.create({\n      name: className,\n      class: Class,\n      validate(args) {\n        // Add current class as a param of validator.\n        args.param = Class;\n        Validators.class(args);\n      }\n    });\n\n    return Class;\n  }\n\n  static extend(extendDefinition, onlyModules) {\n    if (\n      onlyModules !== undefined &&\n      !Match.test(onlyModules, Match.OneOf(String, [String]))\n    ) {\n      throwParseError([{\n          'class': this.getName()\n        }, {\n          'method': 'extend'\n        },\n        'The second argument has to be a string or an array of strings'\n      ]);\n    }\n\n    if (Match.test(onlyModules, String)) {\n      onlyModules = [onlyModules];\n    }\n\n    // Clone definition to not modify the original one.\n    extendDefinition = cloneDefinition(extendDefinition);\n\n    Module.forEach((module) => {\n      // If the second argument was passed, then we only run module hooks for\n      // modules that were listed in the second argument.\n      if (onlyModules !== undefined && !_.includes(onlyModules, module.name)) {\n        return;\n      }\n      // Initialize parsed definition.\n      let parsedDefinition = {};\n      module.onInitDefinition(parsedDefinition, Class.getName());\n      // Parse the extending definition and put parsed properties in the parsed\n      // definition.\n      module.onParseDefinition(parsedDefinition, extendDefinition, this.getName());\n      // Apply parsed definition.\n      module.onApplyDefinition(this, parsedDefinition, this.getName());\n      // Merge parsed definition with a class definition.\n      module.onMergeDefinitions(this.definition, parsedDefinition, this.getName());\n    });\n  }\n\n  static get(className) {\n    return this.classes[className];\n  }\n\n  static has(className) {\n    return _.has(this.classes, className);\n  }\n\n  static includes(Class) {\n    return _.includes(this.classes, Class);\n  }\n\n  static isParentOf(Class) {\n    if (!Class || !Class.prototype) {\n      return false;\n    }\n    return this.prototype.isPrototypeOf(Class.prototype);\n  }\n\n  static isChildOf(Class) {\n    if (!Class || !Class.prototype) {\n      return false;\n    }\n    return Class.prototype.isPrototypeOf(this.prototype);\n  }\n};\n\nClass.classes = {};\n\nexport default Class;","const Config = {\n\tverbose: true\n};\n\nexport default Config;","import AstroClass from './class.js';\nimport Event from '../modules/events/event.js';\n\nEJSON.addType('Astronomy', function(json) {\n  let Class = AstroClass.get(json.class);\n  let doc = new Class();\n\n  // Trigger the \"fromJSONValue\" event handlers.\n  doc.dispatchEvent(new Event('fromJSONValue', {\n    json: json\n  }));\n\n  return doc;\n});","import _ from 'lodash';\nimport throwParseError from '../modules/core/utils/throw_parse_error.js';\n\nclass Module {\n\tconstructor(definition) {\n\t\tif (!Match.test(definition, Object)) {\n\t\t\tthrowParseError([\n\t\t\t\t'Module definition has to be an object'\n\t\t\t]);\n\t\t}\n\n\t\t// Set module name.\n\t\tif (!Match.test(definition.name, String)) {\n\t\t\tthrowParseError([\n\t\t\t\t'Module name has to be a string'\n\t\t\t]);\n\t\t}\n\t\tlet moduleName = this.name = definition.name;\n\n\t\t// Set module hooks.\n\t\t_.each([\n\t\t\t'onInitSchema', 'onInitDefinition', 'onInitClass', 'onParseDefinition',\n\t\t\t'onApplyDefinition', 'onMergeDefinitions'\n\t\t], (hookName) => {\n\t\t\tif (definition[hookName] === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!Match.test(definition[hookName], Function)) {\n\t\t\t\tthrowParseError([{\n\t\t\t\t\t\t'module': moduleName\n\t\t\t\t\t}, {\n\t\t\t\t\t\t'property': hookName\n\t\t\t\t\t},\n\t\t\t\t\t`The \"${hookName}\" hook has to be a function`\n\t\t\t\t]);\n\t\t\t}\n\t\t\tthis[hookName] = definition[hookName];\n\t\t});\n\n\t\t// Set module utils.\n\t\tif (definition.utils) {\n\t\t\tif (!Match.test(definition.utils, Object)) {\n\t\t\t\tthrowParseError([{\n\t\t\t\t\t\t'module': moduleName\n\t\t\t\t\t}, {\n\t\t\t\t\t\t'property': 'utils'\n\t\t\t\t\t},\n\t\t\t\t\t'Utilities definition has to be an object'\n\t\t\t\t]);\n\t\t\t}\n\t\t\tthis.utils = {};\n\t\t\t_.each(definition.utils, (method, methodName) => {\n\t\t\t\tif (!Match.test(method, Function)) {\n\t\t\t\t\tthrowParseError([{\n\t\t\t\t\t\t\t'module': moduleName\n\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t'property': 'utils'\n\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t'method': methodName\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'Utility has to be a function'\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t\tthis.utils[methodName] = method;\n\t\t\t});\n\t\t}\n\t}\n\n\tonInitSchema(schema, className) {}\n\tonInitDefinition(definition, className) {}\n\n\tonInitClass(Class, className) {}\n\n\tonParseDefinition(parsedDefinition, definition, className) {}\n\tonApplyDefinition(Class, definition, className) {}\n\tonMergeDefinitions(targetDefinition, sourceDefinition, className) {}\n\n\tstatic create(definition) {\n\t\tlet module = new this(definition);\n\t\tthis.modules[module.name] = module;\n\t\tthis.modulesOrder.push(module.name);\n\t\treturn module;\n\t}\n\n\tstatic get(moduleName) {\n\t\treturn this.modules[moduleName];\n\t}\n\n\tstatic forEach(iteratee) {\n\t\tif (!Match.test(iteratee, Function)) {\n\t\t\tthrowParseError([\n\t\t\t\t'The first argument of the \"Module.forEach\" method has to be a function'\n\t\t\t]);\n\t\t}\n\t\t_.each(this.modulesOrder, (moduleName) => {\n\t\t\titeratee(this.modules[moduleName]);\n\t\t});\n\t}\n};\n\nModule.modules = {};\nModule.modulesOrder = [];\n\nexport default Module;","const reservedNames = [\n  '_isNew',\n  'copy',\n  'dispatchEvent',\n  'get',\n  'getModified',\n  'getModifiedValues',\n  'getModifier',\n  'isModified',\n  'raw',\n  'reload',\n  'remove',\n  'save',\n  'set',\n  'toJSONValue',\n  'typeName',\n  'validate',\n  'validateAll'\n];\n\nexport default reservedNames;","import _ from 'lodash';\nimport throwParseError from '../core/utils/throw_parse_error.js';\n\nconst checkDefinition = function(definition) {\n\t// Check parameters validity.\n\tif (!Match.test(definition, Object)) {\n\t\tthrowParseError([\n\t\t\t'Behavior definition has to be an object'\n\t\t]);\n\t}\n\n\t// Check if behavior name is provided and is a string.\n\tif (!Match.test(definition.name, String)) {\n\t\tthrowParseError([\n\t\t\t'Behavior has to be named'\n\t\t]);\n\t}\n\n\t// Check if behavior with a given name already exists.\n\tif (_.has(Behavior.behaviors, definition.name)) {\n\t\tthrowParseError([{\n\t\t\t\t'behavior': definition.name\n\t\t\t},\n\t\t\t'Behavior already exists'\n\t\t]);\n\t}\n};\n\nclass Behavior {\n\tconstructor(options) {\n\t\tthis.options = _.extend({}, this.options, options);\n\t}\n\n\tcreateClassDefinition() {}\n\n\tapply(Class) {\n\t\tlet definition = this.createClassDefinition();\n\t\tif (definition) {\n\t\t\tClass.extend(definition);\n\t\t}\n\t}\n\n\tstatic create(definition) {\n\t\tcheckDefinition(definition);\n\n\t\t// Get behavior name.\n\t\tlet behaviorName = definition.name;\n\t\t// Extend the Behavior class.\n\t\tlet Behavior = this.behaviors[behaviorName] = class Behavior extends this {};\n\t\t// Store definition in behavior class.\n\t\tBehavior.definition = definition;\n\t\t// Extend prototype with a definition.\n\t\t_.extend(Behavior.prototype, definition);\n\n\t\treturn Behavior;\n\t}\n\n\tstatic get(behaviorName) {\n\t\treturn this.behaviors[behaviorName];\n\t}\n\n\tstatic has(behaviorName) {\n\t\treturn _.has(this.behaviors, behaviorName);\n\t}\n};\n\nBehavior.behaviors = {};\n\nexport default Behavior;","import Module from '../../core/module.js';\n// Hooks.\nimport onInitSchema from './hooks/init_schema.js';\nimport onInitDefinition from './hooks/init_definition.js';\nimport onParseDefinition from './hooks/parse_definition.js';\nimport onMergeDefinitions from './hooks/merge_definitions.js';\nimport onApplyDefinition from './hooks/apply_definition.js';\nimport onInitClass from './hooks/init_class.js';\n\nModule.create({\n\tname: 'behaviors',\n\tonInitSchema: onInitSchema,\n\tonInitDefinition: onInitDefinition,\n\tonParseDefinition: onParseDefinition,\n\tonMergeDefinitions: onMergeDefinitions,\n\tonApplyDefinition: onApplyDefinition,\n\tonInitClass: onInitClass\n});","function getBehavior(behaviorName) {\n  return this.schema.behaviors[behaviorName];\n};\n\nexport default getBehavior;","function getBehaviors() {\n  return this.schema.behaviors;\n};\n\nexport default getBehaviors;","import _ from 'lodash';\n\nfunction hasBehavior(behaviorName) {\n  return _.has(this.schema.behaviors, behaviorName);\n};\n\nexport default hasBehavior;","import _ from 'lodash';\nimport Behavior from '../behavior.js';\n\nfunction onApplyDefinition(Class, parsedDefinition, className) {\n\tlet schema = Class.schema;\n\n\t// Add behaviors to the class.\n\t_.each(parsedDefinition.behaviors, function(behaviorsOptions, behaviorName) {\n\t\t// Get the behavior class.\n\t\tlet BehaviorClass = Behavior.get(behaviorName);\n\t\t_.each(behaviorsOptions, function(behaviorOptions) {\n\t\t\t// Create the behavior instance passing behavior options.\n\t\t\tlet behavior = new BehaviorClass(behaviorOptions);\n\t\t\t// Add behavior to the schema.\n\t\t\tschema.behaviors[behaviorName] = schema.behaviors[behaviorName] || [];\n\t\t\tschema.behaviors[behaviorName].push(behavior);\n\t\t\t// Apply behavior to the class.\n\t\t\tbehavior.apply(Class);\n\t\t});\n\t});\n};\n\nexport default onApplyDefinition;","import getBehavior from '../class_static_methods/get_behavior.js';\nimport getBehaviors from '../class_static_methods/get_behaviors.js';\nimport hasBehavior from '../class_static_methods/has_behavior.js';\n\nfunction onInitClass(Class, className) {\n\tClass.getBehavior = getBehavior;\n\tClass.getBehaviors = getBehaviors;\n\tClass.hasBehavior = hasBehavior;\n};\n\nexport default onInitClass;","function onInitDefinition(definition, className) {\n\tdefinition.behaviors = {};\n};\n\nexport default onInitDefinition;","function onInitSchema(schema, className) {\n\tschema.behaviors = {};\n};\n\nexport default onInitSchema;","import _ from 'lodash';\n\nfunction onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {\n\t_.each(sourceDefinition.behaviors, function(behaviors, behaviorName) {\n\t\ttargetDefinition.behaviors[behaviorName] =\n\t\t\ttargetDefinition.behaviors[behaviorName] || [];\n\t\ttargetDefinition.behaviors[behaviorName].push(...behaviors);\n\t});\n};\n\nexport default onMergeDefinitions;","import _ from 'lodash';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport Behavior from '../behavior.js';\n\nfunction onParseDefinition(parsedDefinition, definition, className) {\n\t// Check existence of the \"behaviors\" property.\n\tif (definition.behaviors !== undefined) {\n\t\tif (!Match.test(definition.behaviors, Match.OneOf([String], Object))) {\n\t\t\tthrowParseError([{\n\t\t\t\t\t'class': className\n\t\t\t\t}, {\n\t\t\t\t\t'property': 'behaviors'\n\t\t\t\t},\n\t\t\t\t`Behaviors definition has to be an array of behaviors' names or an ` +\n\t\t\t\t`object with behaviors' options`\n\t\t\t]);\n\t\t}\n\t\t_.each(definition.behaviors, function(behaviorOptions, behaviorName) {\n\t\t\t// If we deal with an array of behaviors' names, then behavior options is\n\t\t\t// an empty object.\n\t\t\tif (_.isString(behaviorOptions)) {\n\t\t\t\tbehaviorName = behaviorOptions;\n\t\t\t\tbehaviorOptions = [{}];\n\t\t\t}\n\t\t\t// Check if behavior with a given name exists.\n\t\t\tif (!Behavior.has(behaviorName)) {\n\t\t\t\tthrowParseError([{\n\t\t\t\t\t\t'class': className\n\t\t\t\t\t}, {\n\t\t\t\t\t\t'behavior': behaviorName\n\t\t\t\t\t},\n\t\t\t\t\t'Behavior does not exist'\n\t\t\t\t]);\n\t\t\t}\n\t\t\t// Behavior options has to be an object or an array of objects, when we\n\t\t\t// are adding multiple behaviors of the same type.\n\t\t\tif (!Match.test(behaviorOptions, Match.OneOf(Object, [Object]))) {\n\t\t\t\tthrowParseError([{\n\t\t\t\t\t\t'class': className\n\t\t\t\t\t}, {\n\t\t\t\t\t\t'behavior': behaviorName\n\t\t\t\t\t},\n\t\t\t\t\t'Behavior options have to be an object or an array of objects'\n\t\t\t\t]);\n\t\t\t}\n\t\t\t// Make sure that behavior options is an array of objects.\n\t\t\tif (!Match.test(behaviorOptions, Array)) {\n\t\t\t\tbehaviorOptions = [behaviorOptions];\n\t\t\t}\n\t\t\tparsedDefinition.behaviors[behaviorName] = behaviorOptions;\n\t\t});\n\t}\n};\n\nexport default onParseDefinition;","import Module from '../../core/module.js';\n// Utils.\nimport cloneDefinition from './utils/clone_definition.js';\nimport overrideMethod from './utils/override_method.js';\nimport throwParseError from './utils/throw_parse_error.js';\nimport warn from './utils/warn.js';\n\nModule.create({\n  name: 'core',\n  utils: {\n    cloneDefinition,\n    overrideMethod,\n    throwParseError,\n    warn\n  }\n});","import _ from 'lodash';\n\nfunction cloneDefinition(definition) {\n\treturn _.cloneDeepWith(definition, function(value) {\n\t\tif (!_.isPlainObject(value) && !_.isArray(value)) {\n\t\t\treturn value;\n\t\t}\n\t});\n};\n\nexport default cloneDefinition;","import _ from 'lodash';\n\nfunction overrideMethod(object, methodName, overridingMethod, param) {\n  // Get original method.\n  let originalMethod = object[methodName];\n\n  // Override original method.\n  object[methodName] = function() {\n    // Convert arguments to array.\n    let args = _.toArray(arguments);\n\n    // Execute overriding method passing arguments, original method and extra\n    // parameters.\n    return overridingMethod.call(this, args, originalMethod, param);\n  };\n};\n\nexport default overrideMethod;","import _ from 'lodash';\n\nfunction throwParseError(details) {\n  let message = '';\n\n  _.each(details, function(detail) {\n    if (_.isObject(detail)) {\n      _.each(detail, function(value, key) {\n        message += '[\"' + value + '\" ' + key + ']'\n      });\n    } else if (_.isString(detail)) {\n      message += ' ' + detail;\n    }\n  });\n\n  throw new TypeError(message);\n};\n\nexport default throwParseError;","import Config from '../../../core/config.js';\n\nfunction warn(warning) {\n  if (console && console.warn && Config.verbose) {\n    console.warn(warning);\n  }\n};\n\nexport default warn;","import _ from 'lodash';\n\nclass Event {\n\tconstructor(type, data) {\n\t\tthis.cancelable = false;\n\t\tthis.propagates = false;\n\n\t\t_.extend(this, data);\n\n\t\tthis.type = type.toLowerCase();\n\t\tthis.timeStamp = Date.now();\n\n\t\tthis.target = null;\n\t\tthis.currentTarget = null;\n\n\t\tthis.defaultPrevented = false;\n\t\tthis.propagationStopped = false;\n\t\tthis.immediatePropagationStopped = false;\n\t}\n\n\tpreventDefault() {\n\t\tthis.defaultPrevented = true;\n\t}\n\n\tstopPropagation() {\n\t\tthis.propagationStopped = true;\n\t}\n\n\tstopImmediatePropagation() {\n\t\tthis.immediatePropagationStopped = true;\n\t\tthis.stopPropagation();\n\t}\n};\n\nexport default Event;","import Module from '../../core/module.js';\n\nimport onInitSchema from './hooks/init_schema.js';\nimport onInitDefinition from './hooks/init_definition.js';\nimport onParseDefinition from './hooks/parse_definition.js';\nimport onMergeDefinitions from './hooks/merge_definitions.js';\nimport onApplyDefinition from './hooks/apply_definition.js';\nimport onInitClass from './hooks/init_class.js';\n\nModule.create({\n\tname: 'events',\n\tonInitSchema: onInitSchema,\n\tonInitDefinition: onInitDefinition,\n\tonParseDefinition: onParseDefinition,\n\tonMergeDefinitions: onMergeDefinitions,\n\tonApplyDefinition: onApplyDefinition,\n\tonInitClass: onInitClass\n});","import _ from 'lodash';\nimport Event from '../event.js';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport { default as AstroClass } from '../../../core/class.js';\n\nfunction returnFromDispatchEvent(event) {\n  // If an event is cancelable and it had been canceled with the\n  // \"preventDefault\" method call, then we return false.\n  if (event.cancelable) {\n    return !event.defaultPrevented;\n  }\n  return true;\n}\n\nfunction dispatchEvent(event) {\n  const doc = this;\n  const Class = doc.constructor;\n\n  if (!Match.test(event, Event)) {\n    throwParseError([{\n        'class': Class.getName()\n      }, {\n        'method': 'dispatchEvent'\n      },\n      'The first argument has to be an event object'\n    ]);\n  }\n\n  // Attach a document to the event as a target.\n  if (event.target === null) {\n    event.target = doc;\n  }\n  if (event.currentTarget === null) {\n    event.currentTarget = doc;\n  }\n\n  // Get all event handlers of a given type.\n  const eventHandlers = Class.getEvents(event.type);\n\n  _.every(eventHandlers, function(eventHandler) {\n    eventHandler(event);\n\n    // Stop execution of the following event handlers, if a flag is set.\n    return !event.immediatePropagationStopped;\n  });\n\n  // If propagation was stopped or bubbling is turned off, then we don't go\n  // deeper into nested fields.\n  if (event.propagationStopped || !event.propagates) {\n    return returnFromDispatchEvent(event);\n  }\n\n  // Object fields.\n  _.each(Class.getObjectFields(), function(field) {\n    let value = doc[field.name];\n    if (value instanceof AstroClass) {\n      event.currentTarget = value;\n      value.dispatchEvent(event);\n    }\n  });\n\n  // List fields.\n  _.each(Class.getListFields(), function(field) {\n    let value = doc[field.name];\n    if (field.isClass && _.isArray(value)) {\n      _.each(value, function(element) {\n        if (element instanceof AstroClass) {\n          event.currentTarget = element;\n          element.dispatchEvent(event);\n        }\n      });\n    }\n  });\n\n  return returnFromDispatchEvent(event);\n}\n\nexport default dispatchEvent;","import _ from 'lodash';\nimport Event from '../event.js';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\n\nfunction returnFromDispatchEvent(event) {\n  // If an event is cancelable and it had been canceled with the\n  // \"preventDefault\" method call, then we return false.\n  if (event.cancelable) {\n    return !event.defaultPrevented;\n  }\n  return true;\n}\n\nfunction dispatchEvent(event) {\n  const Class = this;\n\n  if (!Match.test(event, Event)) {\n    throwParseError([{\n        'class': Class.getName()\n      }, {\n        'method': 'dispatchEvent'\n      },\n      'The first argument has to be an event object'\n    ]);\n  }\n\n  // Attach a document to the event as a target.\n  if (event.target === null) {\n    event.target = Class;\n  }\n  if (event.currentTarget === null) {\n    event.currentTarget = Class;\n  }\n\n  // Get all event handlers of a given type.\n  const eventHandlers = Class.getEvents(event.type);\n\n  _.every(eventHandlers, function(eventHandler) {\n    eventHandler(event);\n\n    // Stop execution of the following event handlers, if a flag is set.\n    return !event.immediatePropagationStopped;\n  });\n\n  return returnFromDispatchEvent(event);\n}\n\nexport default dispatchEvent;","function getEvents(eventName) {\n  let Class = this;\n\n  if (eventName) {\n    eventName = eventName.toLowerCase();\n    return Class.schema.events[eventName] || [];\n  }\n  return Class.schema.events;\n}\n\nexport default getEvents;","import _ from 'lodash';\n\nfunction hasEvent(eventName, eventHandler) {\n  let Class = this;\n\n  eventName = eventName.toLowerCase();\n\n  if (arguments.length === 2) {\n    return _.has(Class.schema.events[eventName], eventHandler);\n  }\n  else if (arguments.length === 1) {\n    return _.has(Class.schema.events, eventName);\n  }\n}\n\nexport default hasEvent;","import _ from 'lodash';\n\nfunction onApplyDefinition(Class, parsedDefinition, className) {\n\tlet schema = Class.schema;\n\n\t// Add events to the event manager.\n\t_.each(parsedDefinition.events, function(eventHandlers, eventName) {\n\t\teventName = eventName.toLowerCase();\n\t\t_.each(eventHandlers, function(eventHandler) {\n\t\t\tschema.events[eventName] = schema.events[eventName] || [];\n\t\t\tschema.events[eventName].push(eventHandler);\n\t\t});\n\t});\n};\n\nexport default onApplyDefinition;","// Class static methods.\nimport dispatchEvent from '../class_static_methods/dispatch_event.js';\nimport getEvents from '../class_static_methods/get_events.js';\nimport hasEvent from '../class_static_methods/has_event.js';\n// Class prototype methods.\nimport { default as dispatchEventProto } from '../class_prototype_methods/dispatch_event.js';\n\nfunction onInitClass(Class, className) {\n  // Class static methods.\n  Class.dispatchEvent = dispatchEvent;\n  Class.getEvents = getEvents;\n  Class.hasEvent = hasEvent;\n  // Class prototype methods.\n  Class.prototype.dispatchEvent = dispatchEventProto;\n}\n\nexport default onInitClass;","function onInitDefinition(definition, className) {\n\tdefinition.events = {};\n};\n\nexport default onInitDefinition;","function onInitSchema(schema, className) {\n\tschema.events = {};\n};\n\nexport default onInitSchema;","import _ from 'lodash';\n\nfunction onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {\n\t_.each(sourceDefinition.events, function(events, eventName) {\n\t\teventName = eventName.toLowerCase();\n\t\ttargetDefinition.events[eventName] = targetDefinition.events[eventName] || [];\n\t\ttargetDefinition.events[eventName] =\n\t\t\ttargetDefinition.events[eventName].concat(events);\n\t});\n};\n\nexport default onMergeDefinitions;","import _ from 'lodash';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\n\nfunction onParseDefinition(parsedDefinition, definition, className) {\n\t// Check existence and validity of the \"events\" property.\n\tif (definition.events !== undefined) {\n\t\t_.each(definition.events, function(eventHandlers, eventName) {\n\t\t\teventName = eventName.toLowerCase();\n\t\t\t// Check if the event definition is an array of functions.\n\t\t\tif (!Match.test(eventHandlers, Match.OneOf(Function, [Function]))) {\n\t\t\t\tthrowParseError([{\n\t\t\t\t\t\t'class': className\n\t\t\t\t\t}, {\n\t\t\t\t\t\t'event': eventName\n\t\t\t\t\t},\n\t\t\t\t\t'Event handler has to be a function or an array of functions'\n\t\t\t\t]);\n\t\t\t}\n\t\t\t// Convert function to array of functions.\n\t\t\tif (Match.test(eventHandlers, Function)) {\n\t\t\t\teventHandlers = [eventHandlers];\n\t\t\t}\n\t\t\tparsedDefinition.events[eventName] = eventHandlers;\n\t\t});\n\t}\n};\n\nexport default onParseDefinition;","import _ from 'lodash';\nimport Validators from '../validators/validators.js';\n\nclass Field {\n  constructor(definition = {}) {\n    _.defaults(definition, {\n      optional: false,\n      immutable: false,\n      transient: false\n    });\n\n    this.name = definition.name;\n    this.type = definition.type;\n    this.default = definition.default\n    this.optional = definition.optional;\n    this.immutable = definition.immutable;\n    this.transient = definition.transient;\n    this.resolve = definition.resolve;\n  }\n\n  getDefault() {\n    if (_.isFunction(this.default)) {\n      return this.default();\n    }\n    return this.default;\n  }\n\n  getOptional(doc) {\n    if (_.isFunction(this.optional)) {\n      return this.optional(doc);\n    }\n    return this.optional;\n  }\n\n  cast(value) {\n    return value;\n  }\n\n  validate(args) {\n    // If a field is not optional (required) then it has to have value.\n    if (!this.getOptional(args.doc)) {\n      Validators.required(args);\n    }\n  }\n\n  resolveValue(rawDoc) {\n    if (this.resolve) {\n      return this.resolve(rawDoc);\n    }\n    else {\n      return rawDoc[this.name];\n    }\n  }\n};\n\nexport default Field;","import _ from 'lodash';\nimport Field from './Field';\nimport castToClass from './utils/castToClass';\nimport AstroClass from '../../core/class.js';\nimport Validators from '../validators/validators.js';\n\nclass ListField extends Field {\n  constructor(definition = {}) {\n    super(definition);\n\n    this.isClass = AstroClass.isParentOf(this.type.class);\n  }\n\n  cast(value, options) {\n    if (!_.isArray(value)) {\n      return value;\n    }\n\n    return _.map(value, (element) => {\n      // Class type.\n      if (this.isClass) {\n        // We only cast if value is a plain object.\n        if (!_.isPlainObject(element)) {\n          return element;\n        }\n        // Get class from type property.\n        const Class = this.type.class;\n        // Cast value to an instance of the class.\n        return castToClass({\n          Class,\n          rawDoc: element,\n          options\n        });\n      }\n      // Scalar type.\n      else {\n        return this.type.cast(element);\n      }\n    });\n  }\n\n  validate(args) {\n    super.validate(args);\n    var {\n      doc,\n      name,\n      value\n    } = args;\n\n    if (!_.isNil(value)) {\n      Validators.array(args);\n      _.each(value, (element, index) => {\n        this.type.validate({\n          doc,\n          name: name + '.' + index,\n          value: element\n        });\n      });\n    }\n  }\n};\n\nexport default ListField;\n","import _ from 'lodash';\nimport Field from './Field';\nimport castToClass from './utils/castToClass';\n\nclass ObjectField extends Field {\n  cast(value, options) {\n    // We only cast if value is a plain object.\n    if (!_.isPlainObject(value)) {\n      return value;\n    }\n\n    // Get class from type property.\n    const Class = this.type.class;\n\n    // Cast value to an instance of the class.\n    return castToClass({\n      Class,\n      rawDoc: value,\n      options\n    });\n  }\n\n  validate(args) {\n    super.validate(args);\n\n    this.type.validate(args);\n  }\n};\n\nexport default ObjectField;","import _ from 'lodash';\nimport Field from './Field';\n\nclass ScalarField extends Field {\n  constructor(definition = {}) {\n    super(definition);\n\n    this.type = definition.type;\n  }\n\n  cast(value) {\n    return this.type.cast(value);\n  }\n\n  validate(args) {\n    super.validate(args);\n    var {\n      value\n    } = args;\n\n    if (!_.isNil(value)) {\n      return this.type.validate(args);\n    }\n  }\n};\n\nexport default ScalarField;","import _ from 'lodash';\nimport Type from './type.js';\nimport Validators from '../validators/validators.js';\nimport { check, Match } from 'meteor/check';\n\nconst enumDefinitionPattern = {\n  name: String,\n  identifiers: Match.OneOf(Array, Object)\n};\n\nconst Enum = {\n  create(definition) {\n    check(definition, enumDefinitionPattern);\n\n    // Get identifiers and values.\n    let identifiers;\n    if (Match.test(definition.identifiers, Array)) {\n      identifiers = _.zipObject(\n        definition.identifiers, _.range(definition.identifiers.length)\n      );\n    }\n    else if (Match.test(definition.identifiers, Object)) {\n      identifiers = definition.identifiers;\n      let i = 0;\n      _.forOwn(identifiers, function(value, key) {\n        if (_.isNil(value)) {\n          identifiers[key] = i;\n          i++;\n        }\n        else if (_.isNumber(value)) {\n          i = value + 1;\n        }\n      });\n    }\n    const values = _.values(identifiers);\n    const keys = _.keys(identifiers);\n    // Create a new Enum constructor.\n    const Enum = function Enum(identifier) {\n      return Enum[identifier];\n    };\n    Enum.getIdentifiers = function() {\n      return keys;\n    };\n    Enum.getIdentifier = function(value) {\n      const index = _.indexOf(values, value);\n      return keys[index];\n    };\n    // Set identifiers properties in the class.\n    _.each(identifiers, (value, name) => {\n      if (Object.defineProperty) {\n        Object.defineProperty(Enum, name, {\n          writable: false,\n          enumerable: true,\n          value\n        });\n      }\n      else {\n        Enum[name] = value;\n      }\n    });\n    // Create type definition for the given enum.\n    Type.create({\n      name: definition.name,\n      class: Enum,\n      validate(args) {\n        args.param = values;\n        Validators.choice(args);\n      }\n    });\n    // Store enum in the enums list.\n    this.enums[definition.name] = Enum;\n\n    return Enum;\n  },\n  enums: {}\n};\n\nexport default Enum;","import Module from '../../core/module.js';\n// Types.\nimport './types/boolean.js';\nimport './types/date.js';\nimport './types/mongo_object_id.js';\nimport './types/number.js';\nimport './types/object.js';\nimport './types/string.js';\n// Utils.\nimport castNested from './utils/cast_nested.js';\nimport getAll from './utils/get_all.js';\nimport getMany from './utils/get_many.js';\nimport getOne from './utils/get_one.js';\nimport isNestedFieldName from './utils/is_nested_field_name.js';\nimport rawAll from './utils/raw_all.js';\nimport rawMany from './utils/raw_many.js';\nimport rawOne from './utils/raw_one.js';\nimport setAll from './utils/set_all.js';\nimport setDefaults from './utils/set_defaults.js';\nimport setMany from './utils/set_many.js';\nimport setOne from './utils/set_one.js';\nimport traverse from './utils/traverse.js';\n// Hooks.\nimport onInitSchema from './hooks/init_schema.js';\nimport onInitDefinition from './hooks/init_definition.js';\nimport onParseDefinition from './hooks/parse_definition.js';\nimport onMergeDefinitions from './hooks/merge_definitions.js';\nimport onApplyDefinition from './hooks/apply_definition.js';\nimport onInitClass from './hooks/init_class.js';\n\nModule.create({\n  name: 'fields',\n  onInitSchema,\n  onInitDefinition,\n  onParseDefinition,\n  onMergeDefinitions,\n  onApplyDefinition,\n  onInitClass,\n  utils: {\n    castNested,\n    getAll,\n    getMany,\n    getOne,\n    isNestedFieldName,\n    rawAll,\n    rawMany,\n    rawOne,\n    setAll,\n    setDefaults,\n    setMany,\n    setOne,\n    traverse\n  }\n});","import _ from 'lodash';\nimport Validators from '../validators/validators.js';\n\nconst typeDefinitionPattern = {\n  name: String,\n  class: Match.Any,\n  cast: Match.Optional(Function),\n  validate: Match.Optional(Function)\n};\n\nconst enumDefinitionPattern = {\n  name: String,\n  options: Object\n};\n\nclass Type {\n  constructor(definition) {\n    check(definition, typeDefinitionPattern);\n\n    this.name = definition.name;\n    this.class = definition.class;\n\n    if (_.isFunction(definition.validate)) {\n      this.validate = definition.validate;\n    }\n\n    if (_.isFunction(definition.cast)) {\n      this.cast = definition.cast;\n    }\n  }\n\n  cast(value) {\n    return value;\n  }\n\n  validate(doc, fieldName) {\n    return true;\n  }\n\n  static create(definition) {\n    let type = new Type(definition);\n    this.types[type.name] = type;\n  }\n\n  static get(name) {\n    return this.types[name];\n  }\n\n  static has(name) {\n    return _.has(this.types, name);\n  }\n\n  static find(Class) {\n    return _.find(this.types, (type) => {\n      return type.class.prototype === Class.prototype;\n    });\n  }\n};\n\nType.types = {};\n\nexport default Type;","import setAll from '../utils/set_all.js';\n\nfunction fromJSONValue(e) {\n\tlet doc = e.currentTarget;\n\tsetAll(doc, EJSON.parse(e.json.values));\n};\n\nexport default fromJSONValue;","import getAll from '../utils/get_all.js';\n\nfunction toJSONValue(e) {\n\tlet doc = e.currentTarget;\n\te.json.values = EJSON.stringify(getAll(doc));\n};\n\nexport default toJSONValue;","import getAll from '../utils/get_all.js';\nimport getMany from '../utils/get_many.js';\nimport getOne from '../utils/get_one.js';\n\nfunction get() {\n\tlet doc = this;\n\tlet args = arguments;\n\n\tif (args.length === 0) {\n\t\treturn getAll(doc);\n\t}\n\telse if (args.length === 1) {\n\t\tif (args[0] instanceof Array) {\n\t\t\treturn getMany(doc, args[0]);\n\t\t}\n\t\telse if (typeof args[0] === 'string') {\n\t\t\treturn getOne(doc, args[0]);\n\t\t}\n\t}\n};\n\nexport default get;","import rawAll from '../utils/raw_all.js';\nimport rawMany from '../utils/raw_many.js';\nimport rawOne from '../utils/raw_one.js';\n\nfunction raw() {\n\tlet doc = this;\n\tlet args = arguments;\n\n\tif (args.length === 0) {\n\t\treturn rawAll(doc);\n\t}\n\telse if (args.length === 1) {\n\t\tif (args[0] instanceof Array) {\n\t\t\treturn rawMany(doc, args[0]);\n\t\t}\n\t\telse if (typeof args[0] === 'string') {\n\t\t\treturn rawOne(doc, args[0]);\n\t\t}\n\t}\n};\n\nexport default raw;","import _ from 'lodash';\nimport setMany from '../utils/set_many.js';\nimport setOne from '../utils/set_one.js';\nimport castNested from '../utils/cast_nested.js';\n\nfunction set() {\n  const doc = this;\n  const args = arguments;\n  let options = {\n    clone: true\n  };\n\n  // Setting single field.\n  if (_.isString(args[0]) && args.length >= 2) {\n    // The last argument is an options object.\n    if (_.isObject(args[2])) {\n      _.extend(options, args[2]);\n    }\n    setOne(doc, args[0], args[1], options);\n  }\n  else if (_.isObject(args[0]) && args.length >= 1) {\n    // The last argument is an options object.\n    if (_.isObject(args[1])) {\n      _.extend(options, args[1]);\n    }\n    setMany(doc, args[0], options);\n  }\n\n  // Cast nested documents.\n  castNested({\n    doc,\n    options: {\n      clone: options.clone\n    }\n  });\n};\n\nexport default set;","function getField(fieldName) {\n\treturn this.schema.fields[fieldName];\n};\n\nexport default getField;","import _ from 'lodash';\n\nfunction getFields() {\n\treturn _.values(this.schema.fields);\n};\n\nexport default getFields;","import _ from 'lodash';\n\nfunction getFieldsNames(options) {\n  // Prepare options.\n\toptions = _.extend({\n\t\ttransient: true,\n\t\timmutable: true\n\t}, options);\n\n  const fieldsNames = [];\n  _.each(this.schema.fields, (field, name) => {\n    // Don't get a transient field.\n    if (!options.transient && field.transient) {\n      return;\n    }\n    // Don't get an immutable field.\n    if (!options.immutable && field.immutable) {\n      return;\n    }\n    fieldsNames.push(name);\n  });\n\n\treturn fieldsNames;\n};\n\nexport default getFieldsNames;","import _ from 'lodash';\n\nimport ListField from '../ListField';\n\nfunction getListFields(classOnly = false) {\n  return _.filter(this.getFields(), function(field) {\n    if (classOnly) {\n\t\t\treturn field instanceof ListField && field.isClass;\n\t\t}\n    return field instanceof ListField;\n  });\n};\n\nexport default getListFields;","import _ from 'lodash';\n\nimport ObjectField from '../ObjectField';\n\nfunction getObjectFields() {\n\treturn _.filter(this.getFields(), function(field) {\n\t\treturn field instanceof ObjectField;\n\t});\n};\n\nexport default getObjectFields;","import _ from 'lodash';\n\nimport ScalarField from '../ScalarField';\n\nfunction getScalarFields() {\n\treturn _.filter(this.getFields(), function(field) {\n\t\treturn field instanceof ScalarField;\n\t});\n};\n\nexport default getScalarFields;","import _ from 'lodash';\n\nfunction hasField(fieldName) {\n\treturn _.has(this.schema.fields, fieldName);\n};\n\nexport default hasField;","import _ from 'lodash';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport Type from '../type.js';\nimport AstroClass from '../../../core/class.js';\nimport ScalarField from '../ScalarField';\nimport ObjectField from '../ObjectField';\nimport ListField from '../ListField';\n\nfunction checkTypeExistence(type, className, fieldName) {\n  if (!type) {\n    throwParseError([{\n        'class': className\n      }, {\n        'property': 'fields'\n      }, {\n        'field': fieldName\n      },\n      'Type does not exist'\n    ]);\n  }\n}\n\nfunction onApplyDefinition(Class, parsedDefinition, className) {\n  _.each(parsedDefinition.fields, function(fieldDefinition, fieldName) {\n    // Prepare field variable.\n    let field;\n    // List field.\n    if (Match.test(fieldDefinition.type, Array)) {\n      let type = Type.find(fieldDefinition.type[0]);\n      checkTypeExistence(type, className, fieldDefinition.name);\n      if (AstroClass.isParentOf(type.class)) {\n        field = new ListField(\n          _.extend({}, fieldDefinition, {\n            type: type\n          })\n        );\n      }\n      else {\n        field = new ListField(\n          _.extend({}, fieldDefinition, {\n            type: type\n          })\n        );\n      }\n    }\n    // Scalar or object field.\n    else {\n      let type = Type.find(fieldDefinition.type);\n      checkTypeExistence(type, className, fieldDefinition.name);\n      if (AstroClass.isParentOf(type.class)) {\n        field = new ObjectField(\n          _.extend({}, fieldDefinition, {\n            type: type\n          })\n        );\n      }\n      else {\n        field = new ScalarField(\n          _.extend({}, fieldDefinition, {\n            type: type\n          })\n        );\n      }\n    }\n\n    // Add a field object to the fields list.\n    Class.schema.fields[fieldName] = field;\n    Class.schema.fieldsNames.push(fieldName);\n  });\n}\n\nexport default onApplyDefinition;","// Class static methods.\nimport getField from '../class_static_methods/get_field.js';\nimport getFieldsNames from '../class_static_methods/get_fields_names.js';\nimport getFields from '../class_static_methods/get_fields.js';\nimport getObjectFields from '../class_static_methods/get_object_fields.js';\nimport getListFields from '../class_static_methods/get_list_fields.js';\nimport getScalarFields from '../class_static_methods/get_scalar_fields.js';\nimport hasField from '../class_static_methods/has_field.js';\n// Class prototype methods.\nimport get from '../class_prototype_methods/get.js';\nimport raw from '../class_prototype_methods/raw.js';\nimport set from '../class_prototype_methods/set.js';\n// Class events.\nimport fromJSONValue from '../class_events/from_json_value.js';\nimport toJSONValue from '../class_events/to_json_value.js';\n\nfunction onInitClass(Class, className) {\n  // Class static methods.\n  Class.getField = getField;\n  Class.getFieldsNames = getFieldsNames;\n  Class.getFields = getFields;\n  Class.getObjectFields = getObjectFields;\n  Class.getListFields = getListFields;\n  Class.getScalarFields = getScalarFields;\n  Class.hasField = hasField;\n  // Class prototype methods.\n  Class.prototype.get = get;\n  Class.prototype.raw = raw;\n  Class.prototype.set = set;\n  // Class events.\n  Class.extend({\n    events: {\n      fromJSONValue,\n      toJSONValue\n    }\n  }, ['events']);\n};\n\nexport default onInitClass;","function onInitDefinition(definition, className) {\n\tdefinition.fields = {};\n};\n\nexport default onInitDefinition;","function onInitSchema(schema, className) {\n  schema.fields = {};\n  schema.fieldsNames = [];\n};\n\nexport default onInitSchema;","import _ from 'lodash';\n\nfunction onMergeDefinitions(targetDefinition, sourceDefinition, className) {\n  _.each(sourceDefinition.fields, function(fieldDefinition, fieldName) {\n    targetDefinition.fields[fieldName] = fieldDefinition;\n  });\n};\n\nexport default onMergeDefinitions;","import _ from 'lodash';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport Class from '../../../core/class.js';\nimport Type from '../type.js';\nimport reservedKeywords from '../../../core/reserved_keywords.js';\n\nconst typePattern = Match.OneOf(Function, [Function]);\n\nfunction onParseDefinition(parsedDefinition, definition, className) {\n  if (definition.fields === undefined) {\n    return;\n  }\n\n  // Fields definition has to be an object.\n  if (!Match.test(definition.fields, Object)) {\n    throwParseError([{\n        'class': className\n      }, {\n        'property': 'fields'\n      },\n      'Fields definition has to be an object'\n    ]);\n  }\n\n\t_.each(definition.fields, function(fieldDefinition, fieldName) {\n\t\tif (Match.test(fieldDefinition, typePattern)) {\n\t\t\tfieldDefinition = {\n\t\t\t\tname: fieldName,\n\t\t\t\ttype: fieldDefinition\n\t\t\t};\n\t\t}\n\t\telse if (Match.test(fieldDefinition, Object)) {\n\t\t\tfieldDefinition = _.extend(fieldDefinition, {\n\t\t\t\tname: fieldName\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthrowParseError([{\n\t\t\t\t\t'class': className\n\t\t\t\t}, {\n\t\t\t\t\t'property': 'fields'\n\t\t\t\t}, {\n\t\t\t\t\t'field': fieldName\n\t\t\t\t},\n\t\t\t\t'Field definition has to be an object or type'\n\t\t\t]);\n\t\t}\n\n    // Check if a field name is not reserved keyword.\n    if (_.includes(reservedKeywords, fieldName)) {\n      throwParseError([{\n          'class': className\n        }, {\n          'method': fieldName\n        },\n        'Reserved keyword'\n      ]);\n    }\n\n\t\tparsedDefinition.fields[fieldDefinition.name] = fieldDefinition;\n\t});\n};\n\nexport default onParseDefinition;","import Type from '../type.js';\nimport Validators from '../../validators/validators.js';\n\nType.create({\n  name: 'Boolean',\n  class: Boolean,\n  cast(value) {\n    if (_.isString(value) && value.toLowerCase() === 'false' || value === '0') {\n      return false;\n    }\n    return Boolean(value);\n  },\n  validate(args) {\n    Validators.boolean(args);\n  }\n});","import _ from 'lodash';\nimport Type from '../type.js';\nimport Validators from '../../validators/validators.js';\n\nType.create({\n  name: 'Date',\n  class: Date,\n  cast(value) {\n    return new Date(value);\n  },\n  validate(args) {\n    Validators.date(args);\n  }\n});","import Type from '../type.js';\nimport Validators from '../../validators/validators.js';\nimport { Mongo } from 'meteor/mongo';\n\nType.create({\n  name: 'MongoObjectID',\n  class: Mongo.ObjectID,\n  validate(args) {\n    Validators.mongoObjectID(args);\n  }\n});","import Type from '../type.js';\nimport Validators from '../../validators/validators.js';\n\nType.create({\n  name: 'Number',\n  class: Number,\n  cast(value) {\n    return Number(value);\n  },\n  validate(args) {\n    Validators.number(args);\n  }\n});","import Type from '../type.js';\nimport Validators from '../../validators/validators.js';\n\nType.create({\n  name: 'Object',\n  class: Object,\n  validate(args) {\n    Validators.object(args);\n  }\n});","import Type from '../type.js';\nimport Validators from '../../validators/validators.js';\n\nType.create({\n  name: 'String',\n  class: String,\n  cast(value) {\n    return String(value);\n  },\n  validate(args) {\n    Validators.string(args);\n  }\n});","function castToClass(args = {}) {\n  const {\n    Class,\n    rawDoc,\n    options\n  } = args;\n  // If the class has a type field, then we have to check if we are\n  // casting to some of the nested classes.\n  const typeField = Class.getTypeField();\n  if (typeField) {\n    const ChildClass = Class.get(rawDoc[typeField]);\n    if (ChildClass && ChildClass.isChildOf(Class)) {\n      return new ChildClass(rawDoc, options);\n    }\n  }\n  return new Class(rawDoc, options);\n};\n\nexport default castToClass;","import _ from 'lodash';\nimport AstroClass from '../../../core/class.js';\n\nfunction createDocument(Class, rawDoc, options) {\n  // If a nested field has a type field, then we have to check if we are\n  // casting to some of the nested classes.\n  const typeField = Class.getTypeField();\n  if (typeField) {\n    const ChildClass = AstroClass.get(rawDoc[typeField]);\n    if (ChildClass && ChildClass.isChildOf(Class)) {\n      return new ChildClass(rawDoc);\n    }\n  }\n  return new Class(rawDoc, options);\n};\n\nfunction castNested(args = {}) {\n  const {\n    doc,\n    options\n  } = args;\n  _.defaults(options, {\n    clone: true\n  });\n  const Class = doc.constructor;\n\n  _.each(Class.getObjectFields(), (field) => {\n    let value = doc[field.name];\n    // If field value is empty then go to the next one.\n    if (_.isNil(value)) {\n      return;\n    }\n    let NestedClass = field.type.class;\n    if (!(value instanceof NestedClass)) {\n      if (!_.isPlainObject(value)) {\n        return;\n      }\n      doc[field.name] = createDocument(NestedClass, value, options);\n    }\n  });\n\n  _.each(Class.getListFields(), (field) => {\n    let value = doc[field.name];\n    // If field value is empty then go to the next one.\n    if (!_.isArray(value) || !field.isClass) {\n      return;\n    }\n    let NestedClass = field.type.class;\n    _.each(value, (element, index) => {\n      if (!(element instanceof NestedClass)) {\n        if (!_.isPlainObject(element)) {\n          return;\n        }\n        value[index] = createDocument(NestedClass, element, options);\n      }\n    });\n  });\n};\n\nexport default castNested;","import getMany from './get_many.js';\n\nfunction getAll(doc, options) {\n\tlet Class = doc.constructor;\n\n\t// Get list of fields and their values.\n\treturn getMany(doc, Class.getFieldsNames(), options);\n};\n\nexport default getAll;","import _ from 'lodash';\nimport getOne from './get_one.js';\n\nfunction getMany(doc, fieldNames, options) {\n\tlet values = {};\n\n\t_.each(fieldNames, (fieldName) => {\n\t\tlet fieldValue = getOne(doc, fieldName, options);\n\t\tif (fieldValue !== undefined) {\n\t\t\tvalues[fieldName] = fieldValue;\n\t\t}\n\t});\n\n\treturn values;\n};\n\nexport default getMany;","import _ from 'lodash';\nimport traverse from '../utils/traverse.js';\n\nfunction getOne(doc, fieldPattern, options) {\n\t// Prepare options.\n\toptions = _.extend({\n\t\ttransient: true,\n\t\timmutable: true\n\t}, options);\n\n\treturn traverse(\n\t\tdoc, fieldPattern,\n\t\tfunction(nestedDoc, nestedFieldName, field) {\n\t\t\t// If a field does not exist than we don't return anything.\n\t\t\tif (!field) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Don't get a transient field.\n\t\t\tif (!options.transient && field.transient) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Don't get an immutable field.\n\t\t\tif (!options.immutable && field.immutable) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Just return a value.\n\t\t\treturn nestedDoc[nestedFieldName];\n\t\t}\n\t);\n};\n\nexport default getOne;","function isNestedFieldName(fieldPattern) {\n  return fieldPattern.indexOf('.') !== -1;\n};\n\nexport default isNestedFieldName;","import rawMany from './raw_many.js';\n\nfunction rawAll(doc, options) {\n\tlet Class = doc.constructor;\n\n\t// Get list of fields and their values.\n\treturn rawMany(doc, Class.getFieldsNames(options), options);\n};\n\nexport default rawAll;","import _ from 'lodash';\nimport rawOne from './raw_one.js';\n\nfunction rawMany(doc, fieldNames, options) {\n  let values = {};\n\n  _.each(fieldNames, (fieldName) => {\n    values[fieldName] = rawOne(doc, fieldName, options);\n  });\n\n  return values;\n};\n\nexport default rawMany;","import _ from 'lodash';\nimport AstroClass from '../../../core/class.js';\nimport traverse from './traverse.js';\nimport rawAll from './raw_all.js';\n\nfunction rawOne(doc, fieldPattern, options) {\n\t// Prepare options.\n\toptions = _.extend({\n\t\ttransient: true,\n\t\timmutable: true\n\t}, options);\n\n\treturn traverse(\n\t\tdoc, fieldPattern,\n\t\tfunction(nestedDoc, nestedFieldName, field) {\n\t\t\t// If a field does not exist than we don't return anything.\n\t\t\tif (!field) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Don't get a transient field.\n\t\t\tif (!options.transient && field.transient) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Don't get an immutable field.\n\t\t\tif (!options.immutable && field.immutable) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get a value to be returned.\n\t\t\tlet fieldValue = nestedDoc[nestedFieldName];\n\n\t\t\tif (fieldValue instanceof AstroClass) {\n\t\t\t\treturn rawAll(fieldValue, options);\n\t\t\t}\n\t\t\telse if (_.isArray(fieldValue)) {\n\t\t\t\treturn _.map(fieldValue, function(element) {\n\t\t\t\t\tif (element instanceof AstroClass) {\n\t\t\t\t\t\treturn rawAll(element, options);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn fieldValue;\n\t\t\t}\n\t\t}\n\t);\n};\n\nexport default rawOne;","import _ from 'lodash';\n\nfunction resolveValues(args) {\n  const {\n    Class,\n    values\n  } = args;\n  const fields = Class.getFields();\n  const resolvedValues = {};\n  _.each(fields, (field) => {\n    resolvedValues[field.name] = field.resolveValue(values);\n  });\n  return resolvedValues;\n};\n\nexport default resolveValues;","import _ from 'lodash';\nimport setOne from './set_one.js';\n\nfunction setAll(doc, fieldsValues, options = {}) {\n  _.defaults(options, {\n    clone: true\n  });\n  const Class = doc.constructor;\n\n  // Get names of the fields that are not present in the fieldsValues variable.\n  const fieldsNames = _.difference(Class.getFieldsNames(), _.keys(fieldsValues));\n\n  _.each(fieldsNames, (fieldName) => {\n    setOne(doc, fieldName, undefined, options);\n  });\n\n  _.forOwn(fieldsValues, (fieldValue, fieldName) => {\n    setOne(doc, fieldName, fieldValue, options);\n  });\n};\n\nexport default setAll;","import _ from 'lodash';\n\nfunction setDefaults(args = {}) {\n  const {\n    doc\n  } = args;\n  const Class = doc.constructor;\n\n  _.each(Class.getFields(), (field) => {\n    const value = doc[field.name];\n    if (value === undefined) {\n      doc[field.name] = field.getDefault();\n    }\n  });\n}\n\nexport default setDefaults;","import _ from 'lodash';\nimport setOne from './set_one.js';\n\nfunction setMany(doc, fieldsValues, options = {}) {\n  _.defaults(options, {\n    clone: true\n  });\n\n  // Set multiple fields.\n  _.forOwn(fieldsValues, (setValue, fieldName) => {\n    setOne(doc, fieldName, setValue, options);\n  });\n};\n\nexport default setMany;","import _ from 'lodash';\nimport { EJSON } from 'meteor/ejson';\nimport traverse from '../utils/traverse.js';\nimport warn from '../../core/utils/warn.js';\n\nfunction setOne(doc, fieldPattern, fieldValue, options = {}) {\n  _.defaults(options, {\n    clone: true\n  });\n\n  if (options.clone && _.isObject(fieldValue)) {\n    fieldValue = EJSON.clone(fieldValue);\n  }\n\n  return traverse(\n    doc, fieldPattern,\n    function(nestedDoc, nestedFieldName, field) {\n      // If a field does not exist than we don't return anything.\n      if (!field) {\n        let Class = doc.constructor;\n        warn(\n          '[\"' + Class.getName() + '\" class][\"' + fieldPattern + '\" field] ' +\n          'Trying to set a value of the field that does not exist in the class'\n        );\n        return;\n      }\n\n      nestedDoc[nestedFieldName] = fieldValue;\n    }\n  );\n};\n\nexport default setOne;","import _ from 'lodash';\nimport isNestedFieldName from './is_nested_field_name.js';\nimport AstroClass from '../../../core/class.js';\n\nfunction traverse(doc, name, callback) {\n  if (!doc) {\n    return;\n  }\n\n  let Class;\n  let field;\n\n  // Check whether the given field name is a nested field name.\n  if (!isNestedFieldName(name)) {\n    // Get a class.\n    let Class = doc.constructor;\n    // Get a field definition.\n    let field = Class.getField(name);\n    // Execute the callback function passing the last nested document, the last\n    // segment name and a field object.\n    return callback(doc, name, field);\n  }\n\n  // Split the nested field pattern name by the \".\" character.\n  let segments = name.split('.');\n  // Get the last and one before the last index.\n  let lastIndex = segments.length - 1;\n\n  // Traverse nested fields until reaching the last one from the pattern.\n  let next = function(nestedDoc, segmentIndex) {\n    segmentIndex = segmentIndex || 0;\n    // Get a nested field name under the given index.\n    let segment = segments[segmentIndex];\n    // Check if a nested document is an instance of the Astronomy class and get\n    // a field object for a given field name;\n    if (nestedDoc instanceof AstroClass) {\n      // Get a class for of a nested document.\n      Class = nestedDoc.constructor;\n      // Get a field object from the nested class.\n      field = Class.getField(segment);\n    }\n    if (segmentIndex === lastIndex) {\n      // Execute the callback function, if we reached the last nested document.\n      return callback(nestedDoc, segment, field);\n    }\n    else if (_.isObject(nestedDoc[segment])) {\n      // Go deeper if a value of the current nested document is an object.\n      return next(nestedDoc[segment], segmentIndex + 1);\n    }\n  };\n\n  // Start traversing nested fields.\n  return next(doc);\n};\n\nexport default traverse;","import Module from '../../core/module.js';\n// Hooks.\nimport onInitSchema from './hooks/init_schema.js';\nimport onInitDefinition from './hooks/init_definition.js';\nimport onParseDefinition from './hooks/parse_definition.js';\nimport onMergeDefinitions from './hooks/merge_definitions.js';\nimport onApplyDefinition from './hooks/apply_definition.js';\nimport onInitClass from './hooks/init_class.js';\n\nModule.create({\n\tname: 'indexes',\n\tonInitSchema: onInitSchema,\n\tonInitDefinition: onInitDefinition,\n\tonParseDefinition: onParseDefinition,\n\tonMergeDefinitions: onMergeDefinitions,\n\tonApplyDefinition: onApplyDefinition,\n\tonInitClass: onInitClass\n});","function getIndex(indexName) {\n\treturn this.schema.indexes[indexName];\n};\n\nexport default getIndex;","function getIndexes() {\n\treturn this.schema.indexes;\n};\n\nexport default getIndexes;","import _ from 'lodash';\n\nfunction hasIndex(indexName) {\n\treturn _.has(this.schema.indexes, indexName);\n};\n\nexport default hasIndex;","import _ from 'lodash';\n\nfunction onApplyDefinition(Class, parsedDefinition, className) {\n\tconst Collection = Class.getCollection();\n\n\tif (\n\t\t!Meteor.isServer ||\n    !Collection ||\n\t\t(Collection && !Collection._connection)\n\t) {\n\t\treturn;\n\t}\n\n\tconst schema = Class.schema;\n\n\tfunction prefixIndexes(indexes, fieldName) {\n\t\t// Prefix the fields property.\n\t\t_.each(indexes, (index, indexName) => {\n\t\t\tindex.fields = _.mapKeys(index.fields, (value, key) => {\n\t\t\t\treturn `${fieldName}.${key}`;\n\t\t\t});\n\t\t\t_.extend(index.options, {\n\t\t\t\tname: `${fieldName}.${indexName}`\n\t\t\t});\n\t\t});\n\t\t// Prefix object keys.\n\t\tindexes = _.mapKeys(indexes, (index, indexName) => {\n\t\t\treturn `${fieldName}.${indexName}`;\n\t\t});\n\t\treturn indexes;\n\t}\n\n\t// Add indexes to the collection from nested classes.\n\tfunction collectNestedIndexes(Class) {\n\t\tconst indexes = {};\n\t\tconst fields = _.concat(\n\t\t\tClass.getObjectFields(), Class.getListFields(true)\n\t\t);\n\t\t_.each(fields, (field) => {\n\t\t\t_.extend(\n\t\t\t\tindexes,\n\t\t\t\tprefixIndexes(field.type.class.definition.indexes, field.name),\n\t\t\t\tprefixIndexes(collectNestedIndexes(field.type.class), field.name)\n\t\t\t);\n\t\t});\n\t\treturn indexes;\n\t}\n\n  const indexes = _.extend(\n    {},\n    parsedDefinition.indexes,\n    collectNestedIndexes(Class)\n  );\n\n\t_.each(indexes, (index, indexName) => {\n\t\tschema.indexes[indexName] = index;\n\t\tCollection._ensureIndex(index.fields, index.options);\n\t});\n};\n\nexport default onApplyDefinition;","// Class static methods.\nimport getIndex from '../class_static_methods/get_index.js';\nimport getIndexes from '../class_static_methods/get_indexes.js';\nimport hasIndex from '../class_static_methods/has_index.js';\n\nfunction onInitClass(Class, className) {\n\t// Class static methods.\n\tClass.getIndex = getIndex;\n\tClass.getIndexes = getIndexes;\n\tClass.hasIndex = hasIndex;\n};\n\nexport default onInitClass;","function onInitDefinition(definition, className) {\n\tdefinition.indexes = {};\n};\n\nexport default onInitDefinition;","function onInitSchema(schema, className) {\n\tschema.indexes = {};\n};\n\nexport default onInitSchema;","import _ from 'lodash';\n\nfunction onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {\n\t_.each(sourceDefinition.indexes, function(index, indexName) {\n\t\ttargetDefinition.indexes[indexName] = index;\n\t});\n};\n\nexport default onMergeDefinitions;","import _ from 'lodash';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\n\nconst fieldDefinitionPattern = Match.ObjectIncluding({\n\tindex: Match.OneOf(1, -1, String)\n});\n\nfunction onParseDefinition(parsedDefinition, definition, className) {\n\t// Check existence and validity of the \"indexes\" property.\n\tif (definition.indexes !== undefined) {\n\t\t_.each(definition.indexes, (index, indexName) => {\n\t\t\tif (!Match.test(index, Object)) {\n\t\t\t\tthrowParseError([{\n\t\t\t\t\t\t'class': className\n\t\t\t\t\t}, {\n\t\t\t\t\t\t'index': indexName\n\t\t\t\t\t},\n\t\t\t\t\t'Indexes definition has to be an object'\n\t\t\t\t]);\n\t\t\t}\n\t\t\tindex = {\n\t\t\t\tfields: index.fields,\n\t\t\t\toptions: index.options || {}\n\t\t\t};\n\t\t\tindex.options.name = index.options.name || indexName;\n\t\t\tparsedDefinition.indexes[indexName] = index;\n\t\t});\n\t}\n\n\tif (definition.fields !== undefined) {\n\t\t_.each(definition.fields, (fieldDefinition, fieldName) => {\n\t\t\t// Stop if a field definition does not contain index information.\n\t\t\tif (!Match.test(fieldDefinition, fieldDefinitionPattern)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Prepare an index definition.\n\t\t\tlet indexDefinition = {\n\t\t\t\tfields: {},\n\t\t\t\toptions: {\n\t\t\t\t\tname: fieldName\n\t\t\t\t}\n\t\t\t};\n\t\t\tindexDefinition.fields[fieldName] = fieldDefinition.index;\n\t\t\tparsedDefinition.indexes[fieldName] = indexDefinition;\n\t\t});\n\t}\n};\n\nexport default onParseDefinition;","import Module from '../../core/module.js';\n// Hooks.\nimport onInitSchema from './hooks/init_schema.js';\nimport onInitDefinition from './hooks/init_definition.js';\nimport onParseDefinition from './hooks/parse_definition.js';\nimport onMergeDefinitions from './hooks/merge_definitions.js';\nimport onApplyDefinition from './hooks/apply_definition.js';\nimport onInitClass from './hooks/init_class.js';\n\nModule.create({\n\tname: 'methods',\n\tonInitSchema: onInitSchema,\n\tonInitDefinition: onInitDefinition,\n\tonParseDefinition: onParseDefinition,\n\tonMergeDefinitions: onMergeDefinitions,\n\tonApplyDefinition: onApplyDefinition,\n\tonInitClass: onInitClass\n});","function getMethod(methodName) {\n\treturn this.schema.methods[methodName];\n};\n\nexport default getMethod;","function getMethods() {\n\treturn this.schema.methods;\n};\n\nexport default getMethods;","import _ from 'lodash';\n\nfunction hasMethod(methodName) {\n\treturn _.has(this.schema.methods, methodName);\n};\n\nexport default hasMethod;","import _ from 'lodash';\n\nfunction onApplyDefinition(Class, parsedDefinition, className) {\n\tlet schema = Class.schema;\n\n\t// Add methods to the class.\n\t_.each(parsedDefinition.methods, (method, methodName) => {\n\t\tschema.methods[methodName] = method;\n\t\tClass.prototype[methodName] = method;\n\t});\n};\n\nexport default onApplyDefinition;","// Class static methods.\nimport getMethod from '../class_static_methods/get_method.js';\nimport getMethods from '../class_static_methods/get_methods.js';\nimport hasMethod from '../class_static_methods/has_method.js';\n\nfunction onInitClass(Class, className) {\n\t// Class static methods.\n\tClass.getMethod = getMethod;\n\tClass.getMethods = getMethods;\n\tClass.hasMethod = hasMethod;\n};\n\nexport default onInitClass;","function onInitDefinition(definition, className) {\n\tdefinition.methods = {};\n};\n\nexport default onInitDefinition;","function onInitSchema(schema, className) {\n\tschema.methods = {};\n};\n\nexport default onInitSchema;","import _ from 'lodash';\n\nfunction onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {\n\t_.each(sourceDefinition.methods, function(method, methodName) {\n\t\ttargetDefinition.methods[methodName] = method;\n\t});\n};\n\nexport default onMergeDefinitions;","import _ from 'lodash';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport reservedKeywords from '../../../core/reserved_keywords.js';\n\nfunction onParseDefinition(parsedDefinition, definition, className) {\n\t// Check existence and validity of the \"methods\" property.\n\tif (definition.methods !== undefined) {\n\t\tif (!Match.test(definition.methods, Object)) {\n\t\t\tthrowParseError([{\n\t\t\t\t\t'class': className\n\t\t\t\t}, {\n\t\t\t\t\t'property': 'methods'\n\t\t\t\t},\n\t\t\t\t'Methods definition has to be an object'\n\t\t\t]);\n\t\t}\n\n\t\t_.each(definition.methods, function(method, methodName) {\n\t\t\tif (!Match.test(method, Function)) {\n\t\t\t\tthrowParseError([{\n\t\t\t\t\t\t'class': className\n\t\t\t\t\t}, {\n\t\t\t\t\t\t'method': methodName\n\t\t\t\t\t},\n\t\t\t\t\t'Method has to be a function'\n\t\t\t\t]);\n\t\t\t}\n\n      if (_.includes(reservedKeywords, methodName)) {\n        throwParseError([{\n\t\t\t\t\t\t'class': className\n\t\t\t\t\t}, {\n\t\t\t\t\t\t'method': methodName\n\t\t\t\t\t},\n\t\t\t\t\t'Reserved keyword'\n\t\t\t\t]);\n      }\n\t\t\tparsedDefinition.methods[methodName] = method;\n\t\t});\n\t}\n};\n\nexport default onParseDefinition;","import Module from '../../core/module.js';\n// Utils.\nimport applyModifier from './utils/apply_modifier.js';\nimport callMeteorMethod from './utils/call_meteor_method.js';\nimport classInsert from './utils/class_insert.js';\nimport classUpdate from './utils/class_update.js';\nimport classRemove from './utils/class_remove.js';\nimport documentInsert from './utils/document_insert.js';\nimport documentUpdate from './utils/document_update.js';\nimport documentRemove from './utils/document_remove.js';\nimport getModified from './utils/get_modified.js';\nimport getModifier from './utils/get_modifier.js';\nimport hasMeteorMethod from './utils/has_meteor_method.js';\nimport isModified from './utils/is_modified.js';\nimport isRemote from './utils/is_remote.js';\nimport omitUndefined from './utils/omit_undefined.js';\nimport throwIfSelectorIsNotId from './utils/throw_if_selector_is_not_id.js';\nimport transformToClass from './utils/transform_to_class.js';\nimport triggerBeforeSave from './utils/trigger_before_save.js';\nimport triggerBeforeInsert from './utils/trigger_before_insert.js';\nimport triggerBeforeUpdate from './utils/trigger_before_update.js';\nimport triggerBeforeRemove from './utils/trigger_before_remove.js';\nimport triggerAfterSave from './utils/trigger_after_save.js';\nimport triggerAfterInsert from './utils/trigger_after_insert.js';\nimport triggerAfterUpdate from './utils/trigger_after_update.js';\nimport triggerAfterRemove from './utils/trigger_after_remove.js';\n// Hooks.\nimport onInitSchema from './hooks/init_schema.js';\nimport onInitDefinition from './hooks/init_definition.js';\nimport onParseDefinition from './hooks/parse_definition.js';\nimport onMergeDefinitions from './hooks/merge_definitions.js';\nimport onApplyDefinition from './hooks/apply_definition.js';\nimport onInitClass from './hooks/init_class.js';\n\nModule.create({\n  name: 'storage',\n  onInitSchema: onInitSchema,\n  onInitDefinition: onInitDefinition,\n  onParseDefinition: onParseDefinition,\n  onMergeDefinitions: onMergeDefinitions,\n  onApplyDefinition: onApplyDefinition,\n  onInitClass: onInitClass,\n  utils: {\n    applyModifier,\n    callMeteorMethod,\n    classInsert,\n    classUpdate,\n    classRemove,\n    documentInsert,\n    documentUpdate,\n    documentRemove,\n    getModified,\n    getModifier,\n    hasMeteorMethod,\n    isModified,\n    isRemote,\n    omitUndefined,\n    throwIfSelectorIsNotId,\n    transformToClass,\n    triggerBeforeSave,\n    triggerBeforeInsert,\n    triggerBeforeUpdate,\n    triggerBeforeRemove,\n    triggerAfterSave,\n    triggerAfterInsert,\n    triggerAfterUpdate,\n    triggerAfterRemove\n  }\n});","function afterInit(e) {\n  let doc = e.currentTarget;\n  let Class = doc.constructor;\n\n  let typeField = Class.getTypeField();\n  if (!doc[typeField]) {\n    doc[typeField] = Class.getName();\n  }\n};\n\nexport default afterInit;","function beforeInit(e) {\n\tlet doc = e.currentTarget;\n\n\t// Create the \"_isNew\" property to indicate if a document had been\n\t// stored in a database. A default value of this property is set\n\t// to false. Astronomy can modify this property and it can not appear\n\t// in the list of the object properties.\n\tif (Object.defineProperty) {\n\t\tObject.defineProperty(doc, '_isNew', {\n\t\t\twritable: true,\n\t\t\tenumerable: false\n\t\t});\n\t}\n\tdoc._isNew = true;\n};\n\nexport default beforeInit;","function fromJSONValue(e) {\n\tlet doc = e.currentTarget;\n\tdoc._isNew = e.json.isNew;\n};\n\nexport default fromJSONValue;","function toJSONValue(e) {\n\tlet doc = e.currentTarget;\n\te.json.isNew = doc._isNew;\n};\n\nexport default toJSONValue;","function copy(save) {\n\tlet doc = this;\n\tsave = save || false;\n\n\t// Use EJSON to clone object.\n\tlet copy = EJSON.clone(doc);\n\n\t// Remove the \"_id\" value and set the \"_isNew\" flag to false so that it will\n\t// save the object as a new document instead updating the old one.\n\tcopy._id = null;\n\tcopy._isNew = true;\n\n\tif (save) {\n\t\tcopy.save();\n\t}\n\n\treturn copy;\n};\n\nexport default copy;","import utilGetModified from '../utils/get_modified.js';\n\nfunction getModified() {\n\tlet doc = this;\n\n\treturn utilGetModified({\n\t\tdoc,\n\t\ttransient: true\n\t});\n};\n\nexport default getModified;","import _ from 'lodash';\nimport utilGetModified from '../utils/get_modified.js';\nimport rawOne from '../../fields/utils/raw_one.js';\n\nfunction getModifiedValues(options = {}) {\n  let {\n    old = false,\n    raw = false\n  } = options;\n\n  let doc = this;\n  const Class = doc.constructor;\n\n  // Get list of modified fields.\n  const modified = utilGetModified({\n    doc,\n    transient: true\n  });\n\n  // Get old or new values of a document.\n  if (old) {\n    doc = doc._isNew ? new Class() : Class.findOne(doc._id);\n  }\n\n  // Collect values for each field.\n  const values = {};\n  _.each(modified, (name) => {\n    if (raw) {\n      values[name] = rawOne(doc, name);\n    }\n    else {\n      values[name] = doc.get(name);\n    }\n  });\n\n  return values;\n};\n\nexport default getModifiedValues;","import utilGetModifier from '../utils/get_modifier.js';\n\nfunction getModifier() {\n\tlet doc = this;\n\n\treturn utilGetModifier({\n\t\tdoc\n\t});\n};\n\nexport default getModifier;","import utilIsModified from '../utils/is_modified.js';\n\nfunction isModified(pattern) {\n\tlet doc = this;\n\n\treturn utilIsModified({\n\t\tdoc,\n\t\tpattern,\n\t\ttransient: true\n\t});\n};\n\nexport default isModified;","import _ from 'lodash';\nimport setDefaults from '../../fields/utils/set_defaults.js';\nimport castNested from '../../fields/utils/cast_nested.js';\nimport Event from '../../events/event.js';\n\nfunction reload() {\n\tconst doc = this;\n\tconst Class = doc.constructor;\n\n\t// The document has to be already saved in the collection.\n\tif (!doc._isNew) {\n\t\t// Get a document from the collection without transformation.\n\t\tconst rawDoc = Class.findOne(doc._id, {\n\t\t\ttransform: null\n\t\t});\n\n\t\t// Trigger the \"beforeInit\" event handlers.\n\t\tdoc.dispatchEvent(new Event('beforeInit'));\n\n\t\t// Set all fields.\n\t\tconst fields = Class.getFields();\n    _.each(fields, (field) => {\n      doc[field.name] = field.resolveValue(rawDoc);\n    });\n\n    // Set default values if the \"defaults\" option is set.\n    setDefaults({\n      doc\n    });\n    // Cast nested documents.\n    castNested({\n      doc\n    });\n\n\t\t// Trigger the \"afterInit\" event handlers.\n\t\tdoc.dispatchEvent(new Event('afterInit'));\n\n\t\t// Mark the document as not new.\n\t\tdoc._isNew = false;\n\t}\n};\n\nexport default reload;","import documentRemove from '../utils/document_remove.js';\nimport isRemote from '../utils/is_remote.js';\nimport callMeteorMethod from '../utils/call_meteor_method.js';\n\nfunction remove(args = {}, callback) {\n  let doc = this;\n  let Class = doc.constructor;\n\n  // If the first argument is callback function then reassign values.\n  if (arguments.length === 1 && Match.test(args, Function)) {\n    callback = args;\n    args = {};\n  }\n  // Get variables from the first argument.\n  let {\n    simulation = true\n  } = args;\n\n  // If we are dealing with a remote collection and we are not on the server.\n  if (isRemote(Class)) {\n    // Prepare meteor method name to be called.\n    let methodName = '/Astronomy/remove';\n    // Prepare arguments for the meteor method.\n    let methodArgs = {\n      className: Class.getName(),\n      selector: {\n        _id: doc._id\n      },\n      simulation\n    };\n\n    try {\n      // Run meteor method.\n      let result = callMeteorMethod(\n        Class, methodName, [methodArgs], callback\n      );\n      // Change the \"_isNew\" flag to \"true\". After removing a document can be\n      // saved again as a new one.\n      doc._isNew = true;\n      // Return result of the meteor method call.\n      return result;\n    }\n    // Catch stub exceptions.\n    catch (err) {\n      if (callback) {\n        callback(err);\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  // If we can just remove a document without calling the meteor method. We may\n  // be on the server or the collection may be local.\n  try {\n    // Prepare arguments.\n    let methodArgs = {\n      doc,\n      simulation,\n      trusted: true\n    };\n    let result = documentRemove(methodArgs);\n    if (callback) {\n      callback(undefined, result);\n    }\n    return result;\n  }\n  catch (err) {\n    if (callback) {\n      callback(err);\n      return null;\n    }\n    throw err;\n  }\n}\n\nexport default remove;","import _ from 'lodash';\nimport { DDP } from 'meteor/ddp';\nimport documentInsert from '../utils/document_insert.js';\nimport documentUpdate from '../utils/document_update.js';\nimport isRemote from '../utils/is_remote.js';\nimport callMeteorMethod from '../utils/call_meteor_method.js';\nimport rawAll from '../../fields/utils/raw_all.js';\nimport castNested from '../../fields/utils/cast_nested.js';\nimport getModifier from '../../storage/utils/get_modifier.js';\n\nfunction save(args = {}, callback) {\n  const doc = this;\n  const Class = doc.constructor;\n  const Collection = Class.getCollection();\n\n  // If the first argument is callback function then reassign values.\n  if (arguments.length === 1 && Match.test(args, Function)) {\n    callback = args;\n    args = {};\n  }\n  // Get variables from the first argument.\n  const {\n    stopOnFirstError,\n    simulation,\n    fields\n  } = args;\n\n  // Cast nested documents.\n  castNested({\n    doc\n  });\n\n  // Detect which operation we are executing.\n  const inserting = doc._isNew;\n\n  // Generate ID if not provided.\n  if (inserting && !doc._id) {\n    let generateId = true;\n    // Don't generate the id if we're the client and the 'outermost' call.\n    // This optimization saves us passing both the randomSeed and the id.\n    // Passing both is redundant.\n    if (Collection._isRemoteCollection()) {\n      const enclosing = DDP._CurrentInvocation.get();\n      if (!enclosing) {\n        generateId = false;\n      }\n    }\n    if (generateId) {\n      doc._id = Collection._makeNewID();\n    }\n  }\n\n  // If we are dealing with a remote collection and we are not on the server.\n  if (isRemote(Class)) {\n    // Prepare meteor method name to be called.\n    const methodName = '/Astronomy/' + (inserting ? 'insert' : 'update');\n    // Prepare arguments for meteor method.\n    const methodArgs = {\n      className: Class.getName(),\n      stopOnFirstError,\n      simulation,\n    };\n    // Inserting.\n    if (inserting) {\n      _.extend(methodArgs, {\n        rawDoc: rawAll(doc, {\n          transient: false\n        })\n      });\n    }\n    // Updating.\n    else {\n      _.extend(methodArgs, {\n        selector: {\n          _id: doc._id\n        },\n        modifier: getModifier({\n          doc\n        }),\n        options: {},\n        fields\n      });\n    }\n\n    try {\n      // Run Meteor method.\n      const result = callMeteorMethod(\n        Class, methodName, [methodArgs], callback\n      );\n      if (result && inserting) {\n        // In the insert operation the value return from the meteor method is\n        // a document ID.\n        doc._id = result;\n      }\n      // A document is not new anymore.\n      doc._isNew = false;\n      return result;\n    }\n    // Catch stub exceptions.\n    catch (err) {\n      if (callback) {\n        callback(err);\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  // If we can just insert a document without calling the meteor method. We may\n  // be on the server or the collection may be local.\n  try {\n    // Prepare arguments.\n    let methodArgs = {\n      doc,\n      stopOnFirstError,\n      simulation,\n      trusted: true\n    };\n    if (inserting) {\n      let result = documentInsert(methodArgs);\n      if (callback) {\n        callback(undefined, result);\n      }\n      return result;\n    }\n    else {\n      methodArgs.fields = fields;\n      let result = documentUpdate(methodArgs);\n      if (callback) {\n        callback(undefined, result);\n      }\n      return result;\n    }\n  }\n  catch (err) {\n    if (callback) {\n      callback(err);\n      return null;\n    }\n    throw err;\n  }\n}\n\nexport default save;","import _ from 'lodash';\nimport transformToClass from '../utils/transform_to_class.js';\nimport Event from '../../events/event.js';\nimport { Mongo } from 'meteor/mongo';\n\nfunction createMethod(methodName) {\n  return function(selector, options) {\n    let Class = this;\n    let Collection = Class.getCollection();\n\n    // Get selector from arguments.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n    else {\n      selector = arguments[0];\n    }\n    // If selector is null then just proceed to collection's find method.\n    if (_.isNull(selector)) {\n      return Collection[methodName](selector, options);\n    }\n    // Rewrite selector to make it an object.\n    selector = Mongo.Collection._rewriteSelector(selector);\n\n    // Set default options.\n    options = _.defaults({}, options, {\n      defaults: true,\n      children: true\n    });\n    // We don't want to clone raw object in the \"find\" method.\n    options.clone = false;\n\n    // Modify selector and options using the \"beforeFind\" event handlers.\n    if (!options.disableEvents) {\n      Class.dispatchEvent(new Event('beforeFind', {\n        selector,\n        options\n      }));\n    }\n\n    // If it's an inherited class, then get only documents being instances of\n    // the subclass.\n    const typeField = Class.getTypeField();\n    if (typeField) {\n      // If a class has child classes then we have to fetch document being\n      // instances of the parent and child classes depending on a value of\n      // the \"children\" option.\n      const children = Class.getChildren();\n      if (options.children === true && children.length > 0) {\n        selector[typeField] = {\n          $in: _(children).map(function(Child) {\n            return Child.getName();\n          }).concat(Class.getName()).value()\n        };\n      }\n      else {\n        selector[typeField] = Class.getName();\n      }\n    }\n\n    // Get custom transform function from the class schema.\n    if (options.transform === undefined) {\n      options.transform = Class.getTransform(options);\n    }\n    // Get default transform function if none is provided.\n    if (options.transform === undefined) {\n      options.transform = transformToClass(Class.getName(), {\n        defaults: options.defaults\n      });\n    }\n\n    // Execute the original method.\n    let result = Collection[methodName](selector, options);\n\n    // Modify a query result using the \"afterFind\" event handlers.\n    if (!options.disableEvents) {\n      Class.dispatchEvent(new Event('afterFind', {\n        selector,\n        options,\n        result\n      }));\n    }\n\n    return result;\n  };\n}\n\nconst find = createMethod('find');\nconst findOne = createMethod('findOne');\n\nexport { find, findOne };\n","function getCollection() {\n\treturn this.schema.collection;\n};\n\nexport default getCollection;","import Class from '../../../core/class.js';\nimport setDefaults from '../../fields/utils/set_defaults.js';\n\nfunction getTransform(options) {\n  return this.schema.transform;\n};\n\nexport default getTransform;","function getTypeField() {\n\treturn this.schema.typeField;\n};\n\nexport default getTypeField;","import isRemote from '../utils/is_remote.js';\nimport callMeteorMethod from '../utils/call_meteor_method.js';\nimport classInsert from '../utils/class_insert.js';\n\nfunction insert(rawDoc, callback) {\n  const Class = this;\n  const Collection = Class.getCollection();\n\n  // Prepare arguments.\n  const args = {\n    className: Class.getName(),\n    rawDoc\n  };\n\n  // Generate ID if not provided.\n  if (!rawDoc._id) {\n    let generateId = true;\n    // Don't generate the id if we're the client and the 'outermost' call.\n    // This optimization saves us passing both the randomSeed and the id.\n    // Passing both is redundant.\n    if (Collection._isRemoteCollection()) {\n      const enclosing = DDP._CurrentInvocation.get();\n      if (!enclosing) {\n        generateId = false;\n      }\n    }\n    if (generateId) {\n      rawDoc._id = Collection._makeNewID();\n    }\n  }\n\n  // If we are dealing with a remote collection and we are not on the server.\n  if (isRemote(Class)) {\n    // Prepare meteor method name to be called.\n    const methodName = '/Astronomy/insert';\n\n    try {\n      // Run Meteor method.\n      return callMeteorMethod(\n        Class, methodName, [args], callback\n      );\n    }\n    // Catch stub exceptions.\n    catch (err) {\n      if (callback) {\n        callback(err);\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  // If we can just insert a document without calling the meteor method. We may\n  // be on the server or the collection may be local.\n  try {\n    // Set the \"trusted\" argument to true.\n    args.trusted = true;\n    // Insert a document.\n    let result = classInsert(args);\n    if (callback) {\n      callback(undefined, result);\n    }\n    return result;\n  }\n  catch (err) {\n    if (callback) {\n      callback(err);\n      return null;\n    }\n    throw err;\n  }\n}\n\nexport default insert;","import _ from 'lodash';\n\nfunction isSecured(operation) {\n  if (_.has(this.schema.secured, operation)) {\n    return this.schema.secured[operation];\n  }\n  else {\n    let common = this.schema.secured.common;\n    return common !== undefined ? common : true;\n  }\n};\n\nexport default isSecured;","import isRemote from '../utils/is_remote.js';\nimport callMeteorMethod from '../utils/call_meteor_method.js';\nimport classRemove from '../utils/class_remove.js';\n\nfunction remove(selector, options, callback) {\n  const Class = this;\n\n  // If we omit options argument then it may be a callback function.\n  if (options instanceof Function) {\n    callback = options;\n    options = {};\n  }\n  // Make sure that options is at least an empty object.\n  options = options || {};\n  // Prepare arguments.\n  const args = {\n    className: Class.getName(),\n    selector,\n    options\n  };\n\n  // If we are dealing with a remote collection and we are not on the server.\n  if (isRemote(Class)) {\n    // Prepare meteor method name to be called.\n    const methodName = '/Astronomy/remove';\n\n    try {\n      // Run Meteor method.\n      return callMeteorMethod(\n        Class, methodName, [args], callback\n      );\n    }\n    // Catch stub exceptions.\n    catch (err) {\n      if (callback) {\n        callback(err);\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  // If we can just remove a document without calling the meteor method. We may\n  // be on the server or the collection may be local.\n  try {\n    // Set the \"trusted\" argument to true.\n    args.trusted = true;\n    // Remove a document.\n    let result = classRemove(args);\n    if (callback) {\n      callback(undefined, result);\n    }\n    return result;\n  }\n  catch (err) {\n    if (callback) {\n      callback(err);\n      return null;\n    }\n    throw err;\n  }\n}\n\nexport default remove;","import isRemote from '../utils/is_remote.js';\nimport callMeteorMethod from '../utils/call_meteor_method.js';\nimport classUpdate from '../utils/class_update.js';\n\nfunction update(selector, modifier, options, callback) {\n  const Class = this;\n\n  // If we omit options argument then it may be a callback function.\n  if (options instanceof Function) {\n    callback = options;\n    options = {};\n  }\n  // Make sure that options is at least an empty object.\n  options = options || {};\n  // Prepare arguments.\n  const args = {\n    className: Class.getName(),\n    selector,\n    modifier,\n    options\n  };\n\n  // If we are dealing with a remote collection and we are not on the server.\n  if (isRemote(Class)) {\n    // Prepare meteor method name to be called.\n    const methodName = '/Astronomy/update';\n\n    try {\n      // Run Meteor method.\n      return callMeteorMethod(\n        Class, methodName, [args], callback\n      );\n    }\n    // Catch stub exceptions.\n    catch (err) {\n      if (callback) {\n        callback(err);\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  // If we can just remove a document without calling the meteor method. We may\n  // be on the server or the collection may be local.\n  try {\n    // Set the \"trusted\" argument to true.\n    args.trusted = true;\n    // Remove a document.\n    let result = classUpdate(args);\n    if (callback) {\n      callback(undefined, result);\n    }\n    return result;\n  }\n  catch (err) {\n    if (callback) {\n      callback(err);\n      return null;\n    }\n    throw err;\n  }\n}\n\nexport default update;","import isRemote from '../utils/is_remote.js';\nimport callMeteorMethod from '../utils/call_meteor_method.js';\nimport classUpsert from '../utils/class_upsert.js';\n\nfunction upsert(selector, modifier, options, callback) {\n  const Class = this;\n\n  // If we omit options argument then it may be a callback function.\n  if (options instanceof Function) {\n    callback = options;\n    options = {};\n  }\n  // Make sure that options is at least an empty object.\n  options = options || {};\n  // Prepare arguments.\n  const args = {\n    className: Class.getName(),\n    selector,\n    modifier,\n    options\n  };\n\n  // If we are dealing with a remote collection and we are not on the server.\n  if (isRemote(Class)) {\n    // Prepare meteor method name to be called.\n    const methodName = '/Astronomy/upsert';\n\n    try {\n      // Run Meteor method.\n      return callMeteorMethod(\n        Class, methodName, [args], callback\n      );\n    }\n    // Catch stub exceptions.\n    catch (err) {\n      if (callback) {\n        callback(err);\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  // If we can just remove a document without calling the meteor method. We may\n  // be on the server or the collection may be local.\n  try {\n    // Set the \"trusted\" argument to true.\n    args.trusted = true;\n    // Remove a document.\n    let result = classUpsert(args);\n    if (callback) {\n      callback(undefined, result);\n    }\n    return result;\n  }\n  catch (err) {\n    if (callback) {\n      callback(err);\n      return null;\n    }\n    throw err;\n  }\n}\n\nexport default upsert;","import _ from 'lodash';\n// Utils.\nimport resolveValues from '../../fields/utils/resolve_values.js';\nimport hasMeteorMethod from '../utils/has_meteor_method.js';\n// Class static methods.\nimport { find, findOne } from '../class_static_methods/find.js';\nimport insert from '../class_static_methods/insert.js';\nimport update from '../class_static_methods/update.js';\nimport upsert from '../class_static_methods/upsert.js';\nimport remove from '../class_static_methods/remove.js';\n// Class prototype methods.\nimport protoSave from '../class_prototype_methods/save.js';\nimport protoRemove from '../class_prototype_methods/remove.js';\nimport protoReload from '../class_prototype_methods/reload.js';\nimport protoCopy from '../class_prototype_methods/copy.js';\nimport protoGetModifier from '../class_prototype_methods/get_modifier.js';\nimport protoGetModified from '../class_prototype_methods/get_modified.js';\nimport protoGetModifiedValues from '../class_prototype_methods/get_modified_values.js';\nimport protoIsModified from '../class_prototype_methods/is_modified.js';\n// Meteor methods.\nimport meteorInsert from '../meteor_methods/insert.js';\nimport meteorUpdate from '../meteor_methods/update.js';\nimport meteorUpsert from '../meteor_methods/upsert.js';\nimport meteorRemove from '../meteor_methods/remove.js';\n// Class events.\nimport beforeInit from '../class_events/before_init.js';\nimport afterInit from '../class_events/after_init.js';\nimport fromJSONValue from '../class_events/from_json_value.js';\nimport toJSONValue from '../class_events/to_json_value.js';\n\nfunction onApplyDefinition(Class, parsedDefinition, className) {\n  const schema = Class.schema;\n\n  if (parsedDefinition.collection) {\n    const Collection = schema.collection = parsedDefinition.collection;\n    const id = Collection._makeNewID();\n\n    Class.extend({\n      // Add the \"_id\" field.\n      fields: {\n        _id: {\n          name: '_id',\n          type: id.constructor,\n          optional: true\n        }\n      },\n      // Add storage events.\n      events: {\n        beforeInit: [beforeInit],\n        toJSONValue: [toJSONValue],\n        fromJSONValue: [fromJSONValue]\n      }\n    }, ['fields', 'events']);\n\n    // If it's a remote collection then we register methods on the connection\n    // object of the collection.\n    const connection = Collection._connection;\n    if (connection) {\n      // Prepare meteor methods to be added.\n      const meteorMethods = {\n        '/Astronomy/insert': meteorInsert,\n        '/Astronomy/update': meteorUpdate,\n        '/Astronomy/upsert': meteorUpsert,\n        '/Astronomy/remove': meteorRemove,\n      };\n      _.each(meteorMethods, (meteorMethod, methodName) => {\n        if (!hasMeteorMethod(connection, methodName)) {\n          // Add meteor method.\n          connection.methods(_.zipObject([methodName], [meteorMethod]));\n        }\n      });\n    }\n\n    // Class static methods.\n    Class.find = find;\n    Class.findOne = findOne;\n    Class.insert = insert;\n    Class.update = update;\n    Class.upsert = upsert;\n    Class.remove = remove;\n    // Class prototype methods.\n    Class.prototype.save = protoSave;\n    Class.prototype.remove = protoRemove;\n    Class.prototype.reload = protoReload;\n    Class.prototype.copy = protoCopy;\n    Class.prototype.getModifier = protoGetModifier;\n    Class.prototype.getModified = protoGetModified;\n    Class.prototype.getModifiedValues = protoGetModifiedValues;\n    Class.prototype.isModified = protoIsModified;\n  }\n\n  // Apply type field.\n  if (parsedDefinition.typeField) {\n    const typeField = schema.typeField = parsedDefinition.typeField;\n    Class.extend({\n      // Add the type field.\n      fields: {\n        [typeField]: {\n          type: String\n        }\n      },\n      events: {\n        afterInit: [afterInit]\n      }\n    }, ['fields', 'events']);\n\n    if (parsedDefinition.typeField) {\n      schema.typeField = parsedDefinition.typeField;\n    }\n  }\n\n  // If class has already assigned collection.\n  const Collection = Class.getCollection();\n  if (Collection) {\n    // Apply custom transformation function if the transform property is a\n    // function.\n    if (_.isFunction(parsedDefinition.transform)) {\n      schema.transform = function(rawDoc) {\n        const resolvedDoc = resolveValues({\n          Class,\n          values: rawDoc\n        });\n        return parsedDefinition.transform(resolvedDoc);\n      };\n    }\n    else if (parsedDefinition.transform === null) {\n      schema.transform = null;\n    }\n\n    if (parsedDefinition.secured !== undefined) {\n      _.extend(schema.secured, parsedDefinition.secured);\n    }\n  }\n};\n\nexport default onApplyDefinition;","// Class static methods.\nimport getCollection from '../class_static_methods/get_collection.js';\nimport getTypeField from '../class_static_methods/get_type_field.js';\nimport getTransform from '../class_static_methods/get_transform.js';\nimport isSecured from '../class_static_methods/is_secured.js';\n\nfunction onInitClass(Class, className) {\n  // Class static methods.\n  Class.getCollection = getCollection;\n  Class.getTypeField = getTypeField;\n  Class.getTransform = getTransform;\n  Class.isSecured = isSecured;\n};\n\nexport default onInitClass;","function onInitDefinition(definition, className) {\n  definition.collection = undefined;\n  definition.typeField = undefined;\n  definition.transform = undefined;\n  definition.secured = undefined;\n};\n\nexport default onInitDefinition;","function onInitSchema(schema, className) {\n  schema.collection = undefined;\n  schema.typeField = undefined;\n  schema.transform = undefined;\n  schema.secured = {\n    common: true\n  };\n};\n\nexport default onInitSchema;","import _ from 'lodash';\n\nfunction onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {\n  if (sourceDefinition.collection) {\n    targetDefinition.collection = sourceDefinition.collection;\n  }\n  if (sourceDefinition.typeField) {\n    targetDefinition.typeField = sourceDefinition.typeField;\n  }\n  if (sourceDefinition.transform !== undefined) {\n    targetDefinition.transform = sourceDefinition.transform;\n  }\n  if (sourceDefinition.secured !== undefined) {\n    targetDefinition.secured = _.extend(\n      {},\n      targetDefinition.secured,\n      sourceDefinition.secured\n    );\n  }\n};\n\nexport default onMergeDefinitions;","import _ from 'lodash';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\n\nfunction onParseDefinition(parsedDefinition, definition, className) {\n  // Check existence and validity of the \"collection\" property.\n  if (definition.collection !== undefined) {\n    // The \"collection\" property has to be an instance of the\n    // \"Mongo.Collection\".\n    if (!(definition.collection instanceof Mongo.Collection)) {\n      throwParseError([{\n          'class': className\n        }, {\n          'property': 'collection'\n        },\n        'Property value has to be an instance of \"Mongo.Collection\"'\n      ]);\n    }\n    parsedDefinition.collection = definition.collection;\n  }\n\n  // Check existence and validity of the \"typeField\" property.\n  if (definition.typeField !== undefined) {\n    // The \"typeField\" property has to be a string.\n    if (!Match.test(definition.typeField, String)) {\n      throwParseError([{\n          'class': className\n        }, {\n          'property': 'typeField'\n        },\n        'Property value has to be a string'\n      ]);\n    }\n    parsedDefinition.typeField = definition.typeField;\n  }\n\n  // Check existence and validity of the \"transform\" property.\n  if (definition.transform !== undefined) {\n    // The \"transform\" property has to be a function.\n    if (!Match.test(definition.transform, Match.OneOf(Function, null))) {\n      throwParseError([{\n          'class': className\n        }, {\n          'property': 'transform'\n        },\n        'Property value has to be a function or null'\n      ]);\n    }\n    parsedDefinition.transform = definition.transform;\n  }\n\n  // Check existence and validity of the \"secured\" property.\n  if (definition.secured !== undefined) {\n    if (!Match.test(definition.secured, Match.OneOf(Boolean, Object))) {\n      throwParseError([{\n          'class': className\n        }, {\n          'property': 'secured'\n        },\n        'Property value has to be a boolean or an object with keys being ' +\n        'method name and values being boolean'\n      ]);\n    }\n    if (_.isBoolean(definition.secured)) {\n      parsedDefinition.secured = {\n        common: definition.secured\n      };\n    }\n    else {\n      parsedDefinition.secured = definition.secured;\n    }\n  }\n};\n\nexport default onParseDefinition;","import classInsert from '../utils/class_insert.js';\n\nfunction insert(args) {\n  return classInsert(args);\n};\n\nexport default insert;","import classRemove from '../utils/class_remove.js';\n\nfunction remove(args) {\n  return classRemove(args);\n};\n\nexport default remove;","import classUpdate from '../utils/class_update.js';\n\nfunction update(args) {\n  return classUpdate(args);\n};\n\nexport default update;","import classUpsert from '../utils/class_upsert.js';\n\nfunction upsert(args) {\n  return classUpsert(args);\n};\n\nexport default upsert;","import { DDP } from 'meteor/ddp';\n\nfunction alreadyInSimulation() {\n  const enclosing = DDP._CurrentInvocation.get();\n  return enclosing && enclosing.isSimulation;\n}\n\nexport default alreadyInSimulation;","import _ from 'lodash';\nimport castNested from '../../fields/utils/cast_nested.js';\nimport setAll from '../../fields/utils/set_all.js';\nimport { LocalCollection } from 'meteor/minimongo';\n\nfunction applyModifier({\n  doc,\n  modifier,\n  options\n}) {\n  // Apply modifier only if provided.\n  if (modifier && _.size(modifier) > 0) {\n    // Get raw object because the \"_modify\" method can only work with plain\n    // objects.\n    const rawDoc = doc.raw();\n    // Use Minimongo's the \"_modify\" method to apply modifier.\n    LocalCollection._modify(rawDoc, modifier, options);\n    // Set all values back again on a document.\n    setAll(doc, rawDoc);\n  }\n};\n\nexport default applyModifier;","function callMeteorMethod(\n  Class, methodName, methodArgs, callback\n) {\n  const Collection = Class.getCollection();\n  let connection = Collection && Collection._connection;\n  if (!connection && (!Collection || !Collection._name)) {\n    connection = Meteor.connection;\n  }\n\n  // Prepare meteor method options.\n  const methodOptions = {\n    throwStubExceptions: true,\n    returnStubValue: true\n  };\n\n  return connection.apply(\n    methodName, methodArgs, methodOptions, callback\n  );\n}\n\nexport default callMeteorMethod;","import AstroClass from '../../../core/class.js';\nimport documentInsert from './document_insert.js';\n\nfunction classInsert(args = {}) {\n  const {\n    className,\n    rawDoc,\n    stopOnFirstError,\n    fields,\n    simulation = true,\n    trusted = false,\n  } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  const Class = AstroClass.get(className);\n  // Create a new document.\n  const doc = new Class(rawDoc);\n\n  // Insert a document.\n  return documentInsert({\n    doc,\n    stopOnFirstError,\n    simulation,\n    trusted,\n  });\n};\n\nexport default classInsert;","import AstroClass from '../../../core/class.js';\nimport alreadyInSimulation from './already_in_simulation.js';\nimport throwIfSelectorIsNotId from './throw_if_selector_is_not_id.js';\nimport documentRemove from './document_remove.js';\n\nfunction classRemove(args = {}) {\n  const {\n    className,\n    selector,\n    options,\n    simulation = true,\n    trusted = false\n  } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  // Throw exception if we are trying to perform an operation on more than one\n  // document at once and it's not trusted call.\n  if (!trusted && !alreadyInSimulation()) {\n    throwIfSelectorIsNotId(selector, 'remove');\n  }\n\n  const Class = AstroClass.get(className);\n  // Get all documents matching selector.\n  const docs = Class.find(selector, options);\n  // Prepare result of the method execution.\n  let result = 0;\n\n  docs.forEach((doc) => {\n    // Update a document.\n    result += documentRemove({\n      doc,\n      simulation,\n      trusted\n    });\n  });\n\n  return result;\n};\n\nexport default classRemove;","import _ from 'lodash';\nimport AstroClass from '../../../core/class.js';\nimport alreadyInSimulation from './already_in_simulation.js';\nimport throwIfSelectorIsNotId from './throw_if_selector_is_not_id.js';\nimport documentUpdate from './document_update.js';\nimport applyModifier from './apply_modifier.js';\nimport { Minimongo } from 'meteor/minimongo';\n\nfunction classUpdate(args = {}) {\n  const {\n    className,\n    selector,\n    modifier,\n    options,\n    stopOnFirstError,\n    fields,\n    simulation = true,\n    trusted = false,\n  } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  // Throw exception if we are trying to perform an operation on more than one\n  // document at once and it's not trusted call.\n  if (!trusted && !alreadyInSimulation()) {\n    throwIfSelectorIsNotId(selector, 'update');\n  }\n\n  const Class = AstroClass.get(className);\n  // Get all documents matching selector.\n  let docs;\n  if (options.multi) {\n    docs = Class.find(selector, options);\n  }\n  else {\n    docs = Class.find(selector, _.extend(options, {\n      limit: 1\n    }));\n  }\n\n  // Create a minimongo matcher object to find array indexes on the projection\n  // operator use.\n  const matcher = new Minimongo.Matcher(selector);\n\n  // Prepare result of the method execution.\n  let result = 0;\n\n  docs.forEach((doc) => {\n    // Use matcher to find array indexes in a given document that needs updating\n    // on the projection operator use.\n    let queryResult = matcher.documentMatches(doc);\n\n    // Apply modifier.\n    applyModifier({\n      doc,\n      modifier,\n      options: queryResult.arrayIndices ? {\n        arrayIndices: queryResult.arrayIndices\n      } : {}\n    });\n\n    // Update a document.\n    result += documentUpdate({\n      doc,\n      stopOnFirstError,\n      simulation,\n      fields,\n      trusted\n    });\n  });\n\n  return result;\n};\n\nexport default classUpdate;","import AstroClass from '../../../core/class.js';\nimport alreadyInSimulation from './already_in_simulation.js';\nimport throwIfSelectorIsNotId from './throw_if_selector_is_not_id.js';\nimport documentInsert from './document_insert.js';\nimport documentUpdate from './document_update.js';\nimport applyModifier from './apply_modifier.js';\nimport { Minimongo, LocalCollection } from 'meteor/minimongo';\n\nfunction classUpsert(args = {}) {\n  const {\n    className,\n    selector,\n    modifier,\n    options,\n    stopOnFirstError,\n    fields,\n    simulation = true,\n    trusted = false,\n  } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  // Throw exception if we are trying to perform an operation on more than one\n  // document at once and it's not trusted call.\n  if (!trusted && !alreadyInSimulation()) {\n    throwIfSelectorIsNotId(selector, 'upsert');\n  }\n\n  const Class = AstroClass.get(className);\n  // Get all documents matching selector.\n  let docs;\n  if (options.multi) {\n    docs = Class.find(selector, options);\n  }\n  else {\n    docs = Class.find(selector, _.extend(options, {\n      limit: 1\n    }));\n  }\n\n  // Create a minimongo matcher object to find array indexes on the projection\n  // operator use.\n  const matcher = new Minimongo.Matcher(selector);\n\n  // Prepare result of the method execution.\n  const result = {\n    numberAffected: 0,\n    insertedId: null\n  };\n\n  if (docs.count() > 0) {\n    docs.forEach((doc) => {\n      // Use matcher to find array indexes in a given document that needs updating\n      // on the projection operator use.\n      let queryResult = matcher.documentMatches(doc);\n\n      // Apply modifier.\n      applyModifier({\n        doc,\n        modifier,\n        options: queryResult.arrayIndices ? {\n          arrayIndices: queryResult.arrayIndices\n        } : {}\n      });\n\n      // Update a document.\n      result.numberAffected += documentUpdate({\n        doc,\n        stopOnFirstError,\n        simulation,\n        fields,\n        trusted\n      });\n    });\n  }\n  else {\n    // Create a new document from selector.\n    const doc = new Class(LocalCollection._removeDollarOperators(selector));\n    // Apply modifier for the insert operation.\n    applyModifier({\n      doc,\n      modifier,\n      options: {\n        isInsert: true\n      }\n    });\n\n    // Insert a document.\n    result.insertedId = documentInsert({\n      doc,\n      stopOnFirstError,\n      simulation,\n      trusted,\n    });\n  }\n\n  return result;\n};\n\nexport default classUpsert;","import _ from 'lodash';\nimport castNested from '../../fields/utils/cast_nested.js';\nimport rawAll from '../../fields/utils/raw_all.js';\nimport triggerBeforeSave from './trigger_before_save.js';\nimport triggerBeforeInsert from './trigger_before_insert.js';\nimport triggerAfterSave from './trigger_after_save.js';\nimport triggerAfterInsert from './trigger_after_insert.js';\nimport documentValidate from '../../validators/utils/document_validate.js';\n\nfunction documentInsert(args = {}) {\n  const {\n    doc,\n    stopOnFirstError,\n    fields,\n    simulation = true,\n    trusted = false\n  } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  const Class = doc.constructor;\n  const Collection = Class.getCollection();\n\n  // Generate ID if not provided.\n  if (!doc._id) {\n    doc._id = Collection._makeNewID();\n  }\n\n  // Check if a class is secured.\n  if (Class.isSecured('insert') && Meteor.isServer && !trusted) {\n    throw new Meteor.Error(403, 'Inserting from the client is not allowed');\n  }\n\n  // Cast nested documents.\n  castNested({\n    doc\n  });\n\n  // Trigger before events.\n  triggerBeforeSave(doc, trusted);\n  triggerBeforeInsert(doc, trusted);\n\n  // Cast nested documents.\n  castNested({\n    doc\n  });\n\n  // Validate a document.\n  documentValidate({\n    doc,\n    fields,\n    stopOnFirstError,\n    simulation\n  });\n\n  // Get plain values of all fields. Pick only values that we want to save.\n  let values = rawAll(doc, {\n    transient: false\n  });\n  values = _.omitBy(values, _.isUndefined);\n\n  // Insert a document.\n  try {\n    // There is a difference in what the insert method returns depending on the\n    // environment. On the client it returns an inserted document id, on the\n    // server it returns array of inserted documents. So we always return the\n    // generated id. We can't send an entire document because it could be a\n    // security issue if we are not subscribed to all fields of a document.\n    Collection._collection.insert(values);\n\n    // Change the \"_isNew\" flag to \"false\". Now a document is not new.\n    doc._isNew = false;\n\n    // Trigger after events.\n    triggerAfterInsert(doc, trusted);\n    triggerAfterSave(doc, trusted);\n\n    return doc._id;\n  }\n  catch(err) {\n    if (err.name === 'MongoError' || err.name === 'MinimongoError') {\n      throw new Meteor.Error(409, err.toString());\n    }\n    else {\n      throw err;\n    }\n  }\n};\n\nexport default documentInsert;\n","import triggerBeforeRemove from './trigger_before_remove.js';\nimport triggerAfterRemove from './trigger_after_remove.js';\n\nfunction documentRemove(args = {}) {\n  const {\n    doc,\n    simulation = true,\n    trusted = false\n  } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  const Class = doc.constructor;\n  const Collection = Class.getCollection();\n\n  // Remove only when document has the \"_id\" field (it's persisted).\n  if (doc._isNew || !doc._id) {\n    return 0;\n  }\n\n  // Check if a class is secured.\n  if (Class.isSecured('remove') && Meteor.isServer && !trusted) {\n    throw new Meteor.Error(403, 'Removing from the client is not allowed');\n  }\n\n  // Trigger before events.\n  triggerBeforeRemove(doc, trusted);\n\n  // Remove a document.\n  try {\n    const result = Collection._collection.remove({\n      _id: doc._id\n    });\n\n    // Mark a document as new, so it will be possible to save it again.\n    doc._isNew = true;\n\n    // Trigger after events.\n    triggerAfterRemove(doc, trusted);\n\n    return result;\n  }\n  catch(err) {\n    if (err.name === 'MongoError' || err.name === 'MinimongoError') {\n      throw new Meteor.Error(409, err.toString());\n    }\n    else {\n      throw err;\n    }\n  }\n};\n\nexport default documentRemove;","import _ from 'lodash';\nimport castNested from '../../fields/utils/cast_nested.js';\nimport triggerBeforeSave from './trigger_before_save.js';\nimport triggerBeforeUpdate from './trigger_before_update.js';\nimport triggerAfterSave from './trigger_after_save.js';\nimport triggerAfterUpdate from './trigger_after_update.js';\nimport isModified from './is_modified.js';\nimport getModifier from './get_modifier.js';\nimport documentValidate from '../../validators/utils/document_validate.js';\n\nfunction documentUpdate(args = {}) {\n  let {\n    doc,\n    stopOnFirstError,\n    fields,\n    simulation = true,\n    trusted = false,\n  } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  let Class = doc.constructor;\n  let Collection = Class.getCollection();\n\n  // Return if there were no modifications.\n  if (!isModified({\n      doc,\n      fields\n    })) {\n    // Validate a document even if there were no modifications.\n    documentValidate({\n      doc,\n      fields,\n      stopOnFirstError,\n      simulation\n    });\n    // 0 documents were modified.\n    return 0;\n  }\n\n  // Check if a class is secured.\n  if (Class.isSecured('update') && Meteor.isServer && !trusted) {\n    throw new Meteor.Error(403, 'Updating from the client is not allowed');\n  }\n\n  // Cast nested documents.\n  castNested({\n    doc\n  });\n\n  // Trigger before events.\n  triggerBeforeSave(doc, trusted);\n  triggerBeforeUpdate(doc, trusted);\n\n  // Cast nested documents.\n  castNested({\n    doc\n  });\n\n  // Validate a document.\n  documentValidate({\n    doc,\n    fields,\n    stopOnFirstError,\n    simulation\n  });\n\n  // Get modifier.\n  const modifier = getModifier({\n    doc,\n    fields\n  });\n  // Stop execution is a modifier is empty.\n  if (_.size(modifier) === 0) {\n    return 0;\n  }\n  // Update a document.\n  try {\n    const result = Collection._collection.update({\n      _id: doc._id\n    }, modifier);\n\n    // Trigger after events.\n    triggerAfterUpdate(doc, trusted);\n    triggerAfterSave(doc, trusted);\n\n    return result;\n  }\n  catch(err) {\n    if (err.name === 'MongoError' || err.name === 'MinimongoError') {\n      throw new Meteor.Error(409, err.toString());\n    }\n    else {\n      throw err;\n    }\n  }\n};\n\nexport default documentUpdate;\n","import _ from 'lodash';\nimport AstroClass from '../../../core/class.js';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport rawMany from '../../fields/utils/raw_many.js';\nimport omitUndefined from './omit_undefined.js';\n\nfunction diff({\n  newDoc,\n  oldDoc,\n  prefix = ''\n}) {\n  let result = [];\n\n  const fieldsNames = _.union(_.keys(oldDoc), _.keys(newDoc));\n  _.each(fieldsNames, function(fieldName) {\n    const oldValue = oldDoc[fieldName];\n    const newValue = newDoc[fieldName];\n\n    if (!EJSON.equals(oldValue, newValue)) {\n      const nestedPrefix = (prefix && prefix + '.') + fieldName;\n      result.push(nestedPrefix);\n\n      // Compare two objects.\n      if (_.isPlainObject(oldValue) && _.isPlainObject(newValue)) {\n\n        result.push(...diff({\n          oldDoc: oldValue,\n          newDoc: newValue,\n          prefix: nestedPrefix\n        }));\n\n      }\n      // Compare two arrays.\n      else if (_.isArray(oldValue) && _.isArray(newValue)) {\n\n        let maxLength = Math.max(oldValue.length, newValue.length);\n        _.each(_.range(maxLength), function(index) {\n          const arrayPrefix = nestedPrefix + '.' + index;\n          const oldElement = oldValue[index];\n          const newElement = newValue[index];\n          if (!EJSON.equals(oldElement, newElement)) {\n            result.push(arrayPrefix);\n            // If both array elements are object, then we perform diff between\n            // them.\n            if (_.isPlainObject(oldElement) && _.isPlainObject(newElement)) {\n              // Get a difference between elements.\n              result.push(...diff({\n                oldDoc: oldElement,\n                newDoc: newElement,\n                prefix: arrayPrefix\n              }));\n            }\n          }\n        });\n\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction getModified(options = {}) {\n  let {\n    doc: newDoc,\n    transient = false,\n    immutable = false,\n    fields\n  } = options;\n\n  const Class = newDoc.constructor;\n  const opts = {\n    defaults: false\n  };\n  const oldDoc = newDoc._isNew ?\n    new Class({}, opts) : Class.findOne(newDoc._id, opts);\n  // If there is no document before modifications that may mean that we are not\n  // subscribed to the publication publishing given document or we modified the\n  // _id of a document.\n  if (!oldDoc) {\n    throwParseError([{\n        'module': 'storage'\n      }, {\n        'utility': 'getModified'\n      },\n      `Can not get a document before modifications. You are not subscribed ` +\n      `to the publication publishing a \"${Class.getName()}\" document with ` +\n      `the id \"${newDoc._id}\" or you have modified the \"_id\" field`\n    ]);\n  }\n\n  // If there are not fields specified, then get all of them.\n  if (!fields) {\n    fields = Class.getFieldsNames();\n  }\n\n  return diff({\n    // Get raw data from the docs.\n    oldDoc: omitUndefined(rawMany(oldDoc, fields, {\n      transient,\n      immutable\n    })),\n    newDoc: omitUndefined(rawMany(newDoc, fields, {\n      transient,\n      immutable\n    }))\n  });\n};\n\nexport default getModified;","import _ from 'lodash';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport rawMany from '../../fields/utils/raw_many.js';\nimport omitUndefined from './omit_undefined.js';\n\nfunction diff({\n  oldDoc,\n  newDoc,\n  prefix = ''\n}) {\n  let $set = {};\n  let $unset = {};\n  let $push = {};\n\n  const fieldsNames = _.union(_.keys(oldDoc), _.keys(newDoc));\n  _.each(fieldsNames, function(fieldName) {\n    const oldValue = oldDoc[fieldName];\n    const newValue = newDoc[fieldName];\n\n    if (!EJSON.equals(oldValue, newValue)) {\n      const nestedPrefix = (prefix && prefix + '.') + fieldName;\n\n      // Compare two objects.\n      if (_.isPlainObject(oldValue) && _.isPlainObject(newValue)) {\n\n        let {\n          $set: $nestedSet,\n          $unset: $nestedUnset,\n          $push: $nestedPush\n        } = diff({\n          oldDoc: oldValue,\n          newDoc: newValue,\n          prefix: nestedPrefix\n        });\n        _.extend($set, $nestedSet);\n        _.extend($unset, $nestedUnset);\n        _.extend($push, $nestedPush);\n\n      }\n      // Compare two arrays.\n      else if (_.isArray(oldValue) && _.isArray(newValue)) {\n\n        // NOTE: We need check a new array size. If its length increased or\n        // stayed the same then all changes can be registered using the $set\n        // modifier. If an array length decreased, then we should slice it.\n        // However it may not be possible if some element has also changed.\n        // In such situation we have to override entire array.\n        let $arraySet = {};\n        let $arrayUnset = {};\n        let $arrayPush = {};\n        // Compare up to number of elements in the array after the change.\n        _.each(newValue, function(newElement, index) {\n          const arrayPrefix = nestedPrefix + '.' + index;\n          const oldElement = oldValue[index];\n          if (!EJSON.equals(oldElement, newElement)) {\n            // If both array elements are object, then we perform diff between\n            // them.\n            if (_.isPlainObject(oldElement) && _.isPlainObject(newElement)) {\n              // Get a difference between elements.\n              let {\n                $set: $elementSet,\n                $unset: $elementUnset,\n                $push: $elementPush\n              } = diff({\n                oldDoc: oldElement,\n                newDoc: newElement,\n                prefix: arrayPrefix\n              });\n              _.extend($arraySet, $elementSet);\n              _.extend($arrayUnset, $elementUnset);\n              _.extend($arrayPush, $elementPush);\n            }\n            else {\n              $arraySet[arrayPrefix] = newElement;\n            }\n          }\n        });\n\n        // If an array was empty, then we override entire field with a new\n        // array. That way we solve a problem with treating array indexes as\n        // object keys, which cause inserting Object instead of Array into the\n        // Mongo collection.\n        if (oldValue.length === 0 && newValue.length > 0) {\n          $set[nestedPrefix] = newValue;\n        }\n        // Array length increased or stayed the same.\n        else if (newValue.length >= oldValue.length) {\n          _.extend($set, $arraySet);\n          _.extend($unset, $arrayUnset);\n          _.extend($push, $arrayPush);\n        }\n        // Array length decreased.\n        else {\n          // At least one array element has changed.\n          // FIXME: Due to an error in MiniMongo it's not possible to apply\n          // $push modifier with the $slice operator set to positive number.\n          // That's why the following \"if\" statement is always true and we\n          // have to override entire array when it was shrinked.\n          if (true || _.size($arraySet) > 0 || _.size($arrayPush) > 0) {\n            // So, we need to override entire array with its new state.\n            $set[nestedPrefix] = newValue;\n          }\n          // Array elements have not changed. The array length just shrinked.\n          else {\n            $push[nestedPrefix] = {\n              // We do not want to add any elements, we just want to slice an\n              // array.\n              $each: [],\n              // Slice array to new array length.\n              $slice: newValue.length\n            };\n          }\n        }\n\n      }\n      else {\n\n        if (newValue !== undefined) {\n          $set[nestedPrefix] = newValue;\n        }\n        else {\n          $unset[nestedPrefix] = '';\n        }\n      }\n    }\n  });\n\n  // Return only non empty modifiers.\n  let modifier = {};\n  if (_.size($set)) {\n    modifier.$set = $set;\n  }\n  if (_.size($unset)) {\n    modifier.$unset = $unset;\n  }\n  if (_.size($push)) {\n    modifier.$push = $push;\n  }\n  return modifier;\n};\n\nfunction getModifier(options) {\n  let {\n    doc: newDoc,\n    transient = false,\n    immutable = false,\n    fields\n  } = options;\n\n  const Class = newDoc.constructor;\n  const opts = {\n    defaults: false\n  };\n  const oldDoc = newDoc._isNew ?\n    new Class({}, opts) : Class.findOne(newDoc._id, opts);\n  // If there is no document before modifications that may mean that we are not\n  // subscribed to the publication publishing given document or we modified the\n  // _id of a document.\n  if (!oldDoc) {\n    throwParseError([{\n        'module': 'storage'\n      }, {\n        'utility': 'getModified'\n      },\n      `Can not get a document before modifications. You are not subscribed ` +\n      `to the publication publishing a \"${Class.getName()}\" document with ` +\n      `the id \"${newDoc._id}\" or you have modified the \"_id\" field`\n    ]);\n  }\n\n  // If there are not fields specified, then get all of them.\n  if (!fields) {\n    fields = Class.getFieldsNames();\n  }\n\n  return diff({\n    // Get raw data from the docs.\n    oldDoc: omitUndefined(rawMany(oldDoc, fields, {\n      transient,\n      immutable\n    })),\n    newDoc: omitUndefined(rawMany(newDoc, fields, {\n      transient,\n      immutable\n    }))\n  });\n};\n\nexport default getModifier;","import _ from 'lodash';\n\nfunction hasMeteorMethod(connection, methodName) {\n  // There is inconsistency between client and server. On the client connection\n  // object contains the \"_methodHandlers\" property and on the server the\n  // \"method_handlers\" property.\n  let methodHandlers = connection._methodHandlers || connection.method_handlers;\n\n  return _.has(methodHandlers, methodName);\n};\n\nexport default hasMeteorMethod;","import _ from 'lodash';\nimport getModified from './get_modified.js';\n\nfunction isModified(options = {}) {\n\tlet {\n\t\tdoc,\n\t\tpattern,\n\t\ttransient = false,\n\t\timmutable = false\n\t} = options;\n\n\tlet modified = getModified({\n\t\tdoc,\n\t\ttransient,\n\t\timmutable\n\t});\n\n\tif (pattern) {\n\t\treturn _.includes(modified, pattern);\n\t}\n\telse {\n\t\treturn modified.length > 0;\n\t}\n};\n\nexport default isModified;","function isRemote(Class) {\n  const Collection = Class.getCollection();\n  if (!Collection) {\n    return false;\n  }\n  const connection = Collection._connection;\n\n  return connection && connection !== Meteor.server;\n}\n\nexport default isRemote;","import _ from 'lodash';\n\nfunction omitUndefined(obj) {\n  return _.transform(obj, function(result, value, key) {\n    if (_.isPlainObject(value)) {\n      result[key] = omitUndefined(value);\n    }\n    else if (!_.isUndefined(value)) {\n      result[key] = value;\n    }\n  });\n}\n\nexport default omitUndefined;","import { LocalCollection } from 'meteor/minimongo';\n\nfunction throwIfSelectorIsNotId(selector, methodName) {\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n    throw new Meteor.Error(\n      403,\n      `Not permitted. Untrusted code may only ${methodName} documents by ID.`\n    );\n  }\n};\n\nexport default throwIfSelectorIsNotId;","import _ from 'lodash';\nimport AstroClass from '../../../core/class.js';\nimport resolveValues from '../../fields/utils/resolve_values.js';\n\nfunction transformToClass(className, options = {}) {\n  // Set default options.\n  _.defaults(options, {\n    defaults: true\n  });\n  options.clone = false;\n\n  return function(rawDoc) {\n    let Class = AstroClass.get(className);\n\n    if (Class) {\n      const typeField = Class.getTypeField();\n      if (typeField) {\n        const TypeClass = AstroClass.get(rawDoc[typeField]);\n        if (TypeClass) {\n          Class = TypeClass;\n        }\n      }\n\n      // Resolve values using the \"resolveValue\" method if provided.\n      const resolvedDoc = resolveValues({\n        Class,\n        values: rawDoc\n      });\n\n      const doc = new Class(resolvedDoc, options);\n      doc._isNew = false;\n      return doc;\n    }\n\n    return rawDoc;\n  };\n};\n\nexport default transformToClass;\n","import Event from '../../events/event.js';\n\nfunction triggerAfterInsert(doc, trusted) {\n\t// Trigger the \"afterInsert\" event handlers.\n\tdoc.dispatchEvent(new Event('afterInsert', {\n\t\tpropagates: true,\n\t\ttrusted: trusted\n\t}));\n};\n\nexport default triggerAfterInsert;","import Event from '../../events/event.js';\n\nfunction triggerAfterRemove(doc, trusted) {\n\t// Trigger the \"afterRemove\" event handlers.\n\tdoc.dispatchEvent(new Event('afterRemove', {\n\t\tpropagates: true,\n\t\ttrusted: trusted\n\t}));\n};\n\nexport default triggerAfterRemove;","import Event from '../../events/event.js';\n\nfunction triggerAfterSave(doc, trusted) {\n\t// Trigger the \"afterSave\" event handlers.\n\tdoc.dispatchEvent(new Event('afterSave', {\n\t\tpropagates: true,\n\t\ttrusted: trusted\n\t}));\n};\n\nexport default triggerAfterSave;","import Event from '../../events/event.js';\n\nfunction triggerAfterUpdate(doc, trusted) {\n\t// Trigger the \"afterUpdate\" event handlers.\n\tdoc.dispatchEvent(new Event('afterUpdate', {\n\t\tpropagates: true,\n\t\ttrusted: trusted\n\t}));\n};\n\nexport default triggerAfterUpdate;","import Event from '../../events/event.js';\n\nfunction triggerBeforeInsert(doc, trusted) {\n\t// Trigger the \"beforeInsert\" event handlers.\n\tif (!doc.dispatchEvent(new Event('beforeInsert', {\n\t\t\tcancelable: true,\n\t\t\tpropagates: true,\n\t\t\ttrusted: trusted\n\t\t}))) {\n\t\t// If an event was prevented, then we stop here.\n\t\tthrow new Meteor.Error('prevented', 'Operation prevented', {\n\t\t\teventName: 'beforeInsert'\n\t\t});\n\t}\n};\n\nexport default triggerBeforeInsert;","import Event from '../../events/event.js';\n\nfunction triggerBeforeRemove(doc, trusted) {\n\t// Trigger the \"beforeRemove\" event handlers.\n\tif (!doc.dispatchEvent(new Event('beforeRemove', {\n\t\t\tcancelable: true,\n\t\t\tpropagates: true,\n\t\t\ttrusted: trusted\n\t\t}))) {\n\t\t// If an event was prevented, then we stop here.\n\t\tthrow new Meteor.Error('prevented', 'Operation prevented', {\n\t\t\teventName: 'beforeRemove'\n\t\t});\n\t}\n};\n\nexport default triggerBeforeRemove;","import Event from '../../events/event.js';\n\nfunction triggerBeforeSave(doc, trusted) {\n\t// Trigger the \"beforeSave\" event handlers.\n\tif (!doc.dispatchEvent(new Event('beforeSave', {\n\t\t\tcancelable: true,\n\t\t\tpropagates: true,\n\t\t\ttrusted: trusted\n\t\t}))) {\n\t\t// If an event was prevented, then we stop here.\n\t\tthrow new Meteor.Error('prevented', 'Operation prevented', {\n\t\t\teventName: 'beforeSave'\n\t\t});\n\t}\n};\n\nexport default triggerBeforeSave;","import Event from '../../events/event.js';\n\nfunction triggerBeforeUpdate(doc, trusted) {\n\t// Trigger the \"beforeUpdate\" event handlers.\n\tif (!doc.dispatchEvent(new Event('beforeUpdate', {\n\t\t\tcancelable: true,\n\t\t\tpropagates: true,\n\t\t\ttrusted: trusted\n\t\t}))) {\n\t\t// If an event was prevented, then we stop here.\n\t\tthrow new Meteor.Error('prevented', 'Operation prevented', {\n\t\t\teventName: 'beforeUpdate'\n\t\t});\n\t}\n};\n\nexport default triggerBeforeUpdate;","import Module from '../../core/module.js';\n// Validators.\nimport './validators/comparison/choice.js';\nimport './validators/comparison/email.js';\nimport './validators/comparison/equal.js';\nimport './validators/comparison/not_equal.js';\nimport './validators/comparison/regexp.js';\nimport './validators/existence/null.js';\nimport './validators/existence/not_null.js';\nimport './validators/existence/required.js';\nimport './validators/logical/and.js';\nimport './validators/logical/or.js';\nimport './validators/nested/every.js';\nimport './validators/nested/has.js';\nimport './validators/nested/includes.js';\nimport './validators/size/gt.js';\nimport './validators/size/gte.js';\nimport './validators/size/length.js';\nimport './validators/size/lt.js';\nimport './validators/size/lte.js';\nimport './validators/size/max_length.js';\nimport './validators/size/min_length.js';\nimport './validators/type/array.js';\nimport './validators/type/boolean.js';\nimport './validators/type/class.js';\nimport './validators/type/date.js';\nimport './validators/type/integer.js';\nimport './validators/type/mongo_object_id.js';\nimport './validators/type/number.js';\nimport './validators/type/object.js';\nimport './validators/type/string.js';\n// Utils.\nimport documentValidate from './utils/document_validate.js';\nimport parseValidators from './utils/parse_validators.js';\n// Hooks.\nimport onInitSchema from './hooks/init_schema.js';\nimport onInitDefinition from './hooks/init_definition.js';\nimport onParseDefinition from './hooks/parse_definition.js';\nimport onMergeDefinitions from './hooks/merge_definitions.js';\nimport onApplyDefinition from './hooks/apply_definition.js';\nimport onInitClass from './hooks/init_class.js';\n\nModule.create({\n\tname: 'validators',\n\tonInitSchema: onInitSchema,\n\tonInitDefinition: onInitDefinition,\n\tonParseDefinition: onParseDefinition,\n\tonMergeDefinitions: onMergeDefinitions,\n\tonApplyDefinition: onApplyDefinition,\n\tonInitClass: onInitClass,\n\tutils: {\n\t\tdocumentValidate: documentValidate,\n\t\tparseValidators: parseValidators\n\t}\n});","import { ValidationError } from 'meteor/mdg:validation-error';\nimport Validators from './validators.js';\n\nclass Validator {\n  constructor(definition) {\n    this.name = definition.name;\n    if (definition.parseParam) {\n      this.parseParam = definition.parseParam;\n    }\n    if (definition.isValid) {\n      this.isValid = definition.isValid;\n    }\n    if (definition.validate) {\n      this.validate = definition.validate;\n    }\n    if (definition.resolveError) {\n      this.resolveError = definition.resolveError;\n    }\n  }\n\n  validate({\n    doc,\n    name,\n    nestedName,\n    value,\n    param,\n    resolveParam,\n    message,\n    resolveError\n  }) {\n    // Get the class name, which will be used later for letting know what class\n    // thrown error.\n    const className = doc.constructor.getName();\n\n    // Resolve param is the \"resolveParam\" function is provided.\n    if (Match.test(resolveParam, Function)) {\n      param = resolveParam({\n        doc,\n        name,\n        nestedName,\n        value\n      });\n    }\n    // Parse param type if validator has parsing function.\n    if (Match.test(this.parseParam, Function)) {\n      this.parseParam(param);\n    }\n    // Prepare data for validation.\n    const args = {\n      className,\n      doc,\n      name,\n      nestedName,\n      value,\n      param,\n      validator: this.name\n    };\n    // Perform validation.\n    if (!this.isValid(args)) {\n      // Prepare function for throwing validation error.\n      const throwError = (message) => {\n        // Throw error only if the error message has been successfully\n        // generated.\n        if (!message) {\n          return;\n        }\n        // Throw error.\n        throw new ValidationError([{\n          className,\n          type: this.name,\n          name,\n          nestedName,\n          value,\n          param,\n          message\n        }], message);\n      };\n\n      // Generate error message using the \"resolveError\" function if provided.\n      if (Match.test(resolveError, Function)) {\n        throwError(resolveError(args));\n      }\n      // Get error message from the string if provided.\n      if (Match.test(message, String)) {\n        throwError(message);\n      }\n      // Get error by executing a class level \"resolveError\" function.\n      let Class = doc.constructor;\n      let classResolveError = Class.getResolveError();\n      if (classResolveError instanceof Function) {\n        throwError(classResolveError(args));\n      }\n      // Get default error message.\n      if (this.resolveError instanceof Function) {\n        throwError(this.resolveError(args));\n      }\n      throwError(ValidationError.DEFAULT_REASON);\n    }\n  }\n\n  static create(definition) {\n    let validator = new Validator(definition);\n    Validator.validators[validator.name] = validator;\n\n    // Create a validation function.\n    return Validators[validator.name] = function(options) {\n      validator.validate(options);\n    }\n  }\n};\n\nValidator.validators = {};\n\nexport default Validator;","const Validators = {};\n\nexport default Validators;","import castNested from '../../fields/utils/cast_nested.js';\nimport documentValidate from '../utils/document_validate.js';\nimport callMeteorMethod from '../../storage/utils/call_meteor_method.js';\n\nfunction validate(args = {}, callback) {\n  let doc = this;\n  let Class = doc.constructor;\n  let Collection = Class.getCollection();\n  let connection = Collection && Collection._connection;\n  if (!connection && (!Collection || !Collection._name)) {\n    connection = Meteor.connection;\n  }\n\n  // If the first argument is callback function then reassign values.\n  if (arguments.length === 1 && Match.test(args, Function)) {\n    callback = args;\n    args = {};\n  }\n\n  let {\n    fields = Class.getValidationOrder(),\n    stopOnFirstError = true,\n    simulation = true,\n  } = args;\n\n  // If a fields property is a string then put it into array.\n  if (Match.test(fields, String)) {\n    fields = [fields];\n  }\n\n  // Cast nested documents.\n  castNested({\n    doc\n  });\n\n  // Prepare arguments for meteor method and utility.\n  let methodArgs = {\n    doc,\n    fields,\n    stopOnFirstError,\n    simulation,\n  };\n\n  // If we are dealing with a remote collection and we are not on the server.\n  if (connection && connection !== Meteor.server) {\n    // Prepare arguments for meteor method.\n    let methodName = '/Astronomy/validate';\n\n    try {\n      // Run Meteor method.\n      return callMeteorMethod(\n        Class, methodName, [methodArgs], callback\n      );\n    }\n    // Catch stub exceptions.\n    catch (err) {\n      if (callback) {\n        callback(err);\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  // If we can just validate a document without calling the meteor method. We\n  // may be on the server or the collection may be local.\n  try {\n    // Validate a document.\n    let result = documentValidate(methodArgs);\n    if (callback) {\n      callback();\n    }\n    return result;\n  }\n  catch (err) {\n    if (callback) {\n      callback(err);\n      return null;\n    }\n    throw err;\n  }\n}\n\nexport default validate;","import _ from 'lodash';\n\nfunction validateAll(options = {}, callback) {\n  let doc = this;\n  let Class = doc.constructor;\n\n  // If the first argument is callback function then reassign values.\n  if (arguments.length === 1 && Match.test(options, Function)) {\n    callback = options;\n    options = {};\n  }\n\n  _.extend(options, {\n    fields: Class.getValidationOrder(),\n    stopOnFirstError: false\n  });\n\n  doc.validate(options, callback);\n};\n\nexport default validateAll;","import { Match } from 'meteor/check';\nimport { ValidationError } from 'meteor/mdg:validation-error';\n\nfunction getCheckPattern() {\n  const Class = this;\n  return Match.Where(function(doc) {\n    try {\n      doc.validate();\n    }\n    catch(err) {\n      if (ValidationError.is(err)) {\n        const firstError = err.details[0];\n        const matchError = new Match.Error(firstError.message);\n        matchError.sanitizedError = err;\n        throw matchError;\n      }\n      else {\n        throw err;\n      }\n    }\n    return true;\n  });\n};\n\nexport default getCheckPattern;","function getResolveError() {\n\tlet Class = this;\n\n\treturn Class.schema.resolveError;\n};\n\nexport default getResolveError;","import _ from 'lodash';\n\nfunction getValidationOrder() {\n\tlet Class = this;\n\n\t// Get all validators.\n\tlet validators = Class.getValidators();\n\t// Get fields names for defined validators.\n\tlet fieldsNames = Class.getFieldsNames();\n\t// Make variable name shorter.\n\tlet validationOrder = Class.schema.validationOrder;\n\n\t// If there is a validation order provided, then combine fields provided in\n\t// the validation order with the order of validators.\n\tif (validationOrder) {\n\t\t// Detect what fields are not present in the validation order.\n\t\tlet diff = _.difference(fieldsNames, validationOrder);\n\t\t// Combine validation order with fields that left.\n\t\treturn validationOrder.concat(diff);\n\t}\n\t// If there is no validation order, then just return fields names in the order\n\t// in which validators were defined.\n\telse {\n\t\treturn fieldsNames;\n\t}\n};\n\nexport default getValidationOrder;","function getValidators(fieldName) {\n\tlet Class = this;\n\n\tif (!Match.test(fieldName, Match.Optional(String))) {\n\t\tthrow TypeError(\n\t\t\t'The first argument of the \"getValidators\" function has to be a string ' +\n\t\t\t'or left empty'\n\t\t);\n\t}\n\n\tif (fieldName) {\n\t\treturn Class.schema.validators[fieldName];\n\t}\n\telse {\n\t\treturn Class.schema.validators;\n\t}\n};\n\nexport default getValidators;","import _ from 'lodash';\n\nfunction validate(rawDoc) {\n  const Class = this;\n  const doc = new Class(rawDoc);\n  const args = _.tail(arguments);\n  return doc.validate.apply(doc, args);\n};\n\nexport default validate;","import _ from 'lodash';\n\nfunction validateAll(rawDoc) {\n  const Class = this;\n  const doc = new Class(rawDoc);\n  const args = _.tail(arguments);\n  return doc.validateAll.apply(doc, args);\n};\n\nexport default validateAll;","import _ from 'lodash';\nimport hasMeteorMethod from '../../storage/utils/has_meteor_method.js';\nimport meteorValidate from '../meteor_methods/validate.js';\n\nfunction onApplyDefinition(Class, parsedDefinition, className) {\n  _.each(parsedDefinition.validators, function(validators, fieldName) {\n    Class.schema.validators[fieldName] =\n      Class.schema.validators[fieldName] || [];\n    _.each(validators, function(validator) {\n      Class.schema.validators[fieldName] =\n        Class.schema.validators[fieldName].concat(validator);\n    });\n  });\n\n  // Add the \"/Astronomy/validate\" meteor method only when a class has assigned\n  // collection.\n  let Collection = Class.getCollection();\n  // If it's a remote collection then we register methods on the connection\n  // object of the collection.\n  let connection = Collection && Collection._connection;\n  // If it's not a remote collection than use main Meteor connection.\n  if (!connection && (!Collection || !Collection._name)) {\n    connection = Meteor.connection || Meteor.server;\n  }\n  if (connection) {\n    // Prepare meteor methods to be added.\n    let meteorMethods = {\n      '/Astronomy/validate': meteorValidate\n    };\n    _.each(meteorMethods, (meteorMethod, methodName) => {\n      if (!hasMeteorMethod(connection, methodName)) {\n        // Add meteor method.\n        connection.methods(_.zipObject([methodName], [meteorMethod]));\n      }\n    });\n  }\n\n  Class.schema.resolveError = parsedDefinition.resolveError;\n};\n\nexport default onApplyDefinition;","// Class static methods.\nimport getResolveError from '../class_static_methods/get_resolve_error.js';\nimport getValidationOrder from '../class_static_methods/get_validation_order.js';\nimport getValidators from '../class_static_methods/get_validators.js';\nimport validateStatic from '../class_static_methods/validate.js';\nimport validateAllStatic from '../class_static_methods/validateAll.js';\nimport getCheckPatternStatic from '../class_static_methods/getCheckPattern.js';\n// Class prototype methods.\nimport validate from '../class_prototype_methods/validate.js';\nimport validateAll from '../class_prototype_methods/validate_all.js';\n\nfunction onInitClass(Class, className) {\n\t// Class static methods.\n\tClass.getResolveError = getResolveError;\n\tClass.getValidationOrder = getValidationOrder;\n\tClass.getValidators = getValidators;\n\tClass.validate = validateStatic;\n\tClass.validateAll = validateAllStatic;\n\tClass.getCheckPattern = getCheckPatternStatic;\n\t// Class prototype methods.\n\tClass.prototype.validate = validate;\n\tClass.prototype.validateAll = validateAll;\n};\n\nexport default onInitClass;","function onInitDefinition(definition, className) {\n\tdefinition.validators = {};\n\tdefinition.resolveError = undefined;\n};\n\nexport default onInitDefinition;","function onInitSchema(schema, className) {\n\tschema.validators = {};\n\tschema.resolveError = undefined;\n};\n\nexport default onInitSchema;","import _ from 'lodash';\n\nfunction onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {\n\t_.each(sourceDefinition.validators, function(validators, fieldName) {\n\t\ttargetDefinition.validators[fieldName] =\n\t\t\ttargetDefinition.validators[fieldName] || [];\n\t\ttargetDefinition.validators[fieldName] =\n\t\t\ttargetDefinition.validators[fieldName].concat(validators);\n\t});\n\n\ttargetDefinition.resolveError = sourceDefinition.resolveError;\n};\n\nexport default onMergeDefinitions;","import _ from 'lodash';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport parseValidators from '../utils/parse_validators.js';\n\nfunction onParseDefinition(parsedDefinition, definition, className) {\n\tif (definition.resolveError) {\n\t\tif (!Match.test(definition.resolveError, Function)) {\n\t\t\tthrowParseError([{\n\t\t\t\t\t'class': className\n\t\t\t\t}, {\n\t\t\t\t\t'property': 'resolveError'\n\t\t\t\t},\n\t\t\t\t'Property values has to be a function'\n\t\t\t]);\n\t\t}\n\n\t\tparsedDefinition.resolveError = definition.resolveError;\n\t}\n\n\tif (definition.fields) {\n\t\t_.each(definition.fields, function(fieldDefinition, fieldName) {\n\t\t\tif (_.has(fieldDefinition, 'validators')) {\n\t\t\t\tparseValidators(\n\t\t\t\t\tfieldDefinition.validators, [{\n\t\t\t\t\t\t'class': className\n\t\t\t\t\t}, {\n\t\t\t\t\t\t'property': 'fields'\n\t\t\t\t\t}, {\n\t\t\t\t\t\t'field': fieldName\n\t\t\t\t\t}, {\n\t\t\t\t\t\t'property': 'validators'\n\t\t\t\t\t}]\n\t\t\t\t);\n\n\t\t\t\tparsedDefinition.validators[fieldName] = fieldDefinition.validators;\n\t\t\t\tfieldDefinition.validators = undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\tif (definition.validators) {\n\t\t_.each(definition.validators, function(validators, fieldName) {\n\t\t\tparseValidators(\n\t\t\t\tvalidators, [{\n\t\t\t\t\t'class': className\n\t\t\t\t}, {\n\t\t\t\t\t'property': 'validators'\n\t\t\t\t}]\n\t\t\t);\n\n\t\t\tparsedDefinition.validators[fieldName] = validators;\n\t\t});\n\t}\n};\n\nexport default onParseDefinition;","import documentValidate from '../utils/document_validate.js';\n\nfunction validate(options) {\n  return documentValidate(options);\n};\n\nexport default validate;","import _ from 'lodash';\nimport AstroClass from '../../../core/class.js';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport castNested from '../../fields/utils/cast_nested.js';\nimport isNestedFieldName from '../../fields/utils/is_nested_field_name.js';\nimport traverse from '../../fields/utils/traverse.js';\nimport ObjectField from '../../fields/ObjectField';\nimport ListField from '../../fields/ListField';\nimport Validators from '../validators.js';\nimport { ValidationError } from 'meteor/mdg:validation-error';\n\nfunction documentValidate(options = {}) {\n  let {\n    doc,\n    fields,\n    prefix = '',\n    stopOnFirstError = true,\n    simulation = true\n  } = options;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  let Class = doc.constructor;\n\n  // Cast nested fields.\n  castNested({\n    doc\n  });\n\n  // Prepare array for storing errors list.\n  let errors = [];\n\n  // Helper function for catching and collecting errors.\n  const catchValidationError = (func) => {\n    try {\n      func();\n    }\n    catch (err) {\n      // If it's ValidationError.\n      if (ValidationError.is(err)) {\n        // If we stop on first error then just throw error again.\n        if (stopOnFirstError) {\n          throw err;\n        }\n        // Otherwise we collect errors.\n        else {\n          _.each(err.details, (details) => {\n            errors.push(details);\n          });\n        }\n      }\n      // It it's not ValidationError, then we throw error again.\n      else {\n        throw err;\n      }\n    }\n  };\n\n  // If no fields were passed to validation, then we pick default validation\n  // order.\n  if (!fields) {\n    fields = Class.getValidationOrder();\n  }\n\n  _.each(fields, (name) => {\n    // If it is a nested field pattern name then we have to look for the most\n    // nested document and validate the nested field.\n    if (isNestedFieldName(name)) {\n      traverse(doc, name, (nestedDoc, nestedName, field) => {\n        catchValidationError(() => {\n          documentValidate({\n            doc: nestedDoc,\n            fields: [nestedName],\n            prefix: name.substr(0, name.lastIndexOf(nestedName)),\n            stopOnFirstError,\n            simulation\n          });\n        });\n      });\n      return;\n    }\n\n    let field = Class.getField(name);\n\n    // Move to the next one if a field does not exist.\n    if (!field) {\n      return;\n    }\n\n    // We do not validate transient fields.\n    if (field.transient) {\n      return;\n    }\n\n    // Get value of the field.\n    let value = doc.get(name);\n\n    // If a field is optional and value is undefined then we do not validate.\n    if (field.getOptional(doc) && _.isNil(value)) {\n      return;\n    }\n\n    // Execute validation in the try-catch block. That's because we want to\n    // continue validation if the \"stopOnFirstError\" flag is set to false.\n    catchValidationError(() => {\n      // First, execute type level validators.\n      field.validate({\n        doc,\n        name: prefix + name,\n        nestedName: name,\n        value\n      });\n      // Get validators for a given field.\n      let validators = Class.getValidators(name);\n      _.each(validators, ({\n        type,\n        param,\n        resolveParam,\n        message,\n        resolveError\n      }) => {\n        // Get validation helper function.\n        let validationFunction = Validators[type];\n        // Execute single validator.\n        validationFunction({\n          doc,\n          name: prefix + name,\n          nestedName: name,\n          value,\n          param,\n          resolveParam,\n          message,\n          resolveError\n        });\n      });\n    });\n\n    // If it is the object field then validate it.\n    if (field instanceof ObjectField) {\n      if (value instanceof AstroClass) {\n        catchValidationError(() => {\n          documentValidate({\n            doc: value,\n            fields: value.constructor.getValidationOrder(),\n            prefix: field.name + '.',\n            stopOnFirstError\n          });\n        });\n      }\n    }\n    // If it is the list field then validate each one.\n    else if (field instanceof ListField && field.isClass) {\n      _.each(value, (element, index) => {\n        if (element instanceof AstroClass) {\n          catchValidationError(() => {\n            documentValidate({\n              doc: element,\n              fields: element.constructor.getValidationOrder(),\n              prefix: field.name + '.' + index + '.',\n              stopOnFirstError\n            });\n          });\n        }\n      });\n    }\n  });\n\n  // If we have not thrown any error yet then it means that there are no errors\n  // or we do not throw on the first error.\n  if (errors.length > 0) {\n    throw new ValidationError(errors, errors[0].message);\n  }\n};\n\nexport default documentValidate;","import _ from 'lodash';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport Validators from '../validators.js';\n\nconst validatorsPattern = [{\n  type: String,\n  param: Match.Optional(Match.Any),\n  resolveParam: Match.Optional(Function),\n  message: Match.Optional(String),\n  resolveError: Match.Optional(Function)\n}];\n\nfunction parseValidators(validators, parseContext) {\n  // Validators list is an array of object that should include at least the\n  // \"type\" property.\n  if (validators && !Match.test(validators, validatorsPattern)) {\n    throwParseError(_.union(\n      parseContext, ['Validators definition has to be an array of objects']\n    ));\n  }\n\n  _.forEach(validators, function(validator) {\n    // Check if a validator of a given type exists.\n    if (!_.has(Validators, validator.type)) {\n      throwParseError(_.union(\n        parseContext, [`There is no \"${validator.type}\" validator`]\n      ));\n    }\n  });\n};\n\nexport default parseValidators;","import _ from 'lodash';\nimport Validator from '../../validator.js';\n\nValidator.create({\n  name: 'choice',\n\tparseParam(param) {\n    if (!Match.test(param, [Match.Any])) {\n      throw new TypeError(\n        `Parameter for the \"choice\" validator has to be an array of values`\n      );\n    }\n  },\n  isValid({ value, param }) {\n    return _.includes(param, value);\n  },\n  resolveError({ name, param }) {\n\t\tvar choices = param.join(', ');\n    return `\"${name}\" has to be one of the values ${choices}`;\n  }\n});","import Validator from '../../validator.js';\n\n// Email regular expression.\nlet re = /^[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,}$/i;\n\nValidator.create({\n  name: 'email',\n  isValid({ value }) {\n    return re.test(value);\n  },\n  resolveError({ name, param }) {\n    return `\"${name}\" should be a valid email address`;\n  }\n});","import Validator from '../../validator.js';\n\nValidator.create({\n  name: 'equal',\n  isValid({ value, param }) {\n    return EJSON.equals(value, param);\n  },\n  resolveError({ name, param }) {\n    return `\"${name}\" should be equal ${param}`;\n  }\n});\n","import Validator from '../../validator.js';\n\nValidator.create({\n  name: 'notEqual',\n  isValid({ value, param }) {\n    return !EJSON.equals(value, param);\n  },\n  resolveError({ name, param }) {\n    return `\"${name}\" should not to be equal ${param}`;\n  }\n});\n","import Validator from '../../validator.js';\n\nValidator.create({\n  name: 'regexp',\n\tparseParam(param) {\n    if (!Match.test(param, RegExp)) {\n      throw new TypeError(\n        `Parameter for the \"regexp\" validator has to be a regular expression`\n      );\n    }\n  },\n  isValid({ value, param }) {\n    return param.test(value);\n  },\n  resolveError({ name, param }) {\n    return `\"${name}\" does not match the \"${param.toString()}\" regular expression`;\n  }\n});","import Validator from '../../validator.js';\n\nValidator.create({\n  name: 'notNull',\n  isValid({ value }) {\n    return value !== null;\n  },\n  resolveError({ name }) {\n    return `\"${name}\" should not be null`;\n  }\n});","import Validator from '../../validator.js';\n\nValidator.create({\n  name: 'null',\n  isValid({ value }) {\n    return value === null;\n  },\n  resolveError({ name }) {\n    return `\"${name}\" should be null`;\n  }\n});","import Validator from '../../validator.js';\n\nValidator.create({\n  name: 'required',\n  isValid({ value }) {\n    return value !== null && value !== undefined;\n  },\n  resolveError({ name }) {\n    return `\"${name}\" is required`;\n  }\n});","import _ from 'lodash';\nimport parseValidators from '../../utils/parse_validators.js';\nimport Validator from '../../validator.js';\nimport Validators from '../../validators.js';\n\nValidator.create({\n  name: 'and',\n  parseParam(param) {\n    parseValidators(param);\n  },\n  validate({\n    doc,\n    name,\n    value,\n    param: validators\n  }) {\n    _.each(validators, function(validator) {\n      // Get validator.\n      const validationFunction = Validators[validator.type];\n      // Execute single validator.\n      validationFunction({\n        doc,\n        name,\n        value,\n        param: validator.param\n      });\n    });\n  }\n});","import _ from 'lodash';\nimport parseValidators from '../../utils/parse_validators.js';\nimport Validator from '../../validator.js';\nimport Validators from '../../validators.js';\nimport { ValidationError } from 'meteor/mdg:validation-error';\n\nValidator.create({\n  name: 'or',\n  parseParam(param) {\n    parseValidators(param);\n  },\n  validate({\n    doc,\n    name,\n    value,\n    param: validators\n  }) {\n    let firstError;\n    const isValid = _.some(validators, function(validator) {\n      // Get validator.\n      const validationFunction = Validators[validator.type];\n      // Execute single validator.\n      try {\n        validationFunction({\n          doc,\n          name,\n          value,\n          param: validator.param\n        });\n        return true;\n      }\n      catch (err) {\n        if (ValidationError.is(err)) {\n          // Collect only the first error that occured.\n          if (!firstError) {\n            firstError = err;\n          }\n          return false;\n        }\n        else {\n          throw err;\n        }\n      }\n    });\n\n    if (!isValid) {\n      throw firstError;\n    }\n  }\n});","import _ from 'lodash';\nimport parseValidators from '../../utils/parse_validators.js';\nimport Validator from '../../validator.js';\nimport Validators from '../../validators.js';\n\nValidator.create({\n  name: 'every',\n  parseParam(param) {\n    parseValidators(param);\n  },\n  validate({\n    doc,\n    name,\n    nestedName,\n    value,\n    param: validators\n  }) {\n    if (!_.isArray(value)) {\n      throw new TypeError(\n        `The \"every\" validator can only work with arrays`\n      );\n    }\n\n    // Execute validators for each array element.\n    _.each(value, function(element, index) {\n      // Execute each validator.\n      _.each(validators, function(validator) {\n        // Get validator.\n        const validationFunction = Validators[validator.type];\n        // Execute single validator.\n        validationFunction({\n          doc,\n          name: `${name}.${index}`,\n          nestedName: `${nestedName}.${index}`,\n          value: element,\n          param: validator.param\n        });\n      });\n    });\n  }\n});","import _ from 'lodash';\nimport Validator from '../../validator.js';\n\nValidator.create({\n  name: 'has',\n  isValid({ value, param }) {\n    if (!_.isObject(value)) {\n      throw new TypeError(\n        `The \"has\" validator can only work with objects`\n      );\n    }\n    return _.has(value, param);\n  },\n  resolveError({ name, param }) {\n    return `The \"${name}\" field does not have the \"${param}\" property`;\n  }\n});","import _ from 'lodash';\nimport Validator from '../../validator.js';\n\nValidator.create({\n  name: 'includes',\n  isValid({ value, param }) {\n    if (!_.isArray(value) && !_.isArray(object)) {\n      throw new TypeError(\n        `The \"includes\" validator can only work with arrays and objects`\n      );\n    }\n    return _.includes(value, param);\n  },\n  resolveError({ name, param }) {\n    return `The \"${name}\" field does not contain the \"${param}\" value`;\n  }\n});","import Validator from '../../validator.js';\n\nValidator.create({\n  name: 'gt',\n  isValid({ value, param }) {\n    return value > param;\n  },\n  resolveError({ name, param }) {\n    return `\"${name}\" has to be greater than ${param}`;\n  }\n});","import Validator from '../../validator.js';\n\nValidator.create({\n  name: 'gte',\n  isValid({ value, param }) {\n    return value >= param;\n  },\n  resolveError({ name, param }) {\n    return `\"${name}\" has to be greater than or equal ${param}`;\n  }\n});","import _ from 'lodash';\nimport Validator from '../../validator.js';\n\nValidator.create({\n  name: 'length',\n  parseParam(param) {\n    if (!Match.test(param, Number)) {\n      throw new TypeError(\n        `Parameter for the \"length\" validator has to be a number`\n      );\n    }\n  },\n  isValid({ value, param }) {\n    if (!_.has(value, 'length')) {\n      throw new TypeError(\n        `Length of the value can not be measured`\n      );\n    }\n    return value.length === param;\n  },\n  resolveError({ name, param }) {\n    return `Length of \"${name}\" has to be ${param}`;\n  }\n});","import Validator from '../../validator.js';\n\nValidator.create({\n  name: 'lt',\n  isValid({ value, param }) {\n    return value < param;\n  },\n  resolveError({ name, param }) {\n    return `\"${name}\" has to be less than ${param}`;\n  }\n});","import Validator from '../../validator.js';\n\nValidator.create({\n  name: 'lte',\n  isValid({ value, param }) {\n    return value <= param;\n  },\n  resolveError({ name, param }) {\n    return `\"${name}\" has to be less than or equal ${param}`;\n  }\n});","import _ from 'lodash';\nimport Validator from '../../validator.js';\n\nValidator.create({\n  name: 'maxLength',\n  parseParam(param) {\n    if (!Match.test(param, Number)) {\n      throw new TypeError(\n        `Parameter for the \"maxLength\" validator has to be a number`\n      );\n    }\n  },\n  isValid({ value, param }) {\n    if (!_.has(value, 'length')) {\n      return false;\n    }\n    return value.length <= param;\n  },\n  resolveError({ name, param }) {\n    return `Length of \"${name}\" has to be at most ${param}`;\n  }\n});","import _ from 'lodash';\nimport Validator from '../../validator.js';\n\nValidator.create({\n  name: 'minLength',\n  parseParam(param) {\n    if (!Match.test(param, Number)) {\n      throw new TypeError(\n        `Parameter for the \"minLength\" validator has to be a number`\n      );\n    }\n  },\n  isValid({ value, param }) {\n    if (!_.has(value, 'length')) {\n      return false;\n    }\n    return value.length >= param;\n  },\n  resolveError({ name, param }) {\n    return `Length of \"${name}\" has to be at least ${param}`;\n  }\n});","import _ from 'lodash';\nimport Validator from '../../validator.js';\n\nValidator.create({\n  name: 'array',\n  isValid({ value }) {\n    return _.isArray(value);\n  },\n  resolveError({ name }) {\n    return `\"${name}\" has to be an array`;\n  }\n});","import _ from 'lodash';\nimport Validator from '../../validator.js';\n\nValidator.create({\n  name: 'boolean',\n  isValid({ value }) {\n    return _.isBoolean(value);\n  },\n  resolveError({ name }) {\n    return `\"${name}\" has to be a boolean`;\n  }\n});","import Validator from '../../validator.js';\nimport AstroClass from '../../../../core/class.js';\n\nValidator.create({\n  name: 'class',\n  parseParam(param) {\n    if (!AstroClass.isParentOf(param)) {\n      throw new TypeError(\n        `Parameter for the \"class\" validator has to be an Astronomy class`\n      );\n    }\n  },\n  isValid({\n    value,\n    param: Class\n  }) {\n    return value instanceof Class;\n  },\n  resolveError({\n    name,\n    param: Class\n  }) {\n    let className = Class.getName();\n    return `\"${name}\" has to be ${className}`;\n  }\n});","import _ from 'lodash';\nimport Validator from '../../validator.js';\n\nValidator.create({\n  name: 'date',\n  isValid({ value }) {\n    return _.isDate(value);\n  },\n  resolveError({ name }) {\n    return `\"${name}\" has to be a date`;\n  }\n});","import _ from 'lodash';\nimport Validator from '../../validator.js';\n\nValidator.create({\n  name: 'integer',\n  isValid({ value }) {\n    return _.isInteger(value);\n  },\n  resolveError({ name }) {\n    return `\"${name}\" has to be an integer`;\n  }\n});","import Validator from '../../validator.js';\nimport { Match } from 'meteor/check';\nimport { Mongo } from 'meteor/mongo';\n\nValidator.create({\n  name: 'mongoObjectID',\n  isValid({ value }) {\n    return Match.test(value, Mongo.ObjectID);;\n  },\n  resolveError({ name }) {\n    return `\"${name}\" has to be a Mongo.ObjectID`;\n  }\n});","import _ from 'lodash';\nimport Validator from '../../validator.js';\n\nValidator.create({\n  name: 'number',\n  isValid({ value }) {\n    return _.isNumber(value);\n  },\n  resolveError({ name }) {\n    return `\"${name}\" has to be a number`;\n  }\n});","import _ from 'lodash';\nimport Validator from '../../validator.js';\n\nValidator.create({\n  name: 'object',\n  isValid({ value }) {\n    return _.isObject(value);\n  },\n  resolveError({ name }) {\n    return `\"${name}\" has to be an object`;\n  }\n});","import _ from 'lodash';\nimport Validator from '../../validator.js';\n\nValidator.create({\n  name: 'string',\n  isValid({ value }) {\n    return _.isString(value);\n  },\n  resolveError({ name }) {\n    return `\"${name}\" has to be a string`;\n  }\n});","exports.name = \"lodash\";\nexports.version = \"4.14.1\";\nexports.main = \"lodash.js\";\n"]}}]