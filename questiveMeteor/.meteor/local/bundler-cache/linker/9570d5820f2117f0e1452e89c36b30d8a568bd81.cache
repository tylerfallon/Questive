[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar URL = Package.url.URL;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar makeErrorByStatus, populateData, HTTP, HTTPInternals;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"http\":{\"httpcall_common.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/http/httpcall_common.js                                                                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar MAX_LENGTH = 500; // if you change this, also change the appropriate test                                       // 1\n                                                                                                                    //\nmakeErrorByStatus = function makeErrorByStatus(statusCode, content) {                                               // 3\n  var message = 'failed [' + statusCode + ']';                                                                      // 4\n                                                                                                                    //\n  if (content) {                                                                                                    // 6\n    var stringContent = typeof content == \"string\" ? content : content.toString();                                  // 7\n                                                                                                                    //\n    message += ' ' + truncate(stringContent.replace(/\\n/g, ' '), MAX_LENGTH);                                       // 10\n  }                                                                                                                 // 11\n                                                                                                                    //\n  return new Error(message);                                                                                        // 13\n};                                                                                                                  // 14\n                                                                                                                    //\nfunction truncate(str, length) {                                                                                    // 16\n  return str.length > length ? str.slice(0, length) + '...' : str;                                                  // 17\n}                                                                                                                   // 18\n                                                                                                                    //\n// Fill in `response.data` if the content-type is JSON.                                                             //\npopulateData = function populateData(response) {                                                                    // 21\n  // Read Content-Type header, up to a ';' if there is one.                                                         //\n  // A typical header might be \"application/json; charset=utf-8\"                                                    //\n  // or just \"application/json\".                                                                                    //\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];                                        // 25\n                                                                                                                    //\n  // Only try to parse data as JSON if server sets correct content type.                                            //\n  if (_.include(['application/json', 'text/javascript', 'application/javascript', 'application/x-javascript'], contentType)) {\n    try {                                                                                                           // 30\n      response.data = JSON.parse(response.content);                                                                 // 31\n    } catch (err) {                                                                                                 // 32\n      response.data = null;                                                                                         // 33\n    }                                                                                                               // 34\n  } else {                                                                                                          // 35\n    response.data = null;                                                                                           // 36\n  }                                                                                                                 // 37\n};                                                                                                                  // 38\n                                                                                                                    //\nHTTP = {};                                                                                                          // 40\n                                                                                                                    //\n/**                                                                                                                 //\n * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with \"GET\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                 //\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    //\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere                                                                                                  //\n */                                                                                                                 //\nHTTP.get = function () /* varargs */{                                                                               // 49\n  return HTTP.call.apply(this, [\"GET\"].concat(_.toArray(arguments)));                                               // 50\n};                                                                                                                  // 51\n                                                                                                                    //\n/**                                                                                                                 //\n * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with \"POST\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                 //\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    //\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere                                                                                                  //\n */                                                                                                                 //\nHTTP.post = function () /* varargs */{                                                                              // 60\n  return HTTP.call.apply(this, [\"POST\"].concat(_.toArray(arguments)));                                              // 61\n};                                                                                                                  // 62\n                                                                                                                    //\n/**                                                                                                                 //\n * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PUT\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                 //\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    //\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere                                                                                                  //\n */                                                                                                                 //\nHTTP.put = function () /* varargs */{                                                                               // 71\n  return HTTP.call.apply(this, [\"PUT\"].concat(_.toArray(arguments)));                                               // 72\n};                                                                                                                  // 73\n                                                                                                                    //\n/**                                                                                                                 //\n * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with \"DELETE\" as the first argument. (Named `del` to avoid conflict with the Javascript keyword `delete`)\n * @param {String} url The URL to which the request should be sent.                                                 //\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    //\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere                                                                                                  //\n */                                                                                                                 //\nHTTP.del = function () /* varargs */{                                                                               // 82\n  return HTTP.call.apply(this, [\"DELETE\"].concat(_.toArray(arguments)));                                            // 83\n};                                                                                                                  // 84\n                                                                                                                    //\n/**                                                                                                                 //\n * @summary Send an HTTP `PATCH` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PATCH\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                 //\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    //\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere                                                                                                  //\n */                                                                                                                 //\nHTTP.patch = function () /* varargs */{                                                                             // 93\n  return HTTP.call.apply(this, [\"PATCH\"].concat(_.toArray(arguments)));                                             // 94\n};                                                                                                                  // 95\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"httpcall_server.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/http/httpcall_server.js                                                                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar path = Npm.require('path');                                                                                     // 1\nvar request = Npm.require('request');                                                                               // 2\nvar url_util = Npm.require('url');                                                                                  // 3\n                                                                                                                    //\nHTTPInternals = {                                                                                                   // 5\n  NpmModules: {                                                                                                     // 6\n    request: {                                                                                                      // 7\n      version: Npm.require('request/package.json').version,                                                         // 8\n      module: request                                                                                               // 9\n    }                                                                                                               // 7\n  }                                                                                                                 // 6\n};                                                                                                                  // 5\n                                                                                                                    //\n// _call always runs asynchronously; HTTP.call, defined below,                                                      //\n// wraps _call and runs synchronously when no callback is provided.                                                 //\nvar _call = function _call(method, url, options, callback) {                                                        // 16\n                                                                                                                    //\n  ////////// Process arguments //////////                                                                           //\n                                                                                                                    //\n  if (!callback && typeof options === \"function\") {                                                                 // 20\n    // support (method, url, callback) argument list                                                                //\n    callback = options;                                                                                             // 22\n    options = null;                                                                                                 // 23\n  }                                                                                                                 // 24\n                                                                                                                    //\n  options = options || {};                                                                                          // 26\n                                                                                                                    //\n  if (_.has(options, 'beforeSend')) {                                                                               // 28\n    throw new Error(\"Option beforeSend not supported on server.\");                                                  // 29\n  }                                                                                                                 // 30\n                                                                                                                    //\n  method = (method || \"\").toUpperCase();                                                                            // 32\n                                                                                                                    //\n  if (!/^https?:\\/\\//.test(url)) throw new Error(\"url must be absolute and start with http:// or https://\");        // 34\n                                                                                                                    //\n  var headers = {};                                                                                                 // 37\n                                                                                                                    //\n  var content = options.content;                                                                                    // 39\n  if (options.data) {                                                                                               // 40\n    content = JSON.stringify(options.data);                                                                         // 41\n    headers['Content-Type'] = 'application/json';                                                                   // 42\n  }                                                                                                                 // 43\n                                                                                                                    //\n  var paramsForUrl, paramsForBody;                                                                                  // 46\n  if (content || method === \"GET\" || method === \"HEAD\") paramsForUrl = options.params;else paramsForBody = options.params;\n                                                                                                                    //\n  var newUrl = URL._constructUrl(url, options.query, paramsForUrl);                                                 // 52\n                                                                                                                    //\n  if (options.auth) {                                                                                               // 54\n    if (options.auth.indexOf(':') < 0) throw new Error('auth option should be of the form \"username:password\"');    // 55\n    headers['Authorization'] = \"Basic \" + new Buffer(options.auth, \"ascii\").toString(\"base64\");                     // 57\n  }                                                                                                                 // 59\n                                                                                                                    //\n  if (paramsForBody) {                                                                                              // 61\n    content = URL._encodeParams(paramsForBody);                                                                     // 62\n    headers['Content-Type'] = \"application/x-www-form-urlencoded\";                                                  // 63\n  }                                                                                                                 // 64\n                                                                                                                    //\n  _.extend(headers, options.headers || {});                                                                         // 66\n                                                                                                                    //\n  // wrap callback to add a 'response' property on an error, in case                                                //\n  // we have both (http 4xx/5xx error, which has a response payload)                                                //\n  callback = function (callback) {                                                                                  // 70\n    return function (error, response) {                                                                             // 71\n      if (error && response) error.response = response;                                                             // 72\n      callback(error, response);                                                                                    // 74\n    };                                                                                                              // 75\n  }(callback);                                                                                                      // 76\n                                                                                                                    //\n  // safety belt: only call the callback once.                                                                      //\n  callback = _.once(callback);                                                                                      // 79\n                                                                                                                    //\n  ////////// Kickoff! //////////                                                                                    //\n                                                                                                                    //\n  // Allow users to override any request option with the npmRequestOptions                                          //\n  // option.                                                                                                        //\n  var reqOptions = _.extend({                                                                                       // 86\n    url: newUrl,                                                                                                    // 87\n    method: method,                                                                                                 // 88\n    encoding: \"utf8\",                                                                                               // 89\n    jar: false,                                                                                                     // 90\n    timeout: options.timeout,                                                                                       // 91\n    body: content,                                                                                                  // 92\n    followRedirect: options.followRedirects,                                                                        // 93\n    // Follow redirects on non-GET requests                                                                         //\n    // also. (https://github.com/meteor/meteor/issues/2808)                                                         //\n    followAllRedirects: options.followRedirects,                                                                    // 96\n    headers: headers                                                                                                // 97\n  }, options.npmRequestOptions || {});                                                                              // 86\n                                                                                                                    //\n  request(reqOptions, function (error, res, body) {                                                                 // 100\n    var response = null;                                                                                            // 101\n                                                                                                                    //\n    if (!error) {                                                                                                   // 103\n                                                                                                                    //\n      response = {};                                                                                                // 105\n      response.statusCode = res.statusCode;                                                                         // 106\n      response.content = body;                                                                                      // 107\n      response.headers = res.headers;                                                                               // 108\n                                                                                                                    //\n      populateData(response);                                                                                       // 110\n                                                                                                                    //\n      if (response.statusCode >= 400) error = makeErrorByStatus(response.statusCode, response.content);             // 112\n    }                                                                                                               // 114\n                                                                                                                    //\n    callback(error, response);                                                                                      // 116\n  });                                                                                                               // 118\n};                                                                                                                  // 119\n                                                                                                                    //\nHTTP.call = Meteor.wrapAsync(_call);                                                                                // 121\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"deprecated.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/http/deprecated.js                                                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// The HTTP object used to be called Meteor.http.                                                                   //\n// XXX COMPAT WITH 0.6.4                                                                                            //\nMeteor.http = HTTP;                                                                                                 // 3\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/http/httpcall_common.js\");\nrequire(\"./node_modules/meteor/http/httpcall_server.js\");\nrequire(\"./node_modules/meteor/http/deprecated.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.http = {}, {\n  HTTP: HTTP,\n  HTTPInternals: HTTPInternals\n});\n\n})();\n","servePath":"/packages/http.js","sourceMap":{"version":3,"sources":["/packages/http/httpcall_common.js","/packages/http/httpcall_server.js","/packages/http/deprecated.js"],"names":[],"mappings":"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","file":"/packages/http.js","sourcesContent":["const MAX_LENGTH = 500; // if you change this, also change the appropriate test\n\nmakeErrorByStatus = function(statusCode, content) {\n  let message = `failed [${statusCode}]`;\n\n  if (content) {\n    const stringContent = typeof content == \"string\" ?\n      content : content.toString();\n\n    message += ' ' + truncate(stringContent.replace(/\\n/g, ' '), MAX_LENGTH);\n  }\n\n  return new Error(message);\n};\n\nfunction truncate(str, length) {\n  return str.length > length ? str.slice(0, length) + '...' : str;\n}\n\n// Fill in `response.data` if the content-type is JSON.\npopulateData = function(response) {\n  // Read Content-Type header, up to a ';' if there is one.\n  // A typical header might be \"application/json; charset=utf-8\"\n  // or just \"application/json\".\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];\n\n  // Only try to parse data as JSON if server sets correct content type.\n  if (_.include(['application/json', 'text/javascript',\n      'application/javascript', 'application/x-javascript'], contentType)) {\n    try {\n      response.data = JSON.parse(response.content);\n    } catch (err) {\n      response.data = null;\n    }\n  } else {\n    response.data = null;\n  }\n};\n\nHTTP = {};\n\n/**\n * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with \"GET\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.get = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"GET\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with \"POST\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.post = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"POST\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PUT\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.put = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"PUT\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with \"DELETE\" as the first argument. (Named `del` to avoid conflict with the Javascript keyword `delete`)\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.del = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"DELETE\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `PATCH` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PATCH\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.patch = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"PATCH\"].concat(_.toArray(arguments)));\n};\n","var path = Npm.require('path');\nvar request = Npm.require('request');\nvar url_util = Npm.require('url');\n\nHTTPInternals = {\n  NpmModules: {\n    request: {\n      version: Npm.require('request/package.json').version,\n      module: request\n    }\n  }\n};\n\n// _call always runs asynchronously; HTTP.call, defined below,\n// wraps _call and runs synchronously when no callback is provided.\nvar _call = function(method, url, options, callback) {\n\n  ////////// Process arguments //////////\n\n  if (! callback && typeof options === \"function\") {\n    // support (method, url, callback) argument list\n    callback = options;\n    options = null;\n  }\n\n  options = options || {};\n\n  if (_.has(options, 'beforeSend')) {\n    throw new Error(\"Option beforeSend not supported on server.\");\n  }\n\n  method = (method || \"\").toUpperCase();\n\n  if (! /^https?:\\/\\//.test(url))\n    throw new Error(\"url must be absolute and start with http:// or https://\");\n\n  var headers = {};\n\n  var content = options.content;\n  if (options.data) {\n    content = JSON.stringify(options.data);\n    headers['Content-Type'] = 'application/json';\n  }\n\n\n  var paramsForUrl, paramsForBody;\n  if (content || method === \"GET\" || method === \"HEAD\")\n    paramsForUrl = options.params;\n  else\n    paramsForBody = options.params;\n\n  var newUrl = URL._constructUrl(url, options.query, paramsForUrl);\n\n  if (options.auth) {\n    if (options.auth.indexOf(':') < 0)\n      throw new Error('auth option should be of the form \"username:password\"');\n    headers['Authorization'] = \"Basic \"+\n      (new Buffer(options.auth, \"ascii\")).toString(\"base64\");\n  }\n\n  if (paramsForBody) {\n    content = URL._encodeParams(paramsForBody);\n    headers['Content-Type'] = \"application/x-www-form-urlencoded\";\n  }\n\n  _.extend(headers, options.headers || {});\n\n  // wrap callback to add a 'response' property on an error, in case\n  // we have both (http 4xx/5xx error, which has a response payload)\n  callback = (function(callback) {\n    return function(error, response) {\n      if (error && response)\n        error.response = response;\n      callback(error, response);\n    };\n  })(callback);\n\n  // safety belt: only call the callback once.\n  callback = _.once(callback);\n\n\n  ////////// Kickoff! //////////\n\n  // Allow users to override any request option with the npmRequestOptions\n  // option.\n  var reqOptions = _.extend({\n    url: newUrl,\n    method: method,\n    encoding: \"utf8\",\n    jar: false,\n    timeout: options.timeout,\n    body: content,\n    followRedirect: options.followRedirects,\n    // Follow redirects on non-GET requests\n    // also. (https://github.com/meteor/meteor/issues/2808)\n    followAllRedirects: options.followRedirects,\n    headers: headers\n  }, options.npmRequestOptions || {});\n\n  request(reqOptions, function(error, res, body) {\n    var response = null;\n\n    if (! error) {\n\n      response = {};\n      response.statusCode = res.statusCode;\n      response.content = body;\n      response.headers = res.headers;\n\n      populateData(response);\n\n      if (response.statusCode >= 400)\n        error = makeErrorByStatus(response.statusCode, response.content);\n    }\n\n    callback(error, response);\n\n  });\n};\n\nHTTP.call = Meteor.wrapAsync(_call);\n","// The HTTP object used to be called Meteor.http.\n// XXX COMPAT WITH 0.6.4\nMeteor.http = HTTP;\n"]}}]