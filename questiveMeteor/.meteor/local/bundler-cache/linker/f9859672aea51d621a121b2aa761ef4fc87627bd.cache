[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar ReactMeteorData;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"react-meteor-data\":{\"react-meteor-data.jsx\":[\"meteor/tmeasday:check-npm-versions\",\"./createContainer.jsx\",\"./ReactMeteorData.jsx\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/react-meteor-data/react-meteor-data.jsx                                                     //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nmodule.export({createContainer:function(){return createContainer},ReactMeteorData:function(){return ReactMeteorData}});var checkNpmVersions;module.import('meteor/tmeasday:check-npm-versions',{\"checkNpmVersions\":function(v){checkNpmVersions=v}});\ncheckNpmVersions({                                                                                      // 2\n  react: '15.x',                                                                                        // 3\n  'react-addons-pure-render-mixin': '15.x'                                                              // 4\n}, 'react-meteor-data');                                                                                // 2\n                                                                                                        //\nvar createContainer = require('./createContainer.jsx')['default'];                                      // 7\nvar ReactMeteorData = require('./ReactMeteorData.jsx')['default'];                                      // 8\n                                                                                                        //\n                                                                                                        // 10\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactMeteorData.jsx\":[\"babel-runtime/helpers/typeof\",\"babel-runtime/helpers/classCallCheck\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/react-meteor-data/ReactMeteorData.jsx                                                       //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nvar _typeof;module.import(\"babel-runtime/helpers/typeof\",{\"default\":function(v){_typeof=v}});var _classCallCheck;module.import(\"babel-runtime/helpers/classCallCheck\",{\"default\":function(v){_classCallCheck=v}});\n                                                                                                        //\nvar ReactMeteorData = {                                                                                 // 1\n  componentWillMount: function componentWillMount() {                                                   // 2\n    this.data = {};                                                                                     // 3\n    this._meteorDataManager = new MeteorDataManager(this);                                              // 4\n    var newData = this._meteorDataManager.calculateData();                                              // 5\n    this._meteorDataManager.updateData(newData);                                                        // 6\n  },                                                                                                    // 7\n  componentWillUpdate: function componentWillUpdate(nextProps, nextState) {                             // 8\n    var saveProps = this.props;                                                                         // 9\n    var saveState = this.state;                                                                         // 10\n    var newData = void 0;                                                                               // 11\n    try {                                                                                               // 12\n      // Temporarily assign this.state and this.props,                                                  //\n      // so that they are seen by getMeteorData!                                                        //\n      // This is a simulation of how the proposed Observe API                                           //\n      // for React will work, which calls observe() after                                               //\n      // componentWillUpdate and after props and state are                                              //\n      // updated, but before render() is called.                                                        //\n      // See https://github.com/facebook/react/issues/3398.                                             //\n      this.props = nextProps;                                                                           // 20\n      this.state = nextState;                                                                           // 21\n      newData = this._meteorDataManager.calculateData();                                                // 22\n    } finally {                                                                                         // 23\n      this.props = saveProps;                                                                           // 24\n      this.state = saveState;                                                                           // 25\n    }                                                                                                   // 26\n                                                                                                        //\n    this._meteorDataManager.updateData(newData);                                                        // 28\n  },                                                                                                    // 29\n  componentWillUnmount: function componentWillUnmount() {                                               // 30\n    this._meteorDataManager.dispose();                                                                  // 31\n  }                                                                                                     // 32\n};                                                                                                      // 1\n                                                                                                        //\n// A class to keep the state and utility methods needed to manage                                       //\n// the Meteor data for a component.                                                                     //\n                                                                                                        //\nvar MeteorDataManager = function () {                                                                   //\n  function MeteorDataManager(component) {                                                               // 38\n    _classCallCheck(this, MeteorDataManager);                                                           // 38\n                                                                                                        //\n    this.component = component;                                                                         // 39\n    this.computation = null;                                                                            // 40\n    this.oldData = null;                                                                                // 41\n  }                                                                                                     // 42\n                                                                                                        //\n  MeteorDataManager.prototype.dispose = function dispose() {                                            //\n    if (this.computation) {                                                                             // 45\n      this.computation.stop();                                                                          // 46\n      this.computation = null;                                                                          // 47\n    }                                                                                                   // 48\n  };                                                                                                    // 49\n                                                                                                        //\n  MeteorDataManager.prototype.calculateData = function calculateData() {                                //\n    var component = this.component;                                                                     // 52\n                                                                                                        //\n    if (!component.getMeteorData) {                                                                     // 54\n      return null;                                                                                      // 55\n    }                                                                                                   // 56\n                                                                                                        //\n    // When rendering on the server, we don't want to use the Tracker.                                  //\n    // We only do the first rendering on the server so we can get the data right away                   //\n    if (Meteor.isServer) {                                                                              // 60\n      return component.getMeteorData();                                                                 // 61\n    }                                                                                                   // 62\n                                                                                                        //\n    if (this.computation) {                                                                             // 64\n      this.computation.stop();                                                                          // 65\n      this.computation = null;                                                                          // 66\n    }                                                                                                   // 67\n                                                                                                        //\n    var data = void 0;                                                                                  // 69\n    // Use Tracker.nonreactive in case we are inside a Tracker Computation.                             //\n    // This can happen if someone calls `ReactDOM.render` inside a Computation.                         //\n    // In that case, we want to opt out of the normal behavior of nested                                //\n    // Computations, where if the outer one is invalidated or stopped,                                  //\n    // it stops the inner one.                                                                          //\n    this.computation = Tracker.nonreactive(function () {                                                // 75\n      return Tracker.autorun(function (c) {                                                             // 76\n        if (c.firstRun) {                                                                               // 77\n          var savedSetState = component.setState;                                                       // 78\n          try {                                                                                         // 79\n            component.setState = function () {                                                          // 80\n              throw new Error(\"Can't call `setState` inside `getMeteorData` as this could cause an endless\" + \" loop. To respond to Meteor data changing, consider making this component\" + \" a \\\"wrapper component\\\" that only fetches data and passes it in as props to\" + \" a child component. Then you can use `componentWillReceiveProps` in that\" + \" child component.\");\n            };                                                                                          // 87\n                                                                                                        //\n            data = component.getMeteorData();                                                           // 89\n          } finally {                                                                                   // 90\n            component.setState = savedSetState;                                                         // 91\n          }                                                                                             // 92\n        } else {                                                                                        // 93\n          // Stop this computation instead of using the re-run.                                         //\n          // We use a brand-new autorun for each call to getMeteorData                                  //\n          // to capture dependencies on any reactive data sources that                                  //\n          // are accessed.  The reason we can't use a single autorun                                    //\n          // for the lifetime of the component is that Tracker only                                     //\n          // re-runs autoruns at flush time, while we need to be able to                                //\n          // re-call getMeteorData synchronously whenever we want, e.g.                                 //\n          // from componentWillUpdate.                                                                  //\n          c.stop();                                                                                     // 102\n          // Calling forceUpdate() triggers componentWillUpdate which                                   //\n          // recalculates getMeteorData() and re-renders the component.                                 //\n          component.forceUpdate();                                                                      // 105\n        }                                                                                               // 106\n      });                                                                                               // 107\n    });                                                                                                 // 108\n                                                                                                        //\n    if (Package.mongo && Package.mongo.Mongo) {                                                         // 110\n      Object.keys(data).forEach(function (key) {                                                        // 111\n        if (data[key] instanceof Package.mongo.Mongo.Cursor) {                                          // 112\n          console.warn(\"Warning: you are returning a Mongo cursor from getMeteorData. This value \" + \"will not be reactive. You probably want to call `.fetch()` on the cursor \" + \"before returning it.\");\n        }                                                                                               // 117\n      });                                                                                               // 118\n    }                                                                                                   // 119\n                                                                                                        //\n    return data;                                                                                        // 121\n  };                                                                                                    // 122\n                                                                                                        //\n  MeteorDataManager.prototype.updateData = function updateData(newData) {                               //\n    var component = this.component;                                                                     // 125\n    var oldData = this.oldData;                                                                         // 126\n                                                                                                        //\n    if (!(newData && (typeof newData === \"undefined\" ? \"undefined\" : _typeof(newData)) === 'object')) {\n      throw new Error(\"Expected object returned from getMeteorData\");                                   // 129\n    }                                                                                                   // 130\n    // update componentData in place based on newData                                                   //\n    for (var key in newData) {                                                                          // 132\n      component.data[key] = newData[key];                                                               // 133\n    }                                                                                                   // 134\n    // if there is oldData (which is every time this method is called                                   //\n    // except the first), delete keys in newData that aren't in                                         //\n    // oldData.  don't interfere with other keys, in case we are                                        //\n    // co-existing with something else that writes to a component's                                     //\n    // this.data.                                                                                       //\n    if (oldData) {                                                                                      // 140\n      for (var _key in oldData) {                                                                       // 141\n        if (!(_key in newData)) {                                                                       // 142\n          delete component.data[_key];                                                                  // 143\n        }                                                                                               // 144\n      }                                                                                                 // 145\n    }                                                                                                   // 146\n    this.oldData = newData;                                                                             // 147\n  };                                                                                                    // 148\n                                                                                                        //\n  return MeteorDataManager;                                                                             //\n}();                                                                                                    //\n                                                                                                        //\nmodule.export(\"default\",exports.default=(ReactMeteorData));                                             // 151\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"createContainer.jsx\":[\"babel-runtime/helpers/extends\",\"react\",\"react-addons-pure-render-mixin\",\"./ReactMeteorData.jsx\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/react-meteor-data/createContainer.jsx                                                       //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nmodule.export({default:function(){return createContainer}});var _extends;module.import('babel-runtime/helpers/extends',{\"default\":function(v){_extends=v}});var React;module.import('react',{\"default\":function(v){React=v}});var PureRenderMixin;module.import('react-addons-pure-render-mixin',{\"default\":function(v){PureRenderMixin=v}});var ReactMeteorData;module.import('./ReactMeteorData.jsx',{\"default\":function(v){ReactMeteorData=v}});\n                                                                                                        //\n/**                                                                                                     //\n * Container helper using react-meteor-data.                                                            //\n */                                                                                                     //\n                                                                                                        //\n                                                                                                        // 5\n                                                                                                        // 6\n                                                                                                        //\n                                                                                                        // 8\n                                                                                                        //\nfunction createContainer() {                                                                            // 10\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                // 10\n  var Component = arguments[1];                                                                         // 10\n                                                                                                        //\n  var expandedOptions = options;                                                                        // 11\n  if (typeof options === 'function') {                                                                  // 12\n    expandedOptions = {                                                                                 // 13\n      getMeteorData: options                                                                            // 14\n    };                                                                                                  // 13\n  }                                                                                                     // 16\n                                                                                                        //\n  var _expandedOptions = expandedOptions;                                                               // 10\n  var _getMeteorData = _expandedOptions.getMeteorData;                                                  // 10\n  var _expandedOptions$pure = _expandedOptions.pure;                                                    // 10\n  var pure = _expandedOptions$pure === undefined ? true : _expandedOptions$pure;                        // 10\n                                                                                                        //\n                                                                                                        //\n  var mixins = [ReactMeteorData];                                                                       // 23\n  if (pure) {                                                                                           // 24\n    mixins.push(PureRenderMixin);                                                                       // 25\n  }                                                                                                     // 26\n                                                                                                        //\n  /* eslint-disable react/prefer-es6-class */                                                           //\n  return React.createClass({                                                                            // 29\n    displayName: 'MeteorDataContainer',                                                                 // 30\n    mixins: mixins,                                                                                     // 31\n    getMeteorData: function getMeteorData() {                                                           // 32\n      return _getMeteorData(this.props);                                                                // 33\n    },                                                                                                  // 34\n    render: function render() {                                                                         // 35\n      return React.createElement(Component, _extends({}, this.props, this.data));                       // 36\n    }                                                                                                   // 37\n  });                                                                                                   // 29\n}                                                                                                       // 39\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\",\".jsx\"]});\nvar exports = require(\"./node_modules/meteor/react-meteor-data/react-meteor-data.jsx\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['react-meteor-data'] = exports, {\n  ReactMeteorData: ReactMeteorData\n});\n\n})();\n","servePath":"/packages/react-meteor-data.js","sourceMap":{"version":3,"sources":["/packages/react-meteor-data/react-meteor-data.jsx","/packages/react-meteor-data/ReactMeteorData.jsx","/packages/react-meteor-data/createContainer.jsx"],"names":[],"mappings":"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","file":"/packages/react-meteor-data.js","sourcesContent":["import { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\ncheckNpmVersions({\n  react: '15.x',\n  'react-addons-pure-render-mixin': '15.x',\n}, 'react-meteor-data');\n\nconst createContainer = require('./createContainer.jsx').default;\nconst ReactMeteorData = require('./ReactMeteorData.jsx').default;\n\nexport { createContainer, ReactMeteorData };\n","const ReactMeteorData = {\n  componentWillMount() {\n    this.data = {};\n    this._meteorDataManager = new MeteorDataManager(this);\n    const newData = this._meteorDataManager.calculateData();\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUpdate(nextProps, nextState) {\n    const saveProps = this.props;\n    const saveState = this.state;\n    let newData;\n    try {\n      // Temporarily assign this.state and this.props,\n      // so that they are seen by getMeteorData!\n      // This is a simulation of how the proposed Observe API\n      // for React will work, which calls observe() after\n      // componentWillUpdate and after props and state are\n      // updated, but before render() is called.\n      // See https://github.com/facebook/react/issues/3398.\n      this.props = nextProps;\n      this.state = nextState;\n      newData = this._meteorDataManager.calculateData();\n    } finally {\n      this.props = saveProps;\n      this.state = saveState;\n    }\n\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUnmount() {\n    this._meteorDataManager.dispose();\n  },\n};\n\n// A class to keep the state and utility methods needed to manage\n// the Meteor data for a component.\nclass MeteorDataManager {\n  constructor(component) {\n    this.component = component;\n    this.computation = null;\n    this.oldData = null;\n  }\n\n  dispose() {\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n  }\n\n  calculateData() {\n    const component = this.component;\n\n    if (! component.getMeteorData) {\n      return null;\n    }\n\n    // When rendering on the server, we don't want to use the Tracker.\n    // We only do the first rendering on the server so we can get the data right away\n    if (Meteor.isServer) {\n      return component.getMeteorData();\n    }\n\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n\n    let data;\n    // Use Tracker.nonreactive in case we are inside a Tracker Computation.\n    // This can happen if someone calls `ReactDOM.render` inside a Computation.\n    // In that case, we want to opt out of the normal behavior of nested\n    // Computations, where if the outer one is invalidated or stopped,\n    // it stops the inner one.\n    this.computation = Tracker.nonreactive(() => {\n      return Tracker.autorun((c) => {\n        if (c.firstRun) {\n          const savedSetState = component.setState;\n          try {\n            component.setState = () => {\n              throw new Error(\n\"Can't call `setState` inside `getMeteorData` as this could cause an endless\" +\n\" loop. To respond to Meteor data changing, consider making this component\" +\n\" a \\\"wrapper component\\\" that only fetches data and passes it in as props to\" +\n\" a child component. Then you can use `componentWillReceiveProps` in that\" +\n\" child component.\");\n            };\n\n            data = component.getMeteorData();\n          } finally {\n            component.setState = savedSetState;\n          }\n        } else {\n          // Stop this computation instead of using the re-run.\n          // We use a brand-new autorun for each call to getMeteorData\n          // to capture dependencies on any reactive data sources that\n          // are accessed.  The reason we can't use a single autorun\n          // for the lifetime of the component is that Tracker only\n          // re-runs autoruns at flush time, while we need to be able to\n          // re-call getMeteorData synchronously whenever we want, e.g.\n          // from componentWillUpdate.\n          c.stop();\n          // Calling forceUpdate() triggers componentWillUpdate which\n          // recalculates getMeteorData() and re-renders the component.\n          component.forceUpdate();\n        }\n      });\n    });\n\n    if (Package.mongo && Package.mongo.Mongo) {\n      Object.keys(data).forEach(function (key) {\n        if (data[key] instanceof Package.mongo.Mongo.Cursor) {\n          console.warn(\n  \"Warning: you are returning a Mongo cursor from getMeteorData. This value \" +\n  \"will not be reactive. You probably want to call `.fetch()` on the cursor \" +\n  \"before returning it.\");\n        }\n      });\n    }\n\n    return data;\n  }\n\n  updateData(newData) {\n    const component = this.component;\n    const oldData = this.oldData;\n\n    if (! (newData && (typeof newData) === 'object')) {\n      throw new Error(\"Expected object returned from getMeteorData\");\n    }\n    // update componentData in place based on newData\n    for (let key in newData) {\n      component.data[key] = newData[key];\n    }\n    // if there is oldData (which is every time this method is called\n    // except the first), delete keys in newData that aren't in\n    // oldData.  don't interfere with other keys, in case we are\n    // co-existing with something else that writes to a component's\n    // this.data.\n    if (oldData) {\n      for (let key in oldData) {\n        if (!(key in newData)) {\n          delete component.data[key];\n        }\n      }\n    }\n    this.oldData = newData;\n  }\n}\n\nexport default ReactMeteorData;\n","/**\n * Container helper using react-meteor-data.\n */\n\nimport React from 'react';\nimport PureRenderMixin from 'react-addons-pure-render-mixin';\n\nimport ReactMeteorData from './ReactMeteorData.jsx';\n\nexport default function createContainer(options = {}, Component) {\n  let expandedOptions = options;\n  if (typeof options === 'function') {\n    expandedOptions = {\n      getMeteorData: options,\n    };\n  }\n\n  const {\n    getMeteorData,\n    pure = true,\n  } = expandedOptions;\n\n  const mixins = [ReactMeteorData];\n  if (pure) {\n    mixins.push(PureRenderMixin);\n  }\n\n  /* eslint-disable react/prefer-es6-class */\n  return React.createClass({\n    displayName: 'MeteorDataContainer',\n    mixins,\n    getMeteorData() {\n      return getMeteorData(this.props);\n    },\n    render() {\n      return <Component {...this.props} {...this.data} />;\n    },\n  });\n}\n"]}}]