[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nAstro = Package['jagi:astronomy'].Astro;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"scavenger_hunts.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// imports/api/scavenger_hunts.js                                                            //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\n// import { Meteor } from 'meteor/meteor';                                                   //\n// import { Mongo } from 'meteor/mongo';                                                     //\n// import { check } from 'meteor/check';                                                     //\n                                                                                             //\n// export const Scavenger_Hunts = new Mongo.Collection('scavenger_hunts');                   //\n                                                                                             //\n// if(Meteor.isServer){                                                                      //\n// \tMeteor.publish('scavenger_hunts',function scavenger_huntsPublication(){                  //\n// \t\treturn Scavenger_Hunts.find({})                                                         //\n// \t})                                                                                       //\n// }                                                                                         //\n// Meteor.methods({                                                                          //\n//   // add information to our task db                                                       //\n//   'scavenger_hunts.insert'(object) {                                                      //\n//     let title = object.title;                                                             //\n//     let user                                                                              //\n//     check(title, String)                                                                  //\n                                                                                             //\n//     // Make sure the user is logged in before inserting a task                            //\n//     if (! this.userId) {                                                                  //\n//       throw new Meteor.Error('not-authorized');                                           //\n//     }                                                                                     //\n                                                                                             //\n//   Scavenger_Hunts.insert({                                                                //\n//     title,                                                                                //\n//     createdAt: new Date(),                                                                //\n//     owner: this.userId,                                                                   //\n//     username: Meteor.users.findOne(this.userId).username,                                 //\n//   });                                                                                     //\n                                                                                             //\n// },                                                                                        //\n                                                                                             //\n//   'scavenger_hunts.remove'(scavengerId) {                                                 //\n//     check(taskId, String);                                                                //\n                                                                                             //\n//   const task = scavenger_hunts.findOne(taskId);                                           //\n//   if (task.private && task.owner !== this.userId) {                                       //\n//     // If the task is private, make sure only the owner can delete it                     //\n//     throw new Meteor.Error('not-authorized');                                             //\n//   }                                                                                       //\n//   Scavenger_Hunts.remove(scavengerId);                                                    //\n// },                                                                                        //\n// // this function searches our db to get the most recent value entered                     //\n// \"scavenger_hunts.findOne\"(){                                                              //\n                                                                                             //\n//   return Scavenger_Hunts.find({},{sort:{ createdAt:-1 }, limit:1 }).fetch();              //\n// },                                                                                        //\n//                                                                                           //\n                                                                                             //\n// } ) ;                                                                                     //\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"tasks.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// imports/api/tasks.js                                                                      //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\n// import { Meteor } from 'meteor/meteor';                                                   //\n// import { Mongo } from 'meteor/mongo';                                                     //\n// import { check } from 'meteor/check';                                                     //\n                                                                                             //\n// export const Tasks = new Mongo.Collection('tasks');                                       //\n                                                                                             //\n// if (Meteor.isServer) {                                                                    //\n//   // This code only runs on the server                                                    //\n//   // Only publish tasks that are public or belong to the current user                     //\n//   Meteor.publish('tasks', function tasksPublication() {                                   //\n//     return Tasks.find({                                                                   //\n//       $or: [                                                                              //\n//         { private: { $ne: true } },                                                       //\n//         { owner: this.userId },                                                           //\n//       ],                                                                                  //\n//     });                                                                                   //\n//   });                                                                                     //\n// }                                                                                         //\n                                                                                             //\n// Meteor.methods({                                                                          //\n//   // add information to our task db                                                       //\n//   'tasks.insert'(object) {                                                                //\n//     let user = object.user;                                                               //\n//     let title = object.title;                                                             //\n//     let task = object.text;                                                               //\n//     let location = object.location;                                                       //\n//     check(title, String)                                                                  //\n//     check(task, String);                                                                  //\n//     check(location, String);                                                              //\n                                                                                             //\n//     // Make sure the user is logged in before inserting a task                            //\n//     if (! this.userId) {                                                                  //\n//       throw new Meteor.Error('not-authorized');                                           //\n//     }                                                                                     //\n                                                                                             //\n//     Tasks.insert({                                                                        //\n//       user,                                                                               //\n//       title,                                                                              //\n//       task,                                                                               //\n//       location,                                                                           //\n//       createdAt: new Date(),                                                              //\n//       owner: this.userId,                                                                 //\n//       username: Meteor.users.findOne(this.userId).username,                               //\n//     });                                                                                   //\n//   },                                                                                      //\n//   'tasks.remove'(taskId) {                                                                //\n//     check(taskId, String);                                                                //\n                                                                                             //\n//     const task = Tasks.findOne(taskId);                                                   //\n//     if (task.private && task.owner !== this.userId) {                                     //\n//       // If the task is private, make sure only the owner can delete it                   //\n//       throw new Meteor.Error('not-authorized');                                           //\n//     }                                                                                     //\n                                                                                             //\n//     Tasks.remove(taskId);                                                                 //\n//   },                                                                                      //\n//   'tasks.setChecked'(taskId, setChecked) {                                                //\n//     check(taskId, String);                                                                //\n//     check(setChecked, Boolean);                                                           //\n                                                                                             //\n//     const task = Tasks.findOne(taskId);                                                   //\n//     if (task.private && task.owner !== this.userId) {                                     //\n//       // If the task is private, make sure only the owner can check it off                //\n//       throw new Meteor.Error('not-authorized');                                           //\n//     }                                                                                     //\n                                                                                             //\n//     Tasks.update(taskId, { $set: { checked: setChecked } });                              //\n//   },                                                                                      //\n//   'tasks.setPrivate'(taskId, setToPrivate) {                                              //\n//     check(taskId, String);                                                                //\n//     check(setToPrivate, Boolean);                                                         //\n                                                                                             //\n//     const task = Tasks.findOne(taskId);                                                   //\n                                                                                             //\n//     // Make sure only the task owner can make a task private                              //\n//     if (task.owner !== this.userId) {                                                     //\n//       throw new Meteor.Error('not-authorized');                                           //\n//     }                                                                                     //\n                                                                                             //\n//     Tasks.update(taskId, { $set: { private: setToPrivate } });                            //\n//   },                                                                                      //\n                                                                                             //\n// } ) ;                                                                                     //\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":[\"../imports/api/tasks.js\",\"../imports/api/scavenger_hunts.js\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// server/main.js                                                                            //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nmodule.import('../imports/api/tasks.js');module.import('../imports/api/scavenger_hunts.js');\n                                                                                             // 2\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\",\".jsx\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/server/main.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,yBAAP;AACA,OAAO,mCAAP,uD","file":"/app.js","sourcesContent":["import '../imports/api/tasks.js';\nimport '../imports/api/scavenger_hunts.js';\n\n"]}}]