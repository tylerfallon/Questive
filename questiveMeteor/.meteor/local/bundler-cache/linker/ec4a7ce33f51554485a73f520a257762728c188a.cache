[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar meteorInstall = Package['modules-runtime'].meteorInstall;\n\n/* Package-scope variables */\nvar Buffer, process;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"modules\":{\"client.js\":[\"./install-packages.js\",\"./stubs.js\",\"./buffer.js\",\"./process.js\",\"reify/lib/runtime\",\"./css\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/modules/client.js                                                                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nrequire(\"./install-packages.js\");                                                                                   // 1\nrequire(\"./stubs.js\");                                                                                              // 2\nrequire(\"./buffer.js\");                                                                                             // 3\nrequire(\"./process.js\");                                                                                            // 4\nrequire(\"reify/lib/runtime\").enable(module.constructor);                                                            // 5\n                                                                                                                    // 6\nexports.addStyles = require(\"./css\").addStyles;                                                                     // 7\n                                                                                                                    // 8\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"buffer.js\":[\"buffer\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/modules/buffer.js                                                                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\ntry {                                                                                                               // 1\n  Buffer = global.Buffer || require(\"buffer\").Buffer;                                                               // 2\n} catch (noBuffer) {}                                                                                               // 3\n                                                                                                                    // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"css.js\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/modules/css.js                                                                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar doc = document;                                                                                                 // 1\nvar head = doc.getElementsByTagName(\"head\").item(0);                                                                // 2\n                                                                                                                    // 3\nexports.addStyles = function (css) {                                                                                // 4\n  var style = doc.createElement(\"style\");                                                                           // 5\n                                                                                                                    // 6\n  style.setAttribute(\"type\", \"text/css\");                                                                           // 7\n                                                                                                                    // 8\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                                // 9\n  var internetExplorerSheetObject =                                                                                 // 10\n    style.sheet || // Edge/IE11.                                                                                    // 11\n    style.styleSheet; // Older IEs.                                                                                 // 12\n                                                                                                                    // 13\n  if (internetExplorerSheetObject) {                                                                                // 14\n    internetExplorerSheetObject.cssText = css;                                                                      // 15\n  } else {                                                                                                          // 16\n    style.appendChild(doc.createTextNode(css));                                                                     // 17\n  }                                                                                                                 // 18\n                                                                                                                    // 19\n  return head.appendChild(style);                                                                                   // 20\n};                                                                                                                  // 21\n                                                                                                                    // 22\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"install-packages.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/modules/install-packages.js                                                                             //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nfunction install(name, mainModule) {                                                                                // 1\n  var meteorDir = {};                                                                                               // 2\n                                                                                                                    // 3\n  // Given a package name <name>, install a stub module in the                                                      // 4\n  // /node_modules/meteor directory called <name>.js, so that                                                       // 5\n  // require.resolve(\"meteor/<name>\") will always return                                                            // 6\n  // /node_modules/meteor/<name>.js instead of something like                                                       // 7\n  // /node_modules/meteor/<name>/index.js, in the rare but possible event                                           // 8\n  // that the package contains a file called index.js (#6590).                                                      // 9\n                                                                                                                    // 10\n  if (mainModule) {                                                                                                 // 11\n    meteorDir[name + \".js\"] = [mainModule, function (require, e, module) {                                          // 12\n      module.exports = require(mainModule);                                                                         // 13\n    }];                                                                                                             // 14\n  } else {                                                                                                          // 15\n    // back compat with old Meteor packages                                                                         // 16\n    meteorDir[name + \".js\"] = function (r, e, module) {                                                             // 17\n      module.exports = Package[name];                                                                               // 18\n    };                                                                                                              // 19\n  }                                                                                                                 // 20\n                                                                                                                    // 21\n  meteorInstall({                                                                                                   // 22\n    node_modules: {                                                                                                 // 23\n      meteor: meteorDir                                                                                             // 24\n    }                                                                                                               // 25\n  });                                                                                                               // 26\n}                                                                                                                   // 27\n                                                                                                                    // 28\n// This file will be modified during computeJsOutputFilesMap to include                                             // 29\n// install(<name>) calls for every Meteor package.                                                                  // 30\n                                                                                                                    // 31\ninstall(\"underscore\");                                                                                              // 32\ninstall(\"meteor\");                                                                                                  // 33\ninstall(\"meteor-base\");                                                                                             // 34\ninstall(\"mobile-experience\");                                                                                       // 35\ninstall(\"modules-runtime\");                                                                                         // 36\ninstall(\"modules\", \"meteor/modules/client.js\");                                                                     // 37\ninstall(\"es5-shim\", \"meteor/es5-shim/client.js\");                                                                   // 38\ninstall(\"promise\", \"meteor/promise/client.js\");                                                                     // 39\ninstall(\"ecmascript-runtime\", \"meteor/ecmascript-runtime/runtime.js\");                                              // 40\ninstall(\"babel-compiler\");                                                                                          // 41\ninstall(\"ecmascript\");                                                                                              // 42\ninstall(\"base64\");                                                                                                  // 43\ninstall(\"ejson\");                                                                                                   // 44\ninstall(\"id-map\");                                                                                                  // 45\ninstall(\"ordered-dict\");                                                                                            // 46\ninstall(\"tracker\");                                                                                                 // 47\ninstall(\"babel-runtime\");                                                                                           // 48\ninstall(\"random\");                                                                                                  // 49\ninstall(\"mongo-id\");                                                                                                // 50\ninstall(\"diff-sequence\");                                                                                           // 51\ninstall(\"geojson-utils\", \"meteor/geojson-utils/main.js\");                                                           // 52\ninstall(\"minimongo\");                                                                                               // 53\ninstall(\"check\", \"meteor/check/match.js\");                                                                          // 54\ninstall(\"retry\");                                                                                                   // 55\ninstall(\"ddp-common\");                                                                                              // 56\ninstall(\"reload\");                                                                                                  // 57\ninstall(\"ddp-client\");                                                                                              // 58\ninstall(\"ddp\");                                                                                                     // 59\ninstall(\"ddp-server\");                                                                                              // 60\ninstall(\"allow-deny\");                                                                                              // 61\ninstall(\"mongo\");                                                                                                   // 62\ninstall(\"blaze-html-templates\");                                                                                    // 63\ninstall(\"reactive-var\");                                                                                            // 64\ninstall(\"jquery\", \"meteor/jquery/main.js\");                                                                         // 65\ninstall(\"standard-minifier-css\");                                                                                   // 66\ninstall(\"standard-minifier-js\");                                                                                    // 67\ninstall(\"shell-server\");                                                                                            // 68\ninstall(\"tmeasday:check-npm-versions\", \"meteor/tmeasday:check-npm-versions/check-npm-versions.js\");                 // 69\ninstall(\"react-meteor-data\", \"meteor/react-meteor-data/react-meteor-data.jsx\");                                     // 70\ninstall(\"ddp-rate-limiter\");                                                                                        // 71\ninstall(\"localstorage\");                                                                                            // 72\ninstall(\"callback-hook\");                                                                                           // 73\ninstall(\"observe-sequence\");                                                                                        // 74\ninstall(\"deps\");                                                                                                    // 75\ninstall(\"htmljs\");                                                                                                  // 76\ninstall(\"blaze\");                                                                                                   // 77\ninstall(\"accounts-base\", \"meteor/accounts-base/client_main.js\");                                                    // 78\ninstall(\"service-configuration\");                                                                                   // 79\ninstall(\"spacebars\");                                                                                               // 80\ninstall(\"templating-compiler\");                                                                                     // 81\ninstall(\"templating-runtime\");                                                                                      // 82\ninstall(\"templating\");                                                                                              // 83\ninstall(\"reactive-dict\");                                                                                           // 84\ninstall(\"session\");                                                                                                 // 85\ninstall(\"url\");                                                                                                     // 86\ninstall(\"oauth\");                                                                                                   // 87\ninstall(\"accounts-oauth\");                                                                                          // 88\ninstall(\"sha\");                                                                                                     // 89\ninstall(\"srp\");                                                                                                     // 90\ninstall(\"accounts-password\");                                                                                       // 91\ninstall(\"less\");                                                                                                    // 92\ninstall(\"accounts-ui-unstyled\");                                                                                    // 93\ninstall(\"accounts-ui\");                                                                                             // 94\ninstall(\"oauth2\");                                                                                                  // 95\ninstall(\"facebook\");                                                                                                // 96\ninstall(\"accounts-facebook\");                                                                                       // 97\ninstall(\"meteortoys:toykit\");                                                                                       // 98\ninstall(\"msavin:mongol\");                                                                                           // 99\ninstall(\"msavin:jetsetter\");                                                                                        // 100\ninstall(\"meteortoys:blueprint\");                                                                                    // 101\ninstall(\"meteortoys:authenticate\");                                                                                 // 102\ninstall(\"meteortoys:shell\");                                                                                        // 103\ninstall(\"meteortoys:method\");                                                                                       // 104\ninstall(\"meteortoys:result\");                                                                                       // 105\ninstall(\"meteortoys:autopub\");                                                                                      // 106\ninstall(\"meteortoys:pub\");                                                                                          // 107\ninstall(\"meteortoys:sub\");                                                                                          // 108\ninstall(\"meteortoys:email\");                                                                                        // 109\ninstall(\"meteortoys:listen\");                                                                                       // 110\ninstall(\"meteortoys:throttle\");                                                                                     // 111\ninstall(\"meteortoys:status\");                                                                                       // 112\ninstall(\"meteortoys:hotreload\");                                                                                    // 113\ninstall(\"meteortoys:allthings\");                                                                                    // 114\ninstall(\"ultimatejs:tracker-react\", \"meteor/ultimatejs:tracker-react/main.js\");                                     // 115\ninstall(\"mdg:validation-error\");                                                                                    // 116\ninstall(\"jagi:astronomy\", \"meteor/jagi:astronomy/lib/main.js\");                                                     // 117\ninstall(\"webapp\");                                                                                                  // 118\ninstall(\"livedata\");                                                                                                // 119\ninstall(\"hot-code-push\");                                                                                           // 120\ninstall(\"launch-screen\");                                                                                           // 121\ninstall(\"ui\");                                                                                                      // 122\ninstall(\"autoupdate\");                                                                                              // 123\n                                                                                                                    // 124\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"process.js\":[\"process\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/modules/process.js                                                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\ntry {                                                                                                               // 1\n  // The application can run `npm install process` to provide its own                                               // 2\n  // process stub; otherwise this module will provide a partial stub.                                               // 3\n  process = global.process || require(\"process\");                                                                   // 4\n} catch (noProcess) {                                                                                               // 5\n  process = {};                                                                                                     // 6\n}                                                                                                                   // 7\n                                                                                                                    // 8\nif (Meteor.isServer) {                                                                                              // 9\n  // Make require(\"process\") work on the server in all versions of Node.                                            // 10\n  meteorInstall({                                                                                                   // 11\n    node_modules: {                                                                                                 // 12\n      \"process.js\": function (r, e, module) {                                                                       // 13\n        module.exports = process;                                                                                   // 14\n      }                                                                                                             // 15\n    }                                                                                                               // 16\n  });                                                                                                               // 17\n} else {                                                                                                            // 18\n  process.platform = \"browser\";                                                                                     // 19\n  process.nextTick = process.nextTick || Meteor._setImmediate;                                                      // 20\n}                                                                                                                   // 21\n                                                                                                                    // 22\nif (typeof process.env !== \"object\") {                                                                              // 23\n  process.env = {};                                                                                                 // 24\n}                                                                                                                   // 25\n                                                                                                                    // 26\n_.extend(process.env, meteorEnv);                                                                                   // 27\n                                                                                                                    // 28\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"stubs.js\":[\"meteor-node-stubs\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/modules/stubs.js                                                                                        //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\ntry {                                                                                                               // 1\n  // When meteor-node-stubs is installed in the application's root                                                  // 2\n  // node_modules directory, requiring it here installs aliases for stubs                                           // 3\n  // for all Node built-in modules, such as fs, util, and http.                                                     // 4\n  require(\"meteor-node-stubs\");                                                                                     // 5\n} catch (noStubs) {}                                                                                                // 6\n                                                                                                                    // 7\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"reify\":{\"lib\":{\"runtime.js\":[\"./entry.js\",\"./utils.js\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/modules/node_modules/reify/lib/runtime.js                                                    //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar Entry = require(\"./entry.js\").Entry;                                                                            // 1\nvar utils = require(\"./utils.js\");                                                                                  // 2\n                                                                                                                    // 3\nexports.enable = function (Module) {                                                                                // 4\n  var Mp = Module.prototype;                                                                                        // 5\n                                                                                                                    // 6\n  if (typeof Mp.import === \"function\" &&                                                                            // 7\n      typeof Mp.export === \"function\") {                                                                            // 8\n    // If the Mp.{import,export} methods have already been                                                          // 9\n    // defined, abandon reification immediately.                                                                    // 10\n    return Module;                                                                                                  // 11\n  }                                                                                                                 // 12\n                                                                                                                    // 13\n  // Platform-specific code should implement this method however                                                    // 14\n  // appropriate. Module.prototype.resolve(id) should return an absolute                                            // 15\n  // version of the given module identifier, like require.resolve.                                                  // 16\n  Mp.resolve = Mp.resolve || function resolve(id) {                                                                 // 17\n    throw new Error(\"Module.prototype.resolve not implemented\");                                                    // 18\n  };                                                                                                                // 19\n                                                                                                                    // 20\n  // Platform-specific code should find a way to call this method whenever                                          // 21\n  // the module system is about to return module.exports from require. This                                         // 22\n  // might happen more than once per module, in case of dependency cycles,                                          // 23\n  // so we want Module.prototype.runModuleSetters to run each time.                                                 // 24\n  Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {                                             // 25\n    var entry = Entry.get(this.id);                                                                                 // 26\n    if (entry) {                                                                                                    // 27\n      entry.runModuleSetters(this);                                                                                 // 28\n    }                                                                                                               // 29\n                                                                                                                    // 30\n    // Assignments to exported local variables get wrapped with calls to                                            // 31\n    // module.runModuleSetters, so module.runModuleSetters returns the                                              // 32\n    // valueToPassThrough parameter to allow the value of the original                                              // 33\n    // expression to pass through. For example,                                                                     // 34\n    //                                                                                                              // 35\n    //   export var a = 1;                                                                                          // 36\n    //   console.log(a += 3);                                                                                       // 37\n    //                                                                                                              // 38\n    // becomes                                                                                                      // 39\n    //                                                                                                              // 40\n    //   module.export(\"a\", () => a);                                                                               // 41\n    //   var a = 1;                                                                                                 // 42\n    //   console.log(module.runModuleSetters(a += 3));                                                              // 43\n    //                                                                                                              // 44\n    // This ensures module.runModuleSetters runs immediately after the                                              // 45\n    // assignment, and does not interfere with the larger computation.                                              // 46\n    return valueToPassThrough;                                                                                      // 47\n  };                                                                                                                // 48\n                                                                                                                    // 49\n  function setESModule(module) {                                                                                    // 50\n    var exports = module.exports;                                                                                   // 51\n    if (exports && typeof exports === \"object\") {                                                                   // 52\n      exports.__esModule = true;                                                                                    // 53\n    }                                                                                                               // 54\n  }                                                                                                                 // 55\n                                                                                                                    // 56\n  Mp.import = function (id, setters) {                                                                              // 57\n    var module = this;                                                                                              // 58\n    setESModule(module);                                                                                            // 59\n                                                                                                                    // 60\n    var absoluteId = module.resolve(id);                                                                            // 61\n                                                                                                                    // 62\n    if (setters && typeof setters === \"object\") {                                                                   // 63\n      var entry = Entry.getOrCreate(absoluteId);                                                                    // 64\n      entry.addSetters(module, setters);                                                                            // 65\n    }                                                                                                               // 66\n                                                                                                                    // 67\n    var countBefore = entry && entry.runCount;                                                                      // 68\n    var exports = typeof module.require === \"function\"                                                              // 69\n      ? module.require(absoluteId)                                                                                  // 70\n      : require(absoluteId);                                                                                        // 71\n                                                                                                                    // 72\n    if (entry && entry.runCount === countBefore) {                                                                  // 73\n      // If require(absoluteId) didn't run any setters for this entry,                                              // 74\n      // perhaps because it's not the first time this module has been                                               // 75\n      // required, run the setters now using an object that passes as the                                           // 76\n      // real module object.                                                                                        // 77\n      entry.runModuleSetters({                                                                                      // 78\n        id: absoluteId,                                                                                             // 79\n        exports: exports,                                                                                           // 80\n        getExportByName: Mp.getExportByName                                                                         // 81\n      });                                                                                                           // 82\n    }                                                                                                               // 83\n  };                                                                                                                // 84\n                                                                                                                    // 85\n  // Register getter functions for local variables in the scope of an                                               // 86\n  // export statement. The keys of the getters object are exported names,                                           // 87\n  // and the values are functions that return local values.                                                         // 88\n  Mp.export = function (getters) {                                                                                  // 89\n    var module = this;                                                                                              // 90\n    setESModule(module);                                                                                            // 91\n                                                                                                                    // 92\n    if (utils.isPlainObject(getters)) {                                                                             // 93\n      Entry.getOrCreate(module.id).addGetters(getters);                                                             // 94\n    }                                                                                                               // 95\n                                                                                                                    // 96\n    if (module.loaded) {                                                                                            // 97\n      // If the module has already been evaluated, then we need to trigger                                          // 98\n      // another round of entry.runModuleSetters calls, which begins by                                             // 99\n      // calling entry.runModuleGetters(module).                                                                    // 100\n      module.runModuleSetters();                                                                                    // 101\n    }                                                                                                               // 102\n  };                                                                                                                // 103\n                                                                                                                    // 104\n  // This method can be overridden by client code to implement custom export                                        // 105\n  // naming logic. The current implementation works well with Babel's                                               // 106\n  // __esModule convention.                                                                                         // 107\n  Mp.getExportByName = function (name) {                                                                            // 108\n    var exports = this.exports;                                                                                     // 109\n                                                                                                                    // 110\n    if (name === \"*\") {                                                                                             // 111\n      return exports;                                                                                               // 112\n    }                                                                                                               // 113\n                                                                                                                    // 114\n    if (name === \"default\" &&                                                                                       // 115\n        ! (exports &&                                                                                               // 116\n           typeof exports === \"object\" &&                                                                           // 117\n           exports.__esModule &&                                                                                    // 118\n           \"default\" in exports)) {                                                                                 // 119\n      return exports;                                                                                               // 120\n    }                                                                                                               // 121\n                                                                                                                    // 122\n    return exports && exports[name];                                                                                // 123\n  };                                                                                                                // 124\n                                                                                                                    // 125\n  return Module;                                                                                                    // 126\n};                                                                                                                  // 127\n                                                                                                                    // 128\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"entry.js\":[\"./utils.js\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/modules/node_modules/reify/lib/entry.js                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                       // 1\nvar entryMap = Object.create(null);                                                                                 // 2\nvar utils = require(\"./utils.js\");                                                                                  // 3\n                                                                                                                    // 4\nfunction Entry(id) {                                                                                                // 5\n  // Same as module.id for this module.                                                                             // 6\n  this.id = id;                                                                                                     // 7\n  // The number of times this.runModuleSetters has been called.                                                     // 8\n  this.runCount = 0;                                                                                                // 9\n  // Setters for assigning to local variables in parent modules.                                                    // 10\n  this.setters = Object.create(null);                                                                               // 11\n  // Getters for local variables exported from this module.                                                         // 12\n  this.getters = Object.create(null);                                                                               // 13\n}                                                                                                                   // 14\n                                                                                                                    // 15\nvar Ep = Entry.prototype;                                                                                           // 16\n                                                                                                                    // 17\nEntry.get = function (id) {                                                                                         // 18\n  return entryMap[id] || null;                                                                                      // 19\n};                                                                                                                  // 20\n                                                                                                                    // 21\nEntry.getOrCreate = function (id) {                                                                                 // 22\n  return entryMap[id] = entryMap[id] || new Entry(id);                                                              // 23\n};                                                                                                                  // 24\n                                                                                                                    // 25\nEp.addSetters = function (parent, setters) {                                                                        // 26\n  var entry = this;                                                                                                 // 27\n                                                                                                                    // 28\n  Object.keys(setters).forEach(function (name) {                                                                    // 29\n    var setter = setters[name];                                                                                     // 30\n    if (typeof setter === \"function\" &&                                                                             // 31\n        // Ignore any requests for the exports.__esModule property.\"                                                // 32\n        name !== \"__esModule\") {                                                                                    // 33\n      setter.parent = parent;                                                                                       // 34\n      (entry.setters[name] =                                                                                        // 35\n       entry.setters[name] || []                                                                                    // 36\n      ).push(setter);                                                                                               // 37\n    }                                                                                                               // 38\n  });                                                                                                               // 39\n};                                                                                                                  // 40\n                                                                                                                    // 41\nEp.addGetters = function (getters) {                                                                                // 42\n  var entry = this;                                                                                                 // 43\n  Object.keys(getters).forEach(function (name) {                                                                    // 44\n    var getter = getters[name];                                                                                     // 45\n    if (typeof getter === \"function\" &&                                                                             // 46\n        // Ignore any requests for the exports.__esModule property.\"                                                // 47\n        name !== \"__esModule\") {                                                                                    // 48\n      // Should this throw if hasOwn.call(this.getters, name)?                                                      // 49\n      entry.getters[name] = getter;                                                                                 // 50\n    }                                                                                                               // 51\n  });                                                                                                               // 52\n};                                                                                                                  // 53\n                                                                                                                    // 54\nfunction runModuleSetters(module) {                                                                                 // 55\n  var entry = entryMap[module.id];                                                                                  // 56\n  if (entry) {                                                                                                      // 57\n    entry.runModuleSetters(module);                                                                                 // 58\n  }                                                                                                                 // 59\n}                                                                                                                   // 60\n                                                                                                                    // 61\nfunction runModuleGetters(module) {                                                                                 // 62\n  var entry = entryMap[module.id];                                                                                  // 63\n  return entry ? entry.runModuleGetters(module) : 0;                                                                // 64\n}                                                                                                                   // 65\n                                                                                                                    // 66\nEp.runModuleGetters = function (module) {                                                                           // 67\n  var entry = this;                                                                                                 // 68\n  var changeCount = 0;                                                                                              // 69\n                                                                                                                    // 70\n  Object.keys(entry.getters).forEach(function (name) {                                                              // 71\n    if (entry.runGetter(module, name)) {                                                                            // 72\n      ++changeCount;                                                                                                // 73\n    }                                                                                                               // 74\n  });                                                                                                               // 75\n                                                                                                                    // 76\n  return changeCount;                                                                                               // 77\n};                                                                                                                  // 78\n                                                                                                                    // 79\n// Returns true iff the getter updated module.exports with a new value.                                             // 80\nEp.runGetter = function (module, name) {                                                                            // 81\n  if (! hasOwn.call(this.getters, name)) {                                                                          // 82\n    return false;                                                                                                   // 83\n  }                                                                                                                 // 84\n                                                                                                                    // 85\n  var getter = this.getters[name];                                                                                  // 86\n  try {                                                                                                             // 87\n    var value = getter.call(module);                                                                                // 88\n  } catch (e) {}                                                                                                    // 89\n  var exports = module.exports;                                                                                     // 90\n                                                                                                                    // 91\n  if (! hasOwn.call(exports, name) ||                                                                               // 92\n      exports[name] !== value) {                                                                                    // 93\n    // We update module.exports[name] with the current value so that                                                // 94\n    // CommonJS require calls remain consistent with module.import.                                                 // 95\n    exports[name] = value;                                                                                          // 96\n    return true;                                                                                                    // 97\n  }                                                                                                                 // 98\n                                                                                                                    // 99\n  return false;                                                                                                     // 100\n};                                                                                                                  // 101\n                                                                                                                    // 102\n// Called whenever module.exports might have changed, to trigger any                                                // 103\n// setters associated with the newly exported values.                                                               // 104\nEp.runModuleSetters = function (module) {                                                                           // 105\n  var entry = this;                                                                                                 // 106\n  var names = Object.keys(entry.setters);                                                                           // 107\n                                                                                                                    // 108\n  // Make sure module.exports is up to date before we call                                                          // 109\n  // module.getExportByName(name).                                                                                  // 110\n  entry.runModuleGetters(module);                                                                                   // 111\n                                                                                                                    // 112\n  // Invoke the given callback once for every (setter, value, name) triple                                          // 113\n  // that needs to be called. Note that forEachSetter does not call any                                             // 114\n  // setters itself, only the given callback.                                                                       // 115\n  function forEachSetter(callback, context) {                                                                       // 116\n    names.forEach(function (name) {                                                                                 // 117\n      entry.setters[name].forEach(function (setter) {                                                               // 118\n        var value = module.getExportByName(name);                                                                   // 119\n        if (name === \"*\") {                                                                                         // 120\n          Object.keys(value).forEach(function (name) {                                                              // 121\n            call(setter, value[name], name);                                                                        // 122\n          });                                                                                                       // 123\n        } else {                                                                                                    // 124\n          call(setter, value, name);                                                                                // 125\n        }                                                                                                           // 126\n      });                                                                                                           // 127\n    });                                                                                                             // 128\n                                                                                                                    // 129\n    function call(setter, value, name) {                                                                            // 130\n      if (name === \"__esModule\") {                                                                                  // 131\n        // Ignore setters asking for module.exports.__esModule.                                                     // 132\n        return;                                                                                                     // 133\n      }                                                                                                             // 134\n                                                                                                                    // 135\n      setter.last = setter.last || Object.create(null);                                                             // 136\n                                                                                                                    // 137\n      if (! hasOwn.call(setter.last, name) ||                                                                       // 138\n          setter.last[name] !== value) {                                                                            // 139\n        // Only invoke the callback if we have not called this setter                                               // 140\n        // (with a value of this name) before, or the current value is                                              // 141\n        // different from the last value we passed to this setter.                                                  // 142\n        return callback.apply(context, arguments);                                                                  // 143\n      }                                                                                                             // 144\n    }                                                                                                               // 145\n  }                                                                                                                 // 146\n                                                                                                                    // 147\n  // Every three elements of this list form a (setter, value, name) triple                                          // 148\n  // that needs to be invoked.                                                                                      // 149\n  var settersToCall = [];                                                                                           // 150\n                                                                                                                    // 151\n  // Lazily-initialized objects mapping parent module identifiers to                                                // 152\n  // relevant parent module objects and snapshots of their exports.                                                 // 153\n  var relevantParents;                                                                                              // 154\n  var parentSnapshots;                                                                                              // 155\n                                                                                                                    // 156\n  // Take snapshots of setter.parent.exports for any setters that we are                                            // 157\n  // planning to call, so that we can later determine if calling the                                                // 158\n  // setters modified any of those exports objects.                                                                 // 159\n  forEachSetter(function (setter, value, name) {                                                                    // 160\n    var parent = setter.parent;                                                                                     // 161\n    parentSnapshots = parentSnapshots || Object.create(null);                                                       // 162\n    if (! hasOwn.call(parentSnapshots, parent.id)) {                                                                // 163\n      relevantParents = relevantParents || Object.create(null);                                                     // 164\n      relevantParents[parent.id] = parent;                                                                          // 165\n      if (utils.isPlainObject(parent.exports)) {                                                                    // 166\n        // If parent.exports is an object, make a shallow clone of it so                                            // 167\n        // that we can see if it changes as a result of calling setters.                                            // 168\n        parentSnapshots[parent.id] = utils.assign({}, parent.exports);                                              // 169\n      } else {                                                                                                      // 170\n        // If parent.exports is not an object, the \"snapshot\" is just the                                           // 171\n        // value of parent.exports.                                                                                 // 172\n        parentSnapshots[parent.id] = parent.exports;                                                                // 173\n      }                                                                                                             // 174\n    }                                                                                                               // 175\n                                                                                                                    // 176\n    // Push three elements at a time to avoid creating wrapper arrays for                                           // 177\n    // each (setter, value, name) triple. Note the i += 3 below.                                                    // 178\n    settersToCall.push(setter, value, name);                                                                        // 179\n  });                                                                                                               // 180\n                                                                                                                    // 181\n  // Now call all the setters that we decided we need to call.                                                      // 182\n  for (var i = 0; i < settersToCall.length; i += 3) {                                                               // 183\n    var setter = settersToCall[i];                                                                                  // 184\n    var value = settersToCall[i + 1];                                                                               // 185\n    var name = settersToCall[i + 2];                                                                                // 186\n    setter.call(module, setter.last[name] = value, name);                                                           // 187\n  }                                                                                                                 // 188\n                                                                                                                    // 189\n  ++entry.runCount;                                                                                                 // 190\n                                                                                                                    // 191\n  if (! relevantParents) {                                                                                          // 192\n    // If we never called takeSnapshot, then we can avoid checking                                                  // 193\n    // relevantParents and parentSnapshots below.                                                                   // 194\n    return;                                                                                                         // 195\n  }                                                                                                                 // 196\n                                                                                                                    // 197\n  // If any of the setters updated the module.exports of a parent module,                                           // 198\n  // or updated local variables that are exported by that parent module,                                            // 199\n  // then we must re-run any setters registered by that parent module.                                              // 200\n  Object.keys(relevantParents).forEach(function (id) {                                                              // 201\n    var parent = relevantParents[id];                                                                               // 202\n                                                                                                                    // 203\n    if (runModuleGetters(parent) > 0) {                                                                             // 204\n      return runModuleSetters(parent);                                                                              // 205\n    }                                                                                                               // 206\n                                                                                                                    // 207\n    var exports = parent.exports;                                                                                   // 208\n    var snapshot = parentSnapshots[parent.id];                                                                      // 209\n    if (utils.shallowObjEqual(exports, snapshot)) {                                                                 // 210\n      // If parent.exports have not changed since we took the snapshot,                                             // 211\n      // then we do not need to run the parent's setters.                                                           // 212\n      return;                                                                                                       // 213\n    }                                                                                                               // 214\n                                                                                                                    // 215\n    runModuleSetters(parent);                                                                                       // 216\n  });                                                                                                               // 217\n};                                                                                                                  // 218\n                                                                                                                    // 219\nexports.Entry = Entry;                                                                                              // 220\n                                                                                                                    // 221\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"utils.js\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/modules/node_modules/reify/lib/utils.js                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                       // 1\nvar objToStr = Object.prototype.toString;                                                                           // 2\nvar objStr = objToStr.call({});                                                                                     // 3\n                                                                                                                    // 4\nfunction isPlainObject(value) {                                                                                     // 5\n  return objToStr.call(value) === objStr;                                                                           // 6\n}                                                                                                                   // 7\nexports.isPlainObject = isPlainObject;                                                                              // 8\n                                                                                                                    // 9\nexports.assign = Object.assign || function (obj) {                                                                  // 10\n  var argc = arguments.length;                                                                                      // 11\n  for (var i = 1; i < argc; ++i) {                                                                                  // 12\n    var arg = arguments[i];                                                                                         // 13\n    if (arg && typeof arg === \"object\") {                                                                           // 14\n      var keys = Object.keys(arg);                                                                                  // 15\n      for (var k = 0; k < keys.length; ++k) {                                                                       // 16\n        var key = keys[k];                                                                                          // 17\n        obj[key] = arg[key];                                                                                        // 18\n      }                                                                                                             // 19\n    }                                                                                                               // 20\n  }                                                                                                                 // 21\n  return obj;                                                                                                       // 22\n};                                                                                                                  // 23\n                                                                                                                    // 24\nexports.shallowObjEqual = function(a, b) {                                                                          // 25\n  if (a === b) {                                                                                                    // 26\n    return true;                                                                                                    // 27\n  }                                                                                                                 // 28\n                                                                                                                    // 29\n  if (! isPlainObject(a) ||                                                                                         // 30\n      ! isPlainObject(b)) {                                                                                         // 31\n    return false;                                                                                                   // 32\n  }                                                                                                                 // 33\n                                                                                                                    // 34\n  var aKeys = Object.keys(a);                                                                                       // 35\n  var bKeys = Object.keys(b);                                                                                       // 36\n                                                                                                                    // 37\n  if (aKeys.length !== bKeys.length) {                                                                              // 38\n    return false;                                                                                                   // 39\n  }                                                                                                                 // 40\n                                                                                                                    // 41\n  return aKeys.every(function (key) {                                                                               // 42\n    return hasOwn.call(b, key) &&                                                                                   // 43\n      a[key] === b[key];                                                                                            // 44\n  });                                                                                                               // 45\n};                                                                                                                  // 46\n                                                                                                                    // 47\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},\"meteor-node-stubs\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/package.json                                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nexports.name = \"meteor-node-stubs\";                                                                                 // 1\nexports.version = \"0.2.3\";                                                                                          // 2\nexports.main = \"index.js\";                                                                                          // 3\n                                                                                                                    // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"./map.json\",function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/index.js                                                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar map = require(\"./map.json\");                                                                                    // 1\nvar meteorAliases = {};                                                                                             // 2\n                                                                                                                    // 3\nObject.keys(map).forEach(function (id) {                                                                            // 4\n  if (typeof map[id] === \"string\") {                                                                                // 5\n    try {                                                                                                           // 6\n      exports[id] = meteorAliases[id + \".js\"] =                                                                     // 7\n        require.resolve(map[id]);                                                                                   // 8\n    } catch (e) {                                                                                                   // 9\n      // Resolution can fail at runtime if the stub was not included in the                                         // 10\n      // bundle because nothing depended on it.                                                                     // 11\n    }                                                                                                               // 12\n  } else {                                                                                                          // 13\n    exports[id] = map[id];                                                                                          // 14\n    meteorAliases[id + \".js\"] = function(){};                                                                       // 15\n  }                                                                                                                 // 16\n});                                                                                                                 // 17\n                                                                                                                    // 18\nif (typeof meteorInstall === \"function\") {                                                                          // 19\n  meteorInstall({                                                                                                   // 20\n    // Install the aliases into a node_modules directory one level up from                                          // 21\n    // the root directory, so that they do not clutter the namespace                                                // 22\n    // available to apps and packages.                                                                              // 23\n    \"..\": {                                                                                                         // 24\n      node_modules: meteorAliases                                                                                   // 25\n    }                                                                                                               // 26\n  });                                                                                                               // 27\n}                                                                                                                   // 28\n                                                                                                                    // 29\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"map.json\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/map.json                                                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.exports = {                                                                                                  // 1\n  \"assert\": \"assert/\",                                                                                              // 2\n  \"buffer\": \"buffer/\",                                                                                              // 3\n  \"child_process\": null,                                                                                            // 4\n  \"cluster\": null,                                                                                                  // 5\n  \"console\": \"console-browserify\",                                                                                  // 6\n  \"constants\": \"constants-browserify\",                                                                              // 7\n  \"crypto\": \"crypto-browserify\",                                                                                    // 8\n  \"dgram\": null,                                                                                                    // 9\n  \"dns\": null,                                                                                                      // 10\n  \"domain\": \"domain-browser\",                                                                                       // 11\n  \"events\": \"events/\",                                                                                              // 12\n  \"fs\": null,                                                                                                       // 13\n  \"http\": \"http-browserify\",                                                                                        // 14\n  \"https\": \"https-browserify\",                                                                                      // 15\n  \"module\": null,                                                                                                   // 16\n  \"net\": null,                                                                                                      // 17\n  \"os\": \"os-browserify/browser.js\",                                                                                 // 18\n  \"path\": \"path-browserify\",                                                                                        // 19\n  \"process\": \"process/browser.js\",                                                                                  // 20\n  \"punycode\": \"punycode/\",                                                                                          // 21\n  \"querystring\": \"querystring-es3/\",                                                                                // 22\n  \"readline\": null,                                                                                                 // 23\n  \"repl\": null,                                                                                                     // 24\n  \"stream\": \"stream-browserify\",                                                                                    // 25\n  \"_stream_duplex\": \"readable-stream/duplex.js\",                                                                    // 26\n  \"_stream_passthrough\": \"readable-stream/passthrough.js\",                                                          // 27\n  \"_stream_readable\": \"readable-stream/readable.js\",                                                                // 28\n  \"_stream_transform\": \"readable-stream/transform.js\",                                                              // 29\n  \"_stream_writable\": \"readable-stream/writable.js\",                                                                // 30\n  \"string_decoder\": \"string_decoder/\",                                                                              // 31\n  \"sys\": \"util/util.js\",                                                                                            // 32\n  \"timers\": \"timers-browserify\",                                                                                    // 33\n  \"tls\": null,                                                                                                      // 34\n  \"tty\": \"tty-browserify\",                                                                                          // 35\n  \"url\": \"url/\",                                                                                                    // 36\n  \"util\": \"util/util.js\",                                                                                           // 37\n  \"vm\": \"vm-browserify\",                                                                                            // 38\n  \"zlib\": \"browserify-zlib\"                                                                                         // 39\n};                                                                                                                  // 40\n                                                                                                                    // 41\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"deps\":{\"buffer.js\":[\"buffer/\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/deps/buffer.js                                                                    //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nrequire(\"buffer/\");                                                                                                 // 1\n                                                                                                                    // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"process.js\":[\"process/browser.js\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/deps/process.js                                                                   //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nrequire(\"process/browser.js\");                                                                                      // 1\n                                                                                                                    // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"domain.js\":[\"domain-browser\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/deps/domain.js                                                                    //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nrequire(\"domain-browser\");                                                                                          // 1\n                                                                                                                    // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"node_modules\":{\"buffer\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/node_modules/buffer/package.json                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nexports.name = \"buffer\";                                                                                            // 1\nexports.version = \"4.5.1\";                                                                                          // 2\nexports.main = \"index.js\";                                                                                          // 3\n                                                                                                                    // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"base64-js\",\"ieee754\",\"isarray\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/node_modules/buffer/index.js                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/*!                                                                                                                 // 1\n * The buffer module from node.js, for the browser.                                                                 // 2\n *                                                                                                                  // 3\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>                                            // 4\n * @license  MIT                                                                                                    // 5\n */                                                                                                                 // 6\n/* eslint-disable no-proto */                                                                                       // 7\n                                                                                                                    // 8\n'use strict'                                                                                                        // 9\n                                                                                                                    // 10\nvar base64 = require('base64-js')                                                                                   // 11\nvar ieee754 = require('ieee754')                                                                                    // 12\nvar isArray = require('isarray')                                                                                    // 13\n                                                                                                                    // 14\nexports.Buffer = Buffer                                                                                             // 15\nexports.SlowBuffer = SlowBuffer                                                                                     // 16\nexports.INSPECT_MAX_BYTES = 50                                                                                      // 17\nBuffer.poolSize = 8192 // not used by this implementation                                                           // 18\n                                                                                                                    // 19\nvar rootParent = {}                                                                                                 // 20\n                                                                                                                    // 21\n/**                                                                                                                 // 22\n * If `Buffer.TYPED_ARRAY_SUPPORT`:                                                                                 // 23\n *   === true    Use Uint8Array implementation (fastest)                                                            // 24\n *   === false   Use Object implementation (most compatible, even IE6)                                              // 25\n *                                                                                                                  // 26\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,                               // 27\n * Opera 11.6+, iOS 4.2+.                                                                                           // 28\n *                                                                                                                  // 29\n * Due to various browser bugs, sometimes the Object implementation will be used even                               // 30\n * when the browser supports typed arrays.                                                                          // 31\n *                                                                                                                  // 32\n * Note:                                                                                                            // 33\n *                                                                                                                  // 34\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,                              // 35\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.                                                    // 36\n *                                                                                                                  // 37\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.                                         // 38\n *                                                                                                                  // 39\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of                           // 40\n *     incorrect length in some situations.                                                                         // 41\n                                                                                                                    // 42\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they                           // 43\n * get the Object implementation, which is slower but behaves correctly.                                            // 44\n */                                                                                                                 // 45\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined                                               // 46\n  ? global.TYPED_ARRAY_SUPPORT                                                                                      // 47\n  : typedArraySupport()                                                                                             // 48\n                                                                                                                    // 49\nfunction typedArraySupport () {                                                                                     // 50\n  try {                                                                                                             // 51\n    var arr = new Uint8Array(1)                                                                                     // 52\n    arr.foo = function () { return 42 }                                                                             // 53\n    return arr.foo() === 42 && // typed array instances can be augmented                                            // 54\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`                                        // 55\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`                                           // 56\n  } catch (e) {                                                                                                     // 57\n    return false                                                                                                    // 58\n  }                                                                                                                 // 59\n}                                                                                                                   // 60\n                                                                                                                    // 61\nfunction kMaxLength () {                                                                                            // 62\n  return Buffer.TYPED_ARRAY_SUPPORT                                                                                 // 63\n    ? 0x7fffffff                                                                                                    // 64\n    : 0x3fffffff                                                                                                    // 65\n}                                                                                                                   // 66\n                                                                                                                    // 67\n/**                                                                                                                 // 68\n * The Buffer constructor returns instances of `Uint8Array` that have their                                         // 69\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of                                  // 70\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods                                  // 71\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it                                    // 72\n * returns a single octet.                                                                                          // 73\n *                                                                                                                  // 74\n * The `Uint8Array` prototype remains unmodified.                                                                   // 75\n */                                                                                                                 // 76\nfunction Buffer (arg) {                                                                                             // 77\n  if (!(this instanceof Buffer)) {                                                                                  // 78\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.                                        // 79\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])                                                  // 80\n    return new Buffer(arg)                                                                                          // 81\n  }                                                                                                                 // 82\n                                                                                                                    // 83\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                                // 84\n    this.length = 0                                                                                                 // 85\n    this.parent = undefined                                                                                         // 86\n  }                                                                                                                 // 87\n                                                                                                                    // 88\n  // Common case.                                                                                                   // 89\n  if (typeof arg === 'number') {                                                                                    // 90\n    return fromNumber(this, arg)                                                                                    // 91\n  }                                                                                                                 // 92\n                                                                                                                    // 93\n  // Slightly less common case.                                                                                     // 94\n  if (typeof arg === 'string') {                                                                                    // 95\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')                                      // 96\n  }                                                                                                                 // 97\n                                                                                                                    // 98\n  // Unusual.                                                                                                       // 99\n  return fromObject(this, arg)                                                                                      // 100\n}                                                                                                                   // 101\n                                                                                                                    // 102\n// TODO: Legacy, not needed anymore. Remove in next major version.                                                  // 103\nBuffer._augment = function (arr) {                                                                                  // 104\n  arr.__proto__ = Buffer.prototype                                                                                  // 105\n  return arr                                                                                                        // 106\n}                                                                                                                   // 107\n                                                                                                                    // 108\nfunction fromNumber (that, length) {                                                                                // 109\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)                                                       // 110\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                                // 111\n    for (var i = 0; i < length; i++) {                                                                              // 112\n      that[i] = 0                                                                                                   // 113\n    }                                                                                                               // 114\n  }                                                                                                                 // 115\n  return that                                                                                                       // 116\n}                                                                                                                   // 117\n                                                                                                                    // 118\nfunction fromString (that, string, encoding) {                                                                      // 119\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'                                            // 120\n                                                                                                                    // 121\n  // Assumption: byteLength() return value is always < kMaxLength.                                                  // 122\n  var length = byteLength(string, encoding) | 0                                                                     // 123\n  that = allocate(that, length)                                                                                     // 124\n                                                                                                                    // 125\n  that.write(string, encoding)                                                                                      // 126\n  return that                                                                                                       // 127\n}                                                                                                                   // 128\n                                                                                                                    // 129\nfunction fromObject (that, object) {                                                                                // 130\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)                                                      // 131\n                                                                                                                    // 132\n  if (isArray(object)) return fromArray(that, object)                                                               // 133\n                                                                                                                    // 134\n  if (object == null) {                                                                                             // 135\n    throw new TypeError('must start with number, buffer, array or string')                                          // 136\n  }                                                                                                                 // 137\n                                                                                                                    // 138\n  if (typeof ArrayBuffer !== 'undefined') {                                                                         // 139\n    if (object.buffer instanceof ArrayBuffer) {                                                                     // 140\n      return fromTypedArray(that, object)                                                                           // 141\n    }                                                                                                               // 142\n    if (object instanceof ArrayBuffer) {                                                                            // 143\n      return fromArrayBuffer(that, object)                                                                          // 144\n    }                                                                                                               // 145\n  }                                                                                                                 // 146\n                                                                                                                    // 147\n  if (object.length) return fromArrayLike(that, object)                                                             // 148\n                                                                                                                    // 149\n  return fromJsonObject(that, object)                                                                               // 150\n}                                                                                                                   // 151\n                                                                                                                    // 152\nfunction fromBuffer (that, buffer) {                                                                                // 153\n  var length = checked(buffer.length) | 0                                                                           // 154\n  that = allocate(that, length)                                                                                     // 155\n  buffer.copy(that, 0, 0, length)                                                                                   // 156\n  return that                                                                                                       // 157\n}                                                                                                                   // 158\n                                                                                                                    // 159\nfunction fromArray (that, array) {                                                                                  // 160\n  var length = checked(array.length) | 0                                                                            // 161\n  that = allocate(that, length)                                                                                     // 162\n  for (var i = 0; i < length; i += 1) {                                                                             // 163\n    that[i] = array[i] & 255                                                                                        // 164\n  }                                                                                                                 // 165\n  return that                                                                                                       // 166\n}                                                                                                                   // 167\n                                                                                                                    // 168\n// Duplicate of fromArray() to keep fromArray() monomorphic.                                                        // 169\nfunction fromTypedArray (that, array) {                                                                             // 170\n  var length = checked(array.length) | 0                                                                            // 171\n  that = allocate(that, length)                                                                                     // 172\n  // Truncating the elements is probably not what people expect from typed                                          // 173\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior                                        // 174\n  // of the old Buffer constructor.                                                                                 // 175\n  for (var i = 0; i < length; i += 1) {                                                                             // 176\n    that[i] = array[i] & 255                                                                                        // 177\n  }                                                                                                                 // 178\n  return that                                                                                                       // 179\n}                                                                                                                   // 180\n                                                                                                                    // 181\nfunction fromArrayBuffer (that, array) {                                                                            // 182\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer                                             // 183\n                                                                                                                    // 184\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                 // 185\n    // Return an augmented `Uint8Array` instance, for best performance                                              // 186\n    that = new Uint8Array(array)                                                                                    // 187\n    that.__proto__ = Buffer.prototype                                                                               // 188\n  } else {                                                                                                          // 189\n    // Fallback: Return an object instance of the Buffer class                                                      // 190\n    that = fromTypedArray(that, new Uint8Array(array))                                                              // 191\n  }                                                                                                                 // 192\n  return that                                                                                                       // 193\n}                                                                                                                   // 194\n                                                                                                                    // 195\nfunction fromArrayLike (that, array) {                                                                              // 196\n  var length = checked(array.length) | 0                                                                            // 197\n  that = allocate(that, length)                                                                                     // 198\n  for (var i = 0; i < length; i += 1) {                                                                             // 199\n    that[i] = array[i] & 255                                                                                        // 200\n  }                                                                                                                 // 201\n  return that                                                                                                       // 202\n}                                                                                                                   // 203\n                                                                                                                    // 204\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.                                          // 205\n// Returns a zero-length buffer for inputs that don't conform to the spec.                                          // 206\nfunction fromJsonObject (that, object) {                                                                            // 207\n  var array                                                                                                         // 208\n  var length = 0                                                                                                    // 209\n                                                                                                                    // 210\n  if (object.type === 'Buffer' && isArray(object.data)) {                                                           // 211\n    array = object.data                                                                                             // 212\n    length = checked(array.length) | 0                                                                              // 213\n  }                                                                                                                 // 214\n  that = allocate(that, length)                                                                                     // 215\n                                                                                                                    // 216\n  for (var i = 0; i < length; i += 1) {                                                                             // 217\n    that[i] = array[i] & 255                                                                                        // 218\n  }                                                                                                                 // 219\n  return that                                                                                                       // 220\n}                                                                                                                   // 221\n                                                                                                                    // 222\nif (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 223\n  Buffer.prototype.__proto__ = Uint8Array.prototype                                                                 // 224\n  Buffer.__proto__ = Uint8Array                                                                                     // 225\n  if (typeof Symbol !== 'undefined' && Symbol.species &&                                                            // 226\n      Buffer[Symbol.species] === Buffer) {                                                                          // 227\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97                                      // 228\n    Object.defineProperty(Buffer, Symbol.species, {                                                                 // 229\n      value: null,                                                                                                  // 230\n      configurable: true                                                                                            // 231\n    })                                                                                                              // 232\n  }                                                                                                                 // 233\n} else {                                                                                                            // 234\n  // pre-set for values that may exist in the future                                                                // 235\n  Buffer.prototype.length = undefined                                                                               // 236\n  Buffer.prototype.parent = undefined                                                                               // 237\n}                                                                                                                   // 238\n                                                                                                                    // 239\nfunction allocate (that, length) {                                                                                  // 240\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                 // 241\n    // Return an augmented `Uint8Array` instance, for best performance                                              // 242\n    that = new Uint8Array(length)                                                                                   // 243\n    that.__proto__ = Buffer.prototype                                                                               // 244\n  } else {                                                                                                          // 245\n    // Fallback: Return an object instance of the Buffer class                                                      // 246\n    that.length = length                                                                                            // 247\n  }                                                                                                                 // 248\n                                                                                                                    // 249\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1                                                    // 250\n  if (fromPool) that.parent = rootParent                                                                            // 251\n                                                                                                                    // 252\n  return that                                                                                                       // 253\n}                                                                                                                   // 254\n                                                                                                                    // 255\nfunction checked (length) {                                                                                         // 256\n  // Note: cannot use `length < kMaxLength` here because that fails when                                            // 257\n  // length is NaN (which is otherwise coerced to zero.)                                                            // 258\n  if (length >= kMaxLength()) {                                                                                     // 259\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +                                        // 260\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')                                         // 261\n  }                                                                                                                 // 262\n  return length | 0                                                                                                 // 263\n}                                                                                                                   // 264\n                                                                                                                    // 265\nfunction SlowBuffer (subject, encoding) {                                                                           // 266\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)                                       // 267\n                                                                                                                    // 268\n  var buf = new Buffer(subject, encoding)                                                                           // 269\n  delete buf.parent                                                                                                 // 270\n  return buf                                                                                                        // 271\n}                                                                                                                   // 272\n                                                                                                                    // 273\nBuffer.isBuffer = function isBuffer (b) {                                                                           // 274\n  return !!(b != null && b._isBuffer)                                                                               // 275\n}                                                                                                                   // 276\n                                                                                                                    // 277\nBuffer.compare = function compare (a, b) {                                                                          // 278\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {                                                                 // 279\n    throw new TypeError('Arguments must be Buffers')                                                                // 280\n  }                                                                                                                 // 281\n                                                                                                                    // 282\n  if (a === b) return 0                                                                                             // 283\n                                                                                                                    // 284\n  var x = a.length                                                                                                  // 285\n  var y = b.length                                                                                                  // 286\n                                                                                                                    // 287\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {                                                             // 288\n    if (a[i] !== b[i]) {                                                                                            // 289\n      x = a[i]                                                                                                      // 290\n      y = b[i]                                                                                                      // 291\n      break                                                                                                         // 292\n    }                                                                                                               // 293\n  }                                                                                                                 // 294\n                                                                                                                    // 295\n  if (x < y) return -1                                                                                              // 296\n  if (y < x) return 1                                                                                               // 297\n  return 0                                                                                                          // 298\n}                                                                                                                   // 299\n                                                                                                                    // 300\nBuffer.isEncoding = function isEncoding (encoding) {                                                                // 301\n  switch (String(encoding).toLowerCase()) {                                                                         // 302\n    case 'hex':                                                                                                     // 303\n    case 'utf8':                                                                                                    // 304\n    case 'utf-8':                                                                                                   // 305\n    case 'ascii':                                                                                                   // 306\n    case 'binary':                                                                                                  // 307\n    case 'base64':                                                                                                  // 308\n    case 'raw':                                                                                                     // 309\n    case 'ucs2':                                                                                                    // 310\n    case 'ucs-2':                                                                                                   // 311\n    case 'utf16le':                                                                                                 // 312\n    case 'utf-16le':                                                                                                // 313\n      return true                                                                                                   // 314\n    default:                                                                                                        // 315\n      return false                                                                                                  // 316\n  }                                                                                                                 // 317\n}                                                                                                                   // 318\n                                                                                                                    // 319\nBuffer.concat = function concat (list, length) {                                                                    // 320\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')                             // 321\n                                                                                                                    // 322\n  if (list.length === 0) {                                                                                          // 323\n    return new Buffer(0)                                                                                            // 324\n  }                                                                                                                 // 325\n                                                                                                                    // 326\n  var i                                                                                                             // 327\n  if (length === undefined) {                                                                                       // 328\n    length = 0                                                                                                      // 329\n    for (i = 0; i < list.length; i++) {                                                                             // 330\n      length += list[i].length                                                                                      // 331\n    }                                                                                                               // 332\n  }                                                                                                                 // 333\n                                                                                                                    // 334\n  var buf = new Buffer(length)                                                                                      // 335\n  var pos = 0                                                                                                       // 336\n  for (i = 0; i < list.length; i++) {                                                                               // 337\n    var item = list[i]                                                                                              // 338\n    item.copy(buf, pos)                                                                                             // 339\n    pos += item.length                                                                                              // 340\n  }                                                                                                                 // 341\n  return buf                                                                                                        // 342\n}                                                                                                                   // 343\n                                                                                                                    // 344\nfunction byteLength (string, encoding) {                                                                            // 345\n  if (typeof string !== 'string') string = '' + string                                                              // 346\n                                                                                                                    // 347\n  var len = string.length                                                                                           // 348\n  if (len === 0) return 0                                                                                           // 349\n                                                                                                                    // 350\n  // Use a for loop to avoid recursion                                                                              // 351\n  var loweredCase = false                                                                                           // 352\n  for (;;) {                                                                                                        // 353\n    switch (encoding) {                                                                                             // 354\n      case 'ascii':                                                                                                 // 355\n      case 'binary':                                                                                                // 356\n      // Deprecated                                                                                                 // 357\n      case 'raw':                                                                                                   // 358\n      case 'raws':                                                                                                  // 359\n        return len                                                                                                  // 360\n      case 'utf8':                                                                                                  // 361\n      case 'utf-8':                                                                                                 // 362\n        return utf8ToBytes(string).length                                                                           // 363\n      case 'ucs2':                                                                                                  // 364\n      case 'ucs-2':                                                                                                 // 365\n      case 'utf16le':                                                                                               // 366\n      case 'utf-16le':                                                                                              // 367\n        return len * 2                                                                                              // 368\n      case 'hex':                                                                                                   // 369\n        return len >>> 1                                                                                            // 370\n      case 'base64':                                                                                                // 371\n        return base64ToBytes(string).length                                                                         // 372\n      default:                                                                                                      // 373\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8                                           // 374\n        encoding = ('' + encoding).toLowerCase()                                                                    // 375\n        loweredCase = true                                                                                          // 376\n    }                                                                                                               // 377\n  }                                                                                                                 // 378\n}                                                                                                                   // 379\nBuffer.byteLength = byteLength                                                                                      // 380\n                                                                                                                    // 381\nfunction slowToString (encoding, start, end) {                                                                      // 382\n  var loweredCase = false                                                                                           // 383\n                                                                                                                    // 384\n  start = start | 0                                                                                                 // 385\n  end = end === undefined || end === Infinity ? this.length : end | 0                                               // 386\n                                                                                                                    // 387\n  if (!encoding) encoding = 'utf8'                                                                                  // 388\n  if (start < 0) start = 0                                                                                          // 389\n  if (end > this.length) end = this.length                                                                          // 390\n  if (end <= start) return ''                                                                                       // 391\n                                                                                                                    // 392\n  while (true) {                                                                                                    // 393\n    switch (encoding) {                                                                                             // 394\n      case 'hex':                                                                                                   // 395\n        return hexSlice(this, start, end)                                                                           // 396\n                                                                                                                    // 397\n      case 'utf8':                                                                                                  // 398\n      case 'utf-8':                                                                                                 // 399\n        return utf8Slice(this, start, end)                                                                          // 400\n                                                                                                                    // 401\n      case 'ascii':                                                                                                 // 402\n        return asciiSlice(this, start, end)                                                                         // 403\n                                                                                                                    // 404\n      case 'binary':                                                                                                // 405\n        return binarySlice(this, start, end)                                                                        // 406\n                                                                                                                    // 407\n      case 'base64':                                                                                                // 408\n        return base64Slice(this, start, end)                                                                        // 409\n                                                                                                                    // 410\n      case 'ucs2':                                                                                                  // 411\n      case 'ucs-2':                                                                                                 // 412\n      case 'utf16le':                                                                                               // 413\n      case 'utf-16le':                                                                                              // 414\n        return utf16leSlice(this, start, end)                                                                       // 415\n                                                                                                                    // 416\n      default:                                                                                                      // 417\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                       // 418\n        encoding = (encoding + '').toLowerCase()                                                                    // 419\n        loweredCase = true                                                                                          // 420\n    }                                                                                                               // 421\n  }                                                                                                                 // 422\n}                                                                                                                   // 423\n                                                                                                                    // 424\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect                              // 425\n// Buffer instances.                                                                                                // 426\nBuffer.prototype._isBuffer = true                                                                                   // 427\n                                                                                                                    // 428\nBuffer.prototype.toString = function toString () {                                                                  // 429\n  var length = this.length | 0                                                                                      // 430\n  if (length === 0) return ''                                                                                       // 431\n  if (arguments.length === 0) return utf8Slice(this, 0, length)                                                     // 432\n  return slowToString.apply(this, arguments)                                                                        // 433\n}                                                                                                                   // 434\n                                                                                                                    // 435\nBuffer.prototype.equals = function equals (b) {                                                                     // 436\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                         // 437\n  if (this === b) return true                                                                                       // 438\n  return Buffer.compare(this, b) === 0                                                                              // 439\n}                                                                                                                   // 440\n                                                                                                                    // 441\nBuffer.prototype.inspect = function inspect () {                                                                    // 442\n  var str = ''                                                                                                      // 443\n  var max = exports.INSPECT_MAX_BYTES                                                                               // 444\n  if (this.length > 0) {                                                                                            // 445\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')                                                     // 446\n    if (this.length > max) str += ' ... '                                                                           // 447\n  }                                                                                                                 // 448\n  return '<Buffer ' + str + '>'                                                                                     // 449\n}                                                                                                                   // 450\n                                                                                                                    // 451\nBuffer.prototype.compare = function compare (b) {                                                                   // 452\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                         // 453\n  return Buffer.compare(this, b)                                                                                    // 454\n}                                                                                                                   // 455\n                                                                                                                    // 456\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {                                                     // 457\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff                                                              // 458\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000                                                       // 459\n  byteOffset >>= 0                                                                                                  // 460\n                                                                                                                    // 461\n  if (this.length === 0) return -1                                                                                  // 462\n  if (byteOffset >= this.length) return -1                                                                          // 463\n                                                                                                                    // 464\n  // Negative offsets start from the end of the buffer                                                              // 465\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)                                            // 466\n                                                                                                                    // 467\n  if (typeof val === 'string') {                                                                                    // 468\n    if (val.length === 0) return -1 // special case: looking for empty string always fails                          // 469\n    return String.prototype.indexOf.call(this, val, byteOffset)                                                     // 470\n  }                                                                                                                 // 471\n  if (Buffer.isBuffer(val)) {                                                                                       // 472\n    return arrayIndexOf(this, val, byteOffset)                                                                      // 473\n  }                                                                                                                 // 474\n  if (typeof val === 'number') {                                                                                    // 475\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {                                // 476\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)                                               // 477\n    }                                                                                                               // 478\n    return arrayIndexOf(this, [ val ], byteOffset)                                                                  // 479\n  }                                                                                                                 // 480\n                                                                                                                    // 481\n  function arrayIndexOf (arr, val, byteOffset) {                                                                    // 482\n    var foundIndex = -1                                                                                             // 483\n    for (var i = 0; byteOffset + i < arr.length; i++) {                                                             // 484\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {                                    // 485\n        if (foundIndex === -1) foundIndex = i                                                                       // 486\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex                                       // 487\n      } else {                                                                                                      // 488\n        foundIndex = -1                                                                                             // 489\n      }                                                                                                             // 490\n    }                                                                                                               // 491\n    return -1                                                                                                       // 492\n  }                                                                                                                 // 493\n                                                                                                                    // 494\n  throw new TypeError('val must be string, number or Buffer')                                                       // 495\n}                                                                                                                   // 496\n                                                                                                                    // 497\nfunction hexWrite (buf, string, offset, length) {                                                                   // 498\n  offset = Number(offset) || 0                                                                                      // 499\n  var remaining = buf.length - offset                                                                               // 500\n  if (!length) {                                                                                                    // 501\n    length = remaining                                                                                              // 502\n  } else {                                                                                                          // 503\n    length = Number(length)                                                                                         // 504\n    if (length > remaining) {                                                                                       // 505\n      length = remaining                                                                                            // 506\n    }                                                                                                               // 507\n  }                                                                                                                 // 508\n                                                                                                                    // 509\n  // must be an even number of digits                                                                               // 510\n  var strLen = string.length                                                                                        // 511\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')                                                       // 512\n                                                                                                                    // 513\n  if (length > strLen / 2) {                                                                                        // 514\n    length = strLen / 2                                                                                             // 515\n  }                                                                                                                 // 516\n  for (var i = 0; i < length; i++) {                                                                                // 517\n    var parsed = parseInt(string.substr(i * 2, 2), 16)                                                              // 518\n    if (isNaN(parsed)) throw new Error('Invalid hex string')                                                        // 519\n    buf[offset + i] = parsed                                                                                        // 520\n  }                                                                                                                 // 521\n  return i                                                                                                          // 522\n}                                                                                                                   // 523\n                                                                                                                    // 524\nfunction utf8Write (buf, string, offset, length) {                                                                  // 525\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)                                  // 526\n}                                                                                                                   // 527\n                                                                                                                    // 528\nfunction asciiWrite (buf, string, offset, length) {                                                                 // 529\n  return blitBuffer(asciiToBytes(string), buf, offset, length)                                                      // 530\n}                                                                                                                   // 531\n                                                                                                                    // 532\nfunction binaryWrite (buf, string, offset, length) {                                                                // 533\n  return asciiWrite(buf, string, offset, length)                                                                    // 534\n}                                                                                                                   // 535\n                                                                                                                    // 536\nfunction base64Write (buf, string, offset, length) {                                                                // 537\n  return blitBuffer(base64ToBytes(string), buf, offset, length)                                                     // 538\n}                                                                                                                   // 539\n                                                                                                                    // 540\nfunction ucs2Write (buf, string, offset, length) {                                                                  // 541\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)                               // 542\n}                                                                                                                   // 543\n                                                                                                                    // 544\nBuffer.prototype.write = function write (string, offset, length, encoding) {                                        // 545\n  // Buffer#write(string)                                                                                           // 546\n  if (offset === undefined) {                                                                                       // 547\n    encoding = 'utf8'                                                                                               // 548\n    length = this.length                                                                                            // 549\n    offset = 0                                                                                                      // 550\n  // Buffer#write(string, encoding)                                                                                 // 551\n  } else if (length === undefined && typeof offset === 'string') {                                                  // 552\n    encoding = offset                                                                                               // 553\n    length = this.length                                                                                            // 554\n    offset = 0                                                                                                      // 555\n  // Buffer#write(string, offset[, length][, encoding])                                                             // 556\n  } else if (isFinite(offset)) {                                                                                    // 557\n    offset = offset | 0                                                                                             // 558\n    if (isFinite(length)) {                                                                                         // 559\n      length = length | 0                                                                                           // 560\n      if (encoding === undefined) encoding = 'utf8'                                                                 // 561\n    } else {                                                                                                        // 562\n      encoding = length                                                                                             // 563\n      length = undefined                                                                                            // 564\n    }                                                                                                               // 565\n  // legacy write(string, encoding, offset, length) - remove in v0.13                                               // 566\n  } else {                                                                                                          // 567\n    var swap = encoding                                                                                             // 568\n    encoding = offset                                                                                               // 569\n    offset = length | 0                                                                                             // 570\n    length = swap                                                                                                   // 571\n  }                                                                                                                 // 572\n                                                                                                                    // 573\n  var remaining = this.length - offset                                                                              // 574\n  if (length === undefined || length > remaining) length = remaining                                                // 575\n                                                                                                                    // 576\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {                                  // 577\n    throw new RangeError('attempt to write outside buffer bounds')                                                  // 578\n  }                                                                                                                 // 579\n                                                                                                                    // 580\n  if (!encoding) encoding = 'utf8'                                                                                  // 581\n                                                                                                                    // 582\n  var loweredCase = false                                                                                           // 583\n  for (;;) {                                                                                                        // 584\n    switch (encoding) {                                                                                             // 585\n      case 'hex':                                                                                                   // 586\n        return hexWrite(this, string, offset, length)                                                               // 587\n                                                                                                                    // 588\n      case 'utf8':                                                                                                  // 589\n      case 'utf-8':                                                                                                 // 590\n        return utf8Write(this, string, offset, length)                                                              // 591\n                                                                                                                    // 592\n      case 'ascii':                                                                                                 // 593\n        return asciiWrite(this, string, offset, length)                                                             // 594\n                                                                                                                    // 595\n      case 'binary':                                                                                                // 596\n        return binaryWrite(this, string, offset, length)                                                            // 597\n                                                                                                                    // 598\n      case 'base64':                                                                                                // 599\n        // Warning: maxLength not taken into account in base64Write                                                 // 600\n        return base64Write(this, string, offset, length)                                                            // 601\n                                                                                                                    // 602\n      case 'ucs2':                                                                                                  // 603\n      case 'ucs-2':                                                                                                 // 604\n      case 'utf16le':                                                                                               // 605\n      case 'utf-16le':                                                                                              // 606\n        return ucs2Write(this, string, offset, length)                                                              // 607\n                                                                                                                    // 608\n      default:                                                                                                      // 609\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                       // 610\n        encoding = ('' + encoding).toLowerCase()                                                                    // 611\n        loweredCase = true                                                                                          // 612\n    }                                                                                                               // 613\n  }                                                                                                                 // 614\n}                                                                                                                   // 615\n                                                                                                                    // 616\nBuffer.prototype.toJSON = function toJSON () {                                                                      // 617\n  return {                                                                                                          // 618\n    type: 'Buffer',                                                                                                 // 619\n    data: Array.prototype.slice.call(this._arr || this, 0)                                                          // 620\n  }                                                                                                                 // 621\n}                                                                                                                   // 622\n                                                                                                                    // 623\nfunction base64Slice (buf, start, end) {                                                                            // 624\n  if (start === 0 && end === buf.length) {                                                                          // 625\n    return base64.fromByteArray(buf)                                                                                // 626\n  } else {                                                                                                          // 627\n    return base64.fromByteArray(buf.slice(start, end))                                                              // 628\n  }                                                                                                                 // 629\n}                                                                                                                   // 630\n                                                                                                                    // 631\nfunction utf8Slice (buf, start, end) {                                                                              // 632\n  end = Math.min(buf.length, end)                                                                                   // 633\n  var res = []                                                                                                      // 634\n                                                                                                                    // 635\n  var i = start                                                                                                     // 636\n  while (i < end) {                                                                                                 // 637\n    var firstByte = buf[i]                                                                                          // 638\n    var codePoint = null                                                                                            // 639\n    var bytesPerSequence = (firstByte > 0xEF) ? 4                                                                   // 640\n      : (firstByte > 0xDF) ? 3                                                                                      // 641\n      : (firstByte > 0xBF) ? 2                                                                                      // 642\n      : 1                                                                                                           // 643\n                                                                                                                    // 644\n    if (i + bytesPerSequence <= end) {                                                                              // 645\n      var secondByte, thirdByte, fourthByte, tempCodePoint                                                          // 646\n                                                                                                                    // 647\n      switch (bytesPerSequence) {                                                                                   // 648\n        case 1:                                                                                                     // 649\n          if (firstByte < 0x80) {                                                                                   // 650\n            codePoint = firstByte                                                                                   // 651\n          }                                                                                                         // 652\n          break                                                                                                     // 653\n        case 2:                                                                                                     // 654\n          secondByte = buf[i + 1]                                                                                   // 655\n          if ((secondByte & 0xC0) === 0x80) {                                                                       // 656\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)                                         // 657\n            if (tempCodePoint > 0x7F) {                                                                             // 658\n              codePoint = tempCodePoint                                                                             // 659\n            }                                                                                                       // 660\n          }                                                                                                         // 661\n          break                                                                                                     // 662\n        case 3:                                                                                                     // 663\n          secondByte = buf[i + 1]                                                                                   // 664\n          thirdByte = buf[i + 2]                                                                                    // 665\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {                                        // 666\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)              // 667\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {                      // 668\n              codePoint = tempCodePoint                                                                             // 669\n            }                                                                                                       // 670\n          }                                                                                                         // 671\n          break                                                                                                     // 672\n        case 4:                                                                                                     // 673\n          secondByte = buf[i + 1]                                                                                   // 674\n          thirdByte = buf[i + 2]                                                                                    // 675\n          fourthByte = buf[i + 3]                                                                                   // 676\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {        // 677\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {                                               // 679\n              codePoint = tempCodePoint                                                                             // 680\n            }                                                                                                       // 681\n          }                                                                                                         // 682\n      }                                                                                                             // 683\n    }                                                                                                               // 684\n                                                                                                                    // 685\n    if (codePoint === null) {                                                                                       // 686\n      // we did not generate a valid codePoint so insert a                                                          // 687\n      // replacement char (U+FFFD) and advance only 1 byte                                                          // 688\n      codePoint = 0xFFFD                                                                                            // 689\n      bytesPerSequence = 1                                                                                          // 690\n    } else if (codePoint > 0xFFFF) {                                                                                // 691\n      // encode to utf16 (surrogate pair dance)                                                                     // 692\n      codePoint -= 0x10000                                                                                          // 693\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)                                                                   // 694\n      codePoint = 0xDC00 | codePoint & 0x3FF                                                                        // 695\n    }                                                                                                               // 696\n                                                                                                                    // 697\n    res.push(codePoint)                                                                                             // 698\n    i += bytesPerSequence                                                                                           // 699\n  }                                                                                                                 // 700\n                                                                                                                    // 701\n  return decodeCodePointsArray(res)                                                                                 // 702\n}                                                                                                                   // 703\n                                                                                                                    // 704\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with                                            // 705\n// the lowest limit is Chrome, with 0x10000 args.                                                                   // 706\n// We go 1 magnitude less, for safety                                                                               // 707\nvar MAX_ARGUMENTS_LENGTH = 0x1000                                                                                   // 708\n                                                                                                                    // 709\nfunction decodeCodePointsArray (codePoints) {                                                                       // 710\n  var len = codePoints.length                                                                                       // 711\n  if (len <= MAX_ARGUMENTS_LENGTH) {                                                                                // 712\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()                                     // 713\n  }                                                                                                                 // 714\n                                                                                                                    // 715\n  // Decode in chunks to avoid \"call stack size exceeded\".                                                          // 716\n  var res = ''                                                                                                      // 717\n  var i = 0                                                                                                         // 718\n  while (i < len) {                                                                                                 // 719\n    res += String.fromCharCode.apply(                                                                               // 720\n      String,                                                                                                       // 721\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)                                                                // 722\n    )                                                                                                               // 723\n  }                                                                                                                 // 724\n  return res                                                                                                        // 725\n}                                                                                                                   // 726\n                                                                                                                    // 727\nfunction asciiSlice (buf, start, end) {                                                                             // 728\n  var ret = ''                                                                                                      // 729\n  end = Math.min(buf.length, end)                                                                                   // 730\n                                                                                                                    // 731\n  for (var i = start; i < end; i++) {                                                                               // 732\n    ret += String.fromCharCode(buf[i] & 0x7F)                                                                       // 733\n  }                                                                                                                 // 734\n  return ret                                                                                                        // 735\n}                                                                                                                   // 736\n                                                                                                                    // 737\nfunction binarySlice (buf, start, end) {                                                                            // 738\n  var ret = ''                                                                                                      // 739\n  end = Math.min(buf.length, end)                                                                                   // 740\n                                                                                                                    // 741\n  for (var i = start; i < end; i++) {                                                                               // 742\n    ret += String.fromCharCode(buf[i])                                                                              // 743\n  }                                                                                                                 // 744\n  return ret                                                                                                        // 745\n}                                                                                                                   // 746\n                                                                                                                    // 747\nfunction hexSlice (buf, start, end) {                                                                               // 748\n  var len = buf.length                                                                                              // 749\n                                                                                                                    // 750\n  if (!start || start < 0) start = 0                                                                                // 751\n  if (!end || end < 0 || end > len) end = len                                                                       // 752\n                                                                                                                    // 753\n  var out = ''                                                                                                      // 754\n  for (var i = start; i < end; i++) {                                                                               // 755\n    out += toHex(buf[i])                                                                                            // 756\n  }                                                                                                                 // 757\n  return out                                                                                                        // 758\n}                                                                                                                   // 759\n                                                                                                                    // 760\nfunction utf16leSlice (buf, start, end) {                                                                           // 761\n  var bytes = buf.slice(start, end)                                                                                 // 762\n  var res = ''                                                                                                      // 763\n  for (var i = 0; i < bytes.length; i += 2) {                                                                       // 764\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)                                                       // 765\n  }                                                                                                                 // 766\n  return res                                                                                                        // 767\n}                                                                                                                   // 768\n                                                                                                                    // 769\nBuffer.prototype.slice = function slice (start, end) {                                                              // 770\n  var len = this.length                                                                                             // 771\n  start = ~~start                                                                                                   // 772\n  end = end === undefined ? len : ~~end                                                                             // 773\n                                                                                                                    // 774\n  if (start < 0) {                                                                                                  // 775\n    start += len                                                                                                    // 776\n    if (start < 0) start = 0                                                                                        // 777\n  } else if (start > len) {                                                                                         // 778\n    start = len                                                                                                     // 779\n  }                                                                                                                 // 780\n                                                                                                                    // 781\n  if (end < 0) {                                                                                                    // 782\n    end += len                                                                                                      // 783\n    if (end < 0) end = 0                                                                                            // 784\n  } else if (end > len) {                                                                                           // 785\n    end = len                                                                                                       // 786\n  }                                                                                                                 // 787\n                                                                                                                    // 788\n  if (end < start) end = start                                                                                      // 789\n                                                                                                                    // 790\n  var newBuf                                                                                                        // 791\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                 // 792\n    newBuf = this.subarray(start, end)                                                                              // 793\n    newBuf.__proto__ = Buffer.prototype                                                                             // 794\n  } else {                                                                                                          // 795\n    var sliceLen = end - start                                                                                      // 796\n    newBuf = new Buffer(sliceLen, undefined)                                                                        // 797\n    for (var i = 0; i < sliceLen; i++) {                                                                            // 798\n      newBuf[i] = this[i + start]                                                                                   // 799\n    }                                                                                                               // 800\n  }                                                                                                                 // 801\n                                                                                                                    // 802\n  if (newBuf.length) newBuf.parent = this.parent || this                                                            // 803\n                                                                                                                    // 804\n  return newBuf                                                                                                     // 805\n}                                                                                                                   // 806\n                                                                                                                    // 807\n/*                                                                                                                  // 808\n * Need to make sure that buffer isn't trying to write out of bounds.                                               // 809\n */                                                                                                                 // 810\nfunction checkOffset (offset, ext, length) {                                                                        // 811\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')                                  // 812\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')                          // 813\n}                                                                                                                   // 814\n                                                                                                                    // 815\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {                                  // 816\n  offset = offset | 0                                                                                               // 817\n  byteLength = byteLength | 0                                                                                       // 818\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                       // 819\n                                                                                                                    // 820\n  var val = this[offset]                                                                                            // 821\n  var mul = 1                                                                                                       // 822\n  var i = 0                                                                                                         // 823\n  while (++i < byteLength && (mul *= 0x100)) {                                                                      // 824\n    val += this[offset + i] * mul                                                                                   // 825\n  }                                                                                                                 // 826\n                                                                                                                    // 827\n  return val                                                                                                        // 828\n}                                                                                                                   // 829\n                                                                                                                    // 830\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {                                  // 831\n  offset = offset | 0                                                                                               // 832\n  byteLength = byteLength | 0                                                                                       // 833\n  if (!noAssert) {                                                                                                  // 834\n    checkOffset(offset, byteLength, this.length)                                                                    // 835\n  }                                                                                                                 // 836\n                                                                                                                    // 837\n  var val = this[offset + --byteLength]                                                                             // 838\n  var mul = 1                                                                                                       // 839\n  while (byteLength > 0 && (mul *= 0x100)) {                                                                        // 840\n    val += this[offset + --byteLength] * mul                                                                        // 841\n  }                                                                                                                 // 842\n                                                                                                                    // 843\n  return val                                                                                                        // 844\n}                                                                                                                   // 845\n                                                                                                                    // 846\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {                                                // 847\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                                // 848\n  return this[offset]                                                                                               // 849\n}                                                                                                                   // 850\n                                                                                                                    // 851\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {                                          // 852\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                // 853\n  return this[offset] | (this[offset + 1] << 8)                                                                     // 854\n}                                                                                                                   // 855\n                                                                                                                    // 856\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {                                          // 857\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                // 858\n  return (this[offset] << 8) | this[offset + 1]                                                                     // 859\n}                                                                                                                   // 860\n                                                                                                                    // 861\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {                                          // 862\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                // 863\n                                                                                                                    // 864\n  return ((this[offset]) |                                                                                          // 865\n      (this[offset + 1] << 8) |                                                                                     // 866\n      (this[offset + 2] << 16)) +                                                                                   // 867\n      (this[offset + 3] * 0x1000000)                                                                                // 868\n}                                                                                                                   // 869\n                                                                                                                    // 870\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {                                          // 871\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                // 872\n                                                                                                                    // 873\n  return (this[offset] * 0x1000000) +                                                                               // 874\n    ((this[offset + 1] << 16) |                                                                                     // 875\n    (this[offset + 2] << 8) |                                                                                       // 876\n    this[offset + 3])                                                                                               // 877\n}                                                                                                                   // 878\n                                                                                                                    // 879\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {                                    // 880\n  offset = offset | 0                                                                                               // 881\n  byteLength = byteLength | 0                                                                                       // 882\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                       // 883\n                                                                                                                    // 884\n  var val = this[offset]                                                                                            // 885\n  var mul = 1                                                                                                       // 886\n  var i = 0                                                                                                         // 887\n  while (++i < byteLength && (mul *= 0x100)) {                                                                      // 888\n    val += this[offset + i] * mul                                                                                   // 889\n  }                                                                                                                 // 890\n  mul *= 0x80                                                                                                       // 891\n                                                                                                                    // 892\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                // 893\n                                                                                                                    // 894\n  return val                                                                                                        // 895\n}                                                                                                                   // 896\n                                                                                                                    // 897\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {                                    // 898\n  offset = offset | 0                                                                                               // 899\n  byteLength = byteLength | 0                                                                                       // 900\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                       // 901\n                                                                                                                    // 902\n  var i = byteLength                                                                                                // 903\n  var mul = 1                                                                                                       // 904\n  var val = this[offset + --i]                                                                                      // 905\n  while (i > 0 && (mul *= 0x100)) {                                                                                 // 906\n    val += this[offset + --i] * mul                                                                                 // 907\n  }                                                                                                                 // 908\n  mul *= 0x80                                                                                                       // 909\n                                                                                                                    // 910\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                // 911\n                                                                                                                    // 912\n  return val                                                                                                        // 913\n}                                                                                                                   // 914\n                                                                                                                    // 915\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {                                                  // 916\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                                // 917\n  if (!(this[offset] & 0x80)) return (this[offset])                                                                 // 918\n  return ((0xff - this[offset] + 1) * -1)                                                                           // 919\n}                                                                                                                   // 920\n                                                                                                                    // 921\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {                                            // 922\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                // 923\n  var val = this[offset] | (this[offset + 1] << 8)                                                                  // 924\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                    // 925\n}                                                                                                                   // 926\n                                                                                                                    // 927\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {                                            // 928\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                // 929\n  var val = this[offset + 1] | (this[offset] << 8)                                                                  // 930\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                    // 931\n}                                                                                                                   // 932\n                                                                                                                    // 933\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {                                            // 934\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                // 935\n                                                                                                                    // 936\n  return (this[offset]) |                                                                                           // 937\n    (this[offset + 1] << 8) |                                                                                       // 938\n    (this[offset + 2] << 16) |                                                                                      // 939\n    (this[offset + 3] << 24)                                                                                        // 940\n}                                                                                                                   // 941\n                                                                                                                    // 942\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {                                            // 943\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                // 944\n                                                                                                                    // 945\n  return (this[offset] << 24) |                                                                                     // 946\n    (this[offset + 1] << 16) |                                                                                      // 947\n    (this[offset + 2] << 8) |                                                                                       // 948\n    (this[offset + 3])                                                                                              // 949\n}                                                                                                                   // 950\n                                                                                                                    // 951\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {                                            // 952\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                // 953\n  return ieee754.read(this, offset, true, 23, 4)                                                                    // 954\n}                                                                                                                   // 955\n                                                                                                                    // 956\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {                                            // 957\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                // 958\n  return ieee754.read(this, offset, false, 23, 4)                                                                   // 959\n}                                                                                                                   // 960\n                                                                                                                    // 961\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {                                          // 962\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                                // 963\n  return ieee754.read(this, offset, true, 52, 8)                                                                    // 964\n}                                                                                                                   // 965\n                                                                                                                    // 966\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {                                          // 967\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                                // 968\n  return ieee754.read(this, offset, false, 52, 8)                                                                   // 969\n}                                                                                                                   // 970\n                                                                                                                    // 971\nfunction checkInt (buf, value, offset, ext, max, min) {                                                             // 972\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')                                // 973\n  if (value > max || value < min) throw new RangeError('value is out of bounds')                                    // 974\n  if (offset + ext > buf.length) throw new RangeError('index out of range')                                         // 975\n}                                                                                                                   // 976\n                                                                                                                    // 977\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {                         // 978\n  value = +value                                                                                                    // 979\n  offset = offset | 0                                                                                               // 980\n  byteLength = byteLength | 0                                                                                       // 981\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                          // 982\n                                                                                                                    // 983\n  var mul = 1                                                                                                       // 984\n  var i = 0                                                                                                         // 985\n  this[offset] = value & 0xFF                                                                                       // 986\n  while (++i < byteLength && (mul *= 0x100)) {                                                                      // 987\n    this[offset + i] = (value / mul) & 0xFF                                                                         // 988\n  }                                                                                                                 // 989\n                                                                                                                    // 990\n  return offset + byteLength                                                                                        // 991\n}                                                                                                                   // 992\n                                                                                                                    // 993\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {                         // 994\n  value = +value                                                                                                    // 995\n  offset = offset | 0                                                                                               // 996\n  byteLength = byteLength | 0                                                                                       // 997\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                          // 998\n                                                                                                                    // 999\n  var i = byteLength - 1                                                                                            // 1000\n  var mul = 1                                                                                                       // 1001\n  this[offset + i] = value & 0xFF                                                                                   // 1002\n  while (--i >= 0 && (mul *= 0x100)) {                                                                              // 1003\n    this[offset + i] = (value / mul) & 0xFF                                                                         // 1004\n  }                                                                                                                 // 1005\n                                                                                                                    // 1006\n  return offset + byteLength                                                                                        // 1007\n}                                                                                                                   // 1008\n                                                                                                                    // 1009\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {                                       // 1010\n  value = +value                                                                                                    // 1011\n  offset = offset | 0                                                                                               // 1012\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)                                                          // 1013\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                        // 1014\n  this[offset] = (value & 0xff)                                                                                     // 1015\n  return offset + 1                                                                                                 // 1016\n}                                                                                                                   // 1017\n                                                                                                                    // 1018\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {                                                     // 1019\n  if (value < 0) value = 0xffff + value + 1                                                                         // 1020\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {                                               // 1021\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                                      // 1022\n      (littleEndian ? i : 1 - i) * 8                                                                                // 1023\n  }                                                                                                                 // 1024\n}                                                                                                                   // 1025\n                                                                                                                    // 1026\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {                                 // 1027\n  value = +value                                                                                                    // 1028\n  offset = offset | 0                                                                                               // 1029\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                        // 1030\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                 // 1031\n    this[offset] = (value & 0xff)                                                                                   // 1032\n    this[offset + 1] = (value >>> 8)                                                                                // 1033\n  } else {                                                                                                          // 1034\n    objectWriteUInt16(this, value, offset, true)                                                                    // 1035\n  }                                                                                                                 // 1036\n  return offset + 2                                                                                                 // 1037\n}                                                                                                                   // 1038\n                                                                                                                    // 1039\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {                                 // 1040\n  value = +value                                                                                                    // 1041\n  offset = offset | 0                                                                                               // 1042\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                        // 1043\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                 // 1044\n    this[offset] = (value >>> 8)                                                                                    // 1045\n    this[offset + 1] = (value & 0xff)                                                                               // 1046\n  } else {                                                                                                          // 1047\n    objectWriteUInt16(this, value, offset, false)                                                                   // 1048\n  }                                                                                                                 // 1049\n  return offset + 2                                                                                                 // 1050\n}                                                                                                                   // 1051\n                                                                                                                    // 1052\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {                                                     // 1053\n  if (value < 0) value = 0xffffffff + value + 1                                                                     // 1054\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {                                               // 1055\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                             // 1056\n  }                                                                                                                 // 1057\n}                                                                                                                   // 1058\n                                                                                                                    // 1059\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {                                 // 1060\n  value = +value                                                                                                    // 1061\n  offset = offset | 0                                                                                               // 1062\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                    // 1063\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                 // 1064\n    this[offset + 3] = (value >>> 24)                                                                               // 1065\n    this[offset + 2] = (value >>> 16)                                                                               // 1066\n    this[offset + 1] = (value >>> 8)                                                                                // 1067\n    this[offset] = (value & 0xff)                                                                                   // 1068\n  } else {                                                                                                          // 1069\n    objectWriteUInt32(this, value, offset, true)                                                                    // 1070\n  }                                                                                                                 // 1071\n  return offset + 4                                                                                                 // 1072\n}                                                                                                                   // 1073\n                                                                                                                    // 1074\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {                                 // 1075\n  value = +value                                                                                                    // 1076\n  offset = offset | 0                                                                                               // 1077\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                    // 1078\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                 // 1079\n    this[offset] = (value >>> 24)                                                                                   // 1080\n    this[offset + 1] = (value >>> 16)                                                                               // 1081\n    this[offset + 2] = (value >>> 8)                                                                                // 1082\n    this[offset + 3] = (value & 0xff)                                                                               // 1083\n  } else {                                                                                                          // 1084\n    objectWriteUInt32(this, value, offset, false)                                                                   // 1085\n  }                                                                                                                 // 1086\n  return offset + 4                                                                                                 // 1087\n}                                                                                                                   // 1088\n                                                                                                                    // 1089\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {                           // 1090\n  value = +value                                                                                                    // 1091\n  offset = offset | 0                                                                                               // 1092\n  if (!noAssert) {                                                                                                  // 1093\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                                     // 1094\n                                                                                                                    // 1095\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                    // 1096\n  }                                                                                                                 // 1097\n                                                                                                                    // 1098\n  var i = 0                                                                                                         // 1099\n  var mul = 1                                                                                                       // 1100\n  var sub = value < 0 ? 1 : 0                                                                                       // 1101\n  this[offset] = value & 0xFF                                                                                       // 1102\n  while (++i < byteLength && (mul *= 0x100)) {                                                                      // 1103\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                            // 1104\n  }                                                                                                                 // 1105\n                                                                                                                    // 1106\n  return offset + byteLength                                                                                        // 1107\n}                                                                                                                   // 1108\n                                                                                                                    // 1109\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {                           // 1110\n  value = +value                                                                                                    // 1111\n  offset = offset | 0                                                                                               // 1112\n  if (!noAssert) {                                                                                                  // 1113\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                                     // 1114\n                                                                                                                    // 1115\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                    // 1116\n  }                                                                                                                 // 1117\n                                                                                                                    // 1118\n  var i = byteLength - 1                                                                                            // 1119\n  var mul = 1                                                                                                       // 1120\n  var sub = value < 0 ? 1 : 0                                                                                       // 1121\n  this[offset + i] = value & 0xFF                                                                                   // 1122\n  while (--i >= 0 && (mul *= 0x100)) {                                                                              // 1123\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                            // 1124\n  }                                                                                                                 // 1125\n                                                                                                                    // 1126\n  return offset + byteLength                                                                                        // 1127\n}                                                                                                                   // 1128\n                                                                                                                    // 1129\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {                                         // 1130\n  value = +value                                                                                                    // 1131\n  offset = offset | 0                                                                                               // 1132\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)                                                      // 1133\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                        // 1134\n  if (value < 0) value = 0xff + value + 1                                                                           // 1135\n  this[offset] = (value & 0xff)                                                                                     // 1136\n  return offset + 1                                                                                                 // 1137\n}                                                                                                                   // 1138\n                                                                                                                    // 1139\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {                                   // 1140\n  value = +value                                                                                                    // 1141\n  offset = offset | 0                                                                                               // 1142\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                  // 1143\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                 // 1144\n    this[offset] = (value & 0xff)                                                                                   // 1145\n    this[offset + 1] = (value >>> 8)                                                                                // 1146\n  } else {                                                                                                          // 1147\n    objectWriteUInt16(this, value, offset, true)                                                                    // 1148\n  }                                                                                                                 // 1149\n  return offset + 2                                                                                                 // 1150\n}                                                                                                                   // 1151\n                                                                                                                    // 1152\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {                                   // 1153\n  value = +value                                                                                                    // 1154\n  offset = offset | 0                                                                                               // 1155\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                  // 1156\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                 // 1157\n    this[offset] = (value >>> 8)                                                                                    // 1158\n    this[offset + 1] = (value & 0xff)                                                                               // 1159\n  } else {                                                                                                          // 1160\n    objectWriteUInt16(this, value, offset, false)                                                                   // 1161\n  }                                                                                                                 // 1162\n  return offset + 2                                                                                                 // 1163\n}                                                                                                                   // 1164\n                                                                                                                    // 1165\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {                                   // 1166\n  value = +value                                                                                                    // 1167\n  offset = offset | 0                                                                                               // 1168\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                          // 1169\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                 // 1170\n    this[offset] = (value & 0xff)                                                                                   // 1171\n    this[offset + 1] = (value >>> 8)                                                                                // 1172\n    this[offset + 2] = (value >>> 16)                                                                               // 1173\n    this[offset + 3] = (value >>> 24)                                                                               // 1174\n  } else {                                                                                                          // 1175\n    objectWriteUInt32(this, value, offset, true)                                                                    // 1176\n  }                                                                                                                 // 1177\n  return offset + 4                                                                                                 // 1178\n}                                                                                                                   // 1179\n                                                                                                                    // 1180\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {                                   // 1181\n  value = +value                                                                                                    // 1182\n  offset = offset | 0                                                                                               // 1183\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                          // 1184\n  if (value < 0) value = 0xffffffff + value + 1                                                                     // 1185\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                 // 1186\n    this[offset] = (value >>> 24)                                                                                   // 1187\n    this[offset + 1] = (value >>> 16)                                                                               // 1188\n    this[offset + 2] = (value >>> 8)                                                                                // 1189\n    this[offset + 3] = (value & 0xff)                                                                               // 1190\n  } else {                                                                                                          // 1191\n    objectWriteUInt32(this, value, offset, false)                                                                   // 1192\n  }                                                                                                                 // 1193\n  return offset + 4                                                                                                 // 1194\n}                                                                                                                   // 1195\n                                                                                                                    // 1196\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {                                                         // 1197\n  if (offset + ext > buf.length) throw new RangeError('index out of range')                                         // 1198\n  if (offset < 0) throw new RangeError('index out of range')                                                        // 1199\n}                                                                                                                   // 1200\n                                                                                                                    // 1201\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {                                                  // 1202\n  if (!noAssert) {                                                                                                  // 1203\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)                            // 1204\n  }                                                                                                                 // 1205\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                            // 1206\n  return offset + 4                                                                                                 // 1207\n}                                                                                                                   // 1208\n                                                                                                                    // 1209\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {                                   // 1210\n  return writeFloat(this, value, offset, true, noAssert)                                                            // 1211\n}                                                                                                                   // 1212\n                                                                                                                    // 1213\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {                                   // 1214\n  return writeFloat(this, value, offset, false, noAssert)                                                           // 1215\n}                                                                                                                   // 1216\n                                                                                                                    // 1217\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {                                                 // 1218\n  if (!noAssert) {                                                                                                  // 1219\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)                          // 1220\n  }                                                                                                                 // 1221\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                            // 1222\n  return offset + 8                                                                                                 // 1223\n}                                                                                                                   // 1224\n                                                                                                                    // 1225\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {                                 // 1226\n  return writeDouble(this, value, offset, true, noAssert)                                                           // 1227\n}                                                                                                                   // 1228\n                                                                                                                    // 1229\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {                                 // 1230\n  return writeDouble(this, value, offset, false, noAssert)                                                          // 1231\n}                                                                                                                   // 1232\n                                                                                                                    // 1233\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)                                        // 1234\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {                                           // 1235\n  if (!start) start = 0                                                                                             // 1236\n  if (!end && end !== 0) end = this.length                                                                          // 1237\n  if (targetStart >= target.length) targetStart = target.length                                                     // 1238\n  if (!targetStart) targetStart = 0                                                                                 // 1239\n  if (end > 0 && end < start) end = start                                                                           // 1240\n                                                                                                                    // 1241\n  // Copy 0 bytes; we're done                                                                                       // 1242\n  if (end === start) return 0                                                                                       // 1243\n  if (target.length === 0 || this.length === 0) return 0                                                            // 1244\n                                                                                                                    // 1245\n  // Fatal error conditions                                                                                         // 1246\n  if (targetStart < 0) {                                                                                            // 1247\n    throw new RangeError('targetStart out of bounds')                                                               // 1248\n  }                                                                                                                 // 1249\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')                          // 1250\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')                                                      // 1251\n                                                                                                                    // 1252\n  // Are we oob?                                                                                                    // 1253\n  if (end > this.length) end = this.length                                                                          // 1254\n  if (target.length - targetStart < end - start) {                                                                  // 1255\n    end = target.length - targetStart + start                                                                       // 1256\n  }                                                                                                                 // 1257\n                                                                                                                    // 1258\n  var len = end - start                                                                                             // 1259\n  var i                                                                                                             // 1260\n                                                                                                                    // 1261\n  if (this === target && start < targetStart && targetStart < end) {                                                // 1262\n    // descending copy from end                                                                                     // 1263\n    for (i = len - 1; i >= 0; i--) {                                                                                // 1264\n      target[i + targetStart] = this[i + start]                                                                     // 1265\n    }                                                                                                               // 1266\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {                                                           // 1267\n    // ascending copy from start                                                                                    // 1268\n    for (i = 0; i < len; i++) {                                                                                     // 1269\n      target[i + targetStart] = this[i + start]                                                                     // 1270\n    }                                                                                                               // 1271\n  } else {                                                                                                          // 1272\n    Uint8Array.prototype.set.call(                                                                                  // 1273\n      target,                                                                                                       // 1274\n      this.subarray(start, start + len),                                                                            // 1275\n      targetStart                                                                                                   // 1276\n    )                                                                                                               // 1277\n  }                                                                                                                 // 1278\n                                                                                                                    // 1279\n  return len                                                                                                        // 1280\n}                                                                                                                   // 1281\n                                                                                                                    // 1282\n// fill(value, start=0, end=buffer.length)                                                                          // 1283\nBuffer.prototype.fill = function fill (value, start, end) {                                                         // 1284\n  if (!value) value = 0                                                                                             // 1285\n  if (!start) start = 0                                                                                             // 1286\n  if (!end) end = this.length                                                                                       // 1287\n                                                                                                                    // 1288\n  if (end < start) throw new RangeError('end < start')                                                              // 1289\n                                                                                                                    // 1290\n  // Fill 0 bytes; we're done                                                                                       // 1291\n  if (end === start) return                                                                                         // 1292\n  if (this.length === 0) return                                                                                     // 1293\n                                                                                                                    // 1294\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')                                // 1295\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')                                       // 1296\n                                                                                                                    // 1297\n  var i                                                                                                             // 1298\n  if (typeof value === 'number') {                                                                                  // 1299\n    for (i = start; i < end; i++) {                                                                                 // 1300\n      this[i] = value                                                                                               // 1301\n    }                                                                                                               // 1302\n  } else {                                                                                                          // 1303\n    var bytes = utf8ToBytes(value.toString())                                                                       // 1304\n    var len = bytes.length                                                                                          // 1305\n    for (i = start; i < end; i++) {                                                                                 // 1306\n      this[i] = bytes[i % len]                                                                                      // 1307\n    }                                                                                                               // 1308\n  }                                                                                                                 // 1309\n                                                                                                                    // 1310\n  return this                                                                                                       // 1311\n}                                                                                                                   // 1312\n                                                                                                                    // 1313\n// HELPER FUNCTIONS                                                                                                 // 1314\n// ================                                                                                                 // 1315\n                                                                                                                    // 1316\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g                                                                        // 1317\n                                                                                                                    // 1318\nfunction base64clean (str) {                                                                                        // 1319\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not                          // 1320\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')                                                              // 1321\n  // Node converts strings with length < 2 to ''                                                                    // 1322\n  if (str.length < 2) return ''                                                                                     // 1323\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not                           // 1324\n  while (str.length % 4 !== 0) {                                                                                    // 1325\n    str = str + '='                                                                                                 // 1326\n  }                                                                                                                 // 1327\n  return str                                                                                                        // 1328\n}                                                                                                                   // 1329\n                                                                                                                    // 1330\nfunction stringtrim (str) {                                                                                         // 1331\n  if (str.trim) return str.trim()                                                                                   // 1332\n  return str.replace(/^\\s+|\\s+$/g, '')                                                                              // 1333\n}                                                                                                                   // 1334\n                                                                                                                    // 1335\nfunction toHex (n) {                                                                                                // 1336\n  if (n < 16) return '0' + n.toString(16)                                                                           // 1337\n  return n.toString(16)                                                                                             // 1338\n}                                                                                                                   // 1339\n                                                                                                                    // 1340\nfunction utf8ToBytes (string, units) {                                                                              // 1341\n  units = units || Infinity                                                                                         // 1342\n  var codePoint                                                                                                     // 1343\n  var length = string.length                                                                                        // 1344\n  var leadSurrogate = null                                                                                          // 1345\n  var bytes = []                                                                                                    // 1346\n                                                                                                                    // 1347\n  for (var i = 0; i < length; i++) {                                                                                // 1348\n    codePoint = string.charCodeAt(i)                                                                                // 1349\n                                                                                                                    // 1350\n    // is surrogate component                                                                                       // 1351\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {                                                                 // 1352\n      // last char was a lead                                                                                       // 1353\n      if (!leadSurrogate) {                                                                                         // 1354\n        // no lead yet                                                                                              // 1355\n        if (codePoint > 0xDBFF) {                                                                                   // 1356\n          // unexpected trail                                                                                       // 1357\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                       // 1358\n          continue                                                                                                  // 1359\n        } else if (i + 1 === length) {                                                                              // 1360\n          // unpaired lead                                                                                          // 1361\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                       // 1362\n          continue                                                                                                  // 1363\n        }                                                                                                           // 1364\n                                                                                                                    // 1365\n        // valid lead                                                                                               // 1366\n        leadSurrogate = codePoint                                                                                   // 1367\n                                                                                                                    // 1368\n        continue                                                                                                    // 1369\n      }                                                                                                             // 1370\n                                                                                                                    // 1371\n      // 2 leads in a row                                                                                           // 1372\n      if (codePoint < 0xDC00) {                                                                                     // 1373\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                         // 1374\n        leadSurrogate = codePoint                                                                                   // 1375\n        continue                                                                                                    // 1376\n      }                                                                                                             // 1377\n                                                                                                                    // 1378\n      // valid surrogate pair                                                                                       // 1379\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000                                     // 1380\n    } else if (leadSurrogate) {                                                                                     // 1381\n      // valid bmp char, but last char was a lead                                                                   // 1382\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                           // 1383\n    }                                                                                                               // 1384\n                                                                                                                    // 1385\n    leadSurrogate = null                                                                                            // 1386\n                                                                                                                    // 1387\n    // encode utf8                                                                                                  // 1388\n    if (codePoint < 0x80) {                                                                                         // 1389\n      if ((units -= 1) < 0) break                                                                                   // 1390\n      bytes.push(codePoint)                                                                                         // 1391\n    } else if (codePoint < 0x800) {                                                                                 // 1392\n      if ((units -= 2) < 0) break                                                                                   // 1393\n      bytes.push(                                                                                                   // 1394\n        codePoint >> 0x6 | 0xC0,                                                                                    // 1395\n        codePoint & 0x3F | 0x80                                                                                     // 1396\n      )                                                                                                             // 1397\n    } else if (codePoint < 0x10000) {                                                                               // 1398\n      if ((units -= 3) < 0) break                                                                                   // 1399\n      bytes.push(                                                                                                   // 1400\n        codePoint >> 0xC | 0xE0,                                                                                    // 1401\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                             // 1402\n        codePoint & 0x3F | 0x80                                                                                     // 1403\n      )                                                                                                             // 1404\n    } else if (codePoint < 0x110000) {                                                                              // 1405\n      if ((units -= 4) < 0) break                                                                                   // 1406\n      bytes.push(                                                                                                   // 1407\n        codePoint >> 0x12 | 0xF0,                                                                                   // 1408\n        codePoint >> 0xC & 0x3F | 0x80,                                                                             // 1409\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                             // 1410\n        codePoint & 0x3F | 0x80                                                                                     // 1411\n      )                                                                                                             // 1412\n    } else {                                                                                                        // 1413\n      throw new Error('Invalid code point')                                                                         // 1414\n    }                                                                                                               // 1415\n  }                                                                                                                 // 1416\n                                                                                                                    // 1417\n  return bytes                                                                                                      // 1418\n}                                                                                                                   // 1419\n                                                                                                                    // 1420\nfunction asciiToBytes (str) {                                                                                       // 1421\n  var byteArray = []                                                                                                // 1422\n  for (var i = 0; i < str.length; i++) {                                                                            // 1423\n    // Node's code seems to be doing this and not & 0x7F..                                                          // 1424\n    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                        // 1425\n  }                                                                                                                 // 1426\n  return byteArray                                                                                                  // 1427\n}                                                                                                                   // 1428\n                                                                                                                    // 1429\nfunction utf16leToBytes (str, units) {                                                                              // 1430\n  var c, hi, lo                                                                                                     // 1431\n  var byteArray = []                                                                                                // 1432\n  for (var i = 0; i < str.length; i++) {                                                                            // 1433\n    if ((units -= 2) < 0) break                                                                                     // 1434\n                                                                                                                    // 1435\n    c = str.charCodeAt(i)                                                                                           // 1436\n    hi = c >> 8                                                                                                     // 1437\n    lo = c % 256                                                                                                    // 1438\n    byteArray.push(lo)                                                                                              // 1439\n    byteArray.push(hi)                                                                                              // 1440\n  }                                                                                                                 // 1441\n                                                                                                                    // 1442\n  return byteArray                                                                                                  // 1443\n}                                                                                                                   // 1444\n                                                                                                                    // 1445\nfunction base64ToBytes (str) {                                                                                      // 1446\n  return base64.toByteArray(base64clean(str))                                                                       // 1447\n}                                                                                                                   // 1448\n                                                                                                                    // 1449\nfunction blitBuffer (src, dst, offset, length) {                                                                    // 1450\n  for (var i = 0; i < length; i++) {                                                                                // 1451\n    if ((i + offset >= dst.length) || (i >= src.length)) break                                                      // 1452\n    dst[i + offset] = src[i]                                                                                        // 1453\n  }                                                                                                                 // 1454\n  return i                                                                                                          // 1455\n}                                                                                                                   // 1456\n                                                                                                                    // 1457\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"base64-js\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/package.json                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nexports.name = \"base64-js\";                                                                                         // 1\nexports.version = \"1.1.2\";                                                                                          // 2\nexports.main = \"lib/b64.js\";                                                                                        // 3\n                                                                                                                    // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"b64.js\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/lib/b64.js                             //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n'use strict'                                                                                                        // 1\n                                                                                                                    // 2\nexports.toByteArray = toByteArray                                                                                   // 3\nexports.fromByteArray = fromByteArray                                                                               // 4\n                                                                                                                    // 5\nvar lookup = []                                                                                                     // 6\nvar revLookup = []                                                                                                  // 7\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array                                                    // 8\n                                                                                                                    // 9\nfunction init () {                                                                                                  // 10\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'                                     // 11\n  for (var i = 0, len = code.length; i < len; ++i) {                                                                // 12\n    lookup[i] = code[i]                                                                                             // 13\n    revLookup[code.charCodeAt(i)] = i                                                                               // 14\n  }                                                                                                                 // 15\n                                                                                                                    // 16\n  revLookup['-'.charCodeAt(0)] = 62                                                                                 // 17\n  revLookup['_'.charCodeAt(0)] = 63                                                                                 // 18\n}                                                                                                                   // 19\n                                                                                                                    // 20\ninit()                                                                                                              // 21\n                                                                                                                    // 22\nfunction toByteArray (b64) {                                                                                        // 23\n  var i, j, l, tmp, placeHolders, arr                                                                               // 24\n  var len = b64.length                                                                                              // 25\n                                                                                                                    // 26\n  if (len % 4 > 0) {                                                                                                // 27\n    throw new Error('Invalid string. Length must be a multiple of 4')                                               // 28\n  }                                                                                                                 // 29\n                                                                                                                    // 30\n  // the number of equal signs (place holders)                                                                      // 31\n  // if there are two placeholders, than the two characters before it                                               // 32\n  // represent one byte                                                                                             // 33\n  // if there is only one, then the three characters before it represent 2 bytes                                    // 34\n  // this is just a cheap hack to not do indexOf twice                                                              // 35\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0                                            // 36\n                                                                                                                    // 37\n  // base64 is 4/3 + up to two characters of the original data                                                      // 38\n  arr = new Arr(len * 3 / 4 - placeHolders)                                                                         // 39\n                                                                                                                    // 40\n  // if there are placeholders, only get up to the last complete 4 chars                                            // 41\n  l = placeHolders > 0 ? len - 4 : len                                                                              // 42\n                                                                                                                    // 43\n  var L = 0                                                                                                         // 44\n                                                                                                                    // 45\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                       // 46\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF                                                                                   // 48\n    arr[L++] = (tmp >> 8) & 0xFF                                                                                    // 49\n    arr[L++] = tmp & 0xFF                                                                                           // 50\n  }                                                                                                                 // 51\n                                                                                                                    // 52\n  if (placeHolders === 2) {                                                                                         // 53\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)                             // 54\n    arr[L++] = tmp & 0xFF                                                                                           // 55\n  } else if (placeHolders === 1) {                                                                                  // 56\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF                                                                                    // 58\n    arr[L++] = tmp & 0xFF                                                                                           // 59\n  }                                                                                                                 // 60\n                                                                                                                    // 61\n  return arr                                                                                                        // 62\n}                                                                                                                   // 63\n                                                                                                                    // 64\nfunction tripletToBase64 (num) {                                                                                    // 65\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]         // 66\n}                                                                                                                   // 67\n                                                                                                                    // 68\nfunction encodeChunk (uint8, start, end) {                                                                          // 69\n  var tmp                                                                                                           // 70\n  var output = []                                                                                                   // 71\n  for (var i = start; i < end; i += 3) {                                                                            // 72\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                                   // 73\n    output.push(tripletToBase64(tmp))                                                                               // 74\n  }                                                                                                                 // 75\n  return output.join('')                                                                                            // 76\n}                                                                                                                   // 77\n                                                                                                                    // 78\nfunction fromByteArray (uint8) {                                                                                    // 79\n  var tmp                                                                                                           // 80\n  var len = uint8.length                                                                                            // 81\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes                                                   // 82\n  var output = ''                                                                                                   // 83\n  var parts = []                                                                                                    // 84\n  var maxChunkLength = 16383 // must be multiple of 3                                                               // 85\n                                                                                                                    // 86\n  // go through the array every three bytes, we'll deal with trailing stuff later                                   // 87\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {                                         // 88\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))                    // 89\n  }                                                                                                                 // 90\n                                                                                                                    // 91\n  // pad the end with zeros, but make sure to not forget the extra bytes                                            // 92\n  if (extraBytes === 1) {                                                                                           // 93\n    tmp = uint8[len - 1]                                                                                            // 94\n    output += lookup[tmp >> 2]                                                                                      // 95\n    output += lookup[(tmp << 4) & 0x3F]                                                                             // 96\n    output += '=='                                                                                                  // 97\n  } else if (extraBytes === 2) {                                                                                    // 98\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])                                                                  // 99\n    output += lookup[tmp >> 10]                                                                                     // 100\n    output += lookup[(tmp >> 4) & 0x3F]                                                                             // 101\n    output += lookup[(tmp << 2) & 0x3F]                                                                             // 102\n    output += '='                                                                                                   // 103\n  }                                                                                                                 // 104\n                                                                                                                    // 105\n  parts.push(output)                                                                                                // 106\n                                                                                                                    // 107\n  return parts.join('')                                                                                             // 108\n}                                                                                                                   // 109\n                                                                                                                    // 110\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"ieee754\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/package.json                             //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nexports.name = \"ieee754\";                                                                                           // 1\nexports.version = \"1.1.6\";                                                                                          // 2\nexports.main = \"index.js\";                                                                                          // 3\n                                                                                                                    // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/index.js                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {                                                      // 1\n  var e, m                                                                                                          // 2\n  var eLen = nBytes * 8 - mLen - 1                                                                                  // 3\n  var eMax = (1 << eLen) - 1                                                                                        // 4\n  var eBias = eMax >> 1                                                                                             // 5\n  var nBits = -7                                                                                                    // 6\n  var i = isLE ? (nBytes - 1) : 0                                                                                   // 7\n  var d = isLE ? -1 : 1                                                                                             // 8\n  var s = buffer[offset + i]                                                                                        // 9\n                                                                                                                    // 10\n  i += d                                                                                                            // 11\n                                                                                                                    // 12\n  e = s & ((1 << (-nBits)) - 1)                                                                                     // 13\n  s >>= (-nBits)                                                                                                    // 14\n  nBits += eLen                                                                                                     // 15\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                        // 16\n                                                                                                                    // 17\n  m = e & ((1 << (-nBits)) - 1)                                                                                     // 18\n  e >>= (-nBits)                                                                                                    // 19\n  nBits += mLen                                                                                                     // 20\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                        // 21\n                                                                                                                    // 22\n  if (e === 0) {                                                                                                    // 23\n    e = 1 - eBias                                                                                                   // 24\n  } else if (e === eMax) {                                                                                          // 25\n    return m ? NaN : ((s ? -1 : 1) * Infinity)                                                                      // 26\n  } else {                                                                                                          // 27\n    m = m + Math.pow(2, mLen)                                                                                       // 28\n    e = e - eBias                                                                                                   // 29\n  }                                                                                                                 // 30\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)                                                                   // 31\n}                                                                                                                   // 32\n                                                                                                                    // 33\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {                                              // 34\n  var e, m, c                                                                                                       // 35\n  var eLen = nBytes * 8 - mLen - 1                                                                                  // 36\n  var eMax = (1 << eLen) - 1                                                                                        // 37\n  var eBias = eMax >> 1                                                                                             // 38\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)                                                  // 39\n  var i = isLE ? 0 : (nBytes - 1)                                                                                   // 40\n  var d = isLE ? 1 : -1                                                                                             // 41\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0                                                       // 42\n                                                                                                                    // 43\n  value = Math.abs(value)                                                                                           // 44\n                                                                                                                    // 45\n  if (isNaN(value) || value === Infinity) {                                                                         // 46\n    m = isNaN(value) ? 1 : 0                                                                                        // 47\n    e = eMax                                                                                                        // 48\n  } else {                                                                                                          // 49\n    e = Math.floor(Math.log(value) / Math.LN2)                                                                      // 50\n    if (value * (c = Math.pow(2, -e)) < 1) {                                                                        // 51\n      e--                                                                                                           // 52\n      c *= 2                                                                                                        // 53\n    }                                                                                                               // 54\n    if (e + eBias >= 1) {                                                                                           // 55\n      value += rt / c                                                                                               // 56\n    } else {                                                                                                        // 57\n      value += rt * Math.pow(2, 1 - eBias)                                                                          // 58\n    }                                                                                                               // 59\n    if (value * c >= 2) {                                                                                           // 60\n      e++                                                                                                           // 61\n      c /= 2                                                                                                        // 62\n    }                                                                                                               // 63\n                                                                                                                    // 64\n    if (e + eBias >= eMax) {                                                                                        // 65\n      m = 0                                                                                                         // 66\n      e = eMax                                                                                                      // 67\n    } else if (e + eBias >= 1) {                                                                                    // 68\n      m = (value * c - 1) * Math.pow(2, mLen)                                                                       // 69\n      e = e + eBias                                                                                                 // 70\n    } else {                                                                                                        // 71\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)                                                        // 72\n      e = 0                                                                                                         // 73\n    }                                                                                                               // 74\n  }                                                                                                                 // 75\n                                                                                                                    // 76\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}                                  // 77\n                                                                                                                    // 78\n  e = (e << mLen) | m                                                                                               // 79\n  eLen += mLen                                                                                                      // 80\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}                                   // 81\n                                                                                                                    // 82\n  buffer[offset + i - d] |= s * 128                                                                                 // 83\n}                                                                                                                   // 84\n                                                                                                                    // 85\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"isarray\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/package.json                             //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nexports.name = \"isarray\";                                                                                           // 1\nexports.version = \"1.0.0\";                                                                                          // 2\nexports.main = \"index.js\";                                                                                          // 3\n                                                                                                                    // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/index.js                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar toString = {}.toString;                                                                                         // 1\n                                                                                                                    // 2\nmodule.exports = Array.isArray || function (arr) {                                                                  // 3\n  return toString.call(arr) == '[object Array]';                                                                    // 4\n};                                                                                                                  // 5\n                                                                                                                    // 6\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"process\":{\"browser.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/node_modules/process/browser.js                                                   //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// shim for using process in browser                                                                                // 1\n                                                                                                                    // 2\nvar process = module.exports = {};                                                                                  // 3\nvar queue = [];                                                                                                     // 4\nvar draining = false;                                                                                               // 5\nvar currentQueue;                                                                                                   // 6\nvar queueIndex = -1;                                                                                                // 7\n                                                                                                                    // 8\nfunction cleanUpNextTick() {                                                                                        // 9\n    draining = false;                                                                                               // 10\n    if (currentQueue.length) {                                                                                      // 11\n        queue = currentQueue.concat(queue);                                                                         // 12\n    } else {                                                                                                        // 13\n        queueIndex = -1;                                                                                            // 14\n    }                                                                                                               // 15\n    if (queue.length) {                                                                                             // 16\n        drainQueue();                                                                                               // 17\n    }                                                                                                               // 18\n}                                                                                                                   // 19\n                                                                                                                    // 20\nfunction drainQueue() {                                                                                             // 21\n    if (draining) {                                                                                                 // 22\n        return;                                                                                                     // 23\n    }                                                                                                               // 24\n    var timeout = setTimeout(cleanUpNextTick);                                                                      // 25\n    draining = true;                                                                                                // 26\n                                                                                                                    // 27\n    var len = queue.length;                                                                                         // 28\n    while(len) {                                                                                                    // 29\n        currentQueue = queue;                                                                                       // 30\n        queue = [];                                                                                                 // 31\n        while (++queueIndex < len) {                                                                                // 32\n            if (currentQueue) {                                                                                     // 33\n                currentQueue[queueIndex].run();                                                                     // 34\n            }                                                                                                       // 35\n        }                                                                                                           // 36\n        queueIndex = -1;                                                                                            // 37\n        len = queue.length;                                                                                         // 38\n    }                                                                                                               // 39\n    currentQueue = null;                                                                                            // 40\n    draining = false;                                                                                               // 41\n    clearTimeout(timeout);                                                                                          // 42\n}                                                                                                                   // 43\n                                                                                                                    // 44\nprocess.nextTick = function (fun) {                                                                                 // 45\n    var args = new Array(arguments.length - 1);                                                                     // 46\n    if (arguments.length > 1) {                                                                                     // 47\n        for (var i = 1; i < arguments.length; i++) {                                                                // 48\n            args[i - 1] = arguments[i];                                                                             // 49\n        }                                                                                                           // 50\n    }                                                                                                               // 51\n    queue.push(new Item(fun, args));                                                                                // 52\n    if (queue.length === 1 && !draining) {                                                                          // 53\n        setTimeout(drainQueue, 0);                                                                                  // 54\n    }                                                                                                               // 55\n};                                                                                                                  // 56\n                                                                                                                    // 57\n// v8 likes predictible objects                                                                                     // 58\nfunction Item(fun, array) {                                                                                         // 59\n    this.fun = fun;                                                                                                 // 60\n    this.array = array;                                                                                             // 61\n}                                                                                                                   // 62\nItem.prototype.run = function () {                                                                                  // 63\n    this.fun.apply(null, this.array);                                                                               // 64\n};                                                                                                                  // 65\nprocess.title = 'browser';                                                                                          // 66\nprocess.browser = true;                                                                                             // 67\nprocess.env = {};                                                                                                   // 68\nprocess.argv = [];                                                                                                  // 69\nprocess.version = ''; // empty string to avoid regexp issues                                                        // 70\nprocess.versions = {};                                                                                              // 71\n                                                                                                                    // 72\nfunction noop() {}                                                                                                  // 73\n                                                                                                                    // 74\nprocess.on = noop;                                                                                                  // 75\nprocess.addListener = noop;                                                                                         // 76\nprocess.once = noop;                                                                                                // 77\nprocess.off = noop;                                                                                                 // 78\nprocess.removeListener = noop;                                                                                      // 79\nprocess.removeAllListeners = noop;                                                                                  // 80\nprocess.emit = noop;                                                                                                // 81\n                                                                                                                    // 82\nprocess.binding = function (name) {                                                                                 // 83\n    throw new Error('process.binding is not supported');                                                            // 84\n};                                                                                                                  // 85\n                                                                                                                    // 86\nprocess.cwd = function () { return '/' };                                                                           // 87\nprocess.chdir = function (dir) {                                                                                    // 88\n    throw new Error('process.chdir is not supported');                                                              // 89\n};                                                                                                                  // 90\nprocess.umask = function() { return 0; };                                                                           // 91\n                                                                                                                    // 92\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"domain-browser\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/node_modules/domain-browser/package.json                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nexports.name = \"domain-browser\";                                                                                    // 1\nexports.version = \"1.1.7\";                                                                                          // 2\nexports.main = \"./index.js\";                                                                                        // 3\n                                                                                                                    // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"events\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/node_modules/domain-browser/index.js                                              //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// This file should be ES5 compatible                                                                               // 1\n/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */                                        // 2\n'use strict'                                                                                                        // 3\nmodule.exports = (function () {                                                                                     // 4\n\t// Import Events                                                                                                   // 5\n\tvar events = require('events')                                                                                     // 6\n                                                                                                                    // 7\n\t// Export Domain                                                                                                   // 8\n\tvar domain = {}                                                                                                    // 9\n\tdomain.createDomain = domain.create = function () {                                                                // 10\n\t\tvar d = new events.EventEmitter()                                                                                 // 11\n                                                                                                                    // 12\n\t\tfunction emitError (e) {                                                                                          // 13\n\t\t\td.emit('error', e)                                                                                               // 14\n\t\t}                                                                                                                 // 15\n                                                                                                                    // 16\n\t\td.add = function (emitter) {                                                                                      // 17\n\t\t\temitter.on('error', emitError)                                                                                   // 18\n\t\t}                                                                                                                 // 19\n\t\td.remove = function (emitter) {                                                                                   // 20\n\t\t\temitter.removeListener('error', emitError)                                                                       // 21\n\t\t}                                                                                                                 // 22\n\t\td.bind = function (fn) {                                                                                          // 23\n\t\t\treturn function () {                                                                                             // 24\n\t\t\t\tvar args = Array.prototype.slice.call(arguments)                                                                // 25\n\t\t\t\ttry {                                                                                                           // 26\n\t\t\t\t\tfn.apply(null, args)                                                                                           // 27\n\t\t\t\t}                                                                                                               // 28\n\t\t\t\tcatch (err) {                                                                                                   // 29\n\t\t\t\t\temitError(err)                                                                                                 // 30\n\t\t\t\t}                                                                                                               // 31\n\t\t\t}                                                                                                                // 32\n\t\t}                                                                                                                 // 33\n\t\td.intercept = function (fn) {                                                                                     // 34\n\t\t\treturn function (err) {                                                                                          // 35\n\t\t\t\tif ( err ) {                                                                                                    // 36\n\t\t\t\t\temitError(err)                                                                                                 // 37\n\t\t\t\t}                                                                                                               // 38\n\t\t\t\telse {                                                                                                          // 39\n\t\t\t\t\tvar args = Array.prototype.slice.call(arguments, 1)                                                            // 40\n\t\t\t\t\ttry {                                                                                                          // 41\n\t\t\t\t\t\tfn.apply(null, args)                                                                                          // 42\n\t\t\t\t\t}                                                                                                              // 43\n\t\t\t\t\tcatch (err) {                                                                                                  // 44\n\t\t\t\t\t\temitError(err)                                                                                                // 45\n\t\t\t\t\t}                                                                                                              // 46\n\t\t\t\t}                                                                                                               // 47\n\t\t\t}                                                                                                                // 48\n\t\t}                                                                                                                 // 49\n\t\td.run = function (fn) {                                                                                           // 50\n\t\t\ttry {                                                                                                            // 51\n\t\t\t\tfn()                                                                                                            // 52\n\t\t\t}                                                                                                                // 53\n\t\t\tcatch (err) {                                                                                                    // 54\n\t\t\t\temitError(err)                                                                                                  // 55\n\t\t\t}                                                                                                                // 56\n\t\t\treturn this                                                                                                      // 57\n\t\t}                                                                                                                 // 58\n\t\td.dispose = function () {                                                                                         // 59\n\t\t\tthis.removeAllListeners()                                                                                        // 60\n\t\t\treturn this                                                                                                      // 61\n\t\t}                                                                                                                 // 62\n\t\td.enter = d.exit = function () {                                                                                  // 63\n\t\t\treturn this                                                                                                      // 64\n\t\t}                                                                                                                 // 65\n\t\treturn d                                                                                                          // 66\n\t}                                                                                                                  // 67\n\treturn domain                                                                                                      // 68\n}).call(this)                                                                                                       // 69\n                                                                                                                    // 70\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"events\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/node_modules/events/package.json                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nexports.name = \"events\";                                                                                            // 1\nexports.version = \"1.1.0\";                                                                                          // 2\nexports.main = \"./events.js\";                                                                                       // 3\n                                                                                                                    // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"events.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor-node-stubs/node_modules/events/events.js                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// Copyright Joyent, Inc. and other Node contributors.                                                              // 1\n//                                                                                                                  // 2\n// Permission is hereby granted, free of charge, to any person obtaining a                                          // 3\n// copy of this software and associated documentation files (the                                                    // 4\n// \"Software\"), to deal in the Software without restriction, including                                              // 5\n// without limitation the rights to use, copy, modify, merge, publish,                                              // 6\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                        // 7\n// persons to whom the Software is furnished to do so, subject to the                                               // 8\n// following conditions:                                                                                            // 9\n//                                                                                                                  // 10\n// The above copyright notice and this permission notice shall be included                                          // 11\n// in all copies or substantial portions of the Software.                                                           // 12\n//                                                                                                                  // 13\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                          // 14\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                       // 15\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                        // 16\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                         // 17\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                            // 18\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                        // 19\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                           // 20\n                                                                                                                    // 21\nfunction EventEmitter() {                                                                                           // 22\n  this._events = this._events || {};                                                                                // 23\n  this._maxListeners = this._maxListeners || undefined;                                                             // 24\n}                                                                                                                   // 25\nmodule.exports = EventEmitter;                                                                                      // 26\n                                                                                                                    // 27\n// Backwards-compat with node 0.10.x                                                                                // 28\nEventEmitter.EventEmitter = EventEmitter;                                                                           // 29\n                                                                                                                    // 30\nEventEmitter.prototype._events = undefined;                                                                         // 31\nEventEmitter.prototype._maxListeners = undefined;                                                                   // 32\n                                                                                                                    // 33\n// By default EventEmitters will print a warning if more than 10 listeners are                                      // 34\n// added to it. This is a useful default which helps finding memory leaks.                                          // 35\nEventEmitter.defaultMaxListeners = 10;                                                                              // 36\n                                                                                                                    // 37\n// Obviously not all Emitters should be limited to 10. This function allows                                         // 38\n// that to be increased. Set to zero for unlimited.                                                                 // 39\nEventEmitter.prototype.setMaxListeners = function(n) {                                                              // 40\n  if (!isNumber(n) || n < 0 || isNaN(n))                                                                            // 41\n    throw TypeError('n must be a positive number');                                                                 // 42\n  this._maxListeners = n;                                                                                           // 43\n  return this;                                                                                                      // 44\n};                                                                                                                  // 45\n                                                                                                                    // 46\nEventEmitter.prototype.emit = function(type) {                                                                      // 47\n  var er, handler, len, args, i, listeners;                                                                         // 48\n                                                                                                                    // 49\n  if (!this._events)                                                                                                // 50\n    this._events = {};                                                                                              // 51\n                                                                                                                    // 52\n  // If there is no 'error' event listener then throw.                                                              // 53\n  if (type === 'error') {                                                                                           // 54\n    if (!this._events.error ||                                                                                      // 55\n        (isObject(this._events.error) && !this._events.error.length)) {                                             // 56\n      er = arguments[1];                                                                                            // 57\n      if (er instanceof Error) {                                                                                    // 58\n        throw er; // Unhandled 'error' event                                                                        // 59\n      }                                                                                                             // 60\n      throw TypeError('Uncaught, unspecified \"error\" event.');                                                      // 61\n    }                                                                                                               // 62\n  }                                                                                                                 // 63\n                                                                                                                    // 64\n  handler = this._events[type];                                                                                     // 65\n                                                                                                                    // 66\n  if (isUndefined(handler))                                                                                         // 67\n    return false;                                                                                                   // 68\n                                                                                                                    // 69\n  if (isFunction(handler)) {                                                                                        // 70\n    switch (arguments.length) {                                                                                     // 71\n      // fast cases                                                                                                 // 72\n      case 1:                                                                                                       // 73\n        handler.call(this);                                                                                         // 74\n        break;                                                                                                      // 75\n      case 2:                                                                                                       // 76\n        handler.call(this, arguments[1]);                                                                           // 77\n        break;                                                                                                      // 78\n      case 3:                                                                                                       // 79\n        handler.call(this, arguments[1], arguments[2]);                                                             // 80\n        break;                                                                                                      // 81\n      // slower                                                                                                     // 82\n      default:                                                                                                      // 83\n        args = Array.prototype.slice.call(arguments, 1);                                                            // 84\n        handler.apply(this, args);                                                                                  // 85\n    }                                                                                                               // 86\n  } else if (isObject(handler)) {                                                                                   // 87\n    args = Array.prototype.slice.call(arguments, 1);                                                                // 88\n    listeners = handler.slice();                                                                                    // 89\n    len = listeners.length;                                                                                         // 90\n    for (i = 0; i < len; i++)                                                                                       // 91\n      listeners[i].apply(this, args);                                                                               // 92\n  }                                                                                                                 // 93\n                                                                                                                    // 94\n  return true;                                                                                                      // 95\n};                                                                                                                  // 96\n                                                                                                                    // 97\nEventEmitter.prototype.addListener = function(type, listener) {                                                     // 98\n  var m;                                                                                                            // 99\n                                                                                                                    // 100\n  if (!isFunction(listener))                                                                                        // 101\n    throw TypeError('listener must be a function');                                                                 // 102\n                                                                                                                    // 103\n  if (!this._events)                                                                                                // 104\n    this._events = {};                                                                                              // 105\n                                                                                                                    // 106\n  // To avoid recursion in the case that type === \"newListener\"! Before                                             // 107\n  // adding it to the listeners, first emit \"newListener\".                                                          // 108\n  if (this._events.newListener)                                                                                     // 109\n    this.emit('newListener', type,                                                                                  // 110\n              isFunction(listener.listener) ?                                                                       // 111\n              listener.listener : listener);                                                                        // 112\n                                                                                                                    // 113\n  if (!this._events[type])                                                                                          // 114\n    // Optimize the case of one listener. Don't need the extra array object.                                        // 115\n    this._events[type] = listener;                                                                                  // 116\n  else if (isObject(this._events[type]))                                                                            // 117\n    // If we've already got an array, just append.                                                                  // 118\n    this._events[type].push(listener);                                                                              // 119\n  else                                                                                                              // 120\n    // Adding the second element, need to change to array.                                                          // 121\n    this._events[type] = [this._events[type], listener];                                                            // 122\n                                                                                                                    // 123\n  // Check for listener leak                                                                                        // 124\n  if (isObject(this._events[type]) && !this._events[type].warned) {                                                 // 125\n    if (!isUndefined(this._maxListeners)) {                                                                         // 126\n      m = this._maxListeners;                                                                                       // 127\n    } else {                                                                                                        // 128\n      m = EventEmitter.defaultMaxListeners;                                                                         // 129\n    }                                                                                                               // 130\n                                                                                                                    // 131\n    if (m && m > 0 && this._events[type].length > m) {                                                              // 132\n      this._events[type].warned = true;                                                                             // 133\n      console.error('(node) warning: possible EventEmitter memory ' +                                               // 134\n                    'leak detected. %d listeners added. ' +                                                         // 135\n                    'Use emitter.setMaxListeners() to increase limit.',                                             // 136\n                    this._events[type].length);                                                                     // 137\n      if (typeof console.trace === 'function') {                                                                    // 138\n        // not supported in IE 10                                                                                   // 139\n        console.trace();                                                                                            // 140\n      }                                                                                                             // 141\n    }                                                                                                               // 142\n  }                                                                                                                 // 143\n                                                                                                                    // 144\n  return this;                                                                                                      // 145\n};                                                                                                                  // 146\n                                                                                                                    // 147\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                     // 148\n                                                                                                                    // 149\nEventEmitter.prototype.once = function(type, listener) {                                                            // 150\n  if (!isFunction(listener))                                                                                        // 151\n    throw TypeError('listener must be a function');                                                                 // 152\n                                                                                                                    // 153\n  var fired = false;                                                                                                // 154\n                                                                                                                    // 155\n  function g() {                                                                                                    // 156\n    this.removeListener(type, g);                                                                                   // 157\n                                                                                                                    // 158\n    if (!fired) {                                                                                                   // 159\n      fired = true;                                                                                                 // 160\n      listener.apply(this, arguments);                                                                              // 161\n    }                                                                                                               // 162\n  }                                                                                                                 // 163\n                                                                                                                    // 164\n  g.listener = listener;                                                                                            // 165\n  this.on(type, g);                                                                                                 // 166\n                                                                                                                    // 167\n  return this;                                                                                                      // 168\n};                                                                                                                  // 169\n                                                                                                                    // 170\n// emits a 'removeListener' event iff the listener was removed                                                      // 171\nEventEmitter.prototype.removeListener = function(type, listener) {                                                  // 172\n  var list, position, length, i;                                                                                    // 173\n                                                                                                                    // 174\n  if (!isFunction(listener))                                                                                        // 175\n    throw TypeError('listener must be a function');                                                                 // 176\n                                                                                                                    // 177\n  if (!this._events || !this._events[type])                                                                         // 178\n    return this;                                                                                                    // 179\n                                                                                                                    // 180\n  list = this._events[type];                                                                                        // 181\n  length = list.length;                                                                                             // 182\n  position = -1;                                                                                                    // 183\n                                                                                                                    // 184\n  if (list === listener ||                                                                                          // 185\n      (isFunction(list.listener) && list.listener === listener)) {                                                  // 186\n    delete this._events[type];                                                                                      // 187\n    if (this._events.removeListener)                                                                                // 188\n      this.emit('removeListener', type, listener);                                                                  // 189\n                                                                                                                    // 190\n  } else if (isObject(list)) {                                                                                      // 191\n    for (i = length; i-- > 0;) {                                                                                    // 192\n      if (list[i] === listener ||                                                                                   // 193\n          (list[i].listener && list[i].listener === listener)) {                                                    // 194\n        position = i;                                                                                               // 195\n        break;                                                                                                      // 196\n      }                                                                                                             // 197\n    }                                                                                                               // 198\n                                                                                                                    // 199\n    if (position < 0)                                                                                               // 200\n      return this;                                                                                                  // 201\n                                                                                                                    // 202\n    if (list.length === 1) {                                                                                        // 203\n      list.length = 0;                                                                                              // 204\n      delete this._events[type];                                                                                    // 205\n    } else {                                                                                                        // 206\n      list.splice(position, 1);                                                                                     // 207\n    }                                                                                                               // 208\n                                                                                                                    // 209\n    if (this._events.removeListener)                                                                                // 210\n      this.emit('removeListener', type, listener);                                                                  // 211\n  }                                                                                                                 // 212\n                                                                                                                    // 213\n  return this;                                                                                                      // 214\n};                                                                                                                  // 215\n                                                                                                                    // 216\nEventEmitter.prototype.removeAllListeners = function(type) {                                                        // 217\n  var key, listeners;                                                                                               // 218\n                                                                                                                    // 219\n  if (!this._events)                                                                                                // 220\n    return this;                                                                                                    // 221\n                                                                                                                    // 222\n  // not listening for removeListener, no need to emit                                                              // 223\n  if (!this._events.removeListener) {                                                                               // 224\n    if (arguments.length === 0)                                                                                     // 225\n      this._events = {};                                                                                            // 226\n    else if (this._events[type])                                                                                    // 227\n      delete this._events[type];                                                                                    // 228\n    return this;                                                                                                    // 229\n  }                                                                                                                 // 230\n                                                                                                                    // 231\n  // emit removeListener for all listeners on all events                                                            // 232\n  if (arguments.length === 0) {                                                                                     // 233\n    for (key in this._events) {                                                                                     // 234\n      if (key === 'removeListener') continue;                                                                       // 235\n      this.removeAllListeners(key);                                                                                 // 236\n    }                                                                                                               // 237\n    this.removeAllListeners('removeListener');                                                                      // 238\n    this._events = {};                                                                                              // 239\n    return this;                                                                                                    // 240\n  }                                                                                                                 // 241\n                                                                                                                    // 242\n  listeners = this._events[type];                                                                                   // 243\n                                                                                                                    // 244\n  if (isFunction(listeners)) {                                                                                      // 245\n    this.removeListener(type, listeners);                                                                           // 246\n  } else if (listeners) {                                                                                           // 247\n    // LIFO order                                                                                                   // 248\n    while (listeners.length)                                                                                        // 249\n      this.removeListener(type, listeners[listeners.length - 1]);                                                   // 250\n  }                                                                                                                 // 251\n  delete this._events[type];                                                                                        // 252\n                                                                                                                    // 253\n  return this;                                                                                                      // 254\n};                                                                                                                  // 255\n                                                                                                                    // 256\nEventEmitter.prototype.listeners = function(type) {                                                                 // 257\n  var ret;                                                                                                          // 258\n  if (!this._events || !this._events[type])                                                                         // 259\n    ret = [];                                                                                                       // 260\n  else if (isFunction(this._events[type]))                                                                          // 261\n    ret = [this._events[type]];                                                                                     // 262\n  else                                                                                                              // 263\n    ret = this._events[type].slice();                                                                               // 264\n  return ret;                                                                                                       // 265\n};                                                                                                                  // 266\n                                                                                                                    // 267\nEventEmitter.prototype.listenerCount = function(type) {                                                             // 268\n  if (this._events) {                                                                                               // 269\n    var evlistener = this._events[type];                                                                            // 270\n                                                                                                                    // 271\n    if (isFunction(evlistener))                                                                                     // 272\n      return 1;                                                                                                     // 273\n    else if (evlistener)                                                                                            // 274\n      return evlistener.length;                                                                                     // 275\n  }                                                                                                                 // 276\n  return 0;                                                                                                         // 277\n};                                                                                                                  // 278\n                                                                                                                    // 279\nEventEmitter.listenerCount = function(emitter, type) {                                                              // 280\n  return emitter.listenerCount(type);                                                                               // 281\n};                                                                                                                  // 282\n                                                                                                                    // 283\nfunction isFunction(arg) {                                                                                          // 284\n  return typeof arg === 'function';                                                                                 // 285\n}                                                                                                                   // 286\n                                                                                                                    // 287\nfunction isNumber(arg) {                                                                                            // 288\n  return typeof arg === 'number';                                                                                   // 289\n}                                                                                                                   // 290\n                                                                                                                    // 291\nfunction isObject(arg) {                                                                                            // 292\n  return typeof arg === 'object' && arg !== null;                                                                   // 293\n}                                                                                                                   // 294\n                                                                                                                    // 295\nfunction isUndefined(arg) {                                                                                         // 296\n  return arg === void 0;                                                                                            // 297\n}                                                                                                                   // 298\n                                                                                                                    // 299\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"react\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/package.json                                                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nexports.name = \"react\";                                                                                             // 1\nexports.version = \"15.3.2\";                                                                                         // 2\nexports.main = \"react.js\";                                                                                          // 3\n                                                                                                                    // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"react.js\":[\"./lib/React\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/react.js                                                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n'use strict';                                                                                                       // 1\n                                                                                                                    // 2\nmodule.exports = require('./lib/React');                                                                            // 3\n                                                                                                                    // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"lib\":{\"React.js\":[\"object-assign\",\"./ReactChildren\",\"./ReactComponent\",\"./ReactPureComponent\",\"./ReactClass\",\"./ReactDOMFactories\",\"./ReactElement\",\"./ReactPropTypes\",\"./ReactVersion\",\"./onlyChild\",\"fbjs/lib/warning\",\"./ReactElementValidator\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/React.js                                                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule React                                                                                            // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar _assign = require('object-assign');                                                                             // 14\n                                                                                                                    // 15\nvar ReactChildren = require('./ReactChildren');                                                                     // 16\nvar ReactComponent = require('./ReactComponent');                                                                   // 17\nvar ReactPureComponent = require('./ReactPureComponent');                                                           // 18\nvar ReactClass = require('./ReactClass');                                                                           // 19\nvar ReactDOMFactories = require('./ReactDOMFactories');                                                             // 20\nvar ReactElement = require('./ReactElement');                                                                       // 21\nvar ReactPropTypes = require('./ReactPropTypes');                                                                   // 22\nvar ReactVersion = require('./ReactVersion');                                                                       // 23\n                                                                                                                    // 24\nvar onlyChild = require('./onlyChild');                                                                             // 25\nvar warning = require('fbjs/lib/warning');                                                                          // 26\n                                                                                                                    // 27\nvar createElement = ReactElement.createElement;                                                                     // 28\nvar createFactory = ReactElement.createFactory;                                                                     // 29\nvar cloneElement = ReactElement.cloneElement;                                                                       // 30\n                                                                                                                    // 31\nif (process.env.NODE_ENV !== 'production') {                                                                        // 32\n  var ReactElementValidator = require('./ReactElementValidator');                                                   // 33\n  createElement = ReactElementValidator.createElement;                                                              // 34\n  createFactory = ReactElementValidator.createFactory;                                                              // 35\n  cloneElement = ReactElementValidator.cloneElement;                                                                // 36\n}                                                                                                                   // 37\n                                                                                                                    // 38\nvar __spread = _assign;                                                                                             // 39\n                                                                                                                    // 40\nif (process.env.NODE_ENV !== 'production') {                                                                        // 41\n  var warned = false;                                                                                               // 42\n  __spread = function () {                                                                                          // 43\n    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;\n    warned = true;                                                                                                  // 45\n    return _assign.apply(null, arguments);                                                                          // 46\n  };                                                                                                                // 47\n}                                                                                                                   // 48\n                                                                                                                    // 49\nvar React = {                                                                                                       // 50\n                                                                                                                    // 51\n  // Modern                                                                                                         // 52\n                                                                                                                    // 53\n  Children: {                                                                                                       // 54\n    map: ReactChildren.map,                                                                                         // 55\n    forEach: ReactChildren.forEach,                                                                                 // 56\n    count: ReactChildren.count,                                                                                     // 57\n    toArray: ReactChildren.toArray,                                                                                 // 58\n    only: onlyChild                                                                                                 // 59\n  },                                                                                                                // 60\n                                                                                                                    // 61\n  Component: ReactComponent,                                                                                        // 62\n  PureComponent: ReactPureComponent,                                                                                // 63\n                                                                                                                    // 64\n  createElement: createElement,                                                                                     // 65\n  cloneElement: cloneElement,                                                                                       // 66\n  isValidElement: ReactElement.isValidElement,                                                                      // 67\n                                                                                                                    // 68\n  // Classic                                                                                                        // 69\n                                                                                                                    // 70\n  PropTypes: ReactPropTypes,                                                                                        // 71\n  createClass: ReactClass.createClass,                                                                              // 72\n  createFactory: createFactory,                                                                                     // 73\n  createMixin: function (mixin) {                                                                                   // 74\n    // Currently a noop. Will be used to validate and trace mixins.                                                 // 75\n    return mixin;                                                                                                   // 76\n  },                                                                                                                // 77\n                                                                                                                    // 78\n  // This looks DOM specific but these are actually isomorphic helpers                                              // 79\n  // since they are just generating DOM strings.                                                                    // 80\n  DOM: ReactDOMFactories,                                                                                           // 81\n                                                                                                                    // 82\n  version: ReactVersion,                                                                                            // 83\n                                                                                                                    // 84\n  // Deprecated hook for JSX spread, don't use this for anything.                                                   // 85\n  __spread: __spread                                                                                                // 86\n};                                                                                                                  // 87\n                                                                                                                    // 88\nmodule.exports = React;                                                                                             // 89\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactChildren.js\":[\"./PooledClass\",\"./ReactElement\",\"fbjs/lib/emptyFunction\",\"./traverseAllChildren\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactChildren.js                                                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactChildren                                                                                    // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar PooledClass = require('./PooledClass');                                                                         // 14\nvar ReactElement = require('./ReactElement');                                                                       // 15\n                                                                                                                    // 16\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                              // 17\nvar traverseAllChildren = require('./traverseAllChildren');                                                         // 18\n                                                                                                                    // 19\nvar twoArgumentPooler = PooledClass.twoArgumentPooler;                                                              // 20\nvar fourArgumentPooler = PooledClass.fourArgumentPooler;                                                            // 21\n                                                                                                                    // 22\nvar userProvidedKeyEscapeRegex = /\\/+/g;                                                                            // 23\nfunction escapeUserProvidedKey(text) {                                                                              // 24\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');                                                    // 25\n}                                                                                                                   // 26\n                                                                                                                    // 27\n/**                                                                                                                 // 28\n * PooledClass representing the bookkeeping associated with performing a child                                      // 29\n * traversal. Allows avoiding binding callbacks.                                                                    // 30\n *                                                                                                                  // 31\n * @constructor ForEachBookKeeping                                                                                  // 32\n * @param {!function} forEachFunction Function to perform traversal with.                                           // 33\n * @param {?*} forEachContext Context to perform context with.                                                      // 34\n */                                                                                                                 // 35\nfunction ForEachBookKeeping(forEachFunction, forEachContext) {                                                      // 36\n  this.func = forEachFunction;                                                                                      // 37\n  this.context = forEachContext;                                                                                    // 38\n  this.count = 0;                                                                                                   // 39\n}                                                                                                                   // 40\nForEachBookKeeping.prototype.destructor = function () {                                                             // 41\n  this.func = null;                                                                                                 // 42\n  this.context = null;                                                                                              // 43\n  this.count = 0;                                                                                                   // 44\n};                                                                                                                  // 45\nPooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);                                                    // 46\n                                                                                                                    // 47\nfunction forEachSingleChild(bookKeeping, child, name) {                                                             // 48\n  var func = bookKeeping.func;                                                                                      // 49\n  var context = bookKeeping.context;                                                                                // 50\n                                                                                                                    // 51\n  func.call(context, child, bookKeeping.count++);                                                                   // 52\n}                                                                                                                   // 53\n                                                                                                                    // 54\n/**                                                                                                                 // 55\n * Iterates through children that are typically specified as `props.children`.                                      // 56\n *                                                                                                                  // 57\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach                              // 58\n *                                                                                                                  // 59\n * The provided forEachFunc(child, index) will be called for each                                                   // 60\n * leaf child.                                                                                                      // 61\n *                                                                                                                  // 62\n * @param {?*} children Children tree container.                                                                    // 63\n * @param {function(*, int)} forEachFunc                                                                            // 64\n * @param {*} forEachContext Context for forEachContext.                                                            // 65\n */                                                                                                                 // 66\nfunction forEachChildren(children, forEachFunc, forEachContext) {                                                   // 67\n  if (children == null) {                                                                                           // 68\n    return children;                                                                                                // 69\n  }                                                                                                                 // 70\n  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);                                  // 71\n  traverseAllChildren(children, forEachSingleChild, traverseContext);                                               // 72\n  ForEachBookKeeping.release(traverseContext);                                                                      // 73\n}                                                                                                                   // 74\n                                                                                                                    // 75\n/**                                                                                                                 // 76\n * PooledClass representing the bookkeeping associated with performing a child                                      // 77\n * mapping. Allows avoiding binding callbacks.                                                                      // 78\n *                                                                                                                  // 79\n * @constructor MapBookKeeping                                                                                      // 80\n * @param {!*} mapResult Object containing the ordered map of results.                                              // 81\n * @param {!function} mapFunction Function to perform mapping with.                                                 // 82\n * @param {?*} mapContext Context to perform mapping with.                                                          // 83\n */                                                                                                                 // 84\nfunction MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {                                            // 85\n  this.result = mapResult;                                                                                          // 86\n  this.keyPrefix = keyPrefix;                                                                                       // 87\n  this.func = mapFunction;                                                                                          // 88\n  this.context = mapContext;                                                                                        // 89\n  this.count = 0;                                                                                                   // 90\n}                                                                                                                   // 91\nMapBookKeeping.prototype.destructor = function () {                                                                 // 92\n  this.result = null;                                                                                               // 93\n  this.keyPrefix = null;                                                                                            // 94\n  this.func = null;                                                                                                 // 95\n  this.context = null;                                                                                              // 96\n  this.count = 0;                                                                                                   // 97\n};                                                                                                                  // 98\nPooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);                                                       // 99\n                                                                                                                    // 100\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {                                                  // 101\n  var result = bookKeeping.result;                                                                                  // 102\n  var keyPrefix = bookKeeping.keyPrefix;                                                                            // 103\n  var func = bookKeeping.func;                                                                                      // 104\n  var context = bookKeeping.context;                                                                                // 105\n                                                                                                                    // 106\n                                                                                                                    // 107\n  var mappedChild = func.call(context, child, bookKeeping.count++);                                                 // 108\n  if (Array.isArray(mappedChild)) {                                                                                 // 109\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);                 // 110\n  } else if (mappedChild != null) {                                                                                 // 111\n    if (ReactElement.isValidElement(mappedChild)) {                                                                 // 112\n      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,                                                    // 113\n      // Keep both the (mapped) and old keys if they differ, just as                                                // 114\n      // traverseAllChildren used to do for objects as children                                                     // 115\n      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n    }                                                                                                               // 117\n    result.push(mappedChild);                                                                                       // 118\n  }                                                                                                                 // 119\n}                                                                                                                   // 120\n                                                                                                                    // 121\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {                                     // 122\n  var escapedPrefix = '';                                                                                           // 123\n  if (prefix != null) {                                                                                             // 124\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';                                                            // 125\n  }                                                                                                                 // 126\n  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);                              // 127\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);                                        // 128\n  MapBookKeeping.release(traverseContext);                                                                          // 129\n}                                                                                                                   // 130\n                                                                                                                    // 131\n/**                                                                                                                 // 132\n * Maps children that are typically specified as `props.children`.                                                  // 133\n *                                                                                                                  // 134\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map                                  // 135\n *                                                                                                                  // 136\n * The provided mapFunction(child, key, index) will be called for each                                              // 137\n * leaf child.                                                                                                      // 138\n *                                                                                                                  // 139\n * @param {?*} children Children tree container.                                                                    // 140\n * @param {function(*, int)} func The map function.                                                                 // 141\n * @param {*} context Context for mapFunction.                                                                      // 142\n * @return {object} Object containing the ordered map of results.                                                   // 143\n */                                                                                                                 // 144\nfunction mapChildren(children, func, context) {                                                                     // 145\n  if (children == null) {                                                                                           // 146\n    return children;                                                                                                // 147\n  }                                                                                                                 // 148\n  var result = [];                                                                                                  // 149\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);                                              // 150\n  return result;                                                                                                    // 151\n}                                                                                                                   // 152\n                                                                                                                    // 153\nfunction forEachSingleChildDummy(traverseContext, child, name) {                                                    // 154\n  return null;                                                                                                      // 155\n}                                                                                                                   // 156\n                                                                                                                    // 157\n/**                                                                                                                 // 158\n * Count the number of children that are typically specified as                                                     // 159\n * `props.children`.                                                                                                // 160\n *                                                                                                                  // 161\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count                                // 162\n *                                                                                                                  // 163\n * @param {?*} children Children tree container.                                                                    // 164\n * @return {number} The number of children.                                                                         // 165\n */                                                                                                                 // 166\nfunction countChildren(children, context) {                                                                         // 167\n  return traverseAllChildren(children, forEachSingleChildDummy, null);                                              // 168\n}                                                                                                                   // 169\n                                                                                                                    // 170\n/**                                                                                                                 // 171\n * Flatten a children object (typically specified as `props.children`) and                                          // 172\n * return an array with appropriately re-keyed children.                                                            // 173\n *                                                                                                                  // 174\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray                              // 175\n */                                                                                                                 // 176\nfunction toArray(children) {                                                                                        // 177\n  var result = [];                                                                                                  // 178\n  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);                          // 179\n  return result;                                                                                                    // 180\n}                                                                                                                   // 181\n                                                                                                                    // 182\nvar ReactChildren = {                                                                                               // 183\n  forEach: forEachChildren,                                                                                         // 184\n  map: mapChildren,                                                                                                 // 185\n  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,                                                       // 186\n  count: countChildren,                                                                                             // 187\n  toArray: toArray                                                                                                  // 188\n};                                                                                                                  // 189\n                                                                                                                    // 190\nmodule.exports = ReactChildren;                                                                                     // 191\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"PooledClass.js\":[\"./reactProdInvariant\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/PooledClass.js                                                                            //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule PooledClass                                                                                      // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                               // 14\n                                                                                                                    // 15\nvar invariant = require('fbjs/lib/invariant');                                                                      // 16\n                                                                                                                    // 17\n/**                                                                                                                 // 18\n * Static poolers. Several custom versions for each potential number of                                             // 19\n * arguments. A completely generic pooler is easy to implement, but would                                           // 20\n * require accessing the `arguments` object. In each of these, `this` refers to                                     // 21\n * the Class itself, not an instance. If any others are needed, simply add them                                     // 22\n * here, or in their own files.                                                                                     // 23\n */                                                                                                                 // 24\nvar oneArgumentPooler = function (copyFieldsFrom) {                                                                 // 25\n  var Klass = this;                                                                                                 // 26\n  if (Klass.instancePool.length) {                                                                                  // 27\n    var instance = Klass.instancePool.pop();                                                                        // 28\n    Klass.call(instance, copyFieldsFrom);                                                                           // 29\n    return instance;                                                                                                // 30\n  } else {                                                                                                          // 31\n    return new Klass(copyFieldsFrom);                                                                               // 32\n  }                                                                                                                 // 33\n};                                                                                                                  // 34\n                                                                                                                    // 35\nvar twoArgumentPooler = function (a1, a2) {                                                                         // 36\n  var Klass = this;                                                                                                 // 37\n  if (Klass.instancePool.length) {                                                                                  // 38\n    var instance = Klass.instancePool.pop();                                                                        // 39\n    Klass.call(instance, a1, a2);                                                                                   // 40\n    return instance;                                                                                                // 41\n  } else {                                                                                                          // 42\n    return new Klass(a1, a2);                                                                                       // 43\n  }                                                                                                                 // 44\n};                                                                                                                  // 45\n                                                                                                                    // 46\nvar threeArgumentPooler = function (a1, a2, a3) {                                                                   // 47\n  var Klass = this;                                                                                                 // 48\n  if (Klass.instancePool.length) {                                                                                  // 49\n    var instance = Klass.instancePool.pop();                                                                        // 50\n    Klass.call(instance, a1, a2, a3);                                                                               // 51\n    return instance;                                                                                                // 52\n  } else {                                                                                                          // 53\n    return new Klass(a1, a2, a3);                                                                                   // 54\n  }                                                                                                                 // 55\n};                                                                                                                  // 56\n                                                                                                                    // 57\nvar fourArgumentPooler = function (a1, a2, a3, a4) {                                                                // 58\n  var Klass = this;                                                                                                 // 59\n  if (Klass.instancePool.length) {                                                                                  // 60\n    var instance = Klass.instancePool.pop();                                                                        // 61\n    Klass.call(instance, a1, a2, a3, a4);                                                                           // 62\n    return instance;                                                                                                // 63\n  } else {                                                                                                          // 64\n    return new Klass(a1, a2, a3, a4);                                                                               // 65\n  }                                                                                                                 // 66\n};                                                                                                                  // 67\n                                                                                                                    // 68\nvar fiveArgumentPooler = function (a1, a2, a3, a4, a5) {                                                            // 69\n  var Klass = this;                                                                                                 // 70\n  if (Klass.instancePool.length) {                                                                                  // 71\n    var instance = Klass.instancePool.pop();                                                                        // 72\n    Klass.call(instance, a1, a2, a3, a4, a5);                                                                       // 73\n    return instance;                                                                                                // 74\n  } else {                                                                                                          // 75\n    return new Klass(a1, a2, a3, a4, a5);                                                                           // 76\n  }                                                                                                                 // 77\n};                                                                                                                  // 78\n                                                                                                                    // 79\nvar standardReleaser = function (instance) {                                                                        // 80\n  var Klass = this;                                                                                                 // 81\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;\n  instance.destructor();                                                                                            // 83\n  if (Klass.instancePool.length < Klass.poolSize) {                                                                 // 84\n    Klass.instancePool.push(instance);                                                                              // 85\n  }                                                                                                                 // 86\n};                                                                                                                  // 87\n                                                                                                                    // 88\nvar DEFAULT_POOL_SIZE = 10;                                                                                         // 89\nvar DEFAULT_POOLER = oneArgumentPooler;                                                                             // 90\n                                                                                                                    // 91\n/**                                                                                                                 // 92\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class                                     // 93\n * itself (statically) not adding any prototypical fields. Any CopyConstructor                                      // 94\n * you give this may have a `poolSize` property, and will look for a                                                // 95\n * prototypical `destructor` on instances.                                                                          // 96\n *                                                                                                                  // 97\n * @param {Function} CopyConstructor Constructor that can be used to reset.                                         // 98\n * @param {Function} pooler Customizable pooler.                                                                    // 99\n */                                                                                                                 // 100\nvar addPoolingTo = function (CopyConstructor, pooler) {                                                             // 101\n  var NewKlass = CopyConstructor;                                                                                   // 102\n  NewKlass.instancePool = [];                                                                                       // 103\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;                                                                    // 104\n  if (!NewKlass.poolSize) {                                                                                         // 105\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;                                                                          // 106\n  }                                                                                                                 // 107\n  NewKlass.release = standardReleaser;                                                                              // 108\n  return NewKlass;                                                                                                  // 109\n};                                                                                                                  // 110\n                                                                                                                    // 111\nvar PooledClass = {                                                                                                 // 112\n  addPoolingTo: addPoolingTo,                                                                                       // 113\n  oneArgumentPooler: oneArgumentPooler,                                                                             // 114\n  twoArgumentPooler: twoArgumentPooler,                                                                             // 115\n  threeArgumentPooler: threeArgumentPooler,                                                                         // 116\n  fourArgumentPooler: fourArgumentPooler,                                                                           // 117\n  fiveArgumentPooler: fiveArgumentPooler                                                                            // 118\n};                                                                                                                  // 119\n                                                                                                                    // 120\nmodule.exports = PooledClass;                                                                                       // 121\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"reactProdInvariant.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/reactProdInvariant.js                                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                       // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule reactProdInvariant                                                                               // 9\n *                                                                                                                  // 10\n */                                                                                                                 // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\n/**                                                                                                                 // 14\n * WARNING: DO NOT manually require this module.                                                                    // 15\n * This is a replacement for `invariant(...)` used by the error code system                                         // 16\n * and will _only_ be required by the corresponding babel pass.                                                     // 17\n * It always throws.                                                                                                // 18\n */                                                                                                                 // 19\n                                                                                                                    // 20\nfunction reactProdInvariant(code) {                                                                                 // 21\n  var argCount = arguments.length - 1;                                                                              // 22\n                                                                                                                    // 23\n  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;\n                                                                                                                    // 25\n  for (var argIdx = 0; argIdx < argCount; argIdx++) {                                                               // 26\n    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);                                              // 27\n  }                                                                                                                 // 28\n                                                                                                                    // 29\n  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';\n                                                                                                                    // 31\n  var error = new Error(message);                                                                                   // 32\n  error.name = 'Invariant Violation';                                                                               // 33\n  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame                                      // 34\n                                                                                                                    // 35\n  throw error;                                                                                                      // 36\n}                                                                                                                   // 37\n                                                                                                                    // 38\nmodule.exports = reactProdInvariant;                                                                                // 39\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactElement.js\":[\"object-assign\",\"./ReactCurrentOwner\",\"fbjs/lib/warning\",\"./canDefineProperty\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactElement.js                                                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2014-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactElement                                                                                     // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar _assign = require('object-assign');                                                                             // 14\n                                                                                                                    // 15\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                             // 16\n                                                                                                                    // 17\nvar warning = require('fbjs/lib/warning');                                                                          // 18\nvar canDefineProperty = require('./canDefineProperty');                                                             // 19\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                               // 20\n                                                                                                                    // 21\n// The Symbol used to tag the ReactElement type. If there is no native Symbol                                       // 22\n// nor polyfill, then a plain number is used for performance.                                                       // 23\nvar REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;\n                                                                                                                    // 25\nvar RESERVED_PROPS = {                                                                                              // 26\n  key: true,                                                                                                        // 27\n  ref: true,                                                                                                        // 28\n  __self: true,                                                                                                     // 29\n  __source: true                                                                                                    // 30\n};                                                                                                                  // 31\n                                                                                                                    // 32\nvar specialPropKeyWarningShown, specialPropRefWarningShown;                                                         // 33\n                                                                                                                    // 34\nfunction hasValidRef(config) {                                                                                      // 35\n  if (process.env.NODE_ENV !== 'production') {                                                                      // 36\n    if (hasOwnProperty.call(config, 'ref')) {                                                                       // 37\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;                                              // 38\n      if (getter && getter.isReactWarning) {                                                                        // 39\n        return false;                                                                                               // 40\n      }                                                                                                             // 41\n    }                                                                                                               // 42\n  }                                                                                                                 // 43\n  return config.ref !== undefined;                                                                                  // 44\n}                                                                                                                   // 45\n                                                                                                                    // 46\nfunction hasValidKey(config) {                                                                                      // 47\n  if (process.env.NODE_ENV !== 'production') {                                                                      // 48\n    if (hasOwnProperty.call(config, 'key')) {                                                                       // 49\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;                                              // 50\n      if (getter && getter.isReactWarning) {                                                                        // 51\n        return false;                                                                                               // 52\n      }                                                                                                             // 53\n    }                                                                                                               // 54\n  }                                                                                                                 // 55\n  return config.key !== undefined;                                                                                  // 56\n}                                                                                                                   // 57\n                                                                                                                    // 58\nfunction defineKeyPropWarningGetter(props, displayName) {                                                           // 59\n  var warnAboutAccessingKey = function () {                                                                         // 60\n    if (!specialPropKeyWarningShown) {                                                                              // 61\n      specialPropKeyWarningShown = true;                                                                            // 62\n      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;\n    }                                                                                                               // 64\n  };                                                                                                                // 65\n  warnAboutAccessingKey.isReactWarning = true;                                                                      // 66\n  Object.defineProperty(props, 'key', {                                                                             // 67\n    get: warnAboutAccessingKey,                                                                                     // 68\n    configurable: true                                                                                              // 69\n  });                                                                                                               // 70\n}                                                                                                                   // 71\n                                                                                                                    // 72\nfunction defineRefPropWarningGetter(props, displayName) {                                                           // 73\n  var warnAboutAccessingRef = function () {                                                                         // 74\n    if (!specialPropRefWarningShown) {                                                                              // 75\n      specialPropRefWarningShown = true;                                                                            // 76\n      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;\n    }                                                                                                               // 78\n  };                                                                                                                // 79\n  warnAboutAccessingRef.isReactWarning = true;                                                                      // 80\n  Object.defineProperty(props, 'ref', {                                                                             // 81\n    get: warnAboutAccessingRef,                                                                                     // 82\n    configurable: true                                                                                              // 83\n  });                                                                                                               // 84\n}                                                                                                                   // 85\n                                                                                                                    // 86\n/**                                                                                                                 // 87\n * Factory method to create a new React element. This no longer adheres to                                          // 88\n * the class pattern, so do not use new to call it. Also, no instanceof check                                       // 89\n * will work. Instead test $$typeof field against Symbol.for('react.element') to check                              // 90\n * if something is a React Element.                                                                                 // 91\n *                                                                                                                  // 92\n * @param {*} type                                                                                                  // 93\n * @param {*} key                                                                                                   // 94\n * @param {string|object} ref                                                                                       // 95\n * @param {*} self A *temporary* helper to detect places where `this` is                                            // 96\n * different from the `owner` when React.createElement is called, so that we                                        // 97\n * can warn. We want to get rid of owner and replace string `ref`s with arrow                                       // 98\n * functions, and as long as `this` and owner are the same, there will be no                                        // 99\n * change in behavior.                                                                                              // 100\n * @param {*} source An annotation object (added by a transpiler or otherwise)                                      // 101\n * indicating filename, line number, and/or other information.                                                      // 102\n * @param {*} owner                                                                                                 // 103\n * @param {*} props                                                                                                 // 104\n * @internal                                                                                                        // 105\n */                                                                                                                 // 106\nvar ReactElement = function (type, key, ref, self, source, owner, props) {                                          // 107\n  var element = {                                                                                                   // 108\n    // This tag allow us to uniquely identify this as a React Element                                               // 109\n    $$typeof: REACT_ELEMENT_TYPE,                                                                                   // 110\n                                                                                                                    // 111\n    // Built-in properties that belong on the element                                                               // 112\n    type: type,                                                                                                     // 113\n    key: key,                                                                                                       // 114\n    ref: ref,                                                                                                       // 115\n    props: props,                                                                                                   // 116\n                                                                                                                    // 117\n    // Record the component responsible for creating this element.                                                  // 118\n    _owner: owner                                                                                                   // 119\n  };                                                                                                                // 120\n                                                                                                                    // 121\n  if (process.env.NODE_ENV !== 'production') {                                                                      // 122\n    // The validation flag is currently mutative. We put it on                                                      // 123\n    // an external backing store so that we can freeze the whole object.                                            // 124\n    // This can be replaced with a WeakMap once they are implemented in                                             // 125\n    // commonly used development environments.                                                                      // 126\n    element._store = {};                                                                                            // 127\n    var shadowChildren = Array.isArray(props.children) ? props.children.slice(0) : props.children;                  // 128\n                                                                                                                    // 129\n    // To make comparing ReactElements easier for testing purposes, we make                                         // 130\n    // the validation flag non-enumerable (where possible, which should                                             // 131\n    // include every environment we run tests in), so the test framework                                            // 132\n    // ignores it.                                                                                                  // 133\n    if (canDefineProperty) {                                                                                        // 134\n      Object.defineProperty(element._store, 'validated', {                                                          // 135\n        configurable: false,                                                                                        // 136\n        enumerable: false,                                                                                          // 137\n        writable: true,                                                                                             // 138\n        value: false                                                                                                // 139\n      });                                                                                                           // 140\n      // self and source are DEV only properties.                                                                   // 141\n      Object.defineProperty(element, '_self', {                                                                     // 142\n        configurable: false,                                                                                        // 143\n        enumerable: false,                                                                                          // 144\n        writable: false,                                                                                            // 145\n        value: self                                                                                                 // 146\n      });                                                                                                           // 147\n      Object.defineProperty(element, '_shadowChildren', {                                                           // 148\n        configurable: false,                                                                                        // 149\n        enumerable: false,                                                                                          // 150\n        writable: false,                                                                                            // 151\n        value: shadowChildren                                                                                       // 152\n      });                                                                                                           // 153\n      // Two elements created in two different places should be considered                                          // 154\n      // equal for testing purposes and therefore we hide it from enumeration.                                      // 155\n      Object.defineProperty(element, '_source', {                                                                   // 156\n        configurable: false,                                                                                        // 157\n        enumerable: false,                                                                                          // 158\n        writable: false,                                                                                            // 159\n        value: source                                                                                               // 160\n      });                                                                                                           // 161\n    } else {                                                                                                        // 162\n      element._store.validated = false;                                                                             // 163\n      element._self = self;                                                                                         // 164\n      element._shadowChildren = shadowChildren;                                                                     // 165\n      element._source = source;                                                                                     // 166\n    }                                                                                                               // 167\n    if (Object.freeze) {                                                                                            // 168\n      Object.freeze(element.props);                                                                                 // 169\n      Object.freeze(element);                                                                                       // 170\n    }                                                                                                               // 171\n  }                                                                                                                 // 172\n                                                                                                                    // 173\n  return element;                                                                                                   // 174\n};                                                                                                                  // 175\n                                                                                                                    // 176\n/**                                                                                                                 // 177\n * Create and return a new ReactElement of the given type.                                                          // 178\n * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement                                 // 179\n */                                                                                                                 // 180\nReactElement.createElement = function (type, config, children) {                                                    // 181\n  var propName;                                                                                                     // 182\n                                                                                                                    // 183\n  // Reserved names are extracted                                                                                   // 184\n  var props = {};                                                                                                   // 185\n                                                                                                                    // 186\n  var key = null;                                                                                                   // 187\n  var ref = null;                                                                                                   // 188\n  var self = null;                                                                                                  // 189\n  var source = null;                                                                                                // 190\n                                                                                                                    // 191\n  if (config != null) {                                                                                             // 192\n    if (hasValidRef(config)) {                                                                                      // 193\n      ref = config.ref;                                                                                             // 194\n    }                                                                                                               // 195\n    if (hasValidKey(config)) {                                                                                      // 196\n      key = '' + config.key;                                                                                        // 197\n    }                                                                                                               // 198\n                                                                                                                    // 199\n    self = config.__self === undefined ? null : config.__self;                                                      // 200\n    source = config.__source === undefined ? null : config.__source;                                                // 201\n    // Remaining properties are added to a new props object                                                         // 202\n    for (propName in config) {                                                                                      // 203\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {                      // 204\n        props[propName] = config[propName];                                                                         // 205\n      }                                                                                                             // 206\n    }                                                                                                               // 207\n  }                                                                                                                 // 208\n                                                                                                                    // 209\n  // Children can be more than one argument, and those are transferred onto                                         // 210\n  // the newly allocated props object.                                                                              // 211\n  var childrenLength = arguments.length - 2;                                                                        // 212\n  if (childrenLength === 1) {                                                                                       // 213\n    props.children = children;                                                                                      // 214\n  } else if (childrenLength > 1) {                                                                                  // 215\n    var childArray = Array(childrenLength);                                                                         // 216\n    for (var i = 0; i < childrenLength; i++) {                                                                      // 217\n      childArray[i] = arguments[i + 2];                                                                             // 218\n    }                                                                                                               // 219\n    props.children = childArray;                                                                                    // 220\n  }                                                                                                                 // 221\n                                                                                                                    // 222\n  // Resolve default props                                                                                          // 223\n  if (type && type.defaultProps) {                                                                                  // 224\n    var defaultProps = type.defaultProps;                                                                           // 225\n    for (propName in defaultProps) {                                                                                // 226\n      if (props[propName] === undefined) {                                                                          // 227\n        props[propName] = defaultProps[propName];                                                                   // 228\n      }                                                                                                             // 229\n    }                                                                                                               // 230\n  }                                                                                                                 // 231\n  if (process.env.NODE_ENV !== 'production') {                                                                      // 232\n    if (key || ref) {                                                                                               // 233\n      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {                         // 234\n        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;           // 235\n        if (key) {                                                                                                  // 236\n          defineKeyPropWarningGetter(props, displayName);                                                           // 237\n        }                                                                                                           // 238\n        if (ref) {                                                                                                  // 239\n          defineRefPropWarningGetter(props, displayName);                                                           // 240\n        }                                                                                                           // 241\n      }                                                                                                             // 242\n    }                                                                                                               // 243\n  }                                                                                                                 // 244\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);                              // 245\n};                                                                                                                  // 246\n                                                                                                                    // 247\n/**                                                                                                                 // 248\n * Return a function that produces ReactElements of a given type.                                                   // 249\n * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory                                 // 250\n */                                                                                                                 // 251\nReactElement.createFactory = function (type) {                                                                      // 252\n  var factory = ReactElement.createElement.bind(null, type);                                                        // 253\n  // Expose the type on the factory and the prototype so that it can be                                             // 254\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.                                                      // 255\n  // This should not be named `constructor` since this may not be the function                                      // 256\n  // that created the element, and it may not even be a constructor.                                                // 257\n  // Legacy hook TODO: Warn if this is accessed                                                                     // 258\n  factory.type = type;                                                                                              // 259\n  return factory;                                                                                                   // 260\n};                                                                                                                  // 261\n                                                                                                                    // 262\nReactElement.cloneAndReplaceKey = function (oldElement, newKey) {                                                   // 263\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n                                                                                                                    // 265\n  return newElement;                                                                                                // 266\n};                                                                                                                  // 267\n                                                                                                                    // 268\n/**                                                                                                                 // 269\n * Clone and return a new ReactElement using element as the starting point.                                         // 270\n * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement                                  // 271\n */                                                                                                                 // 272\nReactElement.cloneElement = function (element, config, children) {                                                  // 273\n  var propName;                                                                                                     // 274\n                                                                                                                    // 275\n  // Original props are copied                                                                                      // 276\n  var props = _assign({}, element.props);                                                                           // 277\n                                                                                                                    // 278\n  // Reserved names are extracted                                                                                   // 279\n  var key = element.key;                                                                                            // 280\n  var ref = element.ref;                                                                                            // 281\n  // Self is preserved since the owner is preserved.                                                                // 282\n  var self = element._self;                                                                                         // 283\n  // Source is preserved since cloneElement is unlikely to be targeted by a                                         // 284\n  // transpiler, and the original source is probably a better indicator of the                                      // 285\n  // true owner.                                                                                                    // 286\n  var source = element._source;                                                                                     // 287\n                                                                                                                    // 288\n  // Owner will be preserved, unless ref is overridden                                                              // 289\n  var owner = element._owner;                                                                                       // 290\n                                                                                                                    // 291\n  if (config != null) {                                                                                             // 292\n    if (hasValidRef(config)) {                                                                                      // 293\n      // Silently steal the ref from the parent.                                                                    // 294\n      ref = config.ref;                                                                                             // 295\n      owner = ReactCurrentOwner.current;                                                                            // 296\n    }                                                                                                               // 297\n    if (hasValidKey(config)) {                                                                                      // 298\n      key = '' + config.key;                                                                                        // 299\n    }                                                                                                               // 300\n                                                                                                                    // 301\n    // Remaining properties override existing props                                                                 // 302\n    var defaultProps;                                                                                               // 303\n    if (element.type && element.type.defaultProps) {                                                                // 304\n      defaultProps = element.type.defaultProps;                                                                     // 305\n    }                                                                                                               // 306\n    for (propName in config) {                                                                                      // 307\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {                      // 308\n        if (config[propName] === undefined && defaultProps !== undefined) {                                         // 309\n          // Resolve default props                                                                                  // 310\n          props[propName] = defaultProps[propName];                                                                 // 311\n        } else {                                                                                                    // 312\n          props[propName] = config[propName];                                                                       // 313\n        }                                                                                                           // 314\n      }                                                                                                             // 315\n    }                                                                                                               // 316\n  }                                                                                                                 // 317\n                                                                                                                    // 318\n  // Children can be more than one argument, and those are transferred onto                                         // 319\n  // the newly allocated props object.                                                                              // 320\n  var childrenLength = arguments.length - 2;                                                                        // 321\n  if (childrenLength === 1) {                                                                                       // 322\n    props.children = children;                                                                                      // 323\n  } else if (childrenLength > 1) {                                                                                  // 324\n    var childArray = Array(childrenLength);                                                                         // 325\n    for (var i = 0; i < childrenLength; i++) {                                                                      // 326\n      childArray[i] = arguments[i + 2];                                                                             // 327\n    }                                                                                                               // 328\n    props.children = childArray;                                                                                    // 329\n  }                                                                                                                 // 330\n                                                                                                                    // 331\n  return ReactElement(element.type, key, ref, self, source, owner, props);                                          // 332\n};                                                                                                                  // 333\n                                                                                                                    // 334\n/**                                                                                                                 // 335\n * Verifies the object is a ReactElement.                                                                           // 336\n * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement                                // 337\n * @param {?object} object                                                                                          // 338\n * @return {boolean} True if `object` is a valid component.                                                         // 339\n * @final                                                                                                           // 340\n */                                                                                                                 // 341\nReactElement.isValidElement = function (object) {                                                                   // 342\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;                   // 343\n};                                                                                                                  // 344\n                                                                                                                    // 345\nReactElement.REACT_ELEMENT_TYPE = REACT_ELEMENT_TYPE;                                                               // 346\n                                                                                                                    // 347\nmodule.exports = ReactElement;                                                                                      // 348\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactCurrentOwner.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactCurrentOwner.js                                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactCurrentOwner                                                                                // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\n/**                                                                                                                 // 14\n * Keeps track of the current owner.                                                                                // 15\n *                                                                                                                  // 16\n * The current owner is the component who should own any components that are                                        // 17\n * currently being constructed.                                                                                     // 18\n */                                                                                                                 // 19\n                                                                                                                    // 20\nvar ReactCurrentOwner = {                                                                                           // 21\n                                                                                                                    // 22\n  /**                                                                                                               // 23\n   * @internal                                                                                                      // 24\n   * @type {ReactComponent}                                                                                         // 25\n   */                                                                                                               // 26\n  current: null                                                                                                     // 27\n                                                                                                                    // 28\n};                                                                                                                  // 29\n                                                                                                                    // 30\nmodule.exports = ReactCurrentOwner;                                                                                 // 31\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"canDefineProperty.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/canDefineProperty.js                                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule canDefineProperty                                                                                // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar canDefineProperty = false;                                                                                      // 14\nif (process.env.NODE_ENV !== 'production') {                                                                        // 15\n  try {                                                                                                             // 16\n    Object.defineProperty({}, 'x', { get: function () {} });                                                        // 17\n    canDefineProperty = true;                                                                                       // 18\n  } catch (x) {                                                                                                     // 19\n    // IE will fail on defineProperty                                                                               // 20\n  }                                                                                                                 // 21\n}                                                                                                                   // 22\n                                                                                                                    // 23\nmodule.exports = canDefineProperty;                                                                                 // 24\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"traverseAllChildren.js\":[\"./reactProdInvariant\",\"./ReactCurrentOwner\",\"./ReactElement\",\"./getIteratorFn\",\"fbjs/lib/invariant\",\"./KeyEscapeUtils\",\"fbjs/lib/warning\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/traverseAllChildren.js                                                                    //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule traverseAllChildren                                                                              // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                               // 14\n                                                                                                                    // 15\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                             // 16\nvar ReactElement = require('./ReactElement');                                                                       // 17\n                                                                                                                    // 18\nvar getIteratorFn = require('./getIteratorFn');                                                                     // 19\nvar invariant = require('fbjs/lib/invariant');                                                                      // 20\nvar KeyEscapeUtils = require('./KeyEscapeUtils');                                                                   // 21\nvar warning = require('fbjs/lib/warning');                                                                          // 22\n                                                                                                                    // 23\nvar SEPARATOR = '.';                                                                                                // 24\nvar SUBSEPARATOR = ':';                                                                                             // 25\n                                                                                                                    // 26\n/**                                                                                                                 // 27\n * TODO: Test that a single child and an array with one item have the same key                                      // 28\n * pattern.                                                                                                         // 29\n */                                                                                                                 // 30\n                                                                                                                    // 31\nvar didWarnAboutMaps = false;                                                                                       // 32\n                                                                                                                    // 33\n/**                                                                                                                 // 34\n * Generate a key string that identifies a component within a set.                                                  // 35\n *                                                                                                                  // 36\n * @param {*} component A component that could contain a manual key.                                                // 37\n * @param {number} index Index that is used if a manual key is not provided.                                        // 38\n * @return {string}                                                                                                 // 39\n */                                                                                                                 // 40\nfunction getComponentKey(component, index) {                                                                        // 41\n  // Do some typechecking here since we call this blindly. We want to ensure                                        // 42\n  // that we don't block potential future ES APIs.                                                                  // 43\n  if (component && typeof component === 'object' && component.key != null) {                                        // 44\n    // Explicit key                                                                                                 // 45\n    return KeyEscapeUtils.escape(component.key);                                                                    // 46\n  }                                                                                                                 // 47\n  // Implicit key determined by the index in the set                                                                // 48\n  return index.toString(36);                                                                                        // 49\n}                                                                                                                   // 50\n                                                                                                                    // 51\n/**                                                                                                                 // 52\n * @param {?*} children Children tree container.                                                                    // 53\n * @param {!string} nameSoFar Name of the key path so far.                                                          // 54\n * @param {!function} callback Callback to invoke with each child found.                                            // 55\n * @param {?*} traverseContext Used to pass information throughout the traversal                                    // 56\n * process.                                                                                                         // 57\n * @return {!number} The number of children in this subtree.                                                        // 58\n */                                                                                                                 // 59\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {                                  // 60\n  var type = typeof children;                                                                                       // 61\n                                                                                                                    // 62\n  if (type === 'undefined' || type === 'boolean') {                                                                 // 63\n    // All of the above are perceived as null.                                                                      // 64\n    children = null;                                                                                                // 65\n  }                                                                                                                 // 66\n                                                                                                                    // 67\n  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {       // 68\n    callback(traverseContext, children,                                                                             // 69\n    // If it's the only child, treat the name as if it was wrapped in an array                                      // 70\n    // so that it's consistent if the number of children grows.                                                     // 71\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);                                       // 72\n    return 1;                                                                                                       // 73\n  }                                                                                                                 // 74\n                                                                                                                    // 75\n  var child;                                                                                                        // 76\n  var nextName;                                                                                                     // 77\n  var subtreeCount = 0; // Count of children found in the current subtree.                                          // 78\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;                                     // 79\n                                                                                                                    // 80\n  if (Array.isArray(children)) {                                                                                    // 81\n    for (var i = 0; i < children.length; i++) {                                                                     // 82\n      child = children[i];                                                                                          // 83\n      nextName = nextNamePrefix + getComponentKey(child, i);                                                        // 84\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                          // 85\n    }                                                                                                               // 86\n  } else {                                                                                                          // 87\n    var iteratorFn = getIteratorFn(children);                                                                       // 88\n    if (iteratorFn) {                                                                                               // 89\n      var iterator = iteratorFn.call(children);                                                                     // 90\n      var step;                                                                                                     // 91\n      if (iteratorFn !== children.entries) {                                                                        // 92\n        var ii = 0;                                                                                                 // 93\n        while (!(step = iterator.next()).done) {                                                                    // 94\n          child = step.value;                                                                                       // 95\n          nextName = nextNamePrefix + getComponentKey(child, ii++);                                                 // 96\n          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                      // 97\n        }                                                                                                           // 98\n      } else {                                                                                                      // 99\n        if (process.env.NODE_ENV !== 'production') {                                                                // 100\n          var mapsAsChildrenAddendum = '';                                                                          // 101\n          if (ReactCurrentOwner.current) {                                                                          // 102\n            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();                                      // 103\n            if (mapsAsChildrenOwnerName) {                                                                          // 104\n              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';            // 105\n            }                                                                                                       // 106\n          }                                                                                                         // 107\n          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;\n          didWarnAboutMaps = true;                                                                                  // 109\n        }                                                                                                           // 110\n        // Iterator will provide entry [k,v] tuples rather than values.                                             // 111\n        while (!(step = iterator.next()).done) {                                                                    // 112\n          var entry = step.value;                                                                                   // 113\n          if (entry) {                                                                                              // 114\n            child = entry[1];                                                                                       // 115\n            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);\n            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                    // 117\n          }                                                                                                         // 118\n        }                                                                                                           // 119\n      }                                                                                                             // 120\n    } else if (type === 'object') {                                                                                 // 121\n      var addendum = '';                                                                                            // 122\n      if (process.env.NODE_ENV !== 'production') {                                                                  // 123\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';\n        if (children._isReactElement) {                                                                             // 125\n          addendum = ' It looks like you\\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';\n        }                                                                                                           // 127\n        if (ReactCurrentOwner.current) {                                                                            // 128\n          var name = ReactCurrentOwner.current.getName();                                                           // 129\n          if (name) {                                                                                               // 130\n            addendum += ' Check the render method of `' + name + '`.';                                              // 131\n          }                                                                                                         // 132\n        }                                                                                                           // 133\n      }                                                                                                             // 134\n      var childrenString = String(children);                                                                        // 135\n      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;\n    }                                                                                                               // 137\n  }                                                                                                                 // 138\n                                                                                                                    // 139\n  return subtreeCount;                                                                                              // 140\n}                                                                                                                   // 141\n                                                                                                                    // 142\n/**                                                                                                                 // 143\n * Traverses children that are typically specified as `props.children`, but                                         // 144\n * might also be specified through attributes:                                                                      // 145\n *                                                                                                                  // 146\n * - `traverseAllChildren(this.props.children, ...)`                                                                // 147\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`                                                       // 148\n *                                                                                                                  // 149\n * The `traverseContext` is an optional argument that is passed through the                                         // 150\n * entire traversal. It can be used to store accumulations or anything else that                                    // 151\n * the callback might find relevant.                                                                                // 152\n *                                                                                                                  // 153\n * @param {?*} children Children tree object.                                                                       // 154\n * @param {!function} callback To invoke upon traversing each child.                                                // 155\n * @param {?*} traverseContext Context for traversal.                                                               // 156\n * @return {!number} The number of children in this subtree.                                                        // 157\n */                                                                                                                 // 158\nfunction traverseAllChildren(children, callback, traverseContext) {                                                 // 159\n  if (children == null) {                                                                                           // 160\n    return 0;                                                                                                       // 161\n  }                                                                                                                 // 162\n                                                                                                                    // 163\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);                                          // 164\n}                                                                                                                   // 165\n                                                                                                                    // 166\nmodule.exports = traverseAllChildren;                                                                               // 167\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getIteratorFn.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/getIteratorFn.js                                                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule getIteratorFn                                                                                    // 9\n *                                                                                                                  // 10\n */                                                                                                                 // 11\n                                                                                                                    // 12\n'use strict';                                                                                                       // 13\n                                                                                                                    // 14\n/* global Symbol */                                                                                                 // 15\n                                                                                                                    // 16\nvar ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;                                              // 17\nvar FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.                                                     // 18\n                                                                                                                    // 19\n/**                                                                                                                 // 20\n * Returns the iterator method function contained on the iterable object.                                           // 21\n *                                                                                                                  // 22\n * Be sure to invoke the function with the iterable as context:                                                     // 23\n *                                                                                                                  // 24\n *     var iteratorFn = getIteratorFn(myIterable);                                                                  // 25\n *     if (iteratorFn) {                                                                                            // 26\n *       var iterator = iteratorFn.call(myIterable);                                                                // 27\n *       ...                                                                                                        // 28\n *     }                                                                                                            // 29\n *                                                                                                                  // 30\n * @param {?object} maybeIterable                                                                                   // 31\n * @return {?function}                                                                                              // 32\n */                                                                                                                 // 33\nfunction getIteratorFn(maybeIterable) {                                                                             // 34\n  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {                                                                           // 36\n    return iteratorFn;                                                                                              // 37\n  }                                                                                                                 // 38\n}                                                                                                                   // 39\n                                                                                                                    // 40\nmodule.exports = getIteratorFn;                                                                                     // 41\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"KeyEscapeUtils.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/KeyEscapeUtils.js                                                                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule KeyEscapeUtils                                                                                   // 9\n *                                                                                                                  // 10\n */                                                                                                                 // 11\n                                                                                                                    // 12\n'use strict';                                                                                                       // 13\n                                                                                                                    // 14\n/**                                                                                                                 // 15\n * Escape and wrap key so it is safe to use as a reactid                                                            // 16\n *                                                                                                                  // 17\n * @param {string} key to be escaped.                                                                               // 18\n * @return {string} the escaped key.                                                                                // 19\n */                                                                                                                 // 20\n                                                                                                                    // 21\nfunction escape(key) {                                                                                              // 22\n  var escapeRegex = /[=:]/g;                                                                                        // 23\n  var escaperLookup = {                                                                                             // 24\n    '=': '=0',                                                                                                      // 25\n    ':': '=2'                                                                                                       // 26\n  };                                                                                                                // 27\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {                                            // 28\n    return escaperLookup[match];                                                                                    // 29\n  });                                                                                                               // 30\n                                                                                                                    // 31\n  return '$' + escapedString;                                                                                       // 32\n}                                                                                                                   // 33\n                                                                                                                    // 34\n/**                                                                                                                 // 35\n * Unescape and unwrap key for human-readable display                                                               // 36\n *                                                                                                                  // 37\n * @param {string} key to unescape.                                                                                 // 38\n * @return {string} the unescaped key.                                                                              // 39\n */                                                                                                                 // 40\nfunction unescape(key) {                                                                                            // 41\n  var unescapeRegex = /(=0|=2)/g;                                                                                   // 42\n  var unescaperLookup = {                                                                                           // 43\n    '=0': '=',                                                                                                      // 44\n    '=2': ':'                                                                                                       // 45\n  };                                                                                                                // 46\n  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);                        // 47\n                                                                                                                    // 48\n  return ('' + keySubstring).replace(unescapeRegex, function (match) {                                              // 49\n    return unescaperLookup[match];                                                                                  // 50\n  });                                                                                                               // 51\n}                                                                                                                   // 52\n                                                                                                                    // 53\nvar KeyEscapeUtils = {                                                                                              // 54\n  escape: escape,                                                                                                   // 55\n  unescape: unescape                                                                                                // 56\n};                                                                                                                  // 57\n                                                                                                                    // 58\nmodule.exports = KeyEscapeUtils;                                                                                    // 59\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactComponent.js\":[\"./reactProdInvariant\",\"./ReactNoopUpdateQueue\",\"./canDefineProperty\",\"fbjs/lib/emptyObject\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactComponent.js                                                                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactComponent                                                                                   // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                               // 14\n                                                                                                                    // 15\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');                                                       // 16\n                                                                                                                    // 17\nvar canDefineProperty = require('./canDefineProperty');                                                             // 18\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                  // 19\nvar invariant = require('fbjs/lib/invariant');                                                                      // 20\nvar warning = require('fbjs/lib/warning');                                                                          // 21\n                                                                                                                    // 22\n/**                                                                                                                 // 23\n * Base class helpers for the updating state of a component.                                                        // 24\n */                                                                                                                 // 25\nfunction ReactComponent(props, context, updater) {                                                                  // 26\n  this.props = props;                                                                                               // 27\n  this.context = context;                                                                                           // 28\n  this.refs = emptyObject;                                                                                          // 29\n  // We initialize the default updater but the real one gets injected by the                                        // 30\n  // renderer.                                                                                                      // 31\n  this.updater = updater || ReactNoopUpdateQueue;                                                                   // 32\n}                                                                                                                   // 33\n                                                                                                                    // 34\nReactComponent.prototype.isReactComponent = {};                                                                     // 35\n                                                                                                                    // 36\n/**                                                                                                                 // 37\n * Sets a subset of the state. Always use this to mutate                                                            // 38\n * state. You should treat `this.state` as immutable.                                                               // 39\n *                                                                                                                  // 40\n * There is no guarantee that `this.state` will be immediately updated, so                                          // 41\n * accessing `this.state` after calling this method may return the old value.                                       // 42\n *                                                                                                                  // 43\n * There is no guarantee that calls to `setState` will run synchronously,                                           // 44\n * as they may eventually be batched together.  You can provide an optional                                         // 45\n * callback that will be executed when the call to setState is actually                                             // 46\n * completed.                                                                                                       // 47\n *                                                                                                                  // 48\n * When a function is provided to setState, it will be called at some point in                                      // 49\n * the future (not synchronously). It will be called with the up to date                                            // 50\n * component arguments (state, props, context). These values can be different                                       // 51\n * from this.* because your function may be called after receiveProps but before                                    // 52\n * shouldComponentUpdate, and this new state, props, and context will not yet be                                    // 53\n * assigned to this.                                                                                                // 54\n *                                                                                                                  // 55\n * @param {object|function} partialState Next partial state or function to                                          // 56\n *        produce next partial state to be merged with current state.                                               // 57\n * @param {?function} callback Called after state is updated.                                                       // 58\n * @final                                                                                                           // 59\n * @protected                                                                                                       // 60\n */                                                                                                                 // 61\nReactComponent.prototype.setState = function (partialState, callback) {                                             // 62\n  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;\n  this.updater.enqueueSetState(this, partialState);                                                                 // 64\n  if (callback) {                                                                                                   // 65\n    this.updater.enqueueCallback(this, callback, 'setState');                                                       // 66\n  }                                                                                                                 // 67\n};                                                                                                                  // 68\n                                                                                                                    // 69\n/**                                                                                                                 // 70\n * Forces an update. This should only be invoked when it is known with                                              // 71\n * certainty that we are **not** in a DOM transaction.                                                              // 72\n *                                                                                                                  // 73\n * You may want to call this when you know that some deeper aspect of the                                           // 74\n * component's state has changed but `setState` was not called.                                                     // 75\n *                                                                                                                  // 76\n * This will not invoke `shouldComponentUpdate`, but it will invoke                                                 // 77\n * `componentWillUpdate` and `componentDidUpdate`.                                                                  // 78\n *                                                                                                                  // 79\n * @param {?function} callback Called after update is complete.                                                     // 80\n * @final                                                                                                           // 81\n * @protected                                                                                                       // 82\n */                                                                                                                 // 83\nReactComponent.prototype.forceUpdate = function (callback) {                                                        // 84\n  this.updater.enqueueForceUpdate(this);                                                                            // 85\n  if (callback) {                                                                                                   // 86\n    this.updater.enqueueCallback(this, callback, 'forceUpdate');                                                    // 87\n  }                                                                                                                 // 88\n};                                                                                                                  // 89\n                                                                                                                    // 90\n/**                                                                                                                 // 91\n * Deprecated APIs. These APIs used to exist on classic React classes but since                                     // 92\n * we would like to deprecate them, we're not going to move them over to this                                       // 93\n * modern base class. Instead, we define a getter that warns if it's accessed.                                      // 94\n */                                                                                                                 // 95\nif (process.env.NODE_ENV !== 'production') {                                                                        // 96\n  var deprecatedAPIs = {                                                                                            // 97\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };                                                                                                                // 100\n  var defineDeprecationWarning = function (methodName, info) {                                                      // 101\n    if (canDefineProperty) {                                                                                        // 102\n      Object.defineProperty(ReactComponent.prototype, methodName, {                                                 // 103\n        get: function () {                                                                                          // 104\n          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;\n          return undefined;                                                                                         // 106\n        }                                                                                                           // 107\n      });                                                                                                           // 108\n    }                                                                                                               // 109\n  };                                                                                                                // 110\n  for (var fnName in deprecatedAPIs) {                                                                              // 111\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {                                                                    // 112\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);                                                     // 113\n    }                                                                                                               // 114\n  }                                                                                                                 // 115\n}                                                                                                                   // 116\n                                                                                                                    // 117\nmodule.exports = ReactComponent;                                                                                    // 118\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactNoopUpdateQueue.js\":[\"fbjs/lib/warning\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactNoopUpdateQueue.js                                                                   //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2015-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactNoopUpdateQueue                                                                             // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar warning = require('fbjs/lib/warning');                                                                          // 14\n                                                                                                                    // 15\nfunction warnNoop(publicInstance, callerName) {                                                                     // 16\n  if (process.env.NODE_ENV !== 'production') {                                                                      // 17\n    var constructor = publicInstance.constructor;                                                                   // 18\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;\n  }                                                                                                                 // 20\n}                                                                                                                   // 21\n                                                                                                                    // 22\n/**                                                                                                                 // 23\n * This is the abstract API for an update queue.                                                                    // 24\n */                                                                                                                 // 25\nvar ReactNoopUpdateQueue = {                                                                                        // 26\n                                                                                                                    // 27\n  /**                                                                                                               // 28\n   * Checks whether or not this composite component is mounted.                                                     // 29\n   * @param {ReactClass} publicInstance The instance we want to test.                                               // 30\n   * @return {boolean} True if mounted, false otherwise.                                                            // 31\n   * @protected                                                                                                     // 32\n   * @final                                                                                                         // 33\n   */                                                                                                               // 34\n  isMounted: function (publicInstance) {                                                                            // 35\n    return false;                                                                                                   // 36\n  },                                                                                                                // 37\n                                                                                                                    // 38\n  /**                                                                                                               // 39\n   * Enqueue a callback that will be executed after all the pending updates                                         // 40\n   * have processed.                                                                                                // 41\n   *                                                                                                                // 42\n   * @param {ReactClass} publicInstance The instance to use as `this` context.                                      // 43\n   * @param {?function} callback Called after state is updated.                                                     // 44\n   * @internal                                                                                                      // 45\n   */                                                                                                               // 46\n  enqueueCallback: function (publicInstance, callback) {},                                                          // 47\n                                                                                                                    // 48\n  /**                                                                                                               // 49\n   * Forces an update. This should only be invoked when it is known with                                            // 50\n   * certainty that we are **not** in a DOM transaction.                                                            // 51\n   *                                                                                                                // 52\n   * You may want to call this when you know that some deeper aspect of the                                         // 53\n   * component's state has changed but `setState` was not called.                                                   // 54\n   *                                                                                                                // 55\n   * This will not invoke `shouldComponentUpdate`, but it will invoke                                               // 56\n   * `componentWillUpdate` and `componentDidUpdate`.                                                                // 57\n   *                                                                                                                // 58\n   * @param {ReactClass} publicInstance The instance that should rerender.                                          // 59\n   * @internal                                                                                                      // 60\n   */                                                                                                               // 61\n  enqueueForceUpdate: function (publicInstance) {                                                                   // 62\n    warnNoop(publicInstance, 'forceUpdate');                                                                        // 63\n  },                                                                                                                // 64\n                                                                                                                    // 65\n  /**                                                                                                               // 66\n   * Replaces all of the state. Always use this or `setState` to mutate state.                                      // 67\n   * You should treat `this.state` as immutable.                                                                    // 68\n   *                                                                                                                // 69\n   * There is no guarantee that `this.state` will be immediately updated, so                                        // 70\n   * accessing `this.state` after calling this method may return the old value.                                     // 71\n   *                                                                                                                // 72\n   * @param {ReactClass} publicInstance The instance that should rerender.                                          // 73\n   * @param {object} completeState Next state.                                                                      // 74\n   * @internal                                                                                                      // 75\n   */                                                                                                               // 76\n  enqueueReplaceState: function (publicInstance, completeState) {                                                   // 77\n    warnNoop(publicInstance, 'replaceState');                                                                       // 78\n  },                                                                                                                // 79\n                                                                                                                    // 80\n  /**                                                                                                               // 81\n   * Sets a subset of the state. This only exists because _pendingState is                                          // 82\n   * internal. This provides a merging strategy that is not available to deep                                       // 83\n   * properties which is confusing. TODO: Expose pendingState or don't use it                                       // 84\n   * during the merge.                                                                                              // 85\n   *                                                                                                                // 86\n   * @param {ReactClass} publicInstance The instance that should rerender.                                          // 87\n   * @param {object} partialState Next partial state to be merged with state.                                       // 88\n   * @internal                                                                                                      // 89\n   */                                                                                                               // 90\n  enqueueSetState: function (publicInstance, partialState) {                                                        // 91\n    warnNoop(publicInstance, 'setState');                                                                           // 92\n  }                                                                                                                 // 93\n};                                                                                                                  // 94\n                                                                                                                    // 95\nmodule.exports = ReactNoopUpdateQueue;                                                                              // 96\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactPureComponent.js\":[\"object-assign\",\"./ReactComponent\",\"./ReactNoopUpdateQueue\",\"fbjs/lib/emptyObject\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactPureComponent.js                                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactPureComponent                                                                               // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar _assign = require('object-assign');                                                                             // 14\n                                                                                                                    // 15\nvar ReactComponent = require('./ReactComponent');                                                                   // 16\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');                                                       // 17\n                                                                                                                    // 18\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                  // 19\n                                                                                                                    // 20\n/**                                                                                                                 // 21\n * Base class helpers for the updating state of a component.                                                        // 22\n */                                                                                                                 // 23\nfunction ReactPureComponent(props, context, updater) {                                                              // 24\n  // Duplicated from ReactComponent.                                                                                // 25\n  this.props = props;                                                                                               // 26\n  this.context = context;                                                                                           // 27\n  this.refs = emptyObject;                                                                                          // 28\n  // We initialize the default updater but the real one gets injected by the                                        // 29\n  // renderer.                                                                                                      // 30\n  this.updater = updater || ReactNoopUpdateQueue;                                                                   // 31\n}                                                                                                                   // 32\n                                                                                                                    // 33\nfunction ComponentDummy() {}                                                                                        // 34\nComponentDummy.prototype = ReactComponent.prototype;                                                                // 35\nReactPureComponent.prototype = new ComponentDummy();                                                                // 36\nReactPureComponent.prototype.constructor = ReactPureComponent;                                                      // 37\n// Avoid an extra prototype jump for these methods.                                                                 // 38\n_assign(ReactPureComponent.prototype, ReactComponent.prototype);                                                    // 39\nReactPureComponent.prototype.isPureReactComponent = true;                                                           // 40\n                                                                                                                    // 41\nmodule.exports = ReactPureComponent;                                                                                // 42\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactClass.js\":[\"./reactProdInvariant\",\"object-assign\",\"./ReactComponent\",\"./ReactElement\",\"./ReactPropTypeLocations\",\"./ReactPropTypeLocationNames\",\"./ReactNoopUpdateQueue\",\"fbjs/lib/emptyObject\",\"fbjs/lib/invariant\",\"fbjs/lib/keyMirror\",\"fbjs/lib/keyOf\",\"fbjs/lib/warning\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactClass.js                                                                             //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactClass                                                                                       // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar _prodInvariant = require('./reactProdInvariant'),                                                               // 14\n    _assign = require('object-assign');                                                                             // 15\n                                                                                                                    // 16\nvar ReactComponent = require('./ReactComponent');                                                                   // 17\nvar ReactElement = require('./ReactElement');                                                                       // 18\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');                                                   // 19\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                           // 20\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');                                                       // 21\n                                                                                                                    // 22\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                  // 23\nvar invariant = require('fbjs/lib/invariant');                                                                      // 24\nvar keyMirror = require('fbjs/lib/keyMirror');                                                                      // 25\nvar keyOf = require('fbjs/lib/keyOf');                                                                              // 26\nvar warning = require('fbjs/lib/warning');                                                                          // 27\n                                                                                                                    // 28\nvar MIXINS_KEY = keyOf({ mixins: null });                                                                           // 29\n                                                                                                                    // 30\n/**                                                                                                                 // 31\n * Policies that describe methods in `ReactClassInterface`.                                                         // 32\n */                                                                                                                 // 33\nvar SpecPolicy = keyMirror({                                                                                        // 34\n  /**                                                                                                               // 35\n   * These methods may be defined only once by the class specification or mixin.                                    // 36\n   */                                                                                                               // 37\n  DEFINE_ONCE: null,                                                                                                // 38\n  /**                                                                                                               // 39\n   * These methods may be defined by both the class specification and mixins.                                       // 40\n   * Subsequent definitions will be chained. These methods must return void.                                        // 41\n   */                                                                                                               // 42\n  DEFINE_MANY: null,                                                                                                // 43\n  /**                                                                                                               // 44\n   * These methods are overriding the base class.                                                                   // 45\n   */                                                                                                               // 46\n  OVERRIDE_BASE: null,                                                                                              // 47\n  /**                                                                                                               // 48\n   * These methods are similar to DEFINE_MANY, except we assume they return                                         // 49\n   * objects. We try to merge the keys of the return values of all the mixed in                                     // 50\n   * functions. If there is a key conflict we throw.                                                                // 51\n   */                                                                                                               // 52\n  DEFINE_MANY_MERGED: null                                                                                          // 53\n});                                                                                                                 // 54\n                                                                                                                    // 55\nvar injectedMixins = [];                                                                                            // 56\n                                                                                                                    // 57\n/**                                                                                                                 // 58\n * Composite components are higher-level components that compose other composite                                    // 59\n * or host components.                                                                                              // 60\n *                                                                                                                  // 61\n * To create a new type of `ReactClass`, pass a specification of                                                    // 62\n * your new class to `React.createClass`. The only requirement of your class                                        // 63\n * specification is that you implement a `render` method.                                                           // 64\n *                                                                                                                  // 65\n *   var MyComponent = React.createClass({                                                                          // 66\n *     render: function() {                                                                                         // 67\n *       return <div>Hello World</div>;                                                                             // 68\n *     }                                                                                                            // 69\n *   });                                                                                                            // 70\n *                                                                                                                  // 71\n * The class specification supports a specific protocol of methods that have                                        // 72\n * special meaning (e.g. `render`). See `ReactClassInterface` for                                                   // 73\n * more the comprehensive protocol. Any other properties and methods in the                                         // 74\n * class specification will be available on the prototype.                                                          // 75\n *                                                                                                                  // 76\n * @interface ReactClassInterface                                                                                   // 77\n * @internal                                                                                                        // 78\n */                                                                                                                 // 79\nvar ReactClassInterface = {                                                                                         // 80\n                                                                                                                    // 81\n  /**                                                                                                               // 82\n   * An array of Mixin objects to include when defining your component.                                             // 83\n   *                                                                                                                // 84\n   * @type {array}                                                                                                  // 85\n   * @optional                                                                                                      // 86\n   */                                                                                                               // 87\n  mixins: SpecPolicy.DEFINE_MANY,                                                                                   // 88\n                                                                                                                    // 89\n  /**                                                                                                               // 90\n   * An object containing properties and methods that should be defined on                                          // 91\n   * the component's constructor instead of its prototype (static methods).                                         // 92\n   *                                                                                                                // 93\n   * @type {object}                                                                                                 // 94\n   * @optional                                                                                                      // 95\n   */                                                                                                               // 96\n  statics: SpecPolicy.DEFINE_MANY,                                                                                  // 97\n                                                                                                                    // 98\n  /**                                                                                                               // 99\n   * Definition of prop types for this component.                                                                   // 100\n   *                                                                                                                // 101\n   * @type {object}                                                                                                 // 102\n   * @optional                                                                                                      // 103\n   */                                                                                                               // 104\n  propTypes: SpecPolicy.DEFINE_MANY,                                                                                // 105\n                                                                                                                    // 106\n  /**                                                                                                               // 107\n   * Definition of context types for this component.                                                                // 108\n   *                                                                                                                // 109\n   * @type {object}                                                                                                 // 110\n   * @optional                                                                                                      // 111\n   */                                                                                                               // 112\n  contextTypes: SpecPolicy.DEFINE_MANY,                                                                             // 113\n                                                                                                                    // 114\n  /**                                                                                                               // 115\n   * Definition of context types this component sets for its children.                                              // 116\n   *                                                                                                                // 117\n   * @type {object}                                                                                                 // 118\n   * @optional                                                                                                      // 119\n   */                                                                                                               // 120\n  childContextTypes: SpecPolicy.DEFINE_MANY,                                                                        // 121\n                                                                                                                    // 122\n  // ==== Definition methods ====                                                                                   // 123\n                                                                                                                    // 124\n  /**                                                                                                               // 125\n   * Invoked when the component is mounted. Values in the mapping will be set on                                    // 126\n   * `this.props` if that prop is not specified (i.e. using an `in` check).                                         // 127\n   *                                                                                                                // 128\n   * This method is invoked before `getInitialState` and therefore cannot rely                                      // 129\n   * on `this.state` or use `this.setState`.                                                                        // 130\n   *                                                                                                                // 131\n   * @return {object}                                                                                               // 132\n   * @optional                                                                                                      // 133\n   */                                                                                                               // 134\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,                                                                   // 135\n                                                                                                                    // 136\n  /**                                                                                                               // 137\n   * Invoked once before the component is mounted. The return value will be used                                    // 138\n   * as the initial value of `this.state`.                                                                          // 139\n   *                                                                                                                // 140\n   *   getInitialState: function() {                                                                                // 141\n   *     return {                                                                                                   // 142\n   *       isOn: false,                                                                                             // 143\n   *       fooBaz: new BazFoo()                                                                                     // 144\n   *     }                                                                                                          // 145\n   *   }                                                                                                            // 146\n   *                                                                                                                // 147\n   * @return {object}                                                                                               // 148\n   * @optional                                                                                                      // 149\n   */                                                                                                               // 150\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,                                                                   // 151\n                                                                                                                    // 152\n  /**                                                                                                               // 153\n   * @return {object}                                                                                               // 154\n   * @optional                                                                                                      // 155\n   */                                                                                                               // 156\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,                                                                   // 157\n                                                                                                                    // 158\n  /**                                                                                                               // 159\n   * Uses props from `this.props` and state from `this.state` to render the                                         // 160\n   * structure of the component.                                                                                    // 161\n   *                                                                                                                // 162\n   * No guarantees are made about when or how often this method is invoked, so                                      // 163\n   * it must not have side effects.                                                                                 // 164\n   *                                                                                                                // 165\n   *   render: function() {                                                                                         // 166\n   *     var name = this.props.name;                                                                                // 167\n   *     return <div>Hello, {name}!</div>;                                                                          // 168\n   *   }                                                                                                            // 169\n   *                                                                                                                // 170\n   * @return {ReactComponent}                                                                                       // 171\n   * @nosideeffects                                                                                                 // 172\n   * @required                                                                                                      // 173\n   */                                                                                                               // 174\n  render: SpecPolicy.DEFINE_ONCE,                                                                                   // 175\n                                                                                                                    // 176\n  // ==== Delegate methods ====                                                                                     // 177\n                                                                                                                    // 178\n  /**                                                                                                               // 179\n   * Invoked when the component is initially created and about to be mounted.                                       // 180\n   * This may have side effects, but any external subscriptions or data created                                     // 181\n   * by this method must be cleaned up in `componentWillUnmount`.                                                   // 182\n   *                                                                                                                // 183\n   * @optional                                                                                                      // 184\n   */                                                                                                               // 185\n  componentWillMount: SpecPolicy.DEFINE_MANY,                                                                       // 186\n                                                                                                                    // 187\n  /**                                                                                                               // 188\n   * Invoked when the component has been mounted and has a DOM representation.                                      // 189\n   * However, there is no guarantee that the DOM node is in the document.                                           // 190\n   *                                                                                                                // 191\n   * Use this as an opportunity to operate on the DOM when the component has                                        // 192\n   * been mounted (initialized and rendered) for the first time.                                                    // 193\n   *                                                                                                                // 194\n   * @param {DOMElement} rootNode DOM element representing the component.                                           // 195\n   * @optional                                                                                                      // 196\n   */                                                                                                               // 197\n  componentDidMount: SpecPolicy.DEFINE_MANY,                                                                        // 198\n                                                                                                                    // 199\n  /**                                                                                                               // 200\n   * Invoked before the component receives new props.                                                               // 201\n   *                                                                                                                // 202\n   * Use this as an opportunity to react to a prop transition by updating the                                       // 203\n   * state using `this.setState`. Current props are accessed via `this.props`.                                      // 204\n   *                                                                                                                // 205\n   *   componentWillReceiveProps: function(nextProps, nextContext) {                                                // 206\n   *     this.setState({                                                                                            // 207\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount                                              // 208\n   *     });                                                                                                        // 209\n   *   }                                                                                                            // 210\n   *                                                                                                                // 211\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop                                     // 212\n   * transition may cause a state change, but the opposite is not true. If you                                      // 213\n   * need it, you are probably looking for `componentWillUpdate`.                                                   // 214\n   *                                                                                                                // 215\n   * @param {object} nextProps                                                                                      // 216\n   * @optional                                                                                                      // 217\n   */                                                                                                               // 218\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,                                                                // 219\n                                                                                                                    // 220\n  /**                                                                                                               // 221\n   * Invoked while deciding if the component should be updated as a result of                                       // 222\n   * receiving new props, state and/or context.                                                                     // 223\n   *                                                                                                                // 224\n   * Use this as an opportunity to `return false` when you're certain that the                                      // 225\n   * transition to the new props/state/context will not require a component                                         // 226\n   * update.                                                                                                        // 227\n   *                                                                                                                // 228\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {                                         // 229\n   *     return !equal(nextProps, this.props) ||                                                                    // 230\n   *       !equal(nextState, this.state) ||                                                                         // 231\n   *       !equal(nextContext, this.context);                                                                       // 232\n   *   }                                                                                                            // 233\n   *                                                                                                                // 234\n   * @param {object} nextProps                                                                                      // 235\n   * @param {?object} nextState                                                                                     // 236\n   * @param {?object} nextContext                                                                                   // 237\n   * @return {boolean} True if the component should update.                                                         // 238\n   * @optional                                                                                                      // 239\n   */                                                                                                               // 240\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,                                                                    // 241\n                                                                                                                    // 242\n  /**                                                                                                               // 243\n   * Invoked when the component is about to update due to a transition from                                         // 244\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`                                      // 245\n   * and `nextContext`.                                                                                             // 246\n   *                                                                                                                // 247\n   * Use this as an opportunity to perform preparation before an update occurs.                                     // 248\n   *                                                                                                                // 249\n   * NOTE: You **cannot** use `this.setState()` in this method.                                                     // 250\n   *                                                                                                                // 251\n   * @param {object} nextProps                                                                                      // 252\n   * @param {?object} nextState                                                                                     // 253\n   * @param {?object} nextContext                                                                                   // 254\n   * @param {ReactReconcileTransaction} transaction                                                                 // 255\n   * @optional                                                                                                      // 256\n   */                                                                                                               // 257\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,                                                                      // 258\n                                                                                                                    // 259\n  /**                                                                                                               // 260\n   * Invoked when the component's DOM representation has been updated.                                              // 261\n   *                                                                                                                // 262\n   * Use this as an opportunity to operate on the DOM when the component has                                        // 263\n   * been updated.                                                                                                  // 264\n   *                                                                                                                // 265\n   * @param {object} prevProps                                                                                      // 266\n   * @param {?object} prevState                                                                                     // 267\n   * @param {?object} prevContext                                                                                   // 268\n   * @param {DOMElement} rootNode DOM element representing the component.                                           // 269\n   * @optional                                                                                                      // 270\n   */                                                                                                               // 271\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,                                                                       // 272\n                                                                                                                    // 273\n  /**                                                                                                               // 274\n   * Invoked when the component is about to be removed from its parent and have                                     // 275\n   * its DOM representation destroyed.                                                                              // 276\n   *                                                                                                                // 277\n   * Use this as an opportunity to deallocate any external resources.                                               // 278\n   *                                                                                                                // 279\n   * NOTE: There is no `componentDidUnmount` since your component will have been                                    // 280\n   * destroyed by that point.                                                                                       // 281\n   *                                                                                                                // 282\n   * @optional                                                                                                      // 283\n   */                                                                                                               // 284\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,                                                                     // 285\n                                                                                                                    // 286\n  // ==== Advanced methods ====                                                                                     // 287\n                                                                                                                    // 288\n  /**                                                                                                               // 289\n   * Updates the component's currently mounted DOM representation.                                                  // 290\n   *                                                                                                                // 291\n   * By default, this implements React's rendering and reconciliation algorithm.                                    // 292\n   * Sophisticated clients may wish to override this.                                                               // 293\n   *                                                                                                                // 294\n   * @param {ReactReconcileTransaction} transaction                                                                 // 295\n   * @internal                                                                                                      // 296\n   * @overridable                                                                                                   // 297\n   */                                                                                                               // 298\n  updateComponent: SpecPolicy.OVERRIDE_BASE                                                                         // 299\n                                                                                                                    // 300\n};                                                                                                                  // 301\n                                                                                                                    // 302\n/**                                                                                                                 // 303\n * Mapping from class specification keys to special processing functions.                                           // 304\n *                                                                                                                  // 305\n * Although these are declared like instance properties in the specification                                        // 306\n * when defining classes using `React.createClass`, they are actually static                                        // 307\n * and are accessible on the constructor instead of the prototype. Despite                                          // 308\n * being static, they must be defined outside of the \"statics\" key under                                            // 309\n * which all other static methods are defined.                                                                      // 310\n */                                                                                                                 // 311\nvar RESERVED_SPEC_KEYS = {                                                                                          // 312\n  displayName: function (Constructor, displayName) {                                                                // 313\n    Constructor.displayName = displayName;                                                                          // 314\n  },                                                                                                                // 315\n  mixins: function (Constructor, mixins) {                                                                          // 316\n    if (mixins) {                                                                                                   // 317\n      for (var i = 0; i < mixins.length; i++) {                                                                     // 318\n        mixSpecIntoComponent(Constructor, mixins[i]);                                                               // 319\n      }                                                                                                             // 320\n    }                                                                                                               // 321\n  },                                                                                                                // 322\n  childContextTypes: function (Constructor, childContextTypes) {                                                    // 323\n    if (process.env.NODE_ENV !== 'production') {                                                                    // 324\n      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);                         // 325\n    }                                                                                                               // 326\n    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);                  // 327\n  },                                                                                                                // 328\n  contextTypes: function (Constructor, contextTypes) {                                                              // 329\n    if (process.env.NODE_ENV !== 'production') {                                                                    // 330\n      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);                                   // 331\n    }                                                                                                               // 332\n    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);                                 // 333\n  },                                                                                                                // 334\n  /**                                                                                                               // 335\n   * Special case getDefaultProps which should move into statics but requires                                       // 336\n   * automatic merging.                                                                                             // 337\n   */                                                                                                               // 338\n  getDefaultProps: function (Constructor, getDefaultProps) {                                                        // 339\n    if (Constructor.getDefaultProps) {                                                                              // 340\n      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);       // 341\n    } else {                                                                                                        // 342\n      Constructor.getDefaultProps = getDefaultProps;                                                                // 343\n    }                                                                                                               // 344\n  },                                                                                                                // 345\n  propTypes: function (Constructor, propTypes) {                                                                    // 346\n    if (process.env.NODE_ENV !== 'production') {                                                                    // 347\n      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);                                         // 348\n    }                                                                                                               // 349\n    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);                                          // 350\n  },                                                                                                                // 351\n  statics: function (Constructor, statics) {                                                                        // 352\n    mixStaticSpecIntoComponent(Constructor, statics);                                                               // 353\n  },                                                                                                                // 354\n  autobind: function () {} };                                                                                       // 355\n                                                                                                                    // 356\n// noop                                                                                                             // 357\nfunction validateTypeDef(Constructor, typeDef, location) {                                                          // 358\n  for (var propName in typeDef) {                                                                                   // 359\n    if (typeDef.hasOwnProperty(propName)) {                                                                         // 360\n      // use a warning instead of an invariant so components                                                        // 361\n      // don't show up in prod but only in __DEV__                                                                  // 362\n      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;\n    }                                                                                                               // 364\n  }                                                                                                                 // 365\n}                                                                                                                   // 366\n                                                                                                                    // 367\nfunction validateMethodOverride(isAlreadyDefined, name) {                                                           // 368\n  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;                     // 369\n                                                                                                                    // 370\n  // Disallow overriding of base class methods unless explicitly allowed.                                           // 371\n  if (ReactClassMixin.hasOwnProperty(name)) {                                                                       // 372\n    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;\n  }                                                                                                                 // 374\n                                                                                                                    // 375\n  // Disallow defining methods more than once unless explicitly allowed.                                            // 376\n  if (isAlreadyDefined) {                                                                                           // 377\n    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;\n  }                                                                                                                 // 379\n}                                                                                                                   // 380\n                                                                                                                    // 381\n/**                                                                                                                 // 382\n * Mixin helper which handles policy validation and reserved                                                        // 383\n * specification keys when building React classes.                                                                  // 384\n */                                                                                                                 // 385\nfunction mixSpecIntoComponent(Constructor, spec) {                                                                  // 386\n  if (!spec) {                                                                                                      // 387\n    if (process.env.NODE_ENV !== 'production') {                                                                    // 388\n      var typeofSpec = typeof spec;                                                                                 // 389\n      var isMixinValid = typeofSpec === 'object' && spec !== null;                                                  // 390\n                                                                                                                    // 391\n      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;\n    }                                                                                                               // 393\n                                                                                                                    // 394\n    return;                                                                                                         // 395\n  }                                                                                                                 // 396\n                                                                                                                    // 397\n  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;\n  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;\n                                                                                                                    // 400\n  var proto = Constructor.prototype;                                                                                // 401\n  var autoBindPairs = proto.__reactAutoBindPairs;                                                                   // 402\n                                                                                                                    // 403\n  // By handling mixins before any other properties, we ensure the same                                             // 404\n  // chaining order is applied to methods with DEFINE_MANY policy, whether                                          // 405\n  // mixins are listed before or after these methods in the spec.                                                   // 406\n  if (spec.hasOwnProperty(MIXINS_KEY)) {                                                                            // 407\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);                                                            // 408\n  }                                                                                                                 // 409\n                                                                                                                    // 410\n  for (var name in spec) {                                                                                          // 411\n    if (!spec.hasOwnProperty(name)) {                                                                               // 412\n      continue;                                                                                                     // 413\n    }                                                                                                               // 414\n                                                                                                                    // 415\n    if (name === MIXINS_KEY) {                                                                                      // 416\n      // We have already handled mixins in a special case above.                                                    // 417\n      continue;                                                                                                     // 418\n    }                                                                                                               // 419\n                                                                                                                    // 420\n    var property = spec[name];                                                                                      // 421\n    var isAlreadyDefined = proto.hasOwnProperty(name);                                                              // 422\n    validateMethodOverride(isAlreadyDefined, name);                                                                 // 423\n                                                                                                                    // 424\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {                                                                  // 425\n      RESERVED_SPEC_KEYS[name](Constructor, property);                                                              // 426\n    } else {                                                                                                        // 427\n      // Setup methods on prototype:                                                                                // 428\n      // The following member methods should not be automatically bound:                                            // 429\n      // 1. Expected ReactClass methods (in the \"interface\").                                                       // 430\n      // 2. Overridden methods (that were mixed in).                                                                // 431\n      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);                                            // 432\n      var isFunction = typeof property === 'function';                                                              // 433\n      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;       // 434\n                                                                                                                    // 435\n      if (shouldAutoBind) {                                                                                         // 436\n        autoBindPairs.push(name, property);                                                                         // 437\n        proto[name] = property;                                                                                     // 438\n      } else {                                                                                                      // 439\n        if (isAlreadyDefined) {                                                                                     // 440\n          var specPolicy = ReactClassInterface[name];                                                               // 441\n                                                                                                                    // 442\n          // These cases should already be caught by validateMethodOverride.                                        // 443\n          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;\n                                                                                                                    // 445\n          // For methods which are defined more than once, call the existing                                        // 446\n          // methods before calling the new property, merging if appropriate.                                       // 447\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {                                                       // 448\n            proto[name] = createMergedResultFunction(proto[name], property);                                        // 449\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {                                                       // 450\n            proto[name] = createChainedFunction(proto[name], property);                                             // 451\n          }                                                                                                         // 452\n        } else {                                                                                                    // 453\n          proto[name] = property;                                                                                   // 454\n          if (process.env.NODE_ENV !== 'production') {                                                              // 455\n            // Add verbose displayName to the function, which helps when looking                                    // 456\n            // at profiling tools.                                                                                  // 457\n            if (typeof property === 'function' && spec.displayName) {                                               // 458\n              proto[name].displayName = spec.displayName + '_' + name;                                              // 459\n            }                                                                                                       // 460\n          }                                                                                                         // 461\n        }                                                                                                           // 462\n      }                                                                                                             // 463\n    }                                                                                                               // 464\n  }                                                                                                                 // 465\n}                                                                                                                   // 466\n                                                                                                                    // 467\nfunction mixStaticSpecIntoComponent(Constructor, statics) {                                                         // 468\n  if (!statics) {                                                                                                   // 469\n    return;                                                                                                         // 470\n  }                                                                                                                 // 471\n  for (var name in statics) {                                                                                       // 472\n    var property = statics[name];                                                                                   // 473\n    if (!statics.hasOwnProperty(name)) {                                                                            // 474\n      continue;                                                                                                     // 475\n    }                                                                                                               // 476\n                                                                                                                    // 477\n    var isReserved = name in RESERVED_SPEC_KEYS;                                                                    // 478\n    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;\n                                                                                                                    // 480\n    var isInherited = name in Constructor;                                                                          // 481\n    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;\n    Constructor[name] = property;                                                                                   // 483\n  }                                                                                                                 // 484\n}                                                                                                                   // 485\n                                                                                                                    // 486\n/**                                                                                                                 // 487\n * Merge two objects, but throw if both contain the same key.                                                       // 488\n *                                                                                                                  // 489\n * @param {object} one The first object, which is mutated.                                                          // 490\n * @param {object} two The second object                                                                            // 491\n * @return {object} one after it has been mutated to contain everything in two.                                     // 492\n */                                                                                                                 // 493\nfunction mergeIntoWithNoDuplicateKeys(one, two) {                                                                   // 494\n  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;\n                                                                                                                    // 496\n  for (var key in two) {                                                                                            // 497\n    if (two.hasOwnProperty(key)) {                                                                                  // 498\n      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;\n      one[key] = two[key];                                                                                          // 500\n    }                                                                                                               // 501\n  }                                                                                                                 // 502\n  return one;                                                                                                       // 503\n}                                                                                                                   // 504\n                                                                                                                    // 505\n/**                                                                                                                 // 506\n * Creates a function that invokes two functions and merges their return values.                                    // 507\n *                                                                                                                  // 508\n * @param {function} one Function to invoke first.                                                                  // 509\n * @param {function} two Function to invoke second.                                                                 // 510\n * @return {function} Function that invokes the two argument functions.                                             // 511\n * @private                                                                                                         // 512\n */                                                                                                                 // 513\nfunction createMergedResultFunction(one, two) {                                                                     // 514\n  return function mergedResult() {                                                                                  // 515\n    var a = one.apply(this, arguments);                                                                             // 516\n    var b = two.apply(this, arguments);                                                                             // 517\n    if (a == null) {                                                                                                // 518\n      return b;                                                                                                     // 519\n    } else if (b == null) {                                                                                         // 520\n      return a;                                                                                                     // 521\n    }                                                                                                               // 522\n    var c = {};                                                                                                     // 523\n    mergeIntoWithNoDuplicateKeys(c, a);                                                                             // 524\n    mergeIntoWithNoDuplicateKeys(c, b);                                                                             // 525\n    return c;                                                                                                       // 526\n  };                                                                                                                // 527\n}                                                                                                                   // 528\n                                                                                                                    // 529\n/**                                                                                                                 // 530\n * Creates a function that invokes two functions and ignores their return vales.                                    // 531\n *                                                                                                                  // 532\n * @param {function} one Function to invoke first.                                                                  // 533\n * @param {function} two Function to invoke second.                                                                 // 534\n * @return {function} Function that invokes the two argument functions.                                             // 535\n * @private                                                                                                         // 536\n */                                                                                                                 // 537\nfunction createChainedFunction(one, two) {                                                                          // 538\n  return function chainedFunction() {                                                                               // 539\n    one.apply(this, arguments);                                                                                     // 540\n    two.apply(this, arguments);                                                                                     // 541\n  };                                                                                                                // 542\n}                                                                                                                   // 543\n                                                                                                                    // 544\n/**                                                                                                                 // 545\n * Binds a method to the component.                                                                                 // 546\n *                                                                                                                  // 547\n * @param {object} component Component whose method is going to be bound.                                           // 548\n * @param {function} method Method to be bound.                                                                     // 549\n * @return {function} The bound method.                                                                             // 550\n */                                                                                                                 // 551\nfunction bindAutoBindMethod(component, method) {                                                                    // 552\n  var boundMethod = method.bind(component);                                                                         // 553\n  if (process.env.NODE_ENV !== 'production') {                                                                      // 554\n    boundMethod.__reactBoundContext = component;                                                                    // 555\n    boundMethod.__reactBoundMethod = method;                                                                        // 556\n    boundMethod.__reactBoundArguments = null;                                                                       // 557\n    var componentName = component.constructor.displayName;                                                          // 558\n    var _bind = boundMethod.bind;                                                                                   // 559\n    boundMethod.bind = function (newThis) {                                                                         // 560\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {     // 561\n        args[_key - 1] = arguments[_key];                                                                           // 562\n      }                                                                                                             // 563\n                                                                                                                    // 564\n      // User is trying to bind() an autobound method; we effectively will                                          // 565\n      // ignore the value of \"this\" that the user is trying to use, so                                              // 566\n      // let's warn.                                                                                                // 567\n      if (newThis !== component && newThis !== null) {                                                              // 568\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;\n      } else if (!args.length) {                                                                                    // 570\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;\n        return boundMethod;                                                                                         // 572\n      }                                                                                                             // 573\n      var reboundMethod = _bind.apply(boundMethod, arguments);                                                      // 574\n      reboundMethod.__reactBoundContext = component;                                                                // 575\n      reboundMethod.__reactBoundMethod = method;                                                                    // 576\n      reboundMethod.__reactBoundArguments = args;                                                                   // 577\n      return reboundMethod;                                                                                         // 578\n    };                                                                                                              // 579\n  }                                                                                                                 // 580\n  return boundMethod;                                                                                               // 581\n}                                                                                                                   // 582\n                                                                                                                    // 583\n/**                                                                                                                 // 584\n * Binds all auto-bound methods in a component.                                                                     // 585\n *                                                                                                                  // 586\n * @param {object} component Component whose method is going to be bound.                                           // 587\n */                                                                                                                 // 588\nfunction bindAutoBindMethods(component) {                                                                           // 589\n  var pairs = component.__reactAutoBindPairs;                                                                       // 590\n  for (var i = 0; i < pairs.length; i += 2) {                                                                       // 591\n    var autoBindKey = pairs[i];                                                                                     // 592\n    var method = pairs[i + 1];                                                                                      // 593\n    component[autoBindKey] = bindAutoBindMethod(component, method);                                                 // 594\n  }                                                                                                                 // 595\n}                                                                                                                   // 596\n                                                                                                                    // 597\n/**                                                                                                                 // 598\n * Add more to the ReactClass base class. These are all legacy features and                                         // 599\n * therefore not already part of the modern ReactComponent.                                                         // 600\n */                                                                                                                 // 601\nvar ReactClassMixin = {                                                                                             // 602\n                                                                                                                    // 603\n  /**                                                                                                               // 604\n   * TODO: This will be deprecated because state should always keep a consistent                                    // 605\n   * type signature and the only use case for this, is to avoid that.                                               // 606\n   */                                                                                                               // 607\n  replaceState: function (newState, callback) {                                                                     // 608\n    this.updater.enqueueReplaceState(this, newState);                                                               // 609\n    if (callback) {                                                                                                 // 610\n      this.updater.enqueueCallback(this, callback, 'replaceState');                                                 // 611\n    }                                                                                                               // 612\n  },                                                                                                                // 613\n                                                                                                                    // 614\n  /**                                                                                                               // 615\n   * Checks whether or not this composite component is mounted.                                                     // 616\n   * @return {boolean} True if mounted, false otherwise.                                                            // 617\n   * @protected                                                                                                     // 618\n   * @final                                                                                                         // 619\n   */                                                                                                               // 620\n  isMounted: function () {                                                                                          // 621\n    return this.updater.isMounted(this);                                                                            // 622\n  }                                                                                                                 // 623\n};                                                                                                                  // 624\n                                                                                                                    // 625\nvar ReactClassComponent = function () {};                                                                           // 626\n_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);                                  // 627\n                                                                                                                    // 628\n/**                                                                                                                 // 629\n * Module for creating composite components.                                                                        // 630\n *                                                                                                                  // 631\n * @class ReactClass                                                                                                // 632\n */                                                                                                                 // 633\nvar ReactClass = {                                                                                                  // 634\n                                                                                                                    // 635\n  /**                                                                                                               // 636\n   * Creates a composite component class given a class specification.                                               // 637\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass                                 // 638\n   *                                                                                                                // 639\n   * @param {object} spec Class specification (which must define `render`).                                         // 640\n   * @return {function} Component constructor function.                                                             // 641\n   * @public                                                                                                        // 642\n   */                                                                                                               // 643\n  createClass: function (spec) {                                                                                    // 644\n    var Constructor = function (props, context, updater) {                                                          // 645\n      // This constructor gets overridden by mocks. The argument is used                                            // 646\n      // by mocks to assert on what gets mounted.                                                                   // 647\n                                                                                                                    // 648\n      if (process.env.NODE_ENV !== 'production') {                                                                  // 649\n        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;\n      }                                                                                                             // 651\n                                                                                                                    // 652\n      // Wire up auto-binding                                                                                       // 653\n      if (this.__reactAutoBindPairs.length) {                                                                       // 654\n        bindAutoBindMethods(this);                                                                                  // 655\n      }                                                                                                             // 656\n                                                                                                                    // 657\n      this.props = props;                                                                                           // 658\n      this.context = context;                                                                                       // 659\n      this.refs = emptyObject;                                                                                      // 660\n      this.updater = updater || ReactNoopUpdateQueue;                                                               // 661\n                                                                                                                    // 662\n      this.state = null;                                                                                            // 663\n                                                                                                                    // 664\n      // ReactClasses doesn't have constructors. Instead, they use the                                              // 665\n      // getInitialState and componentWillMount methods for initialization.                                         // 666\n                                                                                                                    // 667\n      var initialState = this.getInitialState ? this.getInitialState() : null;                                      // 668\n      if (process.env.NODE_ENV !== 'production') {                                                                  // 669\n        // We allow auto-mocks to proceed as if they're returning null.                                             // 670\n        if (initialState === undefined && this.getInitialState._isMockFunction) {                                   // 671\n          // This is probably bad practice. Consider warning here and                                               // 672\n          // deprecating this convenience.                                                                          // 673\n          initialState = null;                                                                                      // 674\n        }                                                                                                           // 675\n      }                                                                                                             // 676\n      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;\n                                                                                                                    // 678\n      this.state = initialState;                                                                                    // 679\n    };                                                                                                              // 680\n    Constructor.prototype = new ReactClassComponent();                                                              // 681\n    Constructor.prototype.constructor = Constructor;                                                                // 682\n    Constructor.prototype.__reactAutoBindPairs = [];                                                                // 683\n                                                                                                                    // 684\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));                                           // 685\n                                                                                                                    // 686\n    mixSpecIntoComponent(Constructor, spec);                                                                        // 687\n                                                                                                                    // 688\n    // Initialize the defaultProps property after all mixins have been merged.                                      // 689\n    if (Constructor.getDefaultProps) {                                                                              // 690\n      Constructor.defaultProps = Constructor.getDefaultProps();                                                     // 691\n    }                                                                                                               // 692\n                                                                                                                    // 693\n    if (process.env.NODE_ENV !== 'production') {                                                                    // 694\n      // This is a tag to indicate that the use of these method names is ok,                                        // 695\n      // since it's used with createClass. If it's not, then it's likely a                                          // 696\n      // mistake so we'll warn you to use the static property, property                                             // 697\n      // initializer or constructor respectively.                                                                   // 698\n      if (Constructor.getDefaultProps) {                                                                            // 699\n        Constructor.getDefaultProps.isReactClassApproved = {};                                                      // 700\n      }                                                                                                             // 701\n      if (Constructor.prototype.getInitialState) {                                                                  // 702\n        Constructor.prototype.getInitialState.isReactClassApproved = {};                                            // 703\n      }                                                                                                             // 704\n    }                                                                                                               // 705\n                                                                                                                    // 706\n    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;\n                                                                                                                    // 708\n    if (process.env.NODE_ENV !== 'production') {                                                                    // 709\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;\n    }                                                                                                               // 712\n                                                                                                                    // 713\n    // Reduce time spent doing lookups by setting these on the prototype.                                           // 714\n    for (var methodName in ReactClassInterface) {                                                                   // 715\n      if (!Constructor.prototype[methodName]) {                                                                     // 716\n        Constructor.prototype[methodName] = null;                                                                   // 717\n      }                                                                                                             // 718\n    }                                                                                                               // 719\n                                                                                                                    // 720\n    return Constructor;                                                                                             // 721\n  },                                                                                                                // 722\n                                                                                                                    // 723\n  injection: {                                                                                                      // 724\n    injectMixin: function (mixin) {                                                                                 // 725\n      injectedMixins.push(mixin);                                                                                   // 726\n    }                                                                                                               // 727\n  }                                                                                                                 // 728\n                                                                                                                    // 729\n};                                                                                                                  // 730\n                                                                                                                    // 731\nmodule.exports = ReactClass;                                                                                        // 732\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactPropTypeLocations.js\":[\"fbjs/lib/keyMirror\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactPropTypeLocations.js                                                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactPropTypeLocations                                                                           // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar keyMirror = require('fbjs/lib/keyMirror');                                                                      // 14\n                                                                                                                    // 15\nvar ReactPropTypeLocations = keyMirror({                                                                            // 16\n  prop: null,                                                                                                       // 17\n  context: null,                                                                                                    // 18\n  childContext: null                                                                                                // 19\n});                                                                                                                 // 20\n                                                                                                                    // 21\nmodule.exports = ReactPropTypeLocations;                                                                            // 22\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactPropTypeLocationNames.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactPropTypeLocationNames.js                                                             //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactPropTypeLocationNames                                                                       // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar ReactPropTypeLocationNames = {};                                                                                // 14\n                                                                                                                    // 15\nif (process.env.NODE_ENV !== 'production') {                                                                        // 16\n  ReactPropTypeLocationNames = {                                                                                    // 17\n    prop: 'prop',                                                                                                   // 18\n    context: 'context',                                                                                             // 19\n    childContext: 'child context'                                                                                   // 20\n  };                                                                                                                // 21\n}                                                                                                                   // 22\n                                                                                                                    // 23\nmodule.exports = ReactPropTypeLocationNames;                                                                        // 24\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMFactories.js\":[\"./ReactElement\",\"./ReactElementValidator\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactDOMFactories.js                                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactDOMFactories                                                                                // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar ReactElement = require('./ReactElement');                                                                       // 14\n                                                                                                                    // 15\n/**                                                                                                                 // 16\n * Create a factory that creates HTML tag elements.                                                                 // 17\n *                                                                                                                  // 18\n * @private                                                                                                         // 19\n */                                                                                                                 // 20\nvar createDOMFactory = ReactElement.createFactory;                                                                  // 21\nif (process.env.NODE_ENV !== 'production') {                                                                        // 22\n  var ReactElementValidator = require('./ReactElementValidator');                                                   // 23\n  createDOMFactory = ReactElementValidator.createFactory;                                                           // 24\n}                                                                                                                   // 25\n                                                                                                                    // 26\n/**                                                                                                                 // 27\n * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.                                       // 28\n * This is also accessible via `React.DOM`.                                                                         // 29\n *                                                                                                                  // 30\n * @public                                                                                                          // 31\n */                                                                                                                 // 32\nvar ReactDOMFactories = {                                                                                           // 33\n  a: createDOMFactory('a'),                                                                                         // 34\n  abbr: createDOMFactory('abbr'),                                                                                   // 35\n  address: createDOMFactory('address'),                                                                             // 36\n  area: createDOMFactory('area'),                                                                                   // 37\n  article: createDOMFactory('article'),                                                                             // 38\n  aside: createDOMFactory('aside'),                                                                                 // 39\n  audio: createDOMFactory('audio'),                                                                                 // 40\n  b: createDOMFactory('b'),                                                                                         // 41\n  base: createDOMFactory('base'),                                                                                   // 42\n  bdi: createDOMFactory('bdi'),                                                                                     // 43\n  bdo: createDOMFactory('bdo'),                                                                                     // 44\n  big: createDOMFactory('big'),                                                                                     // 45\n  blockquote: createDOMFactory('blockquote'),                                                                       // 46\n  body: createDOMFactory('body'),                                                                                   // 47\n  br: createDOMFactory('br'),                                                                                       // 48\n  button: createDOMFactory('button'),                                                                               // 49\n  canvas: createDOMFactory('canvas'),                                                                               // 50\n  caption: createDOMFactory('caption'),                                                                             // 51\n  cite: createDOMFactory('cite'),                                                                                   // 52\n  code: createDOMFactory('code'),                                                                                   // 53\n  col: createDOMFactory('col'),                                                                                     // 54\n  colgroup: createDOMFactory('colgroup'),                                                                           // 55\n  data: createDOMFactory('data'),                                                                                   // 56\n  datalist: createDOMFactory('datalist'),                                                                           // 57\n  dd: createDOMFactory('dd'),                                                                                       // 58\n  del: createDOMFactory('del'),                                                                                     // 59\n  details: createDOMFactory('details'),                                                                             // 60\n  dfn: createDOMFactory('dfn'),                                                                                     // 61\n  dialog: createDOMFactory('dialog'),                                                                               // 62\n  div: createDOMFactory('div'),                                                                                     // 63\n  dl: createDOMFactory('dl'),                                                                                       // 64\n  dt: createDOMFactory('dt'),                                                                                       // 65\n  em: createDOMFactory('em'),                                                                                       // 66\n  embed: createDOMFactory('embed'),                                                                                 // 67\n  fieldset: createDOMFactory('fieldset'),                                                                           // 68\n  figcaption: createDOMFactory('figcaption'),                                                                       // 69\n  figure: createDOMFactory('figure'),                                                                               // 70\n  footer: createDOMFactory('footer'),                                                                               // 71\n  form: createDOMFactory('form'),                                                                                   // 72\n  h1: createDOMFactory('h1'),                                                                                       // 73\n  h2: createDOMFactory('h2'),                                                                                       // 74\n  h3: createDOMFactory('h3'),                                                                                       // 75\n  h4: createDOMFactory('h4'),                                                                                       // 76\n  h5: createDOMFactory('h5'),                                                                                       // 77\n  h6: createDOMFactory('h6'),                                                                                       // 78\n  head: createDOMFactory('head'),                                                                                   // 79\n  header: createDOMFactory('header'),                                                                               // 80\n  hgroup: createDOMFactory('hgroup'),                                                                               // 81\n  hr: createDOMFactory('hr'),                                                                                       // 82\n  html: createDOMFactory('html'),                                                                                   // 83\n  i: createDOMFactory('i'),                                                                                         // 84\n  iframe: createDOMFactory('iframe'),                                                                               // 85\n  img: createDOMFactory('img'),                                                                                     // 86\n  input: createDOMFactory('input'),                                                                                 // 87\n  ins: createDOMFactory('ins'),                                                                                     // 88\n  kbd: createDOMFactory('kbd'),                                                                                     // 89\n  keygen: createDOMFactory('keygen'),                                                                               // 90\n  label: createDOMFactory('label'),                                                                                 // 91\n  legend: createDOMFactory('legend'),                                                                               // 92\n  li: createDOMFactory('li'),                                                                                       // 93\n  link: createDOMFactory('link'),                                                                                   // 94\n  main: createDOMFactory('main'),                                                                                   // 95\n  map: createDOMFactory('map'),                                                                                     // 96\n  mark: createDOMFactory('mark'),                                                                                   // 97\n  menu: createDOMFactory('menu'),                                                                                   // 98\n  menuitem: createDOMFactory('menuitem'),                                                                           // 99\n  meta: createDOMFactory('meta'),                                                                                   // 100\n  meter: createDOMFactory('meter'),                                                                                 // 101\n  nav: createDOMFactory('nav'),                                                                                     // 102\n  noscript: createDOMFactory('noscript'),                                                                           // 103\n  object: createDOMFactory('object'),                                                                               // 104\n  ol: createDOMFactory('ol'),                                                                                       // 105\n  optgroup: createDOMFactory('optgroup'),                                                                           // 106\n  option: createDOMFactory('option'),                                                                               // 107\n  output: createDOMFactory('output'),                                                                               // 108\n  p: createDOMFactory('p'),                                                                                         // 109\n  param: createDOMFactory('param'),                                                                                 // 110\n  picture: createDOMFactory('picture'),                                                                             // 111\n  pre: createDOMFactory('pre'),                                                                                     // 112\n  progress: createDOMFactory('progress'),                                                                           // 113\n  q: createDOMFactory('q'),                                                                                         // 114\n  rp: createDOMFactory('rp'),                                                                                       // 115\n  rt: createDOMFactory('rt'),                                                                                       // 116\n  ruby: createDOMFactory('ruby'),                                                                                   // 117\n  s: createDOMFactory('s'),                                                                                         // 118\n  samp: createDOMFactory('samp'),                                                                                   // 119\n  script: createDOMFactory('script'),                                                                               // 120\n  section: createDOMFactory('section'),                                                                             // 121\n  select: createDOMFactory('select'),                                                                               // 122\n  small: createDOMFactory('small'),                                                                                 // 123\n  source: createDOMFactory('source'),                                                                               // 124\n  span: createDOMFactory('span'),                                                                                   // 125\n  strong: createDOMFactory('strong'),                                                                               // 126\n  style: createDOMFactory('style'),                                                                                 // 127\n  sub: createDOMFactory('sub'),                                                                                     // 128\n  summary: createDOMFactory('summary'),                                                                             // 129\n  sup: createDOMFactory('sup'),                                                                                     // 130\n  table: createDOMFactory('table'),                                                                                 // 131\n  tbody: createDOMFactory('tbody'),                                                                                 // 132\n  td: createDOMFactory('td'),                                                                                       // 133\n  textarea: createDOMFactory('textarea'),                                                                           // 134\n  tfoot: createDOMFactory('tfoot'),                                                                                 // 135\n  th: createDOMFactory('th'),                                                                                       // 136\n  thead: createDOMFactory('thead'),                                                                                 // 137\n  time: createDOMFactory('time'),                                                                                   // 138\n  title: createDOMFactory('title'),                                                                                 // 139\n  tr: createDOMFactory('tr'),                                                                                       // 140\n  track: createDOMFactory('track'),                                                                                 // 141\n  u: createDOMFactory('u'),                                                                                         // 142\n  ul: createDOMFactory('ul'),                                                                                       // 143\n  'var': createDOMFactory('var'),                                                                                   // 144\n  video: createDOMFactory('video'),                                                                                 // 145\n  wbr: createDOMFactory('wbr'),                                                                                     // 146\n                                                                                                                    // 147\n  // SVG                                                                                                            // 148\n  circle: createDOMFactory('circle'),                                                                               // 149\n  clipPath: createDOMFactory('clipPath'),                                                                           // 150\n  defs: createDOMFactory('defs'),                                                                                   // 151\n  ellipse: createDOMFactory('ellipse'),                                                                             // 152\n  g: createDOMFactory('g'),                                                                                         // 153\n  image: createDOMFactory('image'),                                                                                 // 154\n  line: createDOMFactory('line'),                                                                                   // 155\n  linearGradient: createDOMFactory('linearGradient'),                                                               // 156\n  mask: createDOMFactory('mask'),                                                                                   // 157\n  path: createDOMFactory('path'),                                                                                   // 158\n  pattern: createDOMFactory('pattern'),                                                                             // 159\n  polygon: createDOMFactory('polygon'),                                                                             // 160\n  polyline: createDOMFactory('polyline'),                                                                           // 161\n  radialGradient: createDOMFactory('radialGradient'),                                                               // 162\n  rect: createDOMFactory('rect'),                                                                                   // 163\n  stop: createDOMFactory('stop'),                                                                                   // 164\n  svg: createDOMFactory('svg'),                                                                                     // 165\n  text: createDOMFactory('text'),                                                                                   // 166\n  tspan: createDOMFactory('tspan')                                                                                  // 167\n};                                                                                                                  // 168\n                                                                                                                    // 169\nmodule.exports = ReactDOMFactories;                                                                                 // 170\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactElementValidator.js\":[\"./ReactCurrentOwner\",\"./ReactComponentTreeHook\",\"./ReactElement\",\"./ReactPropTypeLocations\",\"./checkReactTypeSpec\",\"./canDefineProperty\",\"./getIteratorFn\",\"fbjs/lib/warning\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactElementValidator.js                                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2014-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactElementValidator                                                                            // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n/**                                                                                                                 // 12\n * ReactElementValidator provides a wrapper around a element factory                                                // 13\n * which validates the props passed to the element. This is intended to be                                          // 14\n * used only in DEV and could be replaced by a static type checker for languages                                    // 15\n * that support it.                                                                                                 // 16\n */                                                                                                                 // 17\n                                                                                                                    // 18\n'use strict';                                                                                                       // 19\n                                                                                                                    // 20\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                             // 21\nvar ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                   // 22\nvar ReactElement = require('./ReactElement');                                                                       // 23\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');                                                   // 24\n                                                                                                                    // 25\nvar checkReactTypeSpec = require('./checkReactTypeSpec');                                                           // 26\n                                                                                                                    // 27\nvar canDefineProperty = require('./canDefineProperty');                                                             // 28\nvar getIteratorFn = require('./getIteratorFn');                                                                     // 29\nvar warning = require('fbjs/lib/warning');                                                                          // 30\n                                                                                                                    // 31\nfunction getDeclarationErrorAddendum() {                                                                            // 32\n  if (ReactCurrentOwner.current) {                                                                                  // 33\n    var name = ReactCurrentOwner.current.getName();                                                                 // 34\n    if (name) {                                                                                                     // 35\n      return ' Check the render method of `' + name + '`.';                                                         // 36\n    }                                                                                                               // 37\n  }                                                                                                                 // 38\n  return '';                                                                                                        // 39\n}                                                                                                                   // 40\n                                                                                                                    // 41\n/**                                                                                                                 // 42\n * Warn if there's no key explicitly set on dynamic arrays of children or                                           // 43\n * object keys are not valid. This allows us to keep track of children between                                      // 44\n * updates.                                                                                                         // 45\n */                                                                                                                 // 46\nvar ownerHasKeyUseWarning = {};                                                                                     // 47\n                                                                                                                    // 48\nfunction getCurrentComponentErrorInfo(parentType) {                                                                 // 49\n  var info = getDeclarationErrorAddendum();                                                                         // 50\n                                                                                                                    // 51\n  if (!info) {                                                                                                      // 52\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;       // 53\n    if (parentName) {                                                                                               // 54\n      info = ' Check the top-level render call using <' + parentName + '>.';                                        // 55\n    }                                                                                                               // 56\n  }                                                                                                                 // 57\n  return info;                                                                                                      // 58\n}                                                                                                                   // 59\n                                                                                                                    // 60\n/**                                                                                                                 // 61\n * Warn if the element doesn't have an explicit key assigned to it.                                                 // 62\n * This element is in an array. The array could grow and shrink or be                                               // 63\n * reordered. All children that haven't already been validated are required to                                      // 64\n * have a \"key\" property assigned to it. Error statuses are cached so a warning                                     // 65\n * will only be shown once.                                                                                         // 66\n *                                                                                                                  // 67\n * @internal                                                                                                        // 68\n * @param {ReactElement} element Element that requires a key.                                                       // 69\n * @param {*} parentType element's parent's type.                                                                   // 70\n */                                                                                                                 // 71\nfunction validateExplicitKey(element, parentType) {                                                                 // 72\n  if (!element._store || element._store.validated || element.key != null) {                                         // 73\n    return;                                                                                                         // 74\n  }                                                                                                                 // 75\n  element._store.validated = true;                                                                                  // 76\n                                                                                                                    // 77\n  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});                         // 78\n                                                                                                                    // 79\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);                                         // 80\n  if (memoizer[currentComponentErrorInfo]) {                                                                        // 81\n    return;                                                                                                         // 82\n  }                                                                                                                 // 83\n  memoizer[currentComponentErrorInfo] = true;                                                                       // 84\n                                                                                                                    // 85\n  // Usually the current owner is the offender, but if it accepts children as a                                     // 86\n  // property, it may be the creator of the child that's responsible for                                            // 87\n  // assigning it a key.                                                                                            // 88\n  var childOwner = '';                                                                                              // 89\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {                                  // 90\n    // Give the component that originally created this child.                                                       // 91\n    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';                                   // 92\n  }                                                                                                                 // 93\n                                                                                                                    // 94\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;\n}                                                                                                                   // 96\n                                                                                                                    // 97\n/**                                                                                                                 // 98\n * Ensure that every element either is passed in a static location, in an                                           // 99\n * array with an explicit keys property defined, or in an object literal                                            // 100\n * with valid key property.                                                                                         // 101\n *                                                                                                                  // 102\n * @internal                                                                                                        // 103\n * @param {ReactNode} node Statically passed child of any type.                                                     // 104\n * @param {*} parentType node's parent's type.                                                                      // 105\n */                                                                                                                 // 106\nfunction validateChildKeys(node, parentType) {                                                                      // 107\n  if (typeof node !== 'object') {                                                                                   // 108\n    return;                                                                                                         // 109\n  }                                                                                                                 // 110\n  if (Array.isArray(node)) {                                                                                        // 111\n    for (var i = 0; i < node.length; i++) {                                                                         // 112\n      var child = node[i];                                                                                          // 113\n      if (ReactElement.isValidElement(child)) {                                                                     // 114\n        validateExplicitKey(child, parentType);                                                                     // 115\n      }                                                                                                             // 116\n    }                                                                                                               // 117\n  } else if (ReactElement.isValidElement(node)) {                                                                   // 118\n    // This element was passed in a valid location.                                                                 // 119\n    if (node._store) {                                                                                              // 120\n      node._store.validated = true;                                                                                 // 121\n    }                                                                                                               // 122\n  } else if (node) {                                                                                                // 123\n    var iteratorFn = getIteratorFn(node);                                                                           // 124\n    // Entry iterators provide implicit keys.                                                                       // 125\n    if (iteratorFn) {                                                                                               // 126\n      if (iteratorFn !== node.entries) {                                                                            // 127\n        var iterator = iteratorFn.call(node);                                                                       // 128\n        var step;                                                                                                   // 129\n        while (!(step = iterator.next()).done) {                                                                    // 130\n          if (ReactElement.isValidElement(step.value)) {                                                            // 131\n            validateExplicitKey(step.value, parentType);                                                            // 132\n          }                                                                                                         // 133\n        }                                                                                                           // 134\n      }                                                                                                             // 135\n    }                                                                                                               // 136\n  }                                                                                                                 // 137\n}                                                                                                                   // 138\n                                                                                                                    // 139\n/**                                                                                                                 // 140\n * Given an element, validate that its props follow the propTypes definition,                                       // 141\n * provided by the type.                                                                                            // 142\n *                                                                                                                  // 143\n * @param {ReactElement} element                                                                                    // 144\n */                                                                                                                 // 145\nfunction validatePropTypes(element) {                                                                               // 146\n  var componentClass = element.type;                                                                                // 147\n  if (typeof componentClass !== 'function') {                                                                       // 148\n    return;                                                                                                         // 149\n  }                                                                                                                 // 150\n  var name = componentClass.displayName || componentClass.name;                                                     // 151\n  if (componentClass.propTypes) {                                                                                   // 152\n    checkReactTypeSpec(componentClass.propTypes, element.props, ReactPropTypeLocations.prop, name, element, null);  // 153\n  }                                                                                                                 // 154\n  if (typeof componentClass.getDefaultProps === 'function') {                                                       // 155\n    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;\n  }                                                                                                                 // 157\n}                                                                                                                   // 158\n                                                                                                                    // 159\nvar ReactElementValidator = {                                                                                       // 160\n                                                                                                                    // 161\n  createElement: function (type, props, children) {                                                                 // 162\n    var validType = typeof type === 'string' || typeof type === 'function';                                         // 163\n    // We warn in this case but don't throw. We expect the element creation to                                      // 164\n    // succeed and there will likely be errors in render.                                                           // 165\n    if (!validType) {                                                                                               // 166\n      process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;\n    }                                                                                                               // 168\n                                                                                                                    // 169\n    var element = ReactElement.createElement.apply(this, arguments);                                                // 170\n                                                                                                                    // 171\n    // The result can be nullish if a mock or a custom function is used.                                            // 172\n    // TODO: Drop this when these are no longer allowed as the type argument.                                       // 173\n    if (element == null) {                                                                                          // 174\n      return element;                                                                                               // 175\n    }                                                                                                               // 176\n                                                                                                                    // 177\n    // Skip key warning if the type isn't valid since our key validation logic                                      // 178\n    // doesn't expect a non-string/function type and can throw confusing errors.                                    // 179\n    // We don't want exception behavior to differ between dev and prod.                                             // 180\n    // (Rendering will throw with a helpful message and as soon as the type is                                      // 181\n    // fixed, the key warnings will appear.)                                                                        // 182\n    if (validType) {                                                                                                // 183\n      for (var i = 2; i < arguments.length; i++) {                                                                  // 184\n        validateChildKeys(arguments[i], type);                                                                      // 185\n      }                                                                                                             // 186\n    }                                                                                                               // 187\n                                                                                                                    // 188\n    validatePropTypes(element);                                                                                     // 189\n                                                                                                                    // 190\n    return element;                                                                                                 // 191\n  },                                                                                                                // 192\n                                                                                                                    // 193\n  createFactory: function (type) {                                                                                  // 194\n    var validatedFactory = ReactElementValidator.createElement.bind(null, type);                                    // 195\n    // Legacy hook TODO: Warn if this is accessed                                                                   // 196\n    validatedFactory.type = type;                                                                                   // 197\n                                                                                                                    // 198\n    if (process.env.NODE_ENV !== 'production') {                                                                    // 199\n      if (canDefineProperty) {                                                                                      // 200\n        Object.defineProperty(validatedFactory, 'type', {                                                           // 201\n          enumerable: false,                                                                                        // 202\n          get: function () {                                                                                        // 203\n            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;\n            Object.defineProperty(this, 'type', {                                                                   // 205\n              value: type                                                                                           // 206\n            });                                                                                                     // 207\n            return type;                                                                                            // 208\n          }                                                                                                         // 209\n        });                                                                                                         // 210\n      }                                                                                                             // 211\n    }                                                                                                               // 212\n                                                                                                                    // 213\n    return validatedFactory;                                                                                        // 214\n  },                                                                                                                // 215\n                                                                                                                    // 216\n  cloneElement: function (element, props, children) {                                                               // 217\n    var newElement = ReactElement.cloneElement.apply(this, arguments);                                              // 218\n    for (var i = 2; i < arguments.length; i++) {                                                                    // 219\n      validateChildKeys(arguments[i], newElement.type);                                                             // 220\n    }                                                                                                               // 221\n    validatePropTypes(newElement);                                                                                  // 222\n    return newElement;                                                                                              // 223\n  }                                                                                                                 // 224\n                                                                                                                    // 225\n};                                                                                                                  // 226\n                                                                                                                    // 227\nmodule.exports = ReactElementValidator;                                                                             // 228\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactComponentTreeHook.js\":[\"./reactProdInvariant\",\"./ReactCurrentOwner\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactComponentTreeHook.js                                                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2016-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactComponentTreeHook                                                                           // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                               // 14\n                                                                                                                    // 15\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                             // 16\n                                                                                                                    // 17\nvar invariant = require('fbjs/lib/invariant');                                                                      // 18\nvar warning = require('fbjs/lib/warning');                                                                          // 19\n                                                                                                                    // 20\nfunction isNative(fn) {                                                                                             // 21\n  // Based on isNative() from Lodash                                                                                // 22\n  var funcToString = Function.prototype.toString;                                                                   // 23\n  var hasOwnProperty = Object.prototype.hasOwnProperty;                                                             // 24\n  var reIsNative = RegExp('^' + funcToString                                                                        // 25\n  // Take an example native function source for comparison                                                          // 26\n  .call(hasOwnProperty)                                                                                             // 27\n  // Strip regex characters so we can use it for regex                                                              // 28\n  .replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')                                                                           // 29\n  // Remove hasOwnProperty from the template to make it generic                                                     // 30\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');                               // 31\n  try {                                                                                                             // 32\n    var source = funcToString.call(fn);                                                                             // 33\n    return reIsNative.test(source);                                                                                 // 34\n  } catch (err) {                                                                                                   // 35\n    return false;                                                                                                   // 36\n  }                                                                                                                 // 37\n}                                                                                                                   // 38\n                                                                                                                    // 39\nvar canUseCollections =                                                                                             // 40\n// Array.from                                                                                                       // 41\ntypeof Array.from === 'function' &&                                                                                 // 42\n// Map                                                                                                              // 43\ntypeof Map === 'function' && isNative(Map) &&                                                                       // 44\n// Map.prototype.keys                                                                                               // 45\nMap.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&                // 46\n// Set                                                                                                              // 47\ntypeof Set === 'function' && isNative(Set) &&                                                                       // 48\n// Set.prototype.keys                                                                                               // 49\nSet.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);                  // 50\n                                                                                                                    // 51\nvar itemMap;                                                                                                        // 52\nvar rootIDSet;                                                                                                      // 53\n                                                                                                                    // 54\nvar itemByKey;                                                                                                      // 55\nvar rootByKey;                                                                                                      // 56\n                                                                                                                    // 57\nif (canUseCollections) {                                                                                            // 58\n  itemMap = new Map();                                                                                              // 59\n  rootIDSet = new Set();                                                                                            // 60\n} else {                                                                                                            // 61\n  itemByKey = {};                                                                                                   // 62\n  rootByKey = {};                                                                                                   // 63\n}                                                                                                                   // 64\n                                                                                                                    // 65\nvar unmountedIDs = [];                                                                                              // 66\n                                                                                                                    // 67\n// Use non-numeric keys to prevent V8 performance issues:                                                           // 68\n// https://github.com/facebook/react/pull/7232                                                                      // 69\nfunction getKeyFromID(id) {                                                                                         // 70\n  return '.' + id;                                                                                                  // 71\n}                                                                                                                   // 72\nfunction getIDFromKey(key) {                                                                                        // 73\n  return parseInt(key.substr(1), 10);                                                                               // 74\n}                                                                                                                   // 75\n                                                                                                                    // 76\nfunction get(id) {                                                                                                  // 77\n  if (canUseCollections) {                                                                                          // 78\n    return itemMap.get(id);                                                                                         // 79\n  } else {                                                                                                          // 80\n    var key = getKeyFromID(id);                                                                                     // 81\n    return itemByKey[key];                                                                                          // 82\n  }                                                                                                                 // 83\n}                                                                                                                   // 84\n                                                                                                                    // 85\nfunction remove(id) {                                                                                               // 86\n  if (canUseCollections) {                                                                                          // 87\n    itemMap['delete'](id);                                                                                          // 88\n  } else {                                                                                                          // 89\n    var key = getKeyFromID(id);                                                                                     // 90\n    delete itemByKey[key];                                                                                          // 91\n  }                                                                                                                 // 92\n}                                                                                                                   // 93\n                                                                                                                    // 94\nfunction create(id, element, parentID) {                                                                            // 95\n  var item = {                                                                                                      // 96\n    element: element,                                                                                               // 97\n    parentID: parentID,                                                                                             // 98\n    text: null,                                                                                                     // 99\n    childIDs: [],                                                                                                   // 100\n    isMounted: false,                                                                                               // 101\n    updateCount: 0                                                                                                  // 102\n  };                                                                                                                // 103\n                                                                                                                    // 104\n  if (canUseCollections) {                                                                                          // 105\n    itemMap.set(id, item);                                                                                          // 106\n  } else {                                                                                                          // 107\n    var key = getKeyFromID(id);                                                                                     // 108\n    itemByKey[key] = item;                                                                                          // 109\n  }                                                                                                                 // 110\n}                                                                                                                   // 111\n                                                                                                                    // 112\nfunction addRoot(id) {                                                                                              // 113\n  if (canUseCollections) {                                                                                          // 114\n    rootIDSet.add(id);                                                                                              // 115\n  } else {                                                                                                          // 116\n    var key = getKeyFromID(id);                                                                                     // 117\n    rootByKey[key] = true;                                                                                          // 118\n  }                                                                                                                 // 119\n}                                                                                                                   // 120\n                                                                                                                    // 121\nfunction removeRoot(id) {                                                                                           // 122\n  if (canUseCollections) {                                                                                          // 123\n    rootIDSet['delete'](id);                                                                                        // 124\n  } else {                                                                                                          // 125\n    var key = getKeyFromID(id);                                                                                     // 126\n    delete rootByKey[key];                                                                                          // 127\n  }                                                                                                                 // 128\n}                                                                                                                   // 129\n                                                                                                                    // 130\nfunction getRegisteredIDs() {                                                                                       // 131\n  if (canUseCollections) {                                                                                          // 132\n    return Array.from(itemMap.keys());                                                                              // 133\n  } else {                                                                                                          // 134\n    return Object.keys(itemByKey).map(getIDFromKey);                                                                // 135\n  }                                                                                                                 // 136\n}                                                                                                                   // 137\n                                                                                                                    // 138\nfunction getRootIDs() {                                                                                             // 139\n  if (canUseCollections) {                                                                                          // 140\n    return Array.from(rootIDSet.keys());                                                                            // 141\n  } else {                                                                                                          // 142\n    return Object.keys(rootByKey).map(getIDFromKey);                                                                // 143\n  }                                                                                                                 // 144\n}                                                                                                                   // 145\n                                                                                                                    // 146\nfunction purgeDeep(id) {                                                                                            // 147\n  var item = get(id);                                                                                               // 148\n  if (item) {                                                                                                       // 149\n    var childIDs = item.childIDs;                                                                                   // 150\n                                                                                                                    // 151\n    remove(id);                                                                                                     // 152\n    childIDs.forEach(purgeDeep);                                                                                    // 153\n  }                                                                                                                 // 154\n}                                                                                                                   // 155\n                                                                                                                    // 156\nfunction describeComponentFrame(name, source, ownerName) {                                                          // 157\n  return '\\n    in ' + name + (source ? ' (at ' + source.fileName.replace(/^.*[\\\\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');\n}                                                                                                                   // 159\n                                                                                                                    // 160\nfunction getDisplayName(element) {                                                                                  // 161\n  if (element == null) {                                                                                            // 162\n    return '#empty';                                                                                                // 163\n  } else if (typeof element === 'string' || typeof element === 'number') {                                          // 164\n    return '#text';                                                                                                 // 165\n  } else if (typeof element.type === 'string') {                                                                    // 166\n    return element.type;                                                                                            // 167\n  } else {                                                                                                          // 168\n    return element.type.displayName || element.type.name || 'Unknown';                                              // 169\n  }                                                                                                                 // 170\n}                                                                                                                   // 171\n                                                                                                                    // 172\nfunction describeID(id) {                                                                                           // 173\n  var name = ReactComponentTreeHook.getDisplayName(id);                                                             // 174\n  var element = ReactComponentTreeHook.getElement(id);                                                              // 175\n  var ownerID = ReactComponentTreeHook.getOwnerID(id);                                                              // 176\n  var ownerName;                                                                                                    // 177\n  if (ownerID) {                                                                                                    // 178\n    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);                                                     // 179\n  }                                                                                                                 // 180\n  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;\n  return describeComponentFrame(name, element && element._source, ownerName);                                       // 182\n}                                                                                                                   // 183\n                                                                                                                    // 184\nvar ReactComponentTreeHook = {                                                                                      // 185\n  onSetChildren: function (id, nextChildIDs) {                                                                      // 186\n    var item = get(id);                                                                                             // 187\n    item.childIDs = nextChildIDs;                                                                                   // 188\n                                                                                                                    // 189\n    for (var i = 0; i < nextChildIDs.length; i++) {                                                                 // 190\n      var nextChildID = nextChildIDs[i];                                                                            // 191\n      var nextChild = get(nextChildID);                                                                             // 192\n      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;\n      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;\n      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;\n      if (nextChild.parentID == null) {                                                                             // 196\n        nextChild.parentID = id;                                                                                    // 197\n        // TODO: This shouldn't be necessary but mounting a new root during in                                      // 198\n        // componentWillMount currently causes not-yet-mounted components to                                        // 199\n        // be purged from our tree data so their parent ID is missing.                                              // 200\n      }                                                                                                             // 201\n      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;\n    }                                                                                                               // 203\n  },                                                                                                                // 204\n  onBeforeMountComponent: function (id, element, parentID) {                                                        // 205\n    create(id, element, parentID);                                                                                  // 206\n  },                                                                                                                // 207\n  onBeforeUpdateComponent: function (id, element) {                                                                 // 208\n    var item = get(id);                                                                                             // 209\n    if (!item || !item.isMounted) {                                                                                 // 210\n      // We may end up here as a result of setState() in componentWillUnmount().                                    // 211\n      // In this case, ignore the element.                                                                          // 212\n      return;                                                                                                       // 213\n    }                                                                                                               // 214\n    item.element = element;                                                                                         // 215\n  },                                                                                                                // 216\n  onMountComponent: function (id) {                                                                                 // 217\n    var item = get(id);                                                                                             // 218\n    item.isMounted = true;                                                                                          // 219\n    var isRoot = item.parentID === 0;                                                                               // 220\n    if (isRoot) {                                                                                                   // 221\n      addRoot(id);                                                                                                  // 222\n    }                                                                                                               // 223\n  },                                                                                                                // 224\n  onUpdateComponent: function (id) {                                                                                // 225\n    var item = get(id);                                                                                             // 226\n    if (!item || !item.isMounted) {                                                                                 // 227\n      // We may end up here as a result of setState() in componentWillUnmount().                                    // 228\n      // In this case, ignore the element.                                                                          // 229\n      return;                                                                                                       // 230\n    }                                                                                                               // 231\n    item.updateCount++;                                                                                             // 232\n  },                                                                                                                // 233\n  onUnmountComponent: function (id) {                                                                               // 234\n    var item = get(id);                                                                                             // 235\n    if (item) {                                                                                                     // 236\n      // We need to check if it exists.                                                                             // 237\n      // `item` might not exist if it is inside an error boundary, and a sibling                                    // 238\n      // error boundary child threw while mounting. Then this instance never                                        // 239\n      // got a chance to mount, but it still gets an unmounting event during                                        // 240\n      // the error boundary cleanup.                                                                                // 241\n      item.isMounted = false;                                                                                       // 242\n      var isRoot = item.parentID === 0;                                                                             // 243\n      if (isRoot) {                                                                                                 // 244\n        removeRoot(id);                                                                                             // 245\n      }                                                                                                             // 246\n    }                                                                                                               // 247\n    unmountedIDs.push(id);                                                                                          // 248\n  },                                                                                                                // 249\n  purgeUnmountedComponents: function () {                                                                           // 250\n    if (ReactComponentTreeHook._preventPurging) {                                                                   // 251\n      // Should only be used for testing.                                                                           // 252\n      return;                                                                                                       // 253\n    }                                                                                                               // 254\n                                                                                                                    // 255\n    for (var i = 0; i < unmountedIDs.length; i++) {                                                                 // 256\n      var id = unmountedIDs[i];                                                                                     // 257\n      purgeDeep(id);                                                                                                // 258\n    }                                                                                                               // 259\n    unmountedIDs.length = 0;                                                                                        // 260\n  },                                                                                                                // 261\n  isMounted: function (id) {                                                                                        // 262\n    var item = get(id);                                                                                             // 263\n    return item ? item.isMounted : false;                                                                           // 264\n  },                                                                                                                // 265\n  getCurrentStackAddendum: function (topElement) {                                                                  // 266\n    var info = '';                                                                                                  // 267\n    if (topElement) {                                                                                               // 268\n      var type = topElement.type;                                                                                   // 269\n      var name = typeof type === 'function' ? type.displayName || type.name : type;                                 // 270\n      var owner = topElement._owner;                                                                                // 271\n      info += describeComponentFrame(name || 'Unknown', topElement._source, owner && owner.getName());              // 272\n    }                                                                                                               // 273\n                                                                                                                    // 274\n    var currentOwner = ReactCurrentOwner.current;                                                                   // 275\n    var id = currentOwner && currentOwner._debugID;                                                                 // 276\n                                                                                                                    // 277\n    info += ReactComponentTreeHook.getStackAddendumByID(id);                                                        // 278\n    return info;                                                                                                    // 279\n  },                                                                                                                // 280\n  getStackAddendumByID: function (id) {                                                                             // 281\n    var info = '';                                                                                                  // 282\n    while (id) {                                                                                                    // 283\n      info += describeID(id);                                                                                       // 284\n      id = ReactComponentTreeHook.getParentID(id);                                                                  // 285\n    }                                                                                                               // 286\n    return info;                                                                                                    // 287\n  },                                                                                                                // 288\n  getChildIDs: function (id) {                                                                                      // 289\n    var item = get(id);                                                                                             // 290\n    return item ? item.childIDs : [];                                                                               // 291\n  },                                                                                                                // 292\n  getDisplayName: function (id) {                                                                                   // 293\n    var element = ReactComponentTreeHook.getElement(id);                                                            // 294\n    if (!element) {                                                                                                 // 295\n      return null;                                                                                                  // 296\n    }                                                                                                               // 297\n    return getDisplayName(element);                                                                                 // 298\n  },                                                                                                                // 299\n  getElement: function (id) {                                                                                       // 300\n    var item = get(id);                                                                                             // 301\n    return item ? item.element : null;                                                                              // 302\n  },                                                                                                                // 303\n  getOwnerID: function (id) {                                                                                       // 304\n    var element = ReactComponentTreeHook.getElement(id);                                                            // 305\n    if (!element || !element._owner) {                                                                              // 306\n      return null;                                                                                                  // 307\n    }                                                                                                               // 308\n    return element._owner._debugID;                                                                                 // 309\n  },                                                                                                                // 310\n  getParentID: function (id) {                                                                                      // 311\n    var item = get(id);                                                                                             // 312\n    return item ? item.parentID : null;                                                                             // 313\n  },                                                                                                                // 314\n  getSource: function (id) {                                                                                        // 315\n    var item = get(id);                                                                                             // 316\n    var element = item ? item.element : null;                                                                       // 317\n    var source = element != null ? element._source : null;                                                          // 318\n    return source;                                                                                                  // 319\n  },                                                                                                                // 320\n  getText: function (id) {                                                                                          // 321\n    var element = ReactComponentTreeHook.getElement(id);                                                            // 322\n    if (typeof element === 'string') {                                                                              // 323\n      return element;                                                                                               // 324\n    } else if (typeof element === 'number') {                                                                       // 325\n      return '' + element;                                                                                          // 326\n    } else {                                                                                                        // 327\n      return null;                                                                                                  // 328\n    }                                                                                                               // 329\n  },                                                                                                                // 330\n  getUpdateCount: function (id) {                                                                                   // 331\n    var item = get(id);                                                                                             // 332\n    return item ? item.updateCount : 0;                                                                             // 333\n  },                                                                                                                // 334\n                                                                                                                    // 335\n                                                                                                                    // 336\n  getRegisteredIDs: getRegisteredIDs,                                                                               // 337\n                                                                                                                    // 338\n  getRootIDs: getRootIDs                                                                                            // 339\n};                                                                                                                  // 340\n                                                                                                                    // 341\nmodule.exports = ReactComponentTreeHook;                                                                            // 342\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"checkReactTypeSpec.js\":[\"./reactProdInvariant\",\"./ReactPropTypeLocationNames\",\"./ReactPropTypesSecret\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",\"./ReactComponentTreeHook\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/checkReactTypeSpec.js                                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule checkReactTypeSpec                                                                               // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                               // 14\n                                                                                                                    // 15\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                           // 16\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');                                                       // 17\n                                                                                                                    // 18\nvar invariant = require('fbjs/lib/invariant');                                                                      // 19\nvar warning = require('fbjs/lib/warning');                                                                          // 20\n                                                                                                                    // 21\nvar ReactComponentTreeHook;                                                                                         // 22\n                                                                                                                    // 23\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {                             // 24\n  // Temporary hack.                                                                                                // 25\n  // Inline requires don't work well with Jest:                                                                     // 26\n  // https://github.com/facebook/react/issues/7240                                                                  // 27\n  // Remove the inline requires when we don't need them anymore:                                                    // 28\n  // https://github.com/facebook/react/pull/7178                                                                    // 29\n  ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                     // 30\n}                                                                                                                   // 31\n                                                                                                                    // 32\nvar loggedTypeFailures = {};                                                                                        // 33\n                                                                                                                    // 34\n/**                                                                                                                 // 35\n * Assert that the values match with the type specs.                                                                // 36\n * Error messages are memorized and will only be shown once.                                                        // 37\n *                                                                                                                  // 38\n * @param {object} typeSpecs Map of name to a ReactPropType                                                         // 39\n * @param {object} values Runtime values that need to be type-checked                                               // 40\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"                                                 // 41\n * @param {string} componentName Name of the component for error messages.                                          // 42\n * @param {?object} element The React element that is being type-checked                                            // 43\n * @param {?number} debugID The React component instance that is being type-checked                                 // 44\n * @private                                                                                                         // 45\n */                                                                                                                 // 46\nfunction checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {                         // 47\n  for (var typeSpecName in typeSpecs) {                                                                             // 48\n    if (typeSpecs.hasOwnProperty(typeSpecName)) {                                                                   // 49\n      var error;                                                                                                    // 50\n      // Prop type validation may throw. In case they do, we don't want to                                          // 51\n      // fail the render phase where it didn't fail before. So we log it.                                           // 52\n      // After these have been cleaned up, we'll let them throw.                                                    // 53\n      try {                                                                                                         // 54\n        // This is intentionally an invariant that gets caught. It's the same                                       // 55\n        // behavior as without this statement except with a better message.                                         // 56\n        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n      } catch (ex) {                                                                                                // 59\n        error = ex;                                                                                                 // 60\n      }                                                                                                             // 61\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                       // 63\n        // Only monitor this failure once because there tends to be a lot of the                                    // 64\n        // same error.                                                                                              // 65\n        loggedTypeFailures[error.message] = true;                                                                   // 66\n                                                                                                                    // 67\n        var componentStackInfo = '';                                                                                // 68\n                                                                                                                    // 69\n        if (process.env.NODE_ENV !== 'production') {                                                                // 70\n          if (!ReactComponentTreeHook) {                                                                            // 71\n            ReactComponentTreeHook = require('./ReactComponentTreeHook');                                           // 72\n          }                                                                                                         // 73\n          if (debugID !== null) {                                                                                   // 74\n            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);                              // 75\n          } else if (element !== null) {                                                                            // 76\n            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);                           // 77\n          }                                                                                                         // 78\n        }                                                                                                           // 79\n                                                                                                                    // 80\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;\n      }                                                                                                             // 82\n    }                                                                                                               // 83\n  }                                                                                                                 // 84\n}                                                                                                                   // 85\n                                                                                                                    // 86\nmodule.exports = checkReactTypeSpec;                                                                                // 87\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactPropTypesSecret.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactPropTypesSecret.js                                                                   //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactPropTypesSecret                                                                             // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';                                          // 14\n                                                                                                                    // 15\nmodule.exports = ReactPropTypesSecret;                                                                              // 16\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactPropTypes.js\":[\"./ReactElement\",\"./ReactPropTypeLocationNames\",\"./ReactPropTypesSecret\",\"fbjs/lib/emptyFunction\",\"./getIteratorFn\",\"fbjs/lib/warning\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactPropTypes.js                                                                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactPropTypes                                                                                   // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar ReactElement = require('./ReactElement');                                                                       // 14\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                           // 15\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');                                                       // 16\n                                                                                                                    // 17\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                              // 18\nvar getIteratorFn = require('./getIteratorFn');                                                                     // 19\nvar warning = require('fbjs/lib/warning');                                                                          // 20\n                                                                                                                    // 21\n/**                                                                                                                 // 22\n * Collection of methods that allow declaration and validation of props that are                                    // 23\n * supplied to React components. Example usage:                                                                     // 24\n *                                                                                                                  // 25\n *   var Props = require('ReactPropTypes');                                                                         // 26\n *   var MyArticle = React.createClass({                                                                            // 27\n *     propTypes: {                                                                                                 // 28\n *       // An optional string prop named \"description\".                                                            // 29\n *       description: Props.string,                                                                                 // 30\n *                                                                                                                  // 31\n *       // A required enum prop named \"category\".                                                                  // 32\n *       category: Props.oneOf(['News','Photos']).isRequired,                                                       // 33\n *                                                                                                                  // 34\n *       // A prop named \"dialog\" that requires an instance of Dialog.                                              // 35\n *       dialog: Props.instanceOf(Dialog).isRequired                                                                // 36\n *     },                                                                                                           // 37\n *     render: function() { ... }                                                                                   // 38\n *   });                                                                                                            // 39\n *                                                                                                                  // 40\n * A more formal specification of how these methods are used:                                                       // 41\n *                                                                                                                  // 42\n *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)                                      // 43\n *   decl := ReactPropTypes.{type}(.isRequired)?                                                                    // 44\n *                                                                                                                  // 45\n * Each and every declaration produces a function with the same signature. This                                     // 46\n * allows the creation of custom validation functions. For example:                                                 // 47\n *                                                                                                                  // 48\n *  var MyLink = React.createClass({                                                                                // 49\n *    propTypes: {                                                                                                  // 50\n *      // An optional string or URI prop named \"href\".                                                             // 51\n *      href: function(props, propName, componentName) {                                                            // 52\n *        var propValue = props[propName];                                                                          // 53\n *        if (propValue != null && typeof propValue !== 'string' &&                                                 // 54\n *            !(propValue instanceof URI)) {                                                                        // 55\n *          return new Error(                                                                                       // 56\n *            'Expected a string or an URI for ' + propName + ' in ' +                                              // 57\n *            componentName                                                                                         // 58\n *          );                                                                                                      // 59\n *        }                                                                                                         // 60\n *      }                                                                                                           // 61\n *    },                                                                                                            // 62\n *    render: function() {...}                                                                                      // 63\n *  });                                                                                                             // 64\n *                                                                                                                  // 65\n * @internal                                                                                                        // 66\n */                                                                                                                 // 67\n                                                                                                                    // 68\nvar ANONYMOUS = '<<anonymous>>';                                                                                    // 69\n                                                                                                                    // 70\nvar ReactPropTypes = {                                                                                              // 71\n  array: createPrimitiveTypeChecker('array'),                                                                       // 72\n  bool: createPrimitiveTypeChecker('boolean'),                                                                      // 73\n  func: createPrimitiveTypeChecker('function'),                                                                     // 74\n  number: createPrimitiveTypeChecker('number'),                                                                     // 75\n  object: createPrimitiveTypeChecker('object'),                                                                     // 76\n  string: createPrimitiveTypeChecker('string'),                                                                     // 77\n  symbol: createPrimitiveTypeChecker('symbol'),                                                                     // 78\n                                                                                                                    // 79\n  any: createAnyTypeChecker(),                                                                                      // 80\n  arrayOf: createArrayOfTypeChecker,                                                                                // 81\n  element: createElementTypeChecker(),                                                                              // 82\n  instanceOf: createInstanceTypeChecker,                                                                            // 83\n  node: createNodeChecker(),                                                                                        // 84\n  objectOf: createObjectOfTypeChecker,                                                                              // 85\n  oneOf: createEnumTypeChecker,                                                                                     // 86\n  oneOfType: createUnionTypeChecker,                                                                                // 87\n  shape: createShapeTypeChecker                                                                                     // 88\n};                                                                                                                  // 89\n                                                                                                                    // 90\n/**                                                                                                                 // 91\n * inlined Object.is polyfill to avoid requiring consumers ship their own                                           // 92\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is                       // 93\n */                                                                                                                 // 94\n/*eslint-disable no-self-compare*/                                                                                  // 95\nfunction is(x, y) {                                                                                                 // 96\n  // SameValue algorithm                                                                                            // 97\n  if (x === y) {                                                                                                    // 98\n    // Steps 1-5, 7-10                                                                                              // 99\n    // Steps 6.b-6.e: +0 != -0                                                                                      // 100\n    return x !== 0 || 1 / x === 1 / y;                                                                              // 101\n  } else {                                                                                                          // 102\n    // Step 6.a: NaN == NaN                                                                                         // 103\n    return x !== x && y !== y;                                                                                      // 104\n  }                                                                                                                 // 105\n}                                                                                                                   // 106\n/*eslint-enable no-self-compare*/                                                                                   // 107\n                                                                                                                    // 108\n/**                                                                                                                 // 109\n * We use an Error-like object for backward compatibility as people may call                                        // 110\n * PropTypes directly and inspect their output. However we don't use real                                           // 111\n * Errors anymore. We don't inspect their stack anyway, and creating them                                           // 112\n * is prohibitively expensive if they are created too often, such as what                                           // 113\n * happens in oneOfType() for any type before the one that matched.                                                 // 114\n */                                                                                                                 // 115\nfunction PropTypeError(message) {                                                                                   // 116\n  this.message = message;                                                                                           // 117\n  this.stack = '';                                                                                                  // 118\n}                                                                                                                   // 119\n// Make `instanceof Error` still work for returned errors.                                                          // 120\nPropTypeError.prototype = Error.prototype;                                                                          // 121\n                                                                                                                    // 122\nfunction createChainableTypeChecker(validate) {                                                                     // 123\n  if (process.env.NODE_ENV !== 'production') {                                                                      // 124\n    var manualPropTypeCallCache = {};                                                                               // 125\n  }                                                                                                                 // 126\n  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {                  // 127\n    componentName = componentName || ANONYMOUS;                                                                     // 128\n    propFullName = propFullName || propName;                                                                        // 129\n    if (process.env.NODE_ENV !== 'production') {                                                                    // 130\n      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {                                      // 131\n        var cacheKey = componentName + ':' + propName;                                                              // 132\n        if (!manualPropTypeCallCache[cacheKey]) {                                                                   // 133\n          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in the next major version. You may be ' + 'seeing this warning due to a third-party PropTypes library. ' + 'See https://fb.me/react-warning-dont-call-proptypes for details.', propFullName, componentName) : void 0;\n          manualPropTypeCallCache[cacheKey] = true;                                                                 // 135\n        }                                                                                                           // 136\n      }                                                                                                             // 137\n    }                                                                                                               // 138\n    if (props[propName] == null) {                                                                                  // 139\n      var locationName = ReactPropTypeLocationNames[location];                                                      // 140\n      if (isRequired) {                                                                                             // 141\n        return new PropTypeError('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));\n      }                                                                                                             // 143\n      return null;                                                                                                  // 144\n    } else {                                                                                                        // 145\n      return validate(props, propName, componentName, location, propFullName);                                      // 146\n    }                                                                                                               // 147\n  }                                                                                                                 // 148\n                                                                                                                    // 149\n  var chainedCheckType = checkType.bind(null, false);                                                               // 150\n  chainedCheckType.isRequired = checkType.bind(null, true);                                                         // 151\n                                                                                                                    // 152\n  return chainedCheckType;                                                                                          // 153\n}                                                                                                                   // 154\n                                                                                                                    // 155\nfunction createPrimitiveTypeChecker(expectedType) {                                                                 // 156\n  function validate(props, propName, componentName, location, propFullName, secret) {                               // 157\n    var propValue = props[propName];                                                                                // 158\n    var propType = getPropType(propValue);                                                                          // 159\n    if (propType !== expectedType) {                                                                                // 160\n      var locationName = ReactPropTypeLocationNames[location];                                                      // 161\n      // `propValue` being instance of, say, date/regexp, pass the 'object'                                         // 162\n      // check, but we can offer a more precise error message here rather than                                      // 163\n      // 'of type `object`'.                                                                                        // 164\n      var preciseType = getPreciseType(propValue);                                                                  // 165\n                                                                                                                    // 166\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n    }                                                                                                               // 168\n    return null;                                                                                                    // 169\n  }                                                                                                                 // 170\n  return createChainableTypeChecker(validate);                                                                      // 171\n}                                                                                                                   // 172\n                                                                                                                    // 173\nfunction createAnyTypeChecker() {                                                                                   // 174\n  return createChainableTypeChecker(emptyFunction.thatReturns(null));                                               // 175\n}                                                                                                                   // 176\n                                                                                                                    // 177\nfunction createArrayOfTypeChecker(typeChecker) {                                                                    // 178\n  function validate(props, propName, componentName, location, propFullName) {                                       // 179\n    if (typeof typeChecker !== 'function') {                                                                        // 180\n      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n    }                                                                                                               // 182\n    var propValue = props[propName];                                                                                // 183\n    if (!Array.isArray(propValue)) {                                                                                // 184\n      var locationName = ReactPropTypeLocationNames[location];                                                      // 185\n      var propType = getPropType(propValue);                                                                        // 186\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n    }                                                                                                               // 188\n    for (var i = 0; i < propValue.length; i++) {                                                                    // 189\n      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n      if (error instanceof Error) {                                                                                 // 191\n        return error;                                                                                               // 192\n      }                                                                                                             // 193\n    }                                                                                                               // 194\n    return null;                                                                                                    // 195\n  }                                                                                                                 // 196\n  return createChainableTypeChecker(validate);                                                                      // 197\n}                                                                                                                   // 198\n                                                                                                                    // 199\nfunction createElementTypeChecker() {                                                                               // 200\n  function validate(props, propName, componentName, location, propFullName) {                                       // 201\n    var propValue = props[propName];                                                                                // 202\n    if (!ReactElement.isValidElement(propValue)) {                                                                  // 203\n      var locationName = ReactPropTypeLocationNames[location];                                                      // 204\n      var propType = getPropType(propValue);                                                                        // 205\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n    }                                                                                                               // 207\n    return null;                                                                                                    // 208\n  }                                                                                                                 // 209\n  return createChainableTypeChecker(validate);                                                                      // 210\n}                                                                                                                   // 211\n                                                                                                                    // 212\nfunction createInstanceTypeChecker(expectedClass) {                                                                 // 213\n  function validate(props, propName, componentName, location, propFullName) {                                       // 214\n    if (!(props[propName] instanceof expectedClass)) {                                                              // 215\n      var locationName = ReactPropTypeLocationNames[location];                                                      // 216\n      var expectedClassName = expectedClass.name || ANONYMOUS;                                                      // 217\n      var actualClassName = getClassName(props[propName]);                                                          // 218\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n    }                                                                                                               // 220\n    return null;                                                                                                    // 221\n  }                                                                                                                 // 222\n  return createChainableTypeChecker(validate);                                                                      // 223\n}                                                                                                                   // 224\n                                                                                                                    // 225\nfunction createEnumTypeChecker(expectedValues) {                                                                    // 226\n  if (!Array.isArray(expectedValues)) {                                                                             // 227\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n    return emptyFunction.thatReturnsNull;                                                                           // 229\n  }                                                                                                                 // 230\n                                                                                                                    // 231\n  function validate(props, propName, componentName, location, propFullName) {                                       // 232\n    var propValue = props[propName];                                                                                // 233\n    for (var i = 0; i < expectedValues.length; i++) {                                                               // 234\n      if (is(propValue, expectedValues[i])) {                                                                       // 235\n        return null;                                                                                                // 236\n      }                                                                                                             // 237\n    }                                                                                                               // 238\n                                                                                                                    // 239\n    var locationName = ReactPropTypeLocationNames[location];                                                        // 240\n    var valuesString = JSON.stringify(expectedValues);                                                              // 241\n    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n  }                                                                                                                 // 243\n  return createChainableTypeChecker(validate);                                                                      // 244\n}                                                                                                                   // 245\n                                                                                                                    // 246\nfunction createObjectOfTypeChecker(typeChecker) {                                                                   // 247\n  function validate(props, propName, componentName, location, propFullName) {                                       // 248\n    if (typeof typeChecker !== 'function') {                                                                        // 249\n      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n    }                                                                                                               // 251\n    var propValue = props[propName];                                                                                // 252\n    var propType = getPropType(propValue);                                                                          // 253\n    if (propType !== 'object') {                                                                                    // 254\n      var locationName = ReactPropTypeLocationNames[location];                                                      // 255\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n    }                                                                                                               // 257\n    for (var key in propValue) {                                                                                    // 258\n      if (propValue.hasOwnProperty(key)) {                                                                          // 259\n        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error instanceof Error) {                                                                               // 261\n          return error;                                                                                             // 262\n        }                                                                                                           // 263\n      }                                                                                                             // 264\n    }                                                                                                               // 265\n    return null;                                                                                                    // 266\n  }                                                                                                                 // 267\n  return createChainableTypeChecker(validate);                                                                      // 268\n}                                                                                                                   // 269\n                                                                                                                    // 270\nfunction createUnionTypeChecker(arrayOfTypeCheckers) {                                                              // 271\n  if (!Array.isArray(arrayOfTypeCheckers)) {                                                                        // 272\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n    return emptyFunction.thatReturnsNull;                                                                           // 274\n  }                                                                                                                 // 275\n                                                                                                                    // 276\n  function validate(props, propName, componentName, location, propFullName) {                                       // 277\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {                                                          // 278\n      var checker = arrayOfTypeCheckers[i];                                                                         // 279\n      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {          // 280\n        return null;                                                                                                // 281\n      }                                                                                                             // 282\n    }                                                                                                               // 283\n                                                                                                                    // 284\n    var locationName = ReactPropTypeLocationNames[location];                                                        // 285\n    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n  }                                                                                                                 // 287\n  return createChainableTypeChecker(validate);                                                                      // 288\n}                                                                                                                   // 289\n                                                                                                                    // 290\nfunction createNodeChecker() {                                                                                      // 291\n  function validate(props, propName, componentName, location, propFullName) {                                       // 292\n    if (!isNode(props[propName])) {                                                                                 // 293\n      var locationName = ReactPropTypeLocationNames[location];                                                      // 294\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n    }                                                                                                               // 296\n    return null;                                                                                                    // 297\n  }                                                                                                                 // 298\n  return createChainableTypeChecker(validate);                                                                      // 299\n}                                                                                                                   // 300\n                                                                                                                    // 301\nfunction createShapeTypeChecker(shapeTypes) {                                                                       // 302\n  function validate(props, propName, componentName, location, propFullName) {                                       // 303\n    var propValue = props[propName];                                                                                // 304\n    var propType = getPropType(propValue);                                                                          // 305\n    if (propType !== 'object') {                                                                                    // 306\n      var locationName = ReactPropTypeLocationNames[location];                                                      // 307\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n    }                                                                                                               // 309\n    for (var key in shapeTypes) {                                                                                   // 310\n      var checker = shapeTypes[key];                                                                                // 311\n      if (!checker) {                                                                                               // 312\n        continue;                                                                                                   // 313\n      }                                                                                                             // 314\n      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n      if (error) {                                                                                                  // 316\n        return error;                                                                                               // 317\n      }                                                                                                             // 318\n    }                                                                                                               // 319\n    return null;                                                                                                    // 320\n  }                                                                                                                 // 321\n  return createChainableTypeChecker(validate);                                                                      // 322\n}                                                                                                                   // 323\n                                                                                                                    // 324\nfunction isNode(propValue) {                                                                                        // 325\n  switch (typeof propValue) {                                                                                       // 326\n    case 'number':                                                                                                  // 327\n    case 'string':                                                                                                  // 328\n    case 'undefined':                                                                                               // 329\n      return true;                                                                                                  // 330\n    case 'boolean':                                                                                                 // 331\n      return !propValue;                                                                                            // 332\n    case 'object':                                                                                                  // 333\n      if (Array.isArray(propValue)) {                                                                               // 334\n        return propValue.every(isNode);                                                                             // 335\n      }                                                                                                             // 336\n      if (propValue === null || ReactElement.isValidElement(propValue)) {                                           // 337\n        return true;                                                                                                // 338\n      }                                                                                                             // 339\n                                                                                                                    // 340\n      var iteratorFn = getIteratorFn(propValue);                                                                    // 341\n      if (iteratorFn) {                                                                                             // 342\n        var iterator = iteratorFn.call(propValue);                                                                  // 343\n        var step;                                                                                                   // 344\n        if (iteratorFn !== propValue.entries) {                                                                     // 345\n          while (!(step = iterator.next()).done) {                                                                  // 346\n            if (!isNode(step.value)) {                                                                              // 347\n              return false;                                                                                         // 348\n            }                                                                                                       // 349\n          }                                                                                                         // 350\n        } else {                                                                                                    // 351\n          // Iterator will provide entry [k,v] tuples rather than values.                                           // 352\n          while (!(step = iterator.next()).done) {                                                                  // 353\n            var entry = step.value;                                                                                 // 354\n            if (entry) {                                                                                            // 355\n              if (!isNode(entry[1])) {                                                                              // 356\n                return false;                                                                                       // 357\n              }                                                                                                     // 358\n            }                                                                                                       // 359\n          }                                                                                                         // 360\n        }                                                                                                           // 361\n      } else {                                                                                                      // 362\n        return false;                                                                                               // 363\n      }                                                                                                             // 364\n                                                                                                                    // 365\n      return true;                                                                                                  // 366\n    default:                                                                                                        // 367\n      return false;                                                                                                 // 368\n  }                                                                                                                 // 369\n}                                                                                                                   // 370\n                                                                                                                    // 371\nfunction isSymbol(propType, propValue) {                                                                            // 372\n  // Native Symbol.                                                                                                 // 373\n  if (propType === 'symbol') {                                                                                      // 374\n    return true;                                                                                                    // 375\n  }                                                                                                                 // 376\n                                                                                                                    // 377\n  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'                                                          // 378\n  if (propValue['@@toStringTag'] === 'Symbol') {                                                                    // 379\n    return true;                                                                                                    // 380\n  }                                                                                                                 // 381\n                                                                                                                    // 382\n  // Fallback for non-spec compliant Symbols which are polyfilled.                                                  // 383\n  if (typeof Symbol === 'function' && propValue instanceof Symbol) {                                                // 384\n    return true;                                                                                                    // 385\n  }                                                                                                                 // 386\n                                                                                                                    // 387\n  return false;                                                                                                     // 388\n}                                                                                                                   // 389\n                                                                                                                    // 390\n// Equivalent of `typeof` but with special handling for array and regexp.                                           // 391\nfunction getPropType(propValue) {                                                                                   // 392\n  var propType = typeof propValue;                                                                                  // 393\n  if (Array.isArray(propValue)) {                                                                                   // 394\n    return 'array';                                                                                                 // 395\n  }                                                                                                                 // 396\n  if (propValue instanceof RegExp) {                                                                                // 397\n    // Old webkits (at least until Android 4.0) return 'function' rather than                                       // 398\n    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/                                        // 399\n    // passes PropTypes.object.                                                                                     // 400\n    return 'object';                                                                                                // 401\n  }                                                                                                                 // 402\n  if (isSymbol(propType, propValue)) {                                                                              // 403\n    return 'symbol';                                                                                                // 404\n  }                                                                                                                 // 405\n  return propType;                                                                                                  // 406\n}                                                                                                                   // 407\n                                                                                                                    // 408\n// This handles more types than `getPropType`. Only used for error messages.                                        // 409\n// See `createPrimitiveTypeChecker`.                                                                                // 410\nfunction getPreciseType(propValue) {                                                                                // 411\n  var propType = getPropType(propValue);                                                                            // 412\n  if (propType === 'object') {                                                                                      // 413\n    if (propValue instanceof Date) {                                                                                // 414\n      return 'date';                                                                                                // 415\n    } else if (propValue instanceof RegExp) {                                                                       // 416\n      return 'regexp';                                                                                              // 417\n    }                                                                                                               // 418\n  }                                                                                                                 // 419\n  return propType;                                                                                                  // 420\n}                                                                                                                   // 421\n                                                                                                                    // 422\n// Returns class name of the object, if any.                                                                        // 423\nfunction getClassName(propValue) {                                                                                  // 424\n  if (!propValue.constructor || !propValue.constructor.name) {                                                      // 425\n    return ANONYMOUS;                                                                                               // 426\n  }                                                                                                                 // 427\n  return propValue.constructor.name;                                                                                // 428\n}                                                                                                                   // 429\n                                                                                                                    // 430\nmodule.exports = ReactPropTypes;                                                                                    // 431\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactVersion.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactVersion.js                                                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactVersion                                                                                     // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nmodule.exports = '15.3.2';                                                                                          // 14\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"onlyChild.js\":[\"./reactProdInvariant\",\"./ReactElement\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/onlyChild.js                                                                              //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule onlyChild                                                                                        // 9\n */                                                                                                                 // 10\n'use strict';                                                                                                       // 11\n                                                                                                                    // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                               // 13\n                                                                                                                    // 14\nvar ReactElement = require('./ReactElement');                                                                       // 15\n                                                                                                                    // 16\nvar invariant = require('fbjs/lib/invariant');                                                                      // 17\n                                                                                                                    // 18\n/**                                                                                                                 // 19\n * Returns the first child in a collection of children and verifies that there                                      // 20\n * is only one child in the collection.                                                                             // 21\n *                                                                                                                  // 22\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only                                 // 23\n *                                                                                                                  // 24\n * The current implementation of this function assumes that a single child gets                                     // 25\n * passed without a wrapper, but the purpose of this helper function is to                                          // 26\n * abstract away the particular structure of children.                                                              // 27\n *                                                                                                                  // 28\n * @param {?object} children Child collection structure.                                                            // 29\n * @return {ReactElement} The first and only `ReactElement` contained in the                                        // 30\n * structure.                                                                                                       // 31\n */                                                                                                                 // 32\nfunction onlyChild(children) {                                                                                      // 33\n  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;\n  return children;                                                                                                  // 35\n}                                                                                                                   // 36\n                                                                                                                    // 37\nmodule.exports = onlyChild;                                                                                         // 38\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactComponentWithPureRenderMixin.js\":[\"./shallowCompare\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/ReactComponentWithPureRenderMixin.js                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @providesModule ReactComponentWithPureRenderMixin                                                                // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar shallowCompare = require('./shallowCompare');                                                                   // 14\n                                                                                                                    // 15\n/**                                                                                                                 // 16\n * If your React component's render function is \"pure\", e.g. it will render the                                     // 17\n * same result given the same props and state, provide this mixin for a                                             // 18\n * considerable performance boost.                                                                                  // 19\n *                                                                                                                  // 20\n * Most React components have pure render functions.                                                                // 21\n *                                                                                                                  // 22\n * Example:                                                                                                         // 23\n *                                                                                                                  // 24\n *   var ReactComponentWithPureRenderMixin =                                                                        // 25\n *     require('ReactComponentWithPureRenderMixin');                                                                // 26\n *   React.createClass({                                                                                            // 27\n *     mixins: [ReactComponentWithPureRenderMixin],                                                                 // 28\n *                                                                                                                  // 29\n *     render: function() {                                                                                         // 30\n *       return <div className={this.props.className}>foo</div>;                                                    // 31\n *     }                                                                                                            // 32\n *   });                                                                                                            // 33\n *                                                                                                                  // 34\n * Note: This only checks shallow equality for props and state. If these contain                                    // 35\n * complex data structures this mixin may have false-negatives for deeper                                           // 36\n * differences. Only mixin to components which have simple props and state, or                                      // 37\n * use `forceUpdate()` when you know deep data structures have changed.                                             // 38\n *                                                                                                                  // 39\n * See https://facebook.github.io/react/docs/pure-render-mixin.html                                                 // 40\n */                                                                                                                 // 41\nvar ReactComponentWithPureRenderMixin = {                                                                           // 42\n  shouldComponentUpdate: function (nextProps, nextState) {                                                          // 43\n    return shallowCompare(this, nextProps, nextState);                                                              // 44\n  }                                                                                                                 // 45\n};                                                                                                                  // 46\n                                                                                                                    // 47\nmodule.exports = ReactComponentWithPureRenderMixin;                                                                 // 48\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"shallowCompare.js\":[\"fbjs/lib/shallowEqual\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/lib/shallowCompare.js                                                                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2013-present, Facebook, Inc.                                                                           // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n* @providesModule shallowCompare                                                                                    // 9\n*/                                                                                                                  // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar shallowEqual = require('fbjs/lib/shallowEqual');                                                                // 14\n                                                                                                                    // 15\n/**                                                                                                                 // 16\n * Does a shallow comparison for props and state.                                                                   // 17\n * See ReactComponentWithPureRenderMixin                                                                            // 18\n * See also https://facebook.github.io/react/docs/shallow-compare.html                                              // 19\n */                                                                                                                 // 20\nfunction shallowCompare(instance, nextProps, nextState) {                                                           // 21\n  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);                      // 22\n}                                                                                                                   // 23\n                                                                                                                    // 24\nmodule.exports = shallowCompare;                                                                                    // 25\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"node_modules\":{\"object-assign\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/node_modules/object-assign/package.json                                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nexports.name = \"object-assign\";                                                                                     // 1\nexports.version = \"4.1.0\";                                                                                          // 2\n                                                                                                                    // 3\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/node_modules/object-assign/index.js                                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n'use strict';                                                                                                       // 1\n/* eslint-disable no-unused-vars */                                                                                 // 2\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                               // 3\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;                                                       // 4\n                                                                                                                    // 5\nfunction toObject(val) {                                                                                            // 6\n\tif (val === null || val === undefined) {                                                                           // 7\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');                                     // 8\n\t}                                                                                                                  // 9\n                                                                                                                    // 10\n\treturn Object(val);                                                                                                // 11\n}                                                                                                                   // 12\n                                                                                                                    // 13\nfunction shouldUseNative() {                                                                                        // 14\n\ttry {                                                                                                              // 15\n\t\tif (!Object.assign) {                                                                                             // 16\n\t\t\treturn false;                                                                                                    // 17\n\t\t}                                                                                                                 // 18\n                                                                                                                    // 19\n\t\t// Detect buggy property enumeration order in older V8 versions.                                                  // 20\n                                                                                                                    // 21\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118                                                           // 22\n\t\tvar test1 = new String('abc');  // eslint-disable-line                                                            // 23\n\t\ttest1[5] = 'de';                                                                                                  // 24\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {                                                               // 25\n\t\t\treturn false;                                                                                                    // 26\n\t\t}                                                                                                                 // 27\n                                                                                                                    // 28\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056                                                           // 29\n\t\tvar test2 = {};                                                                                                   // 30\n\t\tfor (var i = 0; i < 10; i++) {                                                                                    // 31\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;                                                                         // 32\n\t\t}                                                                                                                 // 33\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {                                                 // 34\n\t\t\treturn test2[n];                                                                                                 // 35\n\t\t});                                                                                                               // 36\n\t\tif (order2.join('') !== '0123456789') {                                                                           // 37\n\t\t\treturn false;                                                                                                    // 38\n\t\t}                                                                                                                 // 39\n                                                                                                                    // 40\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056                                                           // 41\n\t\tvar test3 = {};                                                                                                   // 42\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {                                                      // 43\n\t\t\ttest3[letter] = letter;                                                                                          // 44\n\t\t});                                                                                                               // 45\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==                                                            // 46\n\t\t\t\t'abcdefghijklmnopqrst') {                                                                                       // 47\n\t\t\treturn false;                                                                                                    // 48\n\t\t}                                                                                                                 // 49\n                                                                                                                    // 50\n\t\treturn true;                                                                                                      // 51\n\t} catch (e) {                                                                                                      // 52\n\t\t// We don't expect any of the above to throw, but better to be safe.                                              // 53\n\t\treturn false;                                                                                                     // 54\n\t}                                                                                                                  // 55\n}                                                                                                                   // 56\n                                                                                                                    // 57\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {                                    // 58\n\tvar from;                                                                                                          // 59\n\tvar to = toObject(target);                                                                                         // 60\n\tvar symbols;                                                                                                       // 61\n                                                                                                                    // 62\n\tfor (var s = 1; s < arguments.length; s++) {                                                                       // 63\n\t\tfrom = Object(arguments[s]);                                                                                      // 64\n                                                                                                                    // 65\n\t\tfor (var key in from) {                                                                                           // 66\n\t\t\tif (hasOwnProperty.call(from, key)) {                                                                            // 67\n\t\t\t\tto[key] = from[key];                                                                                            // 68\n\t\t\t}                                                                                                                // 69\n\t\t}                                                                                                                 // 70\n                                                                                                                    // 71\n\t\tif (Object.getOwnPropertySymbols) {                                                                               // 72\n\t\t\tsymbols = Object.getOwnPropertySymbols(from);                                                                    // 73\n\t\t\tfor (var i = 0; i < symbols.length; i++) {                                                                       // 74\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {                                                                  // 75\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];                                                                             // 76\n\t\t\t\t}                                                                                                               // 77\n\t\t\t}                                                                                                                // 78\n\t\t}                                                                                                                 // 79\n\t}                                                                                                                  // 80\n                                                                                                                    // 81\n\treturn to;                                                                                                         // 82\n};                                                                                                                  // 83\n                                                                                                                    // 84\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"fbjs\":{\"lib\":{\"invariant.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/node_modules/fbjs/lib/invariant.js                                                            //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                       // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n */                                                                                                                 // 9\n                                                                                                                    // 10\n'use strict';                                                                                                       // 11\n                                                                                                                    // 12\n/**                                                                                                                 // 13\n * Use invariant() to assert state which your program assumes to be true.                                           // 14\n *                                                                                                                  // 15\n * Provide sprintf-style format (only %s is supported) and arguments                                                // 16\n * to provide information about what broke and what you were                                                        // 17\n * expecting.                                                                                                       // 18\n *                                                                                                                  // 19\n * The invariant message will be stripped in production, but the invariant                                          // 20\n * will remain to ensure logic does not differ in production.                                                       // 21\n */                                                                                                                 // 22\n                                                                                                                    // 23\nfunction invariant(condition, format, a, b, c, d, e, f) {                                                           // 24\n  if (process.env.NODE_ENV !== 'production') {                                                                      // 25\n    if (format === undefined) {                                                                                     // 26\n      throw new Error('invariant requires an error message argument');                                              // 27\n    }                                                                                                               // 28\n  }                                                                                                                 // 29\n                                                                                                                    // 30\n  if (!condition) {                                                                                                 // 31\n    var error;                                                                                                      // 32\n    if (format === undefined) {                                                                                     // 33\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {                                                                                                        // 35\n      var args = [a, b, c, d, e, f];                                                                                // 36\n      var argIndex = 0;                                                                                             // 37\n      error = new Error(format.replace(/%s/g, function () {                                                         // 38\n        return args[argIndex++];                                                                                    // 39\n      }));                                                                                                          // 40\n      error.name = 'Invariant Violation';                                                                           // 41\n    }                                                                                                               // 42\n                                                                                                                    // 43\n    error.framesToPop = 1; // we don't care about invariant's own frame                                             // 44\n    throw error;                                                                                                    // 45\n  }                                                                                                                 // 46\n}                                                                                                                   // 47\n                                                                                                                    // 48\nmodule.exports = invariant;                                                                                         // 49\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"warning.js\":[\"./emptyFunction\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/node_modules/fbjs/lib/warning.js                                                              //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n */                                                                                                                 // 9\n                                                                                                                    // 10\n'use strict';                                                                                                       // 11\n                                                                                                                    // 12\nvar emptyFunction = require('./emptyFunction');                                                                     // 13\n                                                                                                                    // 14\n/**                                                                                                                 // 15\n * Similar to invariant but only logs a warning if the condition is not met.                                        // 16\n * This can be used to log issues in development environments in critical                                           // 17\n * paths. Removing the logging code for production environments will keep the                                       // 18\n * same logic and follow the same code paths.                                                                       // 19\n */                                                                                                                 // 20\n                                                                                                                    // 21\nvar warning = emptyFunction;                                                                                        // 22\n                                                                                                                    // 23\nif (process.env.NODE_ENV !== 'production') {                                                                        // 24\n  (function () {                                                                                                    // 25\n    var printWarning = function printWarning(format) {                                                              // 26\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {     // 27\n        args[_key - 1] = arguments[_key];                                                                           // 28\n      }                                                                                                             // 29\n                                                                                                                    // 30\n      var argIndex = 0;                                                                                             // 31\n      var message = 'Warning: ' + format.replace(/%s/g, function () {                                               // 32\n        return args[argIndex++];                                                                                    // 33\n      });                                                                                                           // 34\n      if (typeof console !== 'undefined') {                                                                         // 35\n        console.error(message);                                                                                     // 36\n      }                                                                                                             // 37\n      try {                                                                                                         // 38\n        // --- Welcome to debugging React ---                                                                       // 39\n        // This error was thrown as a convenience so that you can use this stack                                    // 40\n        // to find the callsite that caused this warning to fire.                                                   // 41\n        throw new Error(message);                                                                                   // 42\n      } catch (x) {}                                                                                                // 43\n    };                                                                                                              // 44\n                                                                                                                    // 45\n    warning = function warning(condition, format) {                                                                 // 46\n      if (format === undefined) {                                                                                   // 47\n        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');          // 48\n      }                                                                                                             // 49\n                                                                                                                    // 50\n      if (format.indexOf('Failed Composite propType: ') === 0) {                                                    // 51\n        return; // Ignore CompositeComponent proptype check.                                                        // 52\n      }                                                                                                             // 53\n                                                                                                                    // 54\n      if (!condition) {                                                                                             // 55\n        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n          args[_key2 - 2] = arguments[_key2];                                                                       // 57\n        }                                                                                                           // 58\n                                                                                                                    // 59\n        printWarning.apply(undefined, [format].concat(args));                                                       // 60\n      }                                                                                                             // 61\n    };                                                                                                              // 62\n  })();                                                                                                             // 63\n}                                                                                                                   // 64\n                                                                                                                    // 65\nmodule.exports = warning;                                                                                           // 66\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"emptyFunction.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/node_modules/fbjs/lib/emptyFunction.js                                                        //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n\"use strict\";                                                                                                       // 1\n                                                                                                                    // 2\n/**                                                                                                                 // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                       // 4\n * All rights reserved.                                                                                             // 5\n *                                                                                                                  // 6\n * This source code is licensed under the BSD-style license found in the                                            // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 9\n *                                                                                                                  // 10\n *                                                                                                                  // 11\n */                                                                                                                 // 12\n                                                                                                                    // 13\nfunction makeEmptyFunction(arg) {                                                                                   // 14\n  return function () {                                                                                              // 15\n    return arg;                                                                                                     // 16\n  };                                                                                                                // 17\n}                                                                                                                   // 18\n                                                                                                                    // 19\n/**                                                                                                                 // 20\n * This function accepts and discards inputs; it has no side effects. This is                                       // 21\n * primarily useful idiomatically for overridable function endpoints which                                          // 22\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.                                          // 23\n */                                                                                                                 // 24\nvar emptyFunction = function emptyFunction() {};                                                                    // 25\n                                                                                                                    // 26\nemptyFunction.thatReturns = makeEmptyFunction;                                                                      // 27\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);                                                          // 28\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);                                                            // 29\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);                                                            // 30\nemptyFunction.thatReturnsThis = function () {                                                                       // 31\n  return this;                                                                                                      // 32\n};                                                                                                                  // 33\nemptyFunction.thatReturnsArgument = function (arg) {                                                                // 34\n  return arg;                                                                                                       // 35\n};                                                                                                                  // 36\n                                                                                                                    // 37\nmodule.exports = emptyFunction;                                                                                     // 38\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"emptyObject.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/node_modules/fbjs/lib/emptyObject.js                                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                       // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n */                                                                                                                 // 9\n                                                                                                                    // 10\n'use strict';                                                                                                       // 11\n                                                                                                                    // 12\nvar emptyObject = {};                                                                                               // 13\n                                                                                                                    // 14\nif (process.env.NODE_ENV !== 'production') {                                                                        // 15\n  Object.freeze(emptyObject);                                                                                       // 16\n}                                                                                                                   // 17\n                                                                                                                    // 18\nmodule.exports = emptyObject;                                                                                       // 19\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"keyMirror.js\":[\"./invariant\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/node_modules/fbjs/lib/keyMirror.js                                                            //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                       // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @typechecks static-only                                                                                          // 9\n */                                                                                                                 // 10\n                                                                                                                    // 11\n'use strict';                                                                                                       // 12\n                                                                                                                    // 13\nvar invariant = require('./invariant');                                                                             // 14\n                                                                                                                    // 15\n/**                                                                                                                 // 16\n * Constructs an enumeration with keys equal to their value.                                                        // 17\n *                                                                                                                  // 18\n * For example:                                                                                                     // 19\n *                                                                                                                  // 20\n *   var COLORS = keyMirror({blue: null, red: null});                                                               // 21\n *   var myColor = COLORS.blue;                                                                                     // 22\n *   var isColorValid = !!COLORS[myColor];                                                                          // 23\n *                                                                                                                  // 24\n * The last line could not be performed if the values of the generated enum were                                    // 25\n * not equal to their keys.                                                                                         // 26\n *                                                                                                                  // 27\n *   Input:  {key1: val1, key2: val2}                                                                               // 28\n *   Output: {key1: key1, key2: key2}                                                                               // 29\n *                                                                                                                  // 30\n * @param {object} obj                                                                                              // 31\n * @return {object}                                                                                                 // 32\n */                                                                                                                 // 33\nvar keyMirror = function keyMirror(obj) {                                                                           // 34\n  var ret = {};                                                                                                     // 35\n  var key;                                                                                                          // 36\n  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;\n  for (key in obj) {                                                                                                // 38\n    if (!obj.hasOwnProperty(key)) {                                                                                 // 39\n      continue;                                                                                                     // 40\n    }                                                                                                               // 41\n    ret[key] = key;                                                                                                 // 42\n  }                                                                                                                 // 43\n  return ret;                                                                                                       // 44\n};                                                                                                                  // 45\n                                                                                                                    // 46\nmodule.exports = keyMirror;                                                                                         // 47\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"keyOf.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/node_modules/fbjs/lib/keyOf.js                                                                //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n\"use strict\";                                                                                                       // 1\n                                                                                                                    // 2\n/**                                                                                                                 // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                       // 4\n * All rights reserved.                                                                                             // 5\n *                                                                                                                  // 6\n * This source code is licensed under the BSD-style license found in the                                            // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 9\n *                                                                                                                  // 10\n */                                                                                                                 // 11\n                                                                                                                    // 12\n/**                                                                                                                 // 13\n * Allows extraction of a minified key. Let's the build system minify keys                                          // 14\n * without losing the ability to dynamically use key strings as values                                              // 15\n * themselves. Pass in an object with a single key/val pair and it will return                                      // 16\n * you the string key of that single record. Suppose you want to grab the                                           // 17\n * value for a key 'className' inside of an object. Key/val minification may                                        // 18\n * have aliased that key to be 'xa12'. keyOf({className: null}) will return                                         // 19\n * 'xa12' in that case. Resolve keys you want to use once at startup time, then                                     // 20\n * reuse those resolutions.                                                                                         // 21\n */                                                                                                                 // 22\nvar keyOf = function keyOf(oneKeyObj) {                                                                             // 23\n  var key;                                                                                                          // 24\n  for (key in oneKeyObj) {                                                                                          // 25\n    if (!oneKeyObj.hasOwnProperty(key)) {                                                                           // 26\n      continue;                                                                                                     // 27\n    }                                                                                                               // 28\n    return key;                                                                                                     // 29\n  }                                                                                                                 // 30\n  return null;                                                                                                      // 31\n};                                                                                                                  // 32\n                                                                                                                    // 33\nmodule.exports = keyOf;                                                                                             // 34\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"shallowEqual.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react/node_modules/fbjs/lib/shallowEqual.js                                                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                       // 2\n * All rights reserved.                                                                                             // 3\n *                                                                                                                  // 4\n * This source code is licensed under the BSD-style license found in the                                            // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n *                                                                                                                  // 8\n * @typechecks                                                                                                      // 9\n *                                                                                                                  // 10\n */                                                                                                                 // 11\n                                                                                                                    // 12\n/*eslint-disable no-self-compare */                                                                                 // 13\n                                                                                                                    // 14\n'use strict';                                                                                                       // 15\n                                                                                                                    // 16\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                               // 17\n                                                                                                                    // 18\n/**                                                                                                                 // 19\n * inlined Object.is polyfill to avoid requiring consumers ship their own                                           // 20\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is                       // 21\n */                                                                                                                 // 22\nfunction is(x, y) {                                                                                                 // 23\n  // SameValue algorithm                                                                                            // 24\n  if (x === y) {                                                                                                    // 25\n    // Steps 1-5, 7-10                                                                                              // 26\n    // Steps 6.b-6.e: +0 != -0                                                                                      // 27\n    // Added the nonzero y check to make Flow happy, but it is redundant                                            // 28\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;                                                                   // 29\n  } else {                                                                                                          // 30\n    // Step 6.a: NaN == NaN                                                                                         // 31\n    return x !== x && y !== y;                                                                                      // 32\n  }                                                                                                                 // 33\n}                                                                                                                   // 34\n                                                                                                                    // 35\n/**                                                                                                                 // 36\n * Performs equality by iterating through keys on an object and returning false                                     // 37\n * when any key has values which are not strictly equal between the arguments.                                      // 38\n * Returns true when the values of all keys are strictly equal.                                                     // 39\n */                                                                                                                 // 40\nfunction shallowEqual(objA, objB) {                                                                                 // 41\n  if (is(objA, objB)) {                                                                                             // 42\n    return true;                                                                                                    // 43\n  }                                                                                                                 // 44\n                                                                                                                    // 45\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {                     // 46\n    return false;                                                                                                   // 47\n  }                                                                                                                 // 48\n                                                                                                                    // 49\n  var keysA = Object.keys(objA);                                                                                    // 50\n  var keysB = Object.keys(objB);                                                                                    // 51\n                                                                                                                    // 52\n  if (keysA.length !== keysB.length) {                                                                              // 53\n    return false;                                                                                                   // 54\n  }                                                                                                                 // 55\n                                                                                                                    // 56\n  // Test for A's keys different from B.                                                                            // 57\n  for (var i = 0; i < keysA.length; i++) {                                                                          // 58\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {                              // 59\n      return false;                                                                                                 // 60\n    }                                                                                                               // 61\n  }                                                                                                                 // 62\n                                                                                                                    // 63\n  return true;                                                                                                      // 64\n}                                                                                                                   // 65\n                                                                                                                    // 66\nmodule.exports = shallowEqual;                                                                                      // 67\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},\"react-addons-pure-render-mixin\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react-addons-pure-render-mixin/package.json                                                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nexports.name = \"react-addons-pure-render-mixin\";                                                                    // 1\nexports.version = \"15.3.2\";                                                                                         // 2\nexports.main = \"index.js\";                                                                                          // 3\n                                                                                                                    // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"react/lib/ReactComponentWithPureRenderMixin\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/react-addons-pure-render-mixin/index.js                                                             //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.exports = require('react/lib/ReactComponentWithPureRenderMixin');                                            // 1\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/modules/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.modules = exports, {\n  meteorInstall: meteorInstall,\n  Buffer: Buffer,\n  process: process\n});\n\n})();\n","servePath":"/packages/modules.js","sourceMap":{"version":3,"sources":["/packages/modules/client.js","/packages/modules/buffer.js","/packages/modules/css.js","/packages/modules/install-packages.js","/packages/modules/process.js","/packages/modules/stubs.js","node_modules/meteor/modules/node_modules/reify/lib/runtime.js","node_modules/meteor/modules/node_modules/reify/lib/entry.js","node_modules/meteor/modules/node_modules/reify/lib/utils.js","node_modules/meteor-node-stubs/package.json","node_modules/meteor-node-stubs/index.js","node_modules/meteor-node-stubs/map.json","node_modules/meteor-node-stubs/deps/buffer.js","node_modules/meteor-node-stubs/deps/process.js","node_modules/meteor-node-stubs/deps/domain.js","node_modules/meteor-node-stubs/node_modules/buffer/package.json","node_modules/meteor-node-stubs/node_modules/buffer/index.js","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/package.json","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/lib/b64.js","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/package.json","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/index.js","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/package.json","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/index.js","node_modules/meteor-node-stubs/node_modules/process/browser.js","node_modules/meteor-node-stubs/node_modules/domain-browser/package.json","node_modules/meteor-node-stubs/node_modules/domain-browser/index.js","node_modules/meteor-node-stubs/node_modules/events/package.json","node_modules/meteor-node-stubs/node_modules/events/events.js","node_modules/react/package.json","node_modules/react/react.js","node_modules/react/lib/React.js","node_modules/react/lib/ReactChildren.js","node_modules/react/lib/PooledClass.js","node_modules/react/lib/reactProdInvariant.js","node_modules/react/lib/ReactElement.js","node_modules/react/lib/ReactCurrentOwner.js","node_modules/react/lib/canDefineProperty.js","node_modules/react/lib/traverseAllChildren.js","node_modules/react/lib/getIteratorFn.js","node_modules/react/lib/KeyEscapeUtils.js","node_modules/react/lib/ReactComponent.js","node_modules/react/lib/ReactNoopUpdateQueue.js","node_modules/react/lib/ReactPureComponent.js","node_modules/react/lib/ReactClass.js","node_modules/react/lib/ReactPropTypeLocations.js","node_modules/react/lib/ReactPropTypeLocationNames.js","node_modules/react/lib/ReactDOMFactories.js","node_modules/react/lib/ReactElementValidator.js","node_modules/react/lib/ReactComponentTreeHook.js","node_modules/react/lib/checkReactTypeSpec.js","node_modules/react/lib/ReactPropTypesSecret.js","node_modules/react/lib/ReactPropTypes.js","node_modules/react/lib/ReactVersion.js","node_modules/react/lib/onlyChild.js","node_modules/react/lib/ReactComponentWithPureRenderMixin.js","node_modules/react/lib/shallowCompare.js","node_modules/react/node_modules/object-assign/package.json","node_modules/react/node_modules/object-assign/index.js","node_modules/react/node_modules/fbjs/lib/invariant.js","node_modules/react/node_modules/fbjs/lib/warning.js","node_modules/react/node_modules/fbjs/lib/emptyFunction.js","node_modules/react/node_modules/fbjs/lib/emptyObject.js","node_modules/react/node_modules/fbjs/lib/keyMirror.js","node_modules/react/node_modules/fbjs/lib/keyOf.js","node_modules/react/node_modules/fbjs/lib/shallowEqual.js","node_modules/react-addons-pure-render-mixin/package.json","node_modules/react-addons-pure-render-mixin/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wH;;;;;;;;;;;ACPA;AACA;AACA;AACA,wH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACryH;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA,wyH;;;;;;;;;;;AC9CA;AACA;AACA;AACA,wH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACxCA;AACA,wH;;;;;;;;;;;ACDA;AACA,wH;;;;;;;;;;;ACDA;AACA,wH;;;;;;;;;;;ACDA;AACA;AACA;AACA,wh7CA;AACA;AACA;AACA,wwH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACpFA;AACA;AACA;AACA,wH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA,wH;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;AC3FA;AACA;AACA;AACA,wH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACrEA;AACA;AACA;AACA,wwH;;;;;;;;;;;ACHA;AACA;AACA;AACA,wH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACxxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACtyH;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACvtKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0H;;;;;;;;;;;AC3tBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACvznrVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACfaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACxBA;AACA;AACA,wH;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;AClEA;AACA;AACA;AACA,wH;;;;;;;;;;;ACHA,wH","file":"/packages/modules.js","sourcesContent":["require(\"./install-packages.js\");\nrequire(\"./stubs.js\");\nrequire(\"./buffer.js\");\nrequire(\"./process.js\");\nrequire(\"reify/lib/runtime\").enable(module.constructor);\n\nexports.addStyles = require(\"./css\").addStyles;\n","try {\n  Buffer = global.Buffer || require(\"buffer\").Buffer;\n} catch (noBuffer) {}\n","var doc = document;\nvar head = doc.getElementsByTagName(\"head\").item(0);\n\nexports.addStyles = function (css) {\n  var style = doc.createElement(\"style\");\n\n  style.setAttribute(\"type\", \"text/css\");\n\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx\n  var internetExplorerSheetObject =\n    style.sheet || // Edge/IE11.\n    style.styleSheet; // Older IEs.\n\n  if (internetExplorerSheetObject) {\n    internetExplorerSheetObject.cssText = css;\n  } else {\n    style.appendChild(doc.createTextNode(css));\n  }\n\n  return head.appendChild(style);\n};\n","function install(name, mainModule) {\n  var meteorDir = {};\n\n  // Given a package name <name>, install a stub module in the\n  // /node_modules/meteor directory called <name>.js, so that\n  // require.resolve(\"meteor/<name>\") will always return\n  // /node_modules/meteor/<name>.js instead of something like\n  // /node_modules/meteor/<name>/index.js, in the rare but possible event\n  // that the package contains a file called index.js (#6590).\n\n  if (mainModule) {\n    meteorDir[name + \".js\"] = [mainModule, function (require, e, module) {\n      module.exports = require(mainModule);\n    }];\n  } else {\n    // back compat with old Meteor packages\n    meteorDir[name + \".js\"] = function (r, e, module) {\n      module.exports = Package[name];\n    };\n  }\n\n  meteorInstall({\n    node_modules: {\n      meteor: meteorDir\n    }\n  });\n}\n\n// This file will be modified during computeJsOutputFilesMap to include\n// install(<name>) calls for every Meteor package.\n\ninstall(\"underscore\");\ninstall(\"meteor\");\ninstall(\"meteor-base\");\ninstall(\"mobile-experience\");\ninstall(\"modules-runtime\");\ninstall(\"modules\", \"meteor/modules/client.js\");\ninstall(\"es5-shim\", \"meteor/es5-shim/client.js\");\ninstall(\"promise\", \"meteor/promise/client.js\");\ninstall(\"ecmascript-runtime\", \"meteor/ecmascript-runtime/runtime.js\");\ninstall(\"babel-compiler\");\ninstall(\"ecmascript\");\ninstall(\"base64\");\ninstall(\"ejson\");\ninstall(\"id-map\");\ninstall(\"ordered-dict\");\ninstall(\"tracker\");\ninstall(\"babel-runtime\");\ninstall(\"random\");\ninstall(\"mongo-id\");\ninstall(\"diff-sequence\");\ninstall(\"geojson-utils\", \"meteor/geojson-utils/main.js\");\ninstall(\"minimongo\");\ninstall(\"check\", \"meteor/check/match.js\");\ninstall(\"retry\");\ninstall(\"ddp-common\");\ninstall(\"reload\");\ninstall(\"ddp-client\");\ninstall(\"ddp\");\ninstall(\"ddp-server\");\ninstall(\"allow-deny\");\ninstall(\"mongo\");\ninstall(\"blaze-html-templates\");\ninstall(\"reactive-var\");\ninstall(\"jquery\", \"meteor/jquery/main.js\");\ninstall(\"standard-minifier-css\");\ninstall(\"standard-minifier-js\");\ninstall(\"shell-server\");\ninstall(\"tmeasday:check-npm-versions\", \"meteor/tmeasday:check-npm-versions/check-npm-versions.js\");\ninstall(\"react-meteor-data\", \"meteor/react-meteor-data/react-meteor-data.jsx\");\ninstall(\"ddp-rate-limiter\");\ninstall(\"localstorage\");\ninstall(\"callback-hook\");\ninstall(\"observe-sequence\");\ninstall(\"deps\");\ninstall(\"htmljs\");\ninstall(\"blaze\");\ninstall(\"accounts-base\", \"meteor/accounts-base/client_main.js\");\ninstall(\"service-configuration\");\ninstall(\"spacebars\");\ninstall(\"templating-compiler\");\ninstall(\"templating-runtime\");\ninstall(\"templating\");\ninstall(\"reactive-dict\");\ninstall(\"session\");\ninstall(\"url\");\ninstall(\"oauth\");\ninstall(\"accounts-oauth\");\ninstall(\"sha\");\ninstall(\"srp\");\ninstall(\"accounts-password\");\ninstall(\"less\");\ninstall(\"accounts-ui-unstyled\");\ninstall(\"accounts-ui\");\ninstall(\"oauth2\");\ninstall(\"facebook\");\ninstall(\"accounts-facebook\");\ninstall(\"meteortoys:toykit\");\ninstall(\"msavin:mongol\");\ninstall(\"msavin:jetsetter\");\ninstall(\"meteortoys:blueprint\");\ninstall(\"meteortoys:authenticate\");\ninstall(\"meteortoys:shell\");\ninstall(\"meteortoys:method\");\ninstall(\"meteortoys:result\");\ninstall(\"meteortoys:autopub\");\ninstall(\"meteortoys:pub\");\ninstall(\"meteortoys:sub\");\ninstall(\"meteortoys:email\");\ninstall(\"meteortoys:listen\");\ninstall(\"meteortoys:throttle\");\ninstall(\"meteortoys:status\");\ninstall(\"meteortoys:hotreload\");\ninstall(\"meteortoys:allthings\");\ninstall(\"ultimatejs:tracker-react\", \"meteor/ultimatejs:tracker-react/main.js\");\ninstall(\"mdg:validation-error\");\ninstall(\"jagi:astronomy\", \"meteor/jagi:astronomy/lib/main.js\");\ninstall(\"webapp\");\ninstall(\"livedata\");\ninstall(\"hot-code-push\");\ninstall(\"launch-screen\");\ninstall(\"ui\");\ninstall(\"autoupdate\");\n","try {\n  // The application can run `npm install process` to provide its own\n  // process stub; otherwise this module will provide a partial stub.\n  process = global.process || require(\"process\");\n} catch (noProcess) {\n  process = {};\n}\n\nif (Meteor.isServer) {\n  // Make require(\"process\") work on the server in all versions of Node.\n  meteorInstall({\n    node_modules: {\n      \"process.js\": function (r, e, module) {\n        module.exports = process;\n      }\n    }\n  });\n} else {\n  process.platform = \"browser\";\n  process.nextTick = process.nextTick || Meteor._setImmediate;\n}\n\nif (typeof process.env !== \"object\") {\n  process.env = {};\n}\n\n_.extend(process.env, meteorEnv);\n","try {\n  // When meteor-node-stubs is installed in the application's root\n  // node_modules directory, requiring it here installs aliases for stubs\n  // for all Node built-in modules, such as fs, util, and http.\n  require(\"meteor-node-stubs\");\n} catch (noStubs) {}\n","var Entry = require(\"./entry.js\").Entry;\nvar utils = require(\"./utils.js\");\n\nexports.enable = function (Module) {\n  var Mp = Module.prototype;\n\n  if (typeof Mp.import === \"function\" &&\n      typeof Mp.export === \"function\") {\n    // If the Mp.{import,export} methods have already been\n    // defined, abandon reification immediately.\n    return Module;\n  }\n\n  // Platform-specific code should implement this method however\n  // appropriate. Module.prototype.resolve(id) should return an absolute\n  // version of the given module identifier, like require.resolve.\n  Mp.resolve = Mp.resolve || function resolve(id) {\n    throw new Error(\"Module.prototype.resolve not implemented\");\n  };\n\n  // Platform-specific code should find a way to call this method whenever\n  // the module system is about to return module.exports from require. This\n  // might happen more than once per module, in case of dependency cycles,\n  // so we want Module.prototype.runModuleSetters to run each time.\n  Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {\n    var entry = Entry.get(this.id);\n    if (entry) {\n      entry.runModuleSetters(this);\n    }\n\n    // Assignments to exported local variables get wrapped with calls to\n    // module.runModuleSetters, so module.runModuleSetters returns the\n    // valueToPassThrough parameter to allow the value of the original\n    // expression to pass through. For example,\n    //\n    //   export var a = 1;\n    //   console.log(a += 3);\n    //\n    // becomes\n    //\n    //   module.export(\"a\", () => a);\n    //   var a = 1;\n    //   console.log(module.runModuleSetters(a += 3));\n    //\n    // This ensures module.runModuleSetters runs immediately after the\n    // assignment, and does not interfere with the larger computation.\n    return valueToPassThrough;\n  };\n\n  function setESModule(module) {\n    var exports = module.exports;\n    if (exports && typeof exports === \"object\") {\n      exports.__esModule = true;\n    }\n  }\n\n  Mp.import = function (id, setters) {\n    var module = this;\n    setESModule(module);\n\n    var absoluteId = module.resolve(id);\n\n    if (setters && typeof setters === \"object\") {\n      var entry = Entry.getOrCreate(absoluteId);\n      entry.addSetters(module, setters);\n    }\n\n    var countBefore = entry && entry.runCount;\n    var exports = typeof module.require === \"function\"\n      ? module.require(absoluteId)\n      : require(absoluteId);\n\n    if (entry && entry.runCount === countBefore) {\n      // If require(absoluteId) didn't run any setters for this entry,\n      // perhaps because it's not the first time this module has been\n      // required, run the setters now using an object that passes as the\n      // real module object.\n      entry.runModuleSetters({\n        id: absoluteId,\n        exports: exports,\n        getExportByName: Mp.getExportByName\n      });\n    }\n  };\n\n  // Register getter functions for local variables in the scope of an\n  // export statement. The keys of the getters object are exported names,\n  // and the values are functions that return local values.\n  Mp.export = function (getters) {\n    var module = this;\n    setESModule(module);\n\n    if (utils.isPlainObject(getters)) {\n      Entry.getOrCreate(module.id).addGetters(getters);\n    }\n\n    if (module.loaded) {\n      // If the module has already been evaluated, then we need to trigger\n      // another round of entry.runModuleSetters calls, which begins by\n      // calling entry.runModuleGetters(module).\n      module.runModuleSetters();\n    }\n  };\n\n  // This method can be overridden by client code to implement custom export\n  // naming logic. The current implementation works well with Babel's\n  // __esModule convention.\n  Mp.getExportByName = function (name) {\n    var exports = this.exports;\n\n    if (name === \"*\") {\n      return exports;\n    }\n\n    if (name === \"default\" &&\n        ! (exports &&\n           typeof exports === \"object\" &&\n           exports.__esModule &&\n           \"default\" in exports)) {\n      return exports;\n    }\n\n    return exports && exports[name];\n  };\n\n  return Module;\n};\n","var hasOwn = Object.prototype.hasOwnProperty;\nvar entryMap = Object.create(null);\nvar utils = require(\"./utils.js\");\n\nfunction Entry(id) {\n  // Same as module.id for this module.\n  this.id = id;\n  // The number of times this.runModuleSetters has been called.\n  this.runCount = 0;\n  // Setters for assigning to local variables in parent modules.\n  this.setters = Object.create(null);\n  // Getters for local variables exported from this module.\n  this.getters = Object.create(null);\n}\n\nvar Ep = Entry.prototype;\n\nEntry.get = function (id) {\n  return entryMap[id] || null;\n};\n\nEntry.getOrCreate = function (id) {\n  return entryMap[id] = entryMap[id] || new Entry(id);\n};\n\nEp.addSetters = function (parent, setters) {\n  var entry = this;\n\n  Object.keys(setters).forEach(function (name) {\n    var setter = setters[name];\n    if (typeof setter === \"function\" &&\n        // Ignore any requests for the exports.__esModule property.\"\n        name !== \"__esModule\") {\n      setter.parent = parent;\n      (entry.setters[name] =\n       entry.setters[name] || []\n      ).push(setter);\n    }\n  });\n};\n\nEp.addGetters = function (getters) {\n  var entry = this;\n  Object.keys(getters).forEach(function (name) {\n    var getter = getters[name];\n    if (typeof getter === \"function\" &&\n        // Ignore any requests for the exports.__esModule property.\"\n        name !== \"__esModule\") {\n      // Should this throw if hasOwn.call(this.getters, name)?\n      entry.getters[name] = getter;\n    }\n  });\n};\n\nfunction runModuleSetters(module) {\n  var entry = entryMap[module.id];\n  if (entry) {\n    entry.runModuleSetters(module);\n  }\n}\n\nfunction runModuleGetters(module) {\n  var entry = entryMap[module.id];\n  return entry ? entry.runModuleGetters(module) : 0;\n}\n\nEp.runModuleGetters = function (module) {\n  var entry = this;\n  var changeCount = 0;\n\n  Object.keys(entry.getters).forEach(function (name) {\n    if (entry.runGetter(module, name)) {\n      ++changeCount;\n    }\n  });\n\n  return changeCount;\n};\n\n// Returns true iff the getter updated module.exports with a new value.\nEp.runGetter = function (module, name) {\n  if (! hasOwn.call(this.getters, name)) {\n    return false;\n  }\n\n  var getter = this.getters[name];\n  try {\n    var value = getter.call(module);\n  } catch (e) {}\n  var exports = module.exports;\n\n  if (! hasOwn.call(exports, name) ||\n      exports[name] !== value) {\n    // We update module.exports[name] with the current value so that\n    // CommonJS require calls remain consistent with module.import.\n    exports[name] = value;\n    return true;\n  }\n\n  return false;\n};\n\n// Called whenever module.exports might have changed, to trigger any\n// setters associated with the newly exported values.\nEp.runModuleSetters = function (module) {\n  var entry = this;\n  var names = Object.keys(entry.setters);\n\n  // Make sure module.exports is up to date before we call\n  // module.getExportByName(name).\n  entry.runModuleGetters(module);\n\n  // Invoke the given callback once for every (setter, value, name) triple\n  // that needs to be called. Note that forEachSetter does not call any\n  // setters itself, only the given callback.\n  function forEachSetter(callback, context) {\n    names.forEach(function (name) {\n      entry.setters[name].forEach(function (setter) {\n        var value = module.getExportByName(name);\n        if (name === \"*\") {\n          Object.keys(value).forEach(function (name) {\n            call(setter, value[name], name);\n          });\n        } else {\n          call(setter, value, name);\n        }\n      });\n    });\n\n    function call(setter, value, name) {\n      if (name === \"__esModule\") {\n        // Ignore setters asking for module.exports.__esModule.\n        return;\n      }\n\n      setter.last = setter.last || Object.create(null);\n\n      if (! hasOwn.call(setter.last, name) ||\n          setter.last[name] !== value) {\n        // Only invoke the callback if we have not called this setter\n        // (with a value of this name) before, or the current value is\n        // different from the last value we passed to this setter.\n        return callback.apply(context, arguments);\n      }\n    }\n  }\n\n  // Every three elements of this list form a (setter, value, name) triple\n  // that needs to be invoked.\n  var settersToCall = [];\n\n  // Lazily-initialized objects mapping parent module identifiers to\n  // relevant parent module objects and snapshots of their exports.\n  var relevantParents;\n  var parentSnapshots;\n\n  // Take snapshots of setter.parent.exports for any setters that we are\n  // planning to call, so that we can later determine if calling the\n  // setters modified any of those exports objects.\n  forEachSetter(function (setter, value, name) {\n    var parent = setter.parent;\n    parentSnapshots = parentSnapshots || Object.create(null);\n    if (! hasOwn.call(parentSnapshots, parent.id)) {\n      relevantParents = relevantParents || Object.create(null);\n      relevantParents[parent.id] = parent;\n      if (utils.isPlainObject(parent.exports)) {\n        // If parent.exports is an object, make a shallow clone of it so\n        // that we can see if it changes as a result of calling setters.\n        parentSnapshots[parent.id] = utils.assign({}, parent.exports);\n      } else {\n        // If parent.exports is not an object, the \"snapshot\" is just the\n        // value of parent.exports.\n        parentSnapshots[parent.id] = parent.exports;\n      }\n    }\n\n    // Push three elements at a time to avoid creating wrapper arrays for\n    // each (setter, value, name) triple. Note the i += 3 below.\n    settersToCall.push(setter, value, name);\n  });\n\n  // Now call all the setters that we decided we need to call.\n  for (var i = 0; i < settersToCall.length; i += 3) {\n    var setter = settersToCall[i];\n    var value = settersToCall[i + 1];\n    var name = settersToCall[i + 2];\n    setter.call(module, setter.last[name] = value, name);\n  }\n\n  ++entry.runCount;\n\n  if (! relevantParents) {\n    // If we never called takeSnapshot, then we can avoid checking\n    // relevantParents and parentSnapshots below.\n    return;\n  }\n\n  // If any of the setters updated the module.exports of a parent module,\n  // or updated local variables that are exported by that parent module,\n  // then we must re-run any setters registered by that parent module.\n  Object.keys(relevantParents).forEach(function (id) {\n    var parent = relevantParents[id];\n\n    if (runModuleGetters(parent) > 0) {\n      return runModuleSetters(parent);\n    }\n\n    var exports = parent.exports;\n    var snapshot = parentSnapshots[parent.id];\n    if (utils.shallowObjEqual(exports, snapshot)) {\n      // If parent.exports have not changed since we took the snapshot,\n      // then we do not need to run the parent's setters.\n      return;\n    }\n\n    runModuleSetters(parent);\n  });\n};\n\nexports.Entry = Entry;\n","var hasOwn = Object.prototype.hasOwnProperty;\nvar objToStr = Object.prototype.toString;\nvar objStr = objToStr.call({});\n\nfunction isPlainObject(value) {\n  return objToStr.call(value) === objStr;\n}\nexports.isPlainObject = isPlainObject;\n\nexports.assign = Object.assign || function (obj) {\n  var argc = arguments.length;\n  for (var i = 1; i < argc; ++i) {\n    var arg = arguments[i];\n    if (arg && typeof arg === \"object\") {\n      var keys = Object.keys(arg);\n      for (var k = 0; k < keys.length; ++k) {\n        var key = keys[k];\n        obj[key] = arg[key];\n      }\n    }\n  }\n  return obj;\n};\n\nexports.shallowObjEqual = function(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (! isPlainObject(a) ||\n      ! isPlainObject(b)) {\n    return false;\n  }\n\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n\n  if (aKeys.length !== bKeys.length) {\n    return false;\n  }\n\n  return aKeys.every(function (key) {\n    return hasOwn.call(b, key) &&\n      a[key] === b[key];\n  });\n};\n","exports.name = \"meteor-node-stubs\";\nexports.version = \"0.2.3\";\nexports.main = \"index.js\";\n","var map = require(\"./map.json\");\nvar meteorAliases = {};\n\nObject.keys(map).forEach(function (id) {\n  if (typeof map[id] === \"string\") {\n    try {\n      exports[id] = meteorAliases[id + \".js\"] =\n        require.resolve(map[id]);\n    } catch (e) {\n      // Resolution can fail at runtime if the stub was not included in the\n      // bundle because nothing depended on it.\n    }\n  } else {\n    exports[id] = map[id];\n    meteorAliases[id + \".js\"] = function(){};\n  }\n});\n\nif (typeof meteorInstall === \"function\") {\n  meteorInstall({\n    // Install the aliases into a node_modules directory one level up from\n    // the root directory, so that they do not clutter the namespace\n    // available to apps and packages.\n    \"..\": {\n      node_modules: meteorAliases\n    }\n  });\n}\n","module.exports = {\n  \"assert\": \"assert/\",\n  \"buffer\": \"buffer/\",\n  \"child_process\": null,\n  \"cluster\": null,\n  \"console\": \"console-browserify\",\n  \"constants\": \"constants-browserify\",\n  \"crypto\": \"crypto-browserify\",\n  \"dgram\": null,\n  \"dns\": null,\n  \"domain\": \"domain-browser\",\n  \"events\": \"events/\",\n  \"fs\": null,\n  \"http\": \"http-browserify\",\n  \"https\": \"https-browserify\",\n  \"module\": null,\n  \"net\": null,\n  \"os\": \"os-browserify/browser.js\",\n  \"path\": \"path-browserify\",\n  \"process\": \"process/browser.js\",\n  \"punycode\": \"punycode/\",\n  \"querystring\": \"querystring-es3/\",\n  \"readline\": null,\n  \"repl\": null,\n  \"stream\": \"stream-browserify\",\n  \"_stream_duplex\": \"readable-stream/duplex.js\",\n  \"_stream_passthrough\": \"readable-stream/passthrough.js\",\n  \"_stream_readable\": \"readable-stream/readable.js\",\n  \"_stream_transform\": \"readable-stream/transform.js\",\n  \"_stream_writable\": \"readable-stream/writable.js\",\n  \"string_decoder\": \"string_decoder/\",\n  \"sys\": \"util/util.js\",\n  \"timers\": \"timers-browserify\",\n  \"tls\": null,\n  \"tty\": \"tty-browserify\",\n  \"url\": \"url/\",\n  \"util\": \"util/util.js\",\n  \"vm\": \"vm-browserify\",\n  \"zlib\": \"browserify-zlib\"\n};\n","require(\"buffer/\");\n","require(\"process/browser.js\");\n","require(\"domain-browser\");\n","exports.name = \"buffer\";\nexports.version = \"4.5.1\";\nexports.main = \"index.js\";\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar rootParent = {}\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\nfunction Buffer (arg) {\n  if (!(this instanceof Buffer)) {\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n    return new Buffer(arg)\n  }\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    this.length = 0\n    this.parent = undefined\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    return fromNumber(this, arg)\n  }\n\n  // Slightly less common case.\n  if (typeof arg === 'string') {\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n  }\n\n  // Unusual.\n  return fromObject(this, arg)\n}\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction fromNumber (that, length) {\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < length; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\n  // Assumption: byteLength() return value is always < kMaxLength.\n  var length = byteLength(string, encoding) | 0\n  that = allocate(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromObject (that, object) {\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\n  if (isArray(object)) return fromArray(that, object)\n\n  if (object == null) {\n    throw new TypeError('must start with number, buffer, array or string')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined') {\n    if (object.buffer instanceof ArrayBuffer) {\n      return fromTypedArray(that, object)\n    }\n    if (object instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, object)\n    }\n  }\n\n  if (object.length) return fromArrayLike(that, object)\n\n  return fromJsonObject(that, object)\n}\n\nfunction fromBuffer (that, buffer) {\n  var length = checked(buffer.length) | 0\n  that = allocate(that, length)\n  buffer.copy(that, 0, 0, length)\n  return that\n}\n\nfunction fromArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Duplicate of fromArray() to keep fromArray() monomorphic.\nfunction fromTypedArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  // Truncating the elements is probably not what people expect from typed\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n  // of the old Buffer constructor.\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(array)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromTypedArray(that, new Uint8Array(array))\n  }\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n// Returns a zero-length buffer for inputs that don't conform to the spec.\nfunction fromJsonObject (that, object) {\n  var array\n  var length = 0\n\n  if (object.type === 'Buffer' && isArray(object.data)) {\n    array = object.data\n    length = checked(array.length) | 0\n  }\n  that = allocate(that, length)\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n} else {\n  // pre-set for values that may exist in the future\n  Buffer.prototype.length = undefined\n  Buffer.prototype.parent = undefined\n}\n\nfunction allocate (that, length) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that.length = length\n  }\n\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n  if (fromPool) that.parent = rootParent\n\n  return that\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (subject, encoding) {\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\n  var buf = new Buffer(subject, encoding)\n  delete buf.parent\n  return buf\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buf = new Buffer(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nfunction byteLength (string, encoding) {\n  if (typeof string !== 'string') string = '' + string\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  start = start | 0\n  end = end === undefined || end === Infinity ? this.length : end | 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  return Buffer.compare(this, b)\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    if (val.length === 0) return -1 // special case: looking for empty string always fails\n    return String.prototype.indexOf.call(this, val, byteOffset)\n  }\n  if (Buffer.isBuffer(val)) {\n    return arrayIndexOf(this, val, byteOffset)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset)\n  }\n\n  function arrayIndexOf (arr, val, byteOffset) {\n    var foundIndex = -1\n    for (var i = 0; byteOffset + i < arr.length; i++) {\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n      } else {\n        foundIndex = -1\n      }\n    }\n    return -1\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) throw new Error('Invalid hex string')\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    var swap = encoding\n    encoding = offset\n    offset = length | 0\n    length = swap\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  if (newBuf.length) newBuf.parent = this.parent || this\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n  if (offset < 0) throw new RangeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function fill (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new RangeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n","exports.name = \"base64-js\";\nexports.version = \"1.1.2\";\nexports.main = \"lib/b64.js\";\n","'use strict'\n\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nfunction init () {\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i]\n    revLookup[code.charCodeAt(i)] = i\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62\n  revLookup['_'.charCodeAt(0)] = 63\n}\n\ninit()\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","exports.name = \"ieee754\";\nexports.version = \"1.1.6\";\nexports.main = \"index.js\";\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","exports.name = \"isarray\";\nexports.version = \"1.0.0\";\nexports.main = \"index.js\";\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","exports.name = \"domain-browser\";\nexports.version = \"1.1.7\";\nexports.main = \"./index.js\";\n","// This file should be ES5 compatible\n/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */\n'use strict'\nmodule.exports = (function () {\n\t// Import Events\n\tvar events = require('events')\n\n\t// Export Domain\n\tvar domain = {}\n\tdomain.createDomain = domain.create = function () {\n\t\tvar d = new events.EventEmitter()\n\n\t\tfunction emitError (e) {\n\t\t\td.emit('error', e)\n\t\t}\n\n\t\td.add = function (emitter) {\n\t\t\temitter.on('error', emitError)\n\t\t}\n\t\td.remove = function (emitter) {\n\t\t\temitter.removeListener('error', emitError)\n\t\t}\n\t\td.bind = function (fn) {\n\t\t\treturn function () {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments)\n\t\t\t\ttry {\n\t\t\t\t\tfn.apply(null, args)\n\t\t\t\t}\n\t\t\t\tcatch (err) {\n\t\t\t\t\temitError(err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\td.intercept = function (fn) {\n\t\t\treturn function (err) {\n\t\t\t\tif ( err ) {\n\t\t\t\t\temitError(err)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar args = Array.prototype.slice.call(arguments, 1)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfn.apply(null, args)\n\t\t\t\t\t}\n\t\t\t\t\tcatch (err) {\n\t\t\t\t\t\temitError(err)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\td.run = function (fn) {\n\t\t\ttry {\n\t\t\t\tfn()\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\temitError(err)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\t\td.dispose = function () {\n\t\t\tthis.removeAllListeners()\n\t\t\treturn this\n\t\t}\n\t\td.enter = d.exit = function () {\n\t\t\treturn this\n\t\t}\n\t\treturn d\n\t}\n\treturn domain\n}).call(this)\n","exports.name = \"events\";\nexports.version = \"1.1.0\";\nexports.main = \"./events.js\";\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","exports.name = \"react\";\nexports.version = \"15.3.2\";\nexports.main = \"react.js\";\n","'use strict';\n\nmodule.exports = require('./lib/React');\n","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule React\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar ReactChildren = require('./ReactChildren');\nvar ReactComponent = require('./ReactComponent');\nvar ReactPureComponent = require('./ReactPureComponent');\nvar ReactClass = require('./ReactClass');\nvar ReactDOMFactories = require('./ReactDOMFactories');\nvar ReactElement = require('./ReactElement');\nvar ReactPropTypes = require('./ReactPropTypes');\nvar ReactVersion = require('./ReactVersion');\n\nvar onlyChild = require('./onlyChild');\nvar warning = require('fbjs/lib/warning');\n\nvar createElement = ReactElement.createElement;\nvar createFactory = ReactElement.createFactory;\nvar cloneElement = ReactElement.cloneElement;\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactElementValidator = require('./ReactElementValidator');\n  createElement = ReactElementValidator.createElement;\n  createFactory = ReactElementValidator.createFactory;\n  cloneElement = ReactElementValidator.cloneElement;\n}\n\nvar __spread = _assign;\n\nif (process.env.NODE_ENV !== 'production') {\n  var warned = false;\n  __spread = function () {\n    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;\n    warned = true;\n    return _assign.apply(null, arguments);\n  };\n}\n\nvar React = {\n\n  // Modern\n\n  Children: {\n    map: ReactChildren.map,\n    forEach: ReactChildren.forEach,\n    count: ReactChildren.count,\n    toArray: ReactChildren.toArray,\n    only: onlyChild\n  },\n\n  Component: ReactComponent,\n  PureComponent: ReactPureComponent,\n\n  createElement: createElement,\n  cloneElement: cloneElement,\n  isValidElement: ReactElement.isValidElement,\n\n  // Classic\n\n  PropTypes: ReactPropTypes,\n  createClass: ReactClass.createClass,\n  createFactory: createFactory,\n  createMixin: function (mixin) {\n    // Currently a noop. Will be used to validate and trace mixins.\n    return mixin;\n  },\n\n  // This looks DOM specific but these are actually isomorphic helpers\n  // since they are just generating DOM strings.\n  DOM: ReactDOMFactories,\n\n  version: ReactVersion,\n\n  // Deprecated hook for JSX spread, don't use this for anything.\n  __spread: __spread\n};\n\nmodule.exports = React;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactChildren\n */\n\n'use strict';\n\nvar PooledClass = require('./PooledClass');\nvar ReactElement = require('./ReactElement');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar traverseAllChildren = require('./traverseAllChildren');\n\nvar twoArgumentPooler = PooledClass.twoArgumentPooler;\nvar fourArgumentPooler = PooledClass.fourArgumentPooler;\n\nvar userProvidedKeyEscapeRegex = /\\/+/g;\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n}\n\n/**\n * PooledClass representing the bookkeeping associated with performing a child\n * traversal. Allows avoiding binding callbacks.\n *\n * @constructor ForEachBookKeeping\n * @param {!function} forEachFunction Function to perform traversal with.\n * @param {?*} forEachContext Context to perform context with.\n */\nfunction ForEachBookKeeping(forEachFunction, forEachContext) {\n  this.func = forEachFunction;\n  this.context = forEachContext;\n  this.count = 0;\n}\nForEachBookKeeping.prototype.destructor = function () {\n  this.func = null;\n  this.context = null;\n  this.count = 0;\n};\nPooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);\n\nfunction forEachSingleChild(bookKeeping, child, name) {\n  var func = bookKeeping.func;\n  var context = bookKeeping.context;\n\n  func.call(context, child, bookKeeping.count++);\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children == null) {\n    return children;\n  }\n  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  ForEachBookKeeping.release(traverseContext);\n}\n\n/**\n * PooledClass representing the bookkeeping associated with performing a child\n * mapping. Allows avoiding binding callbacks.\n *\n * @constructor MapBookKeeping\n * @param {!*} mapResult Object containing the ordered map of results.\n * @param {!function} mapFunction Function to perform mapping with.\n * @param {?*} mapContext Context to perform mapping with.\n */\nfunction MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {\n  this.result = mapResult;\n  this.keyPrefix = keyPrefix;\n  this.func = mapFunction;\n  this.context = mapContext;\n  this.count = 0;\n}\nMapBookKeeping.prototype.destructor = function () {\n  this.result = null;\n  this.keyPrefix = null;\n  this.func = null;\n  this.context = null;\n  this.count = 0;\n};\nPooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);\n\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  var result = bookKeeping.result;\n  var keyPrefix = bookKeeping.keyPrefix;\n  var func = bookKeeping.func;\n  var context = bookKeeping.context;\n\n\n  var mappedChild = func.call(context, child, bookKeeping.count++);\n  if (Array.isArray(mappedChild)) {\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);\n  } else if (mappedChild != null) {\n    if (ReactElement.isValidElement(mappedChild)) {\n      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,\n      // Keep both the (mapped) and old keys if they differ, just as\n      // traverseAllChildren used to do for objects as children\n      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n    }\n    result.push(mappedChild);\n  }\n}\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n  var escapedPrefix = '';\n  if (prefix != null) {\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n  }\n  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  MapBookKeeping.release(traverseContext);\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}\n\nfunction forEachSingleChildDummy(traverseContext, child, name) {\n  return null;\n}\n\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\nfunction countChildren(children, context) {\n  return traverseAllChildren(children, forEachSingleChildDummy, null);\n}\n\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray\n */\nfunction toArray(children) {\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);\n  return result;\n}\n\nvar ReactChildren = {\n  forEach: forEachChildren,\n  map: mapChildren,\n  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,\n  count: countChildren,\n  toArray: toArray\n};\n\nmodule.exports = ReactChildren;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PooledClass\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Static poolers. Several custom versions for each potential number of\n * arguments. A completely generic pooler is easy to implement, but would\n * require accessing the `arguments` object. In each of these, `this` refers to\n * the Class itself, not an instance. If any others are needed, simply add them\n * here, or in their own files.\n */\nvar oneArgumentPooler = function (copyFieldsFrom) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, copyFieldsFrom);\n    return instance;\n  } else {\n    return new Klass(copyFieldsFrom);\n  }\n};\n\nvar twoArgumentPooler = function (a1, a2) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\n\nvar threeArgumentPooler = function (a1, a2, a3) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3);\n  }\n};\n\nvar fourArgumentPooler = function (a1, a2, a3, a4) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4);\n  }\n};\n\nvar fiveArgumentPooler = function (a1, a2, a3, a4, a5) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4, a5);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4, a5);\n  }\n};\n\nvar standardReleaser = function (instance) {\n  var Klass = this;\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;\n  instance.destructor();\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\n\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = oneArgumentPooler;\n\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances.\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\nvar addPoolingTo = function (CopyConstructor, pooler) {\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\n\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  oneArgumentPooler: oneArgumentPooler,\n  twoArgumentPooler: twoArgumentPooler,\n  threeArgumentPooler: threeArgumentPooler,\n  fourArgumentPooler: fourArgumentPooler,\n  fiveArgumentPooler: fiveArgumentPooler\n};\n\nmodule.exports = PooledClass;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule reactProdInvariant\n * \n */\n'use strict';\n\n/**\n * WARNING: DO NOT manually require this module.\n * This is a replacement for `invariant(...)` used by the error code system\n * and will _only_ be required by the corresponding babel pass.\n * It always throws.\n */\n\nfunction reactProdInvariant(code) {\n  var argCount = arguments.length - 1;\n\n  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;\n\n  for (var argIdx = 0; argIdx < argCount; argIdx++) {\n    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);\n  }\n\n  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';\n\n  var error = new Error(message);\n  error.name = 'Invariant Violation';\n  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame\n\n  throw error;\n}\n\nmodule.exports = reactProdInvariant;","/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElement\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\n\nvar warning = require('fbjs/lib/warning');\nvar canDefineProperty = require('./canDefineProperty');\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n// The Symbol used to tag the ReactElement type. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;\n\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\n\nvar specialPropKeyWarningShown, specialPropRefWarningShown;\n\nfunction hasValidRef(config) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function () {\n    if (!specialPropKeyWarningShown) {\n      specialPropKeyWarningShown = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;\n    }\n  };\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function () {\n    if (!specialPropRefWarningShown) {\n      specialPropRefWarningShown = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;\n    }\n  };\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, no instanceof check\n * will work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} key\n * @param {string|object} ref\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @param {*} owner\n * @param {*} props\n * @internal\n */\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allow us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {};\n    var shadowChildren = Array.isArray(props.children) ? props.children.slice(0) : props.children;\n\n    // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n    if (canDefineProperty) {\n      Object.defineProperty(element._store, 'validated', {\n        configurable: false,\n        enumerable: false,\n        writable: true,\n        value: false\n      });\n      // self and source are DEV only properties.\n      Object.defineProperty(element, '_self', {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: self\n      });\n      Object.defineProperty(element, '_shadowChildren', {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: shadowChildren\n      });\n      // Two elements created in two different places should be considered\n      // equal for testing purposes and therefore we hide it from enumeration.\n      Object.defineProperty(element, '_source', {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: source\n      });\n    } else {\n      element._store.validated = false;\n      element._self = self;\n      element._shadowChildren = shadowChildren;\n      element._source = source;\n    }\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n\n/**\n * Create and return a new ReactElement of the given type.\n * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement\n */\nReactElement.createElement = function (type, config, children) {\n  var propName;\n\n  // Reserved names are extracted\n  var props = {};\n\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n    }\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source;\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    if (key || ref) {\n      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {\n        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n        if (key) {\n          defineKeyPropWarningGetter(props, displayName);\n        }\n        if (ref) {\n          defineRefPropWarningGetter(props, displayName);\n        }\n      }\n    }\n  }\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n};\n\n/**\n * Return a function that produces ReactElements of a given type.\n * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory\n */\nReactElement.createFactory = function (type) {\n  var factory = ReactElement.createElement.bind(null, type);\n  // Expose the type on the factory and the prototype so that it can be\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.\n  // This should not be named `constructor` since this may not be the function\n  // that created the element, and it may not even be a constructor.\n  // Legacy hook TODO: Warn if this is accessed\n  factory.type = type;\n  return factory;\n};\n\nReactElement.cloneAndReplaceKey = function (oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n\n  return newElement;\n};\n\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement\n */\nReactElement.cloneElement = function (element, config, children) {\n  var propName;\n\n  // Original props are copied\n  var props = _assign({}, element.props);\n\n  // Reserved names are extracted\n  var key = element.key;\n  var ref = element.ref;\n  // Self is preserved since the owner is preserved.\n  var self = element._self;\n  // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n  var source = element._source;\n\n  // Owner will be preserved, unless ref is overridden\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    // Remaining properties override existing props\n    var defaultProps;\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n};\n\n/**\n * Verifies the object is a ReactElement.\n * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a valid component.\n * @final\n */\nReactElement.isValidElement = function (object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n};\n\nReactElement.REACT_ELEMENT_TYPE = REACT_ELEMENT_TYPE;\n\nmodule.exports = ReactElement;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCurrentOwner\n */\n\n'use strict';\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\n\nvar ReactCurrentOwner = {\n\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n\n};\n\nmodule.exports = ReactCurrentOwner;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule canDefineProperty\n */\n\n'use strict';\n\nvar canDefineProperty = false;\nif (process.env.NODE_ENV !== 'production') {\n  try {\n    Object.defineProperty({}, 'x', { get: function () {} });\n    canDefineProperty = true;\n  } catch (x) {\n    // IE will fail on defineProperty\n  }\n}\n\nmodule.exports = canDefineProperty;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule traverseAllChildren\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactElement = require('./ReactElement');\n\nvar getIteratorFn = require('./getIteratorFn');\nvar invariant = require('fbjs/lib/invariant');\nvar KeyEscapeUtils = require('./KeyEscapeUtils');\nvar warning = require('fbjs/lib/warning');\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\nvar didWarnAboutMaps = false;\n\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getComponentKey(component, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (component && typeof component === 'object' && component.key != null) {\n    // Explicit key\n    return KeyEscapeUtils.escape(component.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {\n    callback(traverseContext, children,\n    // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows.\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n    if (iteratorFn) {\n      var iterator = iteratorFn.call(children);\n      var step;\n      if (iteratorFn !== children.entries) {\n        var ii = 0;\n        while (!(step = iterator.next()).done) {\n          child = step.value;\n          nextName = nextNamePrefix + getComponentKey(child, ii++);\n          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n        }\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          var mapsAsChildrenAddendum = '';\n          if (ReactCurrentOwner.current) {\n            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();\n            if (mapsAsChildrenOwnerName) {\n              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';\n            }\n          }\n          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;\n          didWarnAboutMaps = true;\n        }\n        // Iterator will provide entry [k,v] tuples rather than values.\n        while (!(step = iterator.next()).done) {\n          var entry = step.value;\n          if (entry) {\n            child = entry[1];\n            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);\n            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n          }\n        }\n      }\n    } else if (type === 'object') {\n      var addendum = '';\n      if (process.env.NODE_ENV !== 'production') {\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';\n        if (children._isReactElement) {\n          addendum = ' It looks like you\\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';\n        }\n        if (ReactCurrentOwner.current) {\n          var name = ReactCurrentOwner.current.getName();\n          if (name) {\n            addendum += ' Check the render method of `' + name + '`.';\n          }\n        }\n      }\n      var childrenString = String(children);\n      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n\nmodule.exports = traverseAllChildren;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getIteratorFn\n * \n */\n\n'use strict';\n\n/* global Symbol */\n\nvar ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n/**\n * Returns the iterator method function contained on the iterable object.\n *\n * Be sure to invoke the function with the iterable as context:\n *\n *     var iteratorFn = getIteratorFn(myIterable);\n *     if (iteratorFn) {\n *       var iterator = iteratorFn.call(myIterable);\n *       ...\n *     }\n *\n * @param {?object} maybeIterable\n * @return {?function}\n */\nfunction getIteratorFn(maybeIterable) {\n  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {\n    return iteratorFn;\n  }\n}\n\nmodule.exports = getIteratorFn;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule KeyEscapeUtils\n * \n */\n\n'use strict';\n\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n\n  return '$' + escapedString;\n}\n\n/**\n * Unescape and unwrap key for human-readable display\n *\n * @param {string} key to unescape.\n * @return {string} the unescaped key.\n */\nfunction unescape(key) {\n  var unescapeRegex = /(=0|=2)/g;\n  var unescaperLookup = {\n    '=0': '=',\n    '=2': ':'\n  };\n  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);\n\n  return ('' + keySubstring).replace(unescapeRegex, function (match) {\n    return unescaperLookup[match];\n  });\n}\n\nvar KeyEscapeUtils = {\n  escape: escape,\n  unescape: unescape\n};\n\nmodule.exports = KeyEscapeUtils;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponent\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\n\nvar canDefineProperty = require('./canDefineProperty');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction ReactComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nReactComponent.prototype.isReactComponent = {};\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nReactComponent.prototype.setState = function (partialState, callback) {\n  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;\n  this.updater.enqueueSetState(this, partialState);\n  if (callback) {\n    this.updater.enqueueCallback(this, callback, 'setState');\n  }\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nReactComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this);\n  if (callback) {\n    this.updater.enqueueCallback(this, callback, 'forceUpdate');\n  }\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\nif (process.env.NODE_ENV !== 'production') {\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n  var defineDeprecationWarning = function (methodName, info) {\n    if (canDefineProperty) {\n      Object.defineProperty(ReactComponent.prototype, methodName, {\n        get: function () {\n          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;\n          return undefined;\n        }\n      });\n    }\n  };\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nmodule.exports = ReactComponent;","/**\n * Copyright 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNoopUpdateQueue\n */\n\n'use strict';\n\nvar warning = require('fbjs/lib/warning');\n\nfunction warnNoop(publicInstance, callerName) {\n  if (process.env.NODE_ENV !== 'production') {\n    var constructor = publicInstance.constructor;\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;\n  }\n}\n\n/**\n * This is the abstract API for an update queue.\n */\nvar ReactNoopUpdateQueue = {\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Enqueue a callback that will be executed after all the pending updates\n   * have processed.\n   *\n   * @param {ReactClass} publicInstance The instance to use as `this` context.\n   * @param {?function} callback Called after state is updated.\n   * @internal\n   */\n  enqueueCallback: function (publicInstance, callback) {},\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nmodule.exports = ReactNoopUpdateQueue;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPureComponent\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar ReactComponent = require('./ReactComponent');\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction ReactPureComponent(props, context, updater) {\n  // Duplicated from ReactComponent.\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nfunction ComponentDummy() {}\nComponentDummy.prototype = ReactComponent.prototype;\nReactPureComponent.prototype = new ComponentDummy();\nReactPureComponent.prototype.constructor = ReactPureComponent;\n// Avoid an extra prototype jump for these methods.\n_assign(ReactPureComponent.prototype, ReactComponent.prototype);\nReactPureComponent.prototype.isPureReactComponent = true;\n\nmodule.exports = ReactPureComponent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactClass\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar ReactComponent = require('./ReactComponent');\nvar ReactElement = require('./ReactElement');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar invariant = require('fbjs/lib/invariant');\nvar keyMirror = require('fbjs/lib/keyMirror');\nvar keyOf = require('fbjs/lib/keyOf');\nvar warning = require('fbjs/lib/warning');\n\nvar MIXINS_KEY = keyOf({ mixins: null });\n\n/**\n * Policies that describe methods in `ReactClassInterface`.\n */\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n  /**\n   * These methods are overriding the base class.\n   */\n  OVERRIDE_BASE: null,\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\n\nvar injectedMixins = [];\n\n/**\n * Composite components are higher-level components that compose other composite\n * or host components.\n *\n * To create a new type of `ReactClass`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactClassInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will be available on the prototype.\n *\n * @interface ReactClassInterface\n * @internal\n */\nvar ReactClassInterface = {\n\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * An object containing properties and methods that should be defined on\n   * the component's constructor instead of its prototype (static methods).\n   *\n   * @type {object}\n   * @optional\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types this component sets for its children.\n   *\n   * @type {object}\n   * @optional\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * @return {object}\n   * @optional\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props, state and/or context.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props/state/context will not require a component\n   * update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n   *     return !equal(nextProps, this.props) ||\n   *       !equal(nextState, this.state) ||\n   *       !equal(nextContext, this.context);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n   * and `nextContext`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n\n};\n\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared like instance properties in the specification\n * when defining classes using `React.createClass`, they are actually static\n * and are accessible on the constructor instead of the prototype. Despite\n * being static, they must be defined outside of the \"statics\" key under\n * which all other static methods are defined.\n */\nvar RESERVED_SPEC_KEYS = {\n  displayName: function (Constructor, displayName) {\n    Constructor.displayName = displayName;\n  },\n  mixins: function (Constructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function (Constructor, childContextTypes) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);\n    }\n    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);\n  },\n  contextTypes: function (Constructor, contextTypes) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);\n    }\n    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);\n  },\n  /**\n   * Special case getDefaultProps which should move into statics but requires\n   * automatic merging.\n   */\n  getDefaultProps: function (Constructor, getDefaultProps) {\n    if (Constructor.getDefaultProps) {\n      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);\n    } else {\n      Constructor.getDefaultProps = getDefaultProps;\n    }\n  },\n  propTypes: function (Constructor, propTypes) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);\n    }\n    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n  },\n  statics: function (Constructor, statics) {\n    mixStaticSpecIntoComponent(Constructor, statics);\n  },\n  autobind: function () {} };\n\n// noop\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      // use a warning instead of an invariant so components\n      // don't show up in prod but only in __DEV__\n      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;\n    }\n  }\n}\n\nfunction validateMethodOverride(isAlreadyDefined, name) {\n  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;\n\n  // Disallow overriding of base class methods unless explicitly allowed.\n  if (ReactClassMixin.hasOwnProperty(name)) {\n    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;\n  }\n\n  // Disallow defining methods more than once unless explicitly allowed.\n  if (isAlreadyDefined) {\n    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;\n  }\n}\n\n/**\n * Mixin helper which handles policy validation and reserved\n * specification keys when building React classes.\n */\nfunction mixSpecIntoComponent(Constructor, spec) {\n  if (!spec) {\n    if (process.env.NODE_ENV !== 'production') {\n      var typeofSpec = typeof spec;\n      var isMixinValid = typeofSpec === 'object' && spec !== null;\n\n      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;\n    }\n\n    return;\n  }\n\n  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;\n  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;\n\n  var proto = Constructor.prototype;\n  var autoBindPairs = proto.__reactAutoBindPairs;\n\n  // By handling mixins before any other properties, we ensure the same\n  // chaining order is applied to methods with DEFINE_MANY policy, whether\n  // mixins are listed before or after these methods in the spec.\n  if (spec.hasOwnProperty(MIXINS_KEY)) {\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n  }\n\n  for (var name in spec) {\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n\n    if (name === MIXINS_KEY) {\n      // We have already handled mixins in a special case above.\n      continue;\n    }\n\n    var property = spec[name];\n    var isAlreadyDefined = proto.hasOwnProperty(name);\n    validateMethodOverride(isAlreadyDefined, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactClass methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;\n\n      if (shouldAutoBind) {\n        autoBindPairs.push(name, property);\n        proto[name] = property;\n      } else {\n        if (isAlreadyDefined) {\n          var specPolicy = ReactClassInterface[name];\n\n          // These cases should already be caught by validateMethodOverride.\n          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;\n\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property, merging if appropriate.\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n          if (process.env.NODE_ENV !== 'production') {\n            // Add verbose displayName to the function, which helps when looking\n            // at profiling tools.\n            if (typeof property === 'function' && spec.displayName) {\n              proto[name].displayName = spec.displayName + '_' + name;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction mixStaticSpecIntoComponent(Constructor, statics) {\n  if (!statics) {\n    return;\n  }\n  for (var name in statics) {\n    var property = statics[name];\n    if (!statics.hasOwnProperty(name)) {\n      continue;\n    }\n\n    var isReserved = name in RESERVED_SPEC_KEYS;\n    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;\n\n    var isInherited = name in Constructor;\n    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;\n    Constructor[name] = property;\n  }\n}\n\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\nfunction mergeIntoWithNoDuplicateKeys(one, two) {\n  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;\n\n  for (var key in two) {\n    if (two.hasOwnProperty(key)) {\n      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;\n      one[key] = two[key];\n    }\n  }\n  return one;\n}\n\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a = one.apply(this, arguments);\n    var b = two.apply(this, arguments);\n    if (a == null) {\n      return b;\n    } else if (b == null) {\n      return a;\n    }\n    var c = {};\n    mergeIntoWithNoDuplicateKeys(c, a);\n    mergeIntoWithNoDuplicateKeys(c, b);\n    return c;\n  };\n}\n\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n\n/**\n * Binds a method to the component.\n *\n * @param {object} component Component whose method is going to be bound.\n * @param {function} method Method to be bound.\n * @return {function} The bound method.\n */\nfunction bindAutoBindMethod(component, method) {\n  var boundMethod = method.bind(component);\n  if (process.env.NODE_ENV !== 'production') {\n    boundMethod.__reactBoundContext = component;\n    boundMethod.__reactBoundMethod = method;\n    boundMethod.__reactBoundArguments = null;\n    var componentName = component.constructor.displayName;\n    var _bind = boundMethod.bind;\n    boundMethod.bind = function (newThis) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      // User is trying to bind() an autobound method; we effectively will\n      // ignore the value of \"this\" that the user is trying to use, so\n      // let's warn.\n      if (newThis !== component && newThis !== null) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;\n      } else if (!args.length) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;\n        return boundMethod;\n      }\n      var reboundMethod = _bind.apply(boundMethod, arguments);\n      reboundMethod.__reactBoundContext = component;\n      reboundMethod.__reactBoundMethod = method;\n      reboundMethod.__reactBoundArguments = args;\n      return reboundMethod;\n    };\n  }\n  return boundMethod;\n}\n\n/**\n * Binds all auto-bound methods in a component.\n *\n * @param {object} component Component whose method is going to be bound.\n */\nfunction bindAutoBindMethods(component) {\n  var pairs = component.__reactAutoBindPairs;\n  for (var i = 0; i < pairs.length; i += 2) {\n    var autoBindKey = pairs[i];\n    var method = pairs[i + 1];\n    component[autoBindKey] = bindAutoBindMethod(component, method);\n  }\n}\n\n/**\n * Add more to the ReactClass base class. These are all legacy features and\n * therefore not already part of the modern ReactComponent.\n */\nvar ReactClassMixin = {\n\n  /**\n   * TODO: This will be deprecated because state should always keep a consistent\n   * type signature and the only use case for this, is to avoid that.\n   */\n  replaceState: function (newState, callback) {\n    this.updater.enqueueReplaceState(this, newState);\n    if (callback) {\n      this.updater.enqueueCallback(this, callback, 'replaceState');\n    }\n  },\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function () {\n    return this.updater.isMounted(this);\n  }\n};\n\nvar ReactClassComponent = function () {};\n_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n\n/**\n * Module for creating composite components.\n *\n * @class ReactClass\n */\nvar ReactClass = {\n\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function (spec) {\n    var Constructor = function (props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (initialState === undefined && this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;\n\n      this.state = initialState;\n    };\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\n    mixSpecIntoComponent(Constructor, spec);\n\n    // Initialize the defaultProps property after all mixins have been merged.\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  },\n\n  injection: {\n    injectMixin: function (mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n\n};\n\nmodule.exports = ReactClass;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypeLocations\n */\n\n'use strict';\n\nvar keyMirror = require('fbjs/lib/keyMirror');\n\nvar ReactPropTypeLocations = keyMirror({\n  prop: null,\n  context: null,\n  childContext: null\n});\n\nmodule.exports = ReactPropTypeLocations;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypeLocationNames\n */\n\n'use strict';\n\nvar ReactPropTypeLocationNames = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n}\n\nmodule.exports = ReactPropTypeLocationNames;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMFactories\n */\n\n'use strict';\n\nvar ReactElement = require('./ReactElement');\n\n/**\n * Create a factory that creates HTML tag elements.\n *\n * @private\n */\nvar createDOMFactory = ReactElement.createFactory;\nif (process.env.NODE_ENV !== 'production') {\n  var ReactElementValidator = require('./ReactElementValidator');\n  createDOMFactory = ReactElementValidator.createFactory;\n}\n\n/**\n * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.\n * This is also accessible via `React.DOM`.\n *\n * @public\n */\nvar ReactDOMFactories = {\n  a: createDOMFactory('a'),\n  abbr: createDOMFactory('abbr'),\n  address: createDOMFactory('address'),\n  area: createDOMFactory('area'),\n  article: createDOMFactory('article'),\n  aside: createDOMFactory('aside'),\n  audio: createDOMFactory('audio'),\n  b: createDOMFactory('b'),\n  base: createDOMFactory('base'),\n  bdi: createDOMFactory('bdi'),\n  bdo: createDOMFactory('bdo'),\n  big: createDOMFactory('big'),\n  blockquote: createDOMFactory('blockquote'),\n  body: createDOMFactory('body'),\n  br: createDOMFactory('br'),\n  button: createDOMFactory('button'),\n  canvas: createDOMFactory('canvas'),\n  caption: createDOMFactory('caption'),\n  cite: createDOMFactory('cite'),\n  code: createDOMFactory('code'),\n  col: createDOMFactory('col'),\n  colgroup: createDOMFactory('colgroup'),\n  data: createDOMFactory('data'),\n  datalist: createDOMFactory('datalist'),\n  dd: createDOMFactory('dd'),\n  del: createDOMFactory('del'),\n  details: createDOMFactory('details'),\n  dfn: createDOMFactory('dfn'),\n  dialog: createDOMFactory('dialog'),\n  div: createDOMFactory('div'),\n  dl: createDOMFactory('dl'),\n  dt: createDOMFactory('dt'),\n  em: createDOMFactory('em'),\n  embed: createDOMFactory('embed'),\n  fieldset: createDOMFactory('fieldset'),\n  figcaption: createDOMFactory('figcaption'),\n  figure: createDOMFactory('figure'),\n  footer: createDOMFactory('footer'),\n  form: createDOMFactory('form'),\n  h1: createDOMFactory('h1'),\n  h2: createDOMFactory('h2'),\n  h3: createDOMFactory('h3'),\n  h4: createDOMFactory('h4'),\n  h5: createDOMFactory('h5'),\n  h6: createDOMFactory('h6'),\n  head: createDOMFactory('head'),\n  header: createDOMFactory('header'),\n  hgroup: createDOMFactory('hgroup'),\n  hr: createDOMFactory('hr'),\n  html: createDOMFactory('html'),\n  i: createDOMFactory('i'),\n  iframe: createDOMFactory('iframe'),\n  img: createDOMFactory('img'),\n  input: createDOMFactory('input'),\n  ins: createDOMFactory('ins'),\n  kbd: createDOMFactory('kbd'),\n  keygen: createDOMFactory('keygen'),\n  label: createDOMFactory('label'),\n  legend: createDOMFactory('legend'),\n  li: createDOMFactory('li'),\n  link: createDOMFactory('link'),\n  main: createDOMFactory('main'),\n  map: createDOMFactory('map'),\n  mark: createDOMFactory('mark'),\n  menu: createDOMFactory('menu'),\n  menuitem: createDOMFactory('menuitem'),\n  meta: createDOMFactory('meta'),\n  meter: createDOMFactory('meter'),\n  nav: createDOMFactory('nav'),\n  noscript: createDOMFactory('noscript'),\n  object: createDOMFactory('object'),\n  ol: createDOMFactory('ol'),\n  optgroup: createDOMFactory('optgroup'),\n  option: createDOMFactory('option'),\n  output: createDOMFactory('output'),\n  p: createDOMFactory('p'),\n  param: createDOMFactory('param'),\n  picture: createDOMFactory('picture'),\n  pre: createDOMFactory('pre'),\n  progress: createDOMFactory('progress'),\n  q: createDOMFactory('q'),\n  rp: createDOMFactory('rp'),\n  rt: createDOMFactory('rt'),\n  ruby: createDOMFactory('ruby'),\n  s: createDOMFactory('s'),\n  samp: createDOMFactory('samp'),\n  script: createDOMFactory('script'),\n  section: createDOMFactory('section'),\n  select: createDOMFactory('select'),\n  small: createDOMFactory('small'),\n  source: createDOMFactory('source'),\n  span: createDOMFactory('span'),\n  strong: createDOMFactory('strong'),\n  style: createDOMFactory('style'),\n  sub: createDOMFactory('sub'),\n  summary: createDOMFactory('summary'),\n  sup: createDOMFactory('sup'),\n  table: createDOMFactory('table'),\n  tbody: createDOMFactory('tbody'),\n  td: createDOMFactory('td'),\n  textarea: createDOMFactory('textarea'),\n  tfoot: createDOMFactory('tfoot'),\n  th: createDOMFactory('th'),\n  thead: createDOMFactory('thead'),\n  time: createDOMFactory('time'),\n  title: createDOMFactory('title'),\n  tr: createDOMFactory('tr'),\n  track: createDOMFactory('track'),\n  u: createDOMFactory('u'),\n  ul: createDOMFactory('ul'),\n  'var': createDOMFactory('var'),\n  video: createDOMFactory('video'),\n  wbr: createDOMFactory('wbr'),\n\n  // SVG\n  circle: createDOMFactory('circle'),\n  clipPath: createDOMFactory('clipPath'),\n  defs: createDOMFactory('defs'),\n  ellipse: createDOMFactory('ellipse'),\n  g: createDOMFactory('g'),\n  image: createDOMFactory('image'),\n  line: createDOMFactory('line'),\n  linearGradient: createDOMFactory('linearGradient'),\n  mask: createDOMFactory('mask'),\n  path: createDOMFactory('path'),\n  pattern: createDOMFactory('pattern'),\n  polygon: createDOMFactory('polygon'),\n  polyline: createDOMFactory('polyline'),\n  radialGradient: createDOMFactory('radialGradient'),\n  rect: createDOMFactory('rect'),\n  stop: createDOMFactory('stop'),\n  svg: createDOMFactory('svg'),\n  text: createDOMFactory('text'),\n  tspan: createDOMFactory('tspan')\n};\n\nmodule.exports = ReactDOMFactories;","/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElementValidator\n */\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\n\n'use strict';\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactComponentTreeHook = require('./ReactComponentTreeHook');\nvar ReactElement = require('./ReactElement');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\n\nvar checkReactTypeSpec = require('./checkReactTypeSpec');\n\nvar canDefineProperty = require('./canDefineProperty');\nvar getIteratorFn = require('./getIteratorFn');\nvar warning = require('fbjs/lib/warning');\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = ReactCurrentOwner.current.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n    if (parentName) {\n      info = ' Check the top-level render call using <' + parentName + '>.';\n    }\n  }\n  return info;\n}\n\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n  element._store.validated = true;\n\n  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});\n\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n  if (memoizer[currentComponentErrorInfo]) {\n    return;\n  }\n  memoizer[currentComponentErrorInfo] = true;\n\n  // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n  var childOwner = '';\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';\n  }\n\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;\n}\n\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n      if (ReactElement.isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (ReactElement.isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n    // Entry iterators provide implicit keys.\n    if (iteratorFn) {\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (ReactElement.isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\nfunction validatePropTypes(element) {\n  var componentClass = element.type;\n  if (typeof componentClass !== 'function') {\n    return;\n  }\n  var name = componentClass.displayName || componentClass.name;\n  if (componentClass.propTypes) {\n    checkReactTypeSpec(componentClass.propTypes, element.props, ReactPropTypeLocations.prop, name, element, null);\n  }\n  if (typeof componentClass.getDefaultProps === 'function') {\n    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;\n  }\n}\n\nvar ReactElementValidator = {\n\n  createElement: function (type, props, children) {\n    var validType = typeof type === 'string' || typeof type === 'function';\n    // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n    if (!validType) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;\n    }\n\n    var element = ReactElement.createElement.apply(this, arguments);\n\n    // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n    if (element == null) {\n      return element;\n    }\n\n    // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n    if (validType) {\n      for (var i = 2; i < arguments.length; i++) {\n        validateChildKeys(arguments[i], type);\n      }\n    }\n\n    validatePropTypes(element);\n\n    return element;\n  },\n\n  createFactory: function (type) {\n    var validatedFactory = ReactElementValidator.createElement.bind(null, type);\n    // Legacy hook TODO: Warn if this is accessed\n    validatedFactory.type = type;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (canDefineProperty) {\n        Object.defineProperty(validatedFactory, 'type', {\n          enumerable: false,\n          get: function () {\n            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;\n            Object.defineProperty(this, 'type', {\n              value: type\n            });\n            return type;\n          }\n        });\n      }\n    }\n\n    return validatedFactory;\n  },\n\n  cloneElement: function (element, props, children) {\n    var newElement = ReactElement.cloneElement.apply(this, arguments);\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], newElement.type);\n    }\n    validatePropTypes(newElement);\n    return newElement;\n  }\n\n};\n\nmodule.exports = ReactElementValidator;","/**\n * Copyright 2016-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentTreeHook\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nfunction isNative(fn) {\n  // Based on isNative() from Lodash\n  var funcToString = Function.prototype.toString;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  var reIsNative = RegExp('^' + funcToString\n  // Take an example native function source for comparison\n  .call(hasOwnProperty)\n  // Strip regex characters so we can use it for regex\n  .replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n  // Remove hasOwnProperty from the template to make it generic\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\n  try {\n    var source = funcToString.call(fn);\n    return reIsNative.test(source);\n  } catch (err) {\n    return false;\n  }\n}\n\nvar canUseCollections =\n// Array.from\ntypeof Array.from === 'function' &&\n// Map\ntypeof Map === 'function' && isNative(Map) &&\n// Map.prototype.keys\nMap.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&\n// Set\ntypeof Set === 'function' && isNative(Set) &&\n// Set.prototype.keys\nSet.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);\n\nvar itemMap;\nvar rootIDSet;\n\nvar itemByKey;\nvar rootByKey;\n\nif (canUseCollections) {\n  itemMap = new Map();\n  rootIDSet = new Set();\n} else {\n  itemByKey = {};\n  rootByKey = {};\n}\n\nvar unmountedIDs = [];\n\n// Use non-numeric keys to prevent V8 performance issues:\n// https://github.com/facebook/react/pull/7232\nfunction getKeyFromID(id) {\n  return '.' + id;\n}\nfunction getIDFromKey(key) {\n  return parseInt(key.substr(1), 10);\n}\n\nfunction get(id) {\n  if (canUseCollections) {\n    return itemMap.get(id);\n  } else {\n    var key = getKeyFromID(id);\n    return itemByKey[key];\n  }\n}\n\nfunction remove(id) {\n  if (canUseCollections) {\n    itemMap['delete'](id);\n  } else {\n    var key = getKeyFromID(id);\n    delete itemByKey[key];\n  }\n}\n\nfunction create(id, element, parentID) {\n  var item = {\n    element: element,\n    parentID: parentID,\n    text: null,\n    childIDs: [],\n    isMounted: false,\n    updateCount: 0\n  };\n\n  if (canUseCollections) {\n    itemMap.set(id, item);\n  } else {\n    var key = getKeyFromID(id);\n    itemByKey[key] = item;\n  }\n}\n\nfunction addRoot(id) {\n  if (canUseCollections) {\n    rootIDSet.add(id);\n  } else {\n    var key = getKeyFromID(id);\n    rootByKey[key] = true;\n  }\n}\n\nfunction removeRoot(id) {\n  if (canUseCollections) {\n    rootIDSet['delete'](id);\n  } else {\n    var key = getKeyFromID(id);\n    delete rootByKey[key];\n  }\n}\n\nfunction getRegisteredIDs() {\n  if (canUseCollections) {\n    return Array.from(itemMap.keys());\n  } else {\n    return Object.keys(itemByKey).map(getIDFromKey);\n  }\n}\n\nfunction getRootIDs() {\n  if (canUseCollections) {\n    return Array.from(rootIDSet.keys());\n  } else {\n    return Object.keys(rootByKey).map(getIDFromKey);\n  }\n}\n\nfunction purgeDeep(id) {\n  var item = get(id);\n  if (item) {\n    var childIDs = item.childIDs;\n\n    remove(id);\n    childIDs.forEach(purgeDeep);\n  }\n}\n\nfunction describeComponentFrame(name, source, ownerName) {\n  return '\\n    in ' + name + (source ? ' (at ' + source.fileName.replace(/^.*[\\\\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');\n}\n\nfunction getDisplayName(element) {\n  if (element == null) {\n    return '#empty';\n  } else if (typeof element === 'string' || typeof element === 'number') {\n    return '#text';\n  } else if (typeof element.type === 'string') {\n    return element.type;\n  } else {\n    return element.type.displayName || element.type.name || 'Unknown';\n  }\n}\n\nfunction describeID(id) {\n  var name = ReactComponentTreeHook.getDisplayName(id);\n  var element = ReactComponentTreeHook.getElement(id);\n  var ownerID = ReactComponentTreeHook.getOwnerID(id);\n  var ownerName;\n  if (ownerID) {\n    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);\n  }\n  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;\n  return describeComponentFrame(name, element && element._source, ownerName);\n}\n\nvar ReactComponentTreeHook = {\n  onSetChildren: function (id, nextChildIDs) {\n    var item = get(id);\n    item.childIDs = nextChildIDs;\n\n    for (var i = 0; i < nextChildIDs.length; i++) {\n      var nextChildID = nextChildIDs[i];\n      var nextChild = get(nextChildID);\n      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;\n      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;\n      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;\n      if (nextChild.parentID == null) {\n        nextChild.parentID = id;\n        // TODO: This shouldn't be necessary but mounting a new root during in\n        // componentWillMount currently causes not-yet-mounted components to\n        // be purged from our tree data so their parent ID is missing.\n      }\n      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;\n    }\n  },\n  onBeforeMountComponent: function (id, element, parentID) {\n    create(id, element, parentID);\n  },\n  onBeforeUpdateComponent: function (id, element) {\n    var item = get(id);\n    if (!item || !item.isMounted) {\n      // We may end up here as a result of setState() in componentWillUnmount().\n      // In this case, ignore the element.\n      return;\n    }\n    item.element = element;\n  },\n  onMountComponent: function (id) {\n    var item = get(id);\n    item.isMounted = true;\n    var isRoot = item.parentID === 0;\n    if (isRoot) {\n      addRoot(id);\n    }\n  },\n  onUpdateComponent: function (id) {\n    var item = get(id);\n    if (!item || !item.isMounted) {\n      // We may end up here as a result of setState() in componentWillUnmount().\n      // In this case, ignore the element.\n      return;\n    }\n    item.updateCount++;\n  },\n  onUnmountComponent: function (id) {\n    var item = get(id);\n    if (item) {\n      // We need to check if it exists.\n      // `item` might not exist if it is inside an error boundary, and a sibling\n      // error boundary child threw while mounting. Then this instance never\n      // got a chance to mount, but it still gets an unmounting event during\n      // the error boundary cleanup.\n      item.isMounted = false;\n      var isRoot = item.parentID === 0;\n      if (isRoot) {\n        removeRoot(id);\n      }\n    }\n    unmountedIDs.push(id);\n  },\n  purgeUnmountedComponents: function () {\n    if (ReactComponentTreeHook._preventPurging) {\n      // Should only be used for testing.\n      return;\n    }\n\n    for (var i = 0; i < unmountedIDs.length; i++) {\n      var id = unmountedIDs[i];\n      purgeDeep(id);\n    }\n    unmountedIDs.length = 0;\n  },\n  isMounted: function (id) {\n    var item = get(id);\n    return item ? item.isMounted : false;\n  },\n  getCurrentStackAddendum: function (topElement) {\n    var info = '';\n    if (topElement) {\n      var type = topElement.type;\n      var name = typeof type === 'function' ? type.displayName || type.name : type;\n      var owner = topElement._owner;\n      info += describeComponentFrame(name || 'Unknown', topElement._source, owner && owner.getName());\n    }\n\n    var currentOwner = ReactCurrentOwner.current;\n    var id = currentOwner && currentOwner._debugID;\n\n    info += ReactComponentTreeHook.getStackAddendumByID(id);\n    return info;\n  },\n  getStackAddendumByID: function (id) {\n    var info = '';\n    while (id) {\n      info += describeID(id);\n      id = ReactComponentTreeHook.getParentID(id);\n    }\n    return info;\n  },\n  getChildIDs: function (id) {\n    var item = get(id);\n    return item ? item.childIDs : [];\n  },\n  getDisplayName: function (id) {\n    var element = ReactComponentTreeHook.getElement(id);\n    if (!element) {\n      return null;\n    }\n    return getDisplayName(element);\n  },\n  getElement: function (id) {\n    var item = get(id);\n    return item ? item.element : null;\n  },\n  getOwnerID: function (id) {\n    var element = ReactComponentTreeHook.getElement(id);\n    if (!element || !element._owner) {\n      return null;\n    }\n    return element._owner._debugID;\n  },\n  getParentID: function (id) {\n    var item = get(id);\n    return item ? item.parentID : null;\n  },\n  getSource: function (id) {\n    var item = get(id);\n    var element = item ? item.element : null;\n    var source = element != null ? element._source : null;\n    return source;\n  },\n  getText: function (id) {\n    var element = ReactComponentTreeHook.getElement(id);\n    if (typeof element === 'string') {\n      return element;\n    } else if (typeof element === 'number') {\n      return '' + element;\n    } else {\n      return null;\n    }\n  },\n  getUpdateCount: function (id) {\n    var item = get(id);\n    return item ? item.updateCount : 0;\n  },\n\n\n  getRegisteredIDs: getRegisteredIDs,\n\n  getRootIDs: getRootIDs\n};\n\nmodule.exports = ReactComponentTreeHook;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule checkReactTypeSpec\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar ReactComponentTreeHook;\n\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {\n  // Temporary hack.\n  // Inline requires don't work well with Jest:\n  // https://github.com/facebook/react/issues/7240\n  // Remove the inline requires when we don't need them anymore:\n  // https://github.com/facebook/react/pull/7178\n  ReactComponentTreeHook = require('./ReactComponentTreeHook');\n}\n\nvar loggedTypeFailures = {};\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?object} element The React element that is being type-checked\n * @param {?number} debugID The React component instance that is being type-checked\n * @private\n */\nfunction checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {\n  for (var typeSpecName in typeSpecs) {\n    if (typeSpecs.hasOwnProperty(typeSpecName)) {\n      var error;\n      // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n      try {\n        // This is intentionally an invariant that gets caught. It's the same\n        // behavior as without this statement except with a better message.\n        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n      } catch (ex) {\n        error = ex;\n      }\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n\n        var componentStackInfo = '';\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!ReactComponentTreeHook) {\n            ReactComponentTreeHook = require('./ReactComponentTreeHook');\n          }\n          if (debugID !== null) {\n            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);\n          } else if (element !== null) {\n            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);\n          }\n        }\n\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;\n      }\n    }\n  }\n}\n\nmodule.exports = checkReactTypeSpec;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypesSecret\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypes\n */\n\n'use strict';\n\nvar ReactElement = require('./ReactElement');\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar getIteratorFn = require('./getIteratorFn');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Collection of methods that allow declaration and validation of props that are\n * supplied to React components. Example usage:\n *\n *   var Props = require('ReactPropTypes');\n *   var MyArticle = React.createClass({\n *     propTypes: {\n *       // An optional string prop named \"description\".\n *       description: Props.string,\n *\n *       // A required enum prop named \"category\".\n *       category: Props.oneOf(['News','Photos']).isRequired,\n *\n *       // A prop named \"dialog\" that requires an instance of Dialog.\n *       dialog: Props.instanceOf(Dialog).isRequired\n *     },\n *     render: function() { ... }\n *   });\n *\n * A more formal specification of how these methods are used:\n *\n *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n *   decl := ReactPropTypes.{type}(.isRequired)?\n *\n * Each and every declaration produces a function with the same signature. This\n * allows the creation of custom validation functions. For example:\n *\n *  var MyLink = React.createClass({\n *    propTypes: {\n *      // An optional string or URI prop named \"href\".\n *      href: function(props, propName, componentName) {\n *        var propValue = props[propName];\n *        if (propValue != null && typeof propValue !== 'string' &&\n *            !(propValue instanceof URI)) {\n *          return new Error(\n *            'Expected a string or an URI for ' + propName + ' in ' +\n *            componentName\n *          );\n *        }\n *      }\n *    },\n *    render: function() {...}\n *  });\n *\n * @internal\n */\n\nvar ANONYMOUS = '<<anonymous>>';\n\nvar ReactPropTypes = {\n  array: createPrimitiveTypeChecker('array'),\n  bool: createPrimitiveTypeChecker('boolean'),\n  func: createPrimitiveTypeChecker('function'),\n  number: createPrimitiveTypeChecker('number'),\n  object: createPrimitiveTypeChecker('object'),\n  string: createPrimitiveTypeChecker('string'),\n  symbol: createPrimitiveTypeChecker('symbol'),\n\n  any: createAnyTypeChecker(),\n  arrayOf: createArrayOfTypeChecker,\n  element: createElementTypeChecker(),\n  instanceOf: createInstanceTypeChecker,\n  node: createNodeChecker(),\n  objectOf: createObjectOfTypeChecker,\n  oneOf: createEnumTypeChecker,\n  oneOfType: createUnionTypeChecker,\n  shape: createShapeTypeChecker\n};\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\n/*eslint-disable no-self-compare*/\nfunction is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n/*eslint-enable no-self-compare*/\n\n/**\n * We use an Error-like object for backward compatibility as people may call\n * PropTypes directly and inspect their output. However we don't use real\n * Errors anymore. We don't inspect their stack anyway, and creating them\n * is prohibitively expensive if they are created too often, such as what\n * happens in oneOfType() for any type before the one that matched.\n */\nfunction PropTypeError(message) {\n  this.message = message;\n  this.stack = '';\n}\n// Make `instanceof Error` still work for returned errors.\nPropTypeError.prototype = Error.prototype;\n\nfunction createChainableTypeChecker(validate) {\n  if (process.env.NODE_ENV !== 'production') {\n    var manualPropTypeCallCache = {};\n  }\n  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n    componentName = componentName || ANONYMOUS;\n    propFullName = propFullName || propName;\n    if (process.env.NODE_ENV !== 'production') {\n      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {\n        var cacheKey = componentName + ':' + propName;\n        if (!manualPropTypeCallCache[cacheKey]) {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in the next major version. You may be ' + 'seeing this warning due to a third-party PropTypes library. ' + 'See https://fb.me/react-warning-dont-call-proptypes for details.', propFullName, componentName) : void 0;\n          manualPropTypeCallCache[cacheKey] = true;\n        }\n      }\n    }\n    if (props[propName] == null) {\n      var locationName = ReactPropTypeLocationNames[location];\n      if (isRequired) {\n        return new PropTypeError('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));\n      }\n      return null;\n    } else {\n      return validate(props, propName, componentName, location, propFullName);\n    }\n  }\n\n  var chainedCheckType = checkType.bind(null, false);\n  chainedCheckType.isRequired = checkType.bind(null, true);\n\n  return chainedCheckType;\n}\n\nfunction createPrimitiveTypeChecker(expectedType) {\n  function validate(props, propName, componentName, location, propFullName, secret) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== expectedType) {\n      var locationName = ReactPropTypeLocationNames[location];\n      // `propValue` being instance of, say, date/regexp, pass the 'object'\n      // check, but we can offer a more precise error message here rather than\n      // 'of type `object`'.\n      var preciseType = getPreciseType(propValue);\n\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createAnyTypeChecker() {\n  return createChainableTypeChecker(emptyFunction.thatReturns(null));\n}\n\nfunction createArrayOfTypeChecker(typeChecker) {\n  function validate(props, propName, componentName, location, propFullName) {\n    if (typeof typeChecker !== 'function') {\n      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n    }\n    var propValue = props[propName];\n    if (!Array.isArray(propValue)) {\n      var locationName = ReactPropTypeLocationNames[location];\n      var propType = getPropType(propValue);\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n    }\n    for (var i = 0; i < propValue.length; i++) {\n      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n      if (error instanceof Error) {\n        return error;\n      }\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createElementTypeChecker() {\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    if (!ReactElement.isValidElement(propValue)) {\n      var locationName = ReactPropTypeLocationNames[location];\n      var propType = getPropType(propValue);\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createInstanceTypeChecker(expectedClass) {\n  function validate(props, propName, componentName, location, propFullName) {\n    if (!(props[propName] instanceof expectedClass)) {\n      var locationName = ReactPropTypeLocationNames[location];\n      var expectedClassName = expectedClass.name || ANONYMOUS;\n      var actualClassName = getClassName(props[propName]);\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createEnumTypeChecker(expectedValues) {\n  if (!Array.isArray(expectedValues)) {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n    return emptyFunction.thatReturnsNull;\n  }\n\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    for (var i = 0; i < expectedValues.length; i++) {\n      if (is(propValue, expectedValues[i])) {\n        return null;\n      }\n    }\n\n    var locationName = ReactPropTypeLocationNames[location];\n    var valuesString = JSON.stringify(expectedValues);\n    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createObjectOfTypeChecker(typeChecker) {\n  function validate(props, propName, componentName, location, propFullName) {\n    if (typeof typeChecker !== 'function') {\n      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n    }\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== 'object') {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n    }\n    for (var key in propValue) {\n      if (propValue.hasOwnProperty(key)) {\n        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createUnionTypeChecker(arrayOfTypeCheckers) {\n  if (!Array.isArray(arrayOfTypeCheckers)) {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n    return emptyFunction.thatReturnsNull;\n  }\n\n  function validate(props, propName, componentName, location, propFullName) {\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n        return null;\n      }\n    }\n\n    var locationName = ReactPropTypeLocationNames[location];\n    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createNodeChecker() {\n  function validate(props, propName, componentName, location, propFullName) {\n    if (!isNode(props[propName])) {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createShapeTypeChecker(shapeTypes) {\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== 'object') {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n    }\n    for (var key in shapeTypes) {\n      var checker = shapeTypes[key];\n      if (!checker) {\n        continue;\n      }\n      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n      if (error) {\n        return error;\n      }\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction isNode(propValue) {\n  switch (typeof propValue) {\n    case 'number':\n    case 'string':\n    case 'undefined':\n      return true;\n    case 'boolean':\n      return !propValue;\n    case 'object':\n      if (Array.isArray(propValue)) {\n        return propValue.every(isNode);\n      }\n      if (propValue === null || ReactElement.isValidElement(propValue)) {\n        return true;\n      }\n\n      var iteratorFn = getIteratorFn(propValue);\n      if (iteratorFn) {\n        var iterator = iteratorFn.call(propValue);\n        var step;\n        if (iteratorFn !== propValue.entries) {\n          while (!(step = iterator.next()).done) {\n            if (!isNode(step.value)) {\n              return false;\n            }\n          }\n        } else {\n          // Iterator will provide entry [k,v] tuples rather than values.\n          while (!(step = iterator.next()).done) {\n            var entry = step.value;\n            if (entry) {\n              if (!isNode(entry[1])) {\n                return false;\n              }\n            }\n          }\n        }\n      } else {\n        return false;\n      }\n\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isSymbol(propType, propValue) {\n  // Native Symbol.\n  if (propType === 'symbol') {\n    return true;\n  }\n\n  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n  if (propValue['@@toStringTag'] === 'Symbol') {\n    return true;\n  }\n\n  // Fallback for non-spec compliant Symbols which are polyfilled.\n  if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n    return true;\n  }\n\n  return false;\n}\n\n// Equivalent of `typeof` but with special handling for array and regexp.\nfunction getPropType(propValue) {\n  var propType = typeof propValue;\n  if (Array.isArray(propValue)) {\n    return 'array';\n  }\n  if (propValue instanceof RegExp) {\n    // Old webkits (at least until Android 4.0) return 'function' rather than\n    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n    // passes PropTypes.object.\n    return 'object';\n  }\n  if (isSymbol(propType, propValue)) {\n    return 'symbol';\n  }\n  return propType;\n}\n\n// This handles more types than `getPropType`. Only used for error messages.\n// See `createPrimitiveTypeChecker`.\nfunction getPreciseType(propValue) {\n  var propType = getPropType(propValue);\n  if (propType === 'object') {\n    if (propValue instanceof Date) {\n      return 'date';\n    } else if (propValue instanceof RegExp) {\n      return 'regexp';\n    }\n  }\n  return propType;\n}\n\n// Returns class name of the object, if any.\nfunction getClassName(propValue) {\n  if (!propValue.constructor || !propValue.constructor.name) {\n    return ANONYMOUS;\n  }\n  return propValue.constructor.name;\n}\n\nmodule.exports = ReactPropTypes;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactVersion\n */\n\n'use strict';\n\nmodule.exports = '15.3.2';","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule onlyChild\n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactElement = require('./ReactElement');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\nfunction onlyChild(children) {\n  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;\n  return children;\n}\n\nmodule.exports = onlyChild;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentWithPureRenderMixin\n */\n\n'use strict';\n\nvar shallowCompare = require('./shallowCompare');\n\n/**\n * If your React component's render function is \"pure\", e.g. it will render the\n * same result given the same props and state, provide this mixin for a\n * considerable performance boost.\n *\n * Most React components have pure render functions.\n *\n * Example:\n *\n *   var ReactComponentWithPureRenderMixin =\n *     require('ReactComponentWithPureRenderMixin');\n *   React.createClass({\n *     mixins: [ReactComponentWithPureRenderMixin],\n *\n *     render: function() {\n *       return <div className={this.props.className}>foo</div>;\n *     }\n *   });\n *\n * Note: This only checks shallow equality for props and state. If these contain\n * complex data structures this mixin may have false-negatives for deeper\n * differences. Only mixin to components which have simple props and state, or\n * use `forceUpdate()` when you know deep data structures have changed.\n *\n * See https://facebook.github.io/react/docs/pure-render-mixin.html\n */\nvar ReactComponentWithPureRenderMixin = {\n  shouldComponentUpdate: function (nextProps, nextState) {\n    return shallowCompare(this, nextProps, nextState);\n  }\n};\n\nmodule.exports = ReactComponentWithPureRenderMixin;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n* @providesModule shallowCompare\n*/\n\n'use strict';\n\nvar shallowEqual = require('fbjs/lib/shallowEqual');\n\n/**\n * Does a shallow comparison for props and state.\n * See ReactComponentWithPureRenderMixin\n * See also https://facebook.github.io/react/docs/shallow-compare.html\n */\nfunction shallowCompare(instance, nextProps, nextState) {\n  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);\n}\n\nmodule.exports = shallowCompare;","exports.name = \"object-assign\";\nexports.version = \"4.1.0\";\n","'use strict';\n/* eslint-disable no-unused-vars */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (e) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (Object.getOwnPropertySymbols) {\n\t\t\tsymbols = Object.getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  (function () {\n    var printWarning = function printWarning(format) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch (x) {}\n    };\n\n    warning = function warning(condition, format) {\n      if (format === undefined) {\n        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n      }\n\n      if (format.indexOf('Failed Composite propType: ') === 0) {\n        return; // Ignore CompositeComponent proptype check.\n      }\n\n      if (!condition) {\n        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n          args[_key2 - 2] = arguments[_key2];\n        }\n\n        printWarning.apply(undefined, [format].concat(args));\n      }\n    };\n  })();\n}\n\nmodule.exports = warning;","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n */\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar emptyObject = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.freeze(emptyObject);\n}\n\nmodule.exports = emptyObject;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\n/**\n * Constructs an enumeration with keys equal to their value.\n *\n * For example:\n *\n *   var COLORS = keyMirror({blue: null, red: null});\n *   var myColor = COLORS.blue;\n *   var isColorValid = !!COLORS[myColor];\n *\n * The last line could not be performed if the values of the generated enum were\n * not equal to their keys.\n *\n *   Input:  {key1: val1, key2: val2}\n *   Output: {key1: key1, key2: key2}\n *\n * @param {object} obj\n * @return {object}\n */\nvar keyMirror = function keyMirror(obj) {\n  var ret = {};\n  var key;\n  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;\n  for (key in obj) {\n    if (!obj.hasOwnProperty(key)) {\n      continue;\n    }\n    ret[key] = key;\n  }\n  return ret;\n};\n\nmodule.exports = keyMirror;","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n/**\n * Allows extraction of a minified key. Let's the build system minify keys\n * without losing the ability to dynamically use key strings as values\n * themselves. Pass in an object with a single key/val pair and it will return\n * you the string key of that single record. Suppose you want to grab the\n * value for a key 'className' inside of an object. Key/val minification may\n * have aliased that key to be 'xa12'. keyOf({className: null}) will return\n * 'xa12' in that case. Resolve keys you want to use once at startup time, then\n * reuse those resolutions.\n */\nvar keyOf = function keyOf(oneKeyObj) {\n  var key;\n  for (key in oneKeyObj) {\n    if (!oneKeyObj.hasOwnProperty(key)) {\n      continue;\n    }\n    return key;\n  }\n  return null;\n};\n\nmodule.exports = keyOf;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n * \n */\n\n/*eslint-disable no-self-compare */\n\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Added the nonzero y check to make Flow happy, but it is redundant\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = shallowEqual;","exports.name = \"react-addons-pure-render-mixin\";\nexports.version = \"15.3.2\";\nexports.main = \"index.js\";\n","module.exports = require('react/lib/ReactComponentWithPureRenderMixin');"]}}]