{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"../event.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Event"}]},{"source":"../../core/utils/throw_parse_error.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"throwParseError"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/events/class_static_methods/dispatch_event.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/events/class_static_methods/dispatch_event.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/events/class_static_methods/dispatch_event.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/events/class_static_methods/dispatch_event.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"dispatch_event"},"ignored":false,"code":"var _;module.import('lodash',{\"default\":function(v){_=v}});var Event;module.import('../event.js',{\"default\":function(v){Event=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});\n\n\n\nfunction returnFromDispatchEvent(event) {\n  // If an event is cancelable and it had been canceled with the\n  // \"preventDefault\" method call, then we return false.\n  if (event.cancelable) {\n    return !event.defaultPrevented;\n  }\n  return true;\n}\n\nfunction dispatchEvent(event) {\n  var Class = this;\n\n  if (!Match.test(event, Event)) {\n    throwParseError([{\n      'class': Class.getName()\n    }, {\n      'method': 'dispatchEvent'\n    }, 'The first argument has to be an event object']);\n  }\n\n  // Attach a document to the event as a target.\n  if (event.target === null) {\n    event.target = Class;\n  }\n  if (event.currentTarget === null) {\n    event.currentTarget = Class;\n  }\n\n  // Get all event handlers of a given type.\n  var eventHandlers = Class.getEvents(event.type);\n\n  _.every(eventHandlers, function (eventHandler) {\n    eventHandler(event);\n\n    // Stop execution of the following event handlers, if a flag is set.\n    return !event.immediatePropagationStopped;\n  });\n\n  return returnFromDispatchEvent(event);\n}\n\nmodule.export(\"default\",exports.default=(dispatchEvent));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/events/class_static_methods/dispatch_event.js"],"names":[],"mappings":"AAAA,OAAO,CAAP,MAAc,QAAd;AACA,OAAO,KAAP,MAAkB,aAAlB;AACA,OAAO,eAAP,MAA4B,uCAA5B;;AAEA,SAAS,uBAAT,CAAiC,KAAjC,EAAwC;;;AAGtC,MAAI,MAAM,UAAV,EAAsB;AACpB,WAAO,CAAC,MAAM,gBAAd;AACD;AACD,SAAO,IAAP;AACD;;AAED,SAAS,aAAT,CAAuB,KAAvB,EAA8B;AAC5B,MAAM,QAAQ,IAAd;;AAEA,MAAI,CAAC,MAAM,IAAN,CAAW,KAAX,EAAkB,KAAlB,CAAL,EAA+B;AAC7B,oBAAgB,CAAC;AACb,eAAS,MAAM,OAAN;AADI,KAAD,EAEX;AACD,gBAAU;AADT,KAFW,EAKd,8CALc,CAAhB;AAOD;;;AAGD,MAAI,MAAM,MAAN,KAAiB,IAArB,EAA2B;AACzB,UAAM,MAAN,GAAe,KAAf;AACD;AACD,MAAI,MAAM,aAAN,KAAwB,IAA5B,EAAkC;AAChC,UAAM,aAAN,GAAsB,KAAtB;AACD;;;AAGD,MAAM,gBAAgB,MAAM,SAAN,CAAgB,MAAM,IAAtB,CAAtB;;AAEA,IAAE,KAAF,CAAQ,aAAR,EAAuB,UAAS,YAAT,EAAuB;AAC5C,iBAAa,KAAb;;;AAGA,WAAO,CAAC,MAAM,2BAAd;AACD,GALD;;AAOA,SAAO,wBAAwB,KAAxB,CAAP;AACD;;AAED,eAAe,aAAf","file":"/packages/jagi:astronomy/lib/modules/events/class_static_methods/dispatch_event.js.map","sourcesContent":["import _ from 'lodash';\nimport Event from '../event.js';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\n\nfunction returnFromDispatchEvent(event) {\n  // If an event is cancelable and it had been canceled with the\n  // \"preventDefault\" method call, then we return false.\n  if (event.cancelable) {\n    return !event.defaultPrevented;\n  }\n  return true;\n}\n\nfunction dispatchEvent(event) {\n  const Class = this;\n\n  if (!Match.test(event, Event)) {\n    throwParseError([{\n        'class': Class.getName()\n      }, {\n        'method': 'dispatchEvent'\n      },\n      'The first argument has to be an event object'\n    ]);\n  }\n\n  // Attach a document to the event as a target.\n  if (event.target === null) {\n    event.target = Class;\n  }\n  if (event.currentTarget === null) {\n    event.currentTarget = Class;\n  }\n\n  // Get all event handlers of a given type.\n  const eventHandlers = Class.getEvents(event.type);\n\n  _.every(eventHandlers, function(eventHandler) {\n    eventHandler(event);\n\n    // Stop execution of the following event handlers, if a flag is set.\n    return !event.immediatePropagationStopped;\n  });\n\n  return returnFromDispatchEvent(event);\n}\n\nexport default dispatchEvent;"]},"hash":"4f9b6a868e86d8b8485bb18936aa29f21cc7d87e"}
