{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/jagi:astronomy","imported":["Class"],"specifiers":[{"kind":"named","imported":"Class","local":"Class"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/test/modules/storage/class_update.js","filenameRelative":"/packages/jagi:astronomy/test/modules/storage/class_update.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/test/modules/storage/class_update.js.map","sourceFileName":"/packages/jagi:astronomy/test/modules/storage/class_update.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"class_update"},"ignored":false,"code":"var Class;module.import('meteor/jagi:astronomy',{\"Class\":function(v){Class=v}});\n\nTinytest.add('Modules - Storage - Class update', function (test) {\n  var Storage = Class.get('Storage');\n\n  var id = '6tMS79Kx6WhqTEwaC';\n  Storage.update(id, {\n    $set: {\n      'one': {\n        'string': 'cba',\n        'transient': 'transient',\n        'immutable': 'IMMUTABLE'\n      },\n      'many.0': {\n        'string': 'cba',\n        'transient': 'transient',\n        'immutable': 'IMMUTABLE'\n      },\n      'numbers': [3, 2, 1],\n      'string': 'cba',\n      'number': 321,\n      'boolean': false,\n      'date': new Date(2001, 0, 1),\n      'immutable': 'IMMUTABLE'\n    }\n  });\n\n  var expected = {\n    '_id': id,\n    'one': {\n      'string': 'cba',\n      'immutable': 'immutable'\n    },\n    'many': [{\n      'string': 'cba',\n      'immutable': 'immutable'\n    }],\n    'numbers': [3, 2, 1],\n    'string': 'cba',\n    'number': 321,\n    'boolean': false,\n    'date': new Date(2001, 0, 1),\n    'immutable': 'immutable'\n  };\n  test.equal(Storage.findOne(id, {\n    transform: null\n  }), expected, 'Document has not been updated properly');\n});","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/test/modules/storage/class_update.js"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAAsB,uBAAtB;;AAEA,SAAS,GAAT,CAAa,kCAAb,EAAiD,UAAS,IAAT,EAAe;AAC9D,MAAM,UAAU,MAAM,GAAN,CAAU,SAAV,CAAhB;;AAEA,MAAM,KAAK,mBAAX;AACA,UAAQ,MAAR,CAAe,EAAf,EAAmB;AACjB,UAAM;AACJ,aAAO;AACL,kBAAU,KADL;AAEL,qBAAa,WAFR;AAGL,qBAAa;AAHR,OADH;AAMJ,gBAAU;AACR,kBAAU,KADF;AAER,qBAAa,WAFL;AAGR,qBAAa;AAHL,OANN;AAWJ,iBAAW,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAXP;AAYJ,gBAAU,KAZN;AAaJ,gBAAU,GAbN;AAcJ,iBAAW,KAdP;AAeJ,cAAQ,IAAI,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAfJ;AAgBJ,mBAAa;AAhBT;AADW,GAAnB;;AAqBA,MAAM,WAAW;AACf,WAAO,EADQ;AAEf,WAAO;AACL,gBAAU,KADL;AAEL,mBAAa;AAFR,KAFQ;AAMf,YAAQ,CAAC;AACP,gBAAU,KADH;AAEP,mBAAa;AAFN,KAAD,CANO;AAUf,eAAW,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAVI;AAWf,cAAU,KAXK;AAYf,cAAU,GAZK;AAaf,eAAW,KAbI;AAcf,YAAQ,IAAI,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAdO;AAef,iBAAa;AAfE,GAAjB;AAiBA,OAAK,KAAL,CAAW,QAAQ,OAAR,CAAgB,EAAhB,EAAoB;AAC7B,eAAW;AADkB,GAApB,CAAX,EAEI,QAFJ,EAGE,wCAHF;AAKD,CA/CD","file":"/packages/jagi:astronomy/test/modules/storage/class_update.js.map","sourcesContent":["import { Class } from 'meteor/jagi:astronomy';\n\nTinytest.add('Modules - Storage - Class update', function(test) {\n  const Storage = Class.get('Storage');\n\n  const id = '6tMS79Kx6WhqTEwaC';\n  Storage.update(id, {\n    $set: {\n      'one': {\n        'string': 'cba',\n        'transient': 'transient',\n        'immutable': 'IMMUTABLE',\n      },\n      'many.0': {\n        'string': 'cba',\n        'transient': 'transient',\n        'immutable': 'IMMUTABLE',\n      },\n      'numbers': [3, 2, 1],\n      'string': 'cba',\n      'number': 321,\n      'boolean': false,\n      'date': new Date(2001, 0, 1),\n      'immutable': 'IMMUTABLE',\n    }\n  });\n\n  const expected = {\n    '_id': id,\n    'one': {\n      'string': 'cba',\n      'immutable': 'immutable',\n    },\n    'many': [{\n      'string': 'cba',\n      'immutable': 'immutable',\n    }],\n    'numbers': [3, 2, 1],\n    'string': 'cba',\n    'number': 321,\n    'boolean': false,\n    'date': new Date(2001, 0, 1),\n    'immutable': 'immutable',\n  };\n  test.equal(Storage.findOne(id, {\n    transform: null\n  }), expected,\n    'Document has not been updated properly'\n  );\n});\n"]},"hash":"9528c1801cbf37befdb5855d5dd15150402bc3f3"}
