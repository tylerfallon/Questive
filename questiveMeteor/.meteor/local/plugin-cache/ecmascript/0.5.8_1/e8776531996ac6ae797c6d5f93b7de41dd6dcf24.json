{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"../../core/utils/throw_parse_error.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"throwParseError"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/events/hooks/parse_definition.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/events/hooks/parse_definition.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/events/hooks/parse_definition.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/events/hooks/parse_definition.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"parse_definition"},"ignored":false,"code":"var _;module.import('lodash',{\"default\":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});\n\n\nfunction onParseDefinition(parsedDefinition, definition, className) {\n\t// Check existence and validity of the \"events\" property.\n\tif (definition.events !== undefined) {\n\t\t_.each(definition.events, function (eventHandlers, eventName) {\n\t\t\teventName = eventName.toLowerCase();\n\t\t\t// Check if the event definition is an array of functions.\n\t\t\tif (!Match.test(eventHandlers, Match.OneOf(Function, [Function]))) {\n\t\t\t\tthrowParseError([{\n\t\t\t\t\t'class': className\n\t\t\t\t}, {\n\t\t\t\t\t'event': eventName\n\t\t\t\t}, 'Event handler has to be a function or an array of functions']);\n\t\t\t}\n\t\t\t// Convert function to array of functions.\n\t\t\tif (Match.test(eventHandlers, Function)) {\n\t\t\t\teventHandlers = [eventHandlers];\n\t\t\t}\n\t\t\tparsedDefinition.events[eventName] = eventHandlers;\n\t\t});\n\t}\n};\n\nmodule.export(\"default\",exports.default=(onParseDefinition));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/events/hooks/parse_definition.js"],"names":[],"mappings":"AAAA,OAAO,CAAP,MAAc,QAAd;AACA,OAAO,eAAP,MAA4B,uCAA5B;;AAEA,SAAS,iBAAT,CAA2B,gBAA3B,EAA6C,UAA7C,EAAyD,SAAzD,EAAoE;;AAEnE,KAAI,WAAW,MAAX,KAAsB,SAA1B,EAAqC;AACpC,IAAE,IAAF,CAAO,WAAW,MAAlB,EAA0B,UAAS,aAAT,EAAwB,SAAxB,EAAmC;AAC5D,eAAY,UAAU,WAAV,EAAZ;;AAEA,OAAI,CAAC,MAAM,IAAN,CAAW,aAAX,EAA0B,MAAM,KAAN,CAAY,QAAZ,EAAsB,CAAC,QAAD,CAAtB,CAA1B,CAAL,EAAmE;AAClE,oBAAgB,CAAC;AACf,cAAS;AADM,KAAD,EAEZ;AACF,cAAS;AADP,KAFY,EAKf,6DALe,CAAhB;AAOA;;AAED,OAAI,MAAM,IAAN,CAAW,aAAX,EAA0B,QAA1B,CAAJ,EAAyC;AACxC,oBAAgB,CAAC,aAAD,CAAhB;AACA;AACD,oBAAiB,MAAjB,CAAwB,SAAxB,IAAqC,aAArC;AACA,GAjBD;AAkBA;AACD;;AAED,eAAe,iBAAf","file":"/packages/jagi:astronomy/lib/modules/events/hooks/parse_definition.js.map","sourcesContent":["import _ from 'lodash';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\n\nfunction onParseDefinition(parsedDefinition, definition, className) {\n\t// Check existence and validity of the \"events\" property.\n\tif (definition.events !== undefined) {\n\t\t_.each(definition.events, function(eventHandlers, eventName) {\n\t\t\teventName = eventName.toLowerCase();\n\t\t\t// Check if the event definition is an array of functions.\n\t\t\tif (!Match.test(eventHandlers, Match.OneOf(Function, [Function]))) {\n\t\t\t\tthrowParseError([{\n\t\t\t\t\t\t'class': className\n\t\t\t\t\t}, {\n\t\t\t\t\t\t'event': eventName\n\t\t\t\t\t},\n\t\t\t\t\t'Event handler has to be a function or an array of functions'\n\t\t\t\t]);\n\t\t\t}\n\t\t\t// Convert function to array of functions.\n\t\t\tif (Match.test(eventHandlers, Function)) {\n\t\t\t\teventHandlers = [eventHandlers];\n\t\t\t}\n\t\t\tparsedDefinition.events[eventName] = eventHandlers;\n\t\t});\n\t}\n};\n\nexport default onParseDefinition;"]},"hash":"e8776531996ac6ae797c6d5f93b7de41dd6dcf24"}
