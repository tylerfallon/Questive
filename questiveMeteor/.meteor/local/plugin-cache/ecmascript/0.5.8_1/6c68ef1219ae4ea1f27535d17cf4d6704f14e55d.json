{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck"],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"./Field","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Field"}]},{"source":"./utils/castToClass","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"castToClass"}]},{"source":"../../core/class.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"AstroClass"}]},{"source":"../validators/validators.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Validators"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/fields/ListField.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/fields/ListField.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/fields/ListField.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/fields/ListField.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"ListField"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var _;module.import('lodash',{\"default\":function(v){_=v}});var Field;module.import('./Field',{\"default\":function(v){Field=v}});var castToClass;module.import('./utils/castToClass',{\"default\":function(v){castToClass=v}});var AstroClass;module.import('../../core/class.js',{\"default\":function(v){AstroClass=v}});var Validators;module.import('../validators/validators.js',{\"default\":function(v){Validators=v}});\n\n\n\n\n\n\n\n\nvar ListField = function (_Field) {\n  _inherits(ListField, _Field);\n\n  function ListField() {\n    var definition = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    _classCallCheck(this, ListField);\n\n    var _this = _possibleConstructorReturn(this, _Field.call(this, definition));\n\n    _this.isClass = AstroClass.isParentOf(_this.type['class']);\n    return _this;\n  }\n\n  ListField.prototype.cast = function () {\n    function cast(value, options) {\n      var _this2 = this;\n\n      if (!_.isArray(value)) {\n        return value;\n      }\n\n      return _.map(value, function (element) {\n        // Class type.\n        if (_this2.isClass) {\n          // We only cast if value is a plain object.\n          if (!_.isPlainObject(element)) {\n            return element;\n          }\n          // Get class from type property.\n          var Class = _this2.type['class'];\n          // Cast value to an instance of the class.\n          return castToClass({\n            Class: Class,\n            rawDoc: element,\n            options: options\n          });\n        }\n        // Scalar type.\n        else {\n            return _this2.type.cast(element);\n          }\n      });\n    }\n\n    return cast;\n  }();\n\n  ListField.prototype.validate = function () {\n    function validate(args) {\n      var _this3 = this;\n\n      _Field.prototype.validate.call(this, args);\n      var doc = args.doc;\n      var name = args.name;\n      var value = args.value;\n\n\n      if (!_.isNil(value)) {\n        Validators.array(args);\n        _.each(value, function (element, index) {\n          _this3.type.validate({\n            doc: doc,\n            name: name + '.' + index,\n            value: element\n          });\n        });\n      }\n    }\n\n    return validate;\n  }();\n\n  return ListField;\n}(Field);\n\n;\n\nmodule.export(\"default\",exports.default=(ListField));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/fields/ListField.js"],"names":[],"mappings":";;;AAAA,OAAO,CAAP,MAAc,QAAd;AACA,OAAO,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP,MAAwB,qBAAxB;AACA,OAAO,UAAP,MAAuB,qBAAvB;AACA,OAAO,UAAP,MAAuB,6BAAvB;;IAEM,S;;;AACJ,uBAA6B;AAAA,QAAjB,UAAiB,yDAAJ,EAAI;;AAAA;;AAAA,iDAC3B,kBAAM,UAAN,CAD2B;;AAG3B,UAAK,OAAL,GAAe,WAAW,UAAX,CAAsB,MAAK,IAAL,SAAtB,CAAf;AAH2B;AAI5B;;sBAED,I;kBAAK,K,EAAO,O,EAAS;AAAA;;AACnB,UAAI,CAAC,EAAE,OAAF,CAAU,KAAV,CAAL,EAAuB;AACrB,eAAO,KAAP;AACD;;AAED,aAAO,EAAE,GAAF,CAAM,KAAN,EAAa,UAAC,OAAD,EAAa;;AAE/B,YAAI,OAAK,OAAT,EAAkB;;AAEhB,cAAI,CAAC,EAAE,aAAF,CAAgB,OAAhB,CAAL,EAA+B;AAC7B,mBAAO,OAAP;AACD;;AAED,cAAM,QAAQ,OAAK,IAAL,SAAd;;AAEA,iBAAO,YAAY;AACjB,wBADiB;AAEjB,oBAAQ,OAFS;AAGjB;AAHiB,WAAZ,CAAP;AAKD;;AAbD,aAeK;AACH,mBAAO,OAAK,IAAL,CAAU,IAAV,CAAe,OAAf,CAAP;AACD;AACF,OApBM,CAAP;AAqBD;;;;;sBAED,Q;sBAAS,I,EAAM;AAAA;;AACb,uBAAM,QAAN,YAAe,IAAf;AADa,UAGX,GAHW,GAMT,IANS,CAGX,GAHW;AAAA,UAIX,IAJW,GAMT,IANS,CAIX,IAJW;AAAA,UAKX,KALW,GAMT,IANS,CAKX,KALW;;;AAQb,UAAI,CAAC,EAAE,KAAF,CAAQ,KAAR,CAAL,EAAqB;AACnB,mBAAW,KAAX,CAAiB,IAAjB;AACA,UAAE,IAAF,CAAO,KAAP,EAAc,UAAC,OAAD,EAAU,KAAV,EAAoB;AAChC,iBAAK,IAAL,CAAU,QAAV,CAAmB;AACjB,oBADiB;AAEjB,kBAAM,OAAO,GAAP,GAAa,KAFF;AAGjB,mBAAO;AAHU,WAAnB;AAKD,SAND;AAOD;AACF;;;;;;EArDqB,K;;AAsDvB;;AAED,eAAe,SAAf","file":"/packages/jagi:astronomy/lib/modules/fields/ListField.js.map","sourcesContent":["import _ from 'lodash';\nimport Field from './Field';\nimport castToClass from './utils/castToClass';\nimport AstroClass from '../../core/class.js';\nimport Validators from '../validators/validators.js';\n\nclass ListField extends Field {\n  constructor(definition = {}) {\n    super(definition);\n\n    this.isClass = AstroClass.isParentOf(this.type.class);\n  }\n\n  cast(value, options) {\n    if (!_.isArray(value)) {\n      return value;\n    }\n\n    return _.map(value, (element) => {\n      // Class type.\n      if (this.isClass) {\n        // We only cast if value is a plain object.\n        if (!_.isPlainObject(element)) {\n          return element;\n        }\n        // Get class from type property.\n        const Class = this.type.class;\n        // Cast value to an instance of the class.\n        return castToClass({\n          Class,\n          rawDoc: element,\n          options\n        });\n      }\n      // Scalar type.\n      else {\n        return this.type.cast(element);\n      }\n    });\n  }\n\n  validate(args) {\n    super.validate(args);\n    var {\n      doc,\n      name,\n      value\n    } = args;\n\n    if (!_.isNil(value)) {\n      Validators.array(args);\n      _.each(value, (element, index) => {\n        this.type.validate({\n          doc,\n          name: name + '.' + index,\n          value: element\n        });\n      });\n    }\n  }\n};\n\nexport default ListField;\n"]},"hash":"6c68ef1219ae4ea1f27535d17cf4d6704f14e55d"}
