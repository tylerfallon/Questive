{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/test/core/ejson.js","filenameRelative":"/packages/jagi:astronomy/test/core/ejson.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/test/core/ejson.js.map","sourceFileName":"/packages/jagi:astronomy/test/core/ejson.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"ejson"},"ignored":false,"code":"Tinytest.add('Core - EJSON', function (test) {\n  reset();\n\n  var NestedEJSON = Astro.Class.create({\n    name: 'NestedEJSON',\n    fields: {\n      string: {\n        type: String\n      },\n      number: {\n        type: Number\n      }\n    }\n  });\n\n  var ClassEJSON = Astro.Class.create({\n    name: 'ClassEJSON',\n    fields: {\n      one: {\n        type: NestedEJSON\n      },\n      many: {\n        type: [NestedEJSON]\n      },\n      string: {\n        type: String\n      },\n      number: {\n        type: Number\n      },\n      boolean: {\n        type: Boolean\n      },\n      date: {\n        type: Date\n      }\n    }\n  });\n\n  var doc = new ClassEJSON({\n    one: {\n      string: 'abc',\n      number: 123\n    },\n    many: [{\n      string: 'abc',\n      number: 123\n    }],\n    string: 'abc',\n    number: 123,\n    boolean: true,\n    date: new Date(2000, 0, 1, 0, 0, 0)\n  });\n\n  test.isTrue(EJSON.equals(doc, EJSON.clone(doc)), 'Original and cloned document do not match');\n});","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/test/core/ejson.js"],"names":[],"mappings":"AAAA,SAAS,GAAT,CAAa,cAAb,EAA6B,UAAS,IAAT,EAAe;AAC1C;;AAEA,MAAI,cAAc,MAAM,KAAN,CAAY,MAAZ,CAAmB;AACnC,UAAM,aAD6B;AAEnC,YAAQ;AACN,cAAQ;AACN,cAAM;AADA,OADF;AAIN,cAAQ;AACN,cAAM;AADA;AAJF;AAF2B,GAAnB,CAAlB;;AAYA,MAAI,aAAa,MAAM,KAAN,CAAY,MAAZ,CAAmB;AAClC,UAAM,YAD4B;AAElC,YAAQ;AACN,WAAK;AACH,cAAM;AADH,OADC;AAIN,YAAM;AACJ,cAAM,CAAC,WAAD;AADF,OAJA;AAON,cAAQ;AACN,cAAM;AADA,OAPF;AAUN,cAAQ;AACN,cAAM;AADA,OAVF;AAaN,eAAS;AACP,cAAM;AADC,OAbH;AAgBN,YAAM;AACJ,cAAM;AADF;AAhBA;AAF0B,GAAnB,CAAjB;;AAwBA,MAAI,MAAM,IAAI,UAAJ,CAAe;AACvB,SAAK;AACH,cAAQ,KADL;AAEH,cAAQ;AAFL,KADkB;AAKvB,UAAM,CAAC;AACL,cAAQ,KADH;AAEL,cAAQ;AAFH,KAAD,CALiB;AASvB,YAAQ,KATe;AAUvB,YAAQ,GAVe;AAWvB,aAAS,IAXc;AAYvB,UAAM,IAAI,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B;AAZiB,GAAf,CAAV;;AAeA,OAAK,MAAL,CAAY,MAAM,MAAN,CAAa,GAAb,EAAkB,MAAM,KAAN,CAAY,GAAZ,CAAlB,CAAZ,EACE,2CADF;AAGD,CAzDD","file":"/packages/jagi:astronomy/test/core/ejson.js.map","sourcesContent":["Tinytest.add('Core - EJSON', function(test) {\n  reset();\n\n  let NestedEJSON = Astro.Class.create({\n    name: 'NestedEJSON',\n    fields: {\n      string: {\n        type: String\n      },\n      number: {\n        type: Number\n      }\n    }\n  });\n\n  let ClassEJSON = Astro.Class.create({\n    name: 'ClassEJSON',\n    fields: {\n      one: {\n        type: NestedEJSON\n      },\n      many: {\n        type: [NestedEJSON]\n      },\n      string: {\n        type: String\n      },\n      number: {\n        type: Number\n      },\n      boolean: {\n        type: Boolean\n      },\n      date: {\n        type: Date\n      }\n    }\n  });\n\n  let doc = new ClassEJSON({\n    one: {\n      string: 'abc',\n      number: 123\n    },\n    many: [{\n      string: 'abc',\n      number: 123\n    }],\n    string: 'abc',\n    number: 123,\n    boolean: true,\n    date: new Date(2000, 0, 1, 0, 0, 0)\n  });\n\n  test.isTrue(EJSON.equals(doc, EJSON.clone(doc)),\n    'Original and cloned document do not match'\n  );\n});"]},"hash":"8a76c92da2de83eb380c7558960f965abb4aeba0"}
