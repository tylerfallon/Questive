{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/test/modules/indexes/indexes_definition.js","filenameRelative":"/packages/jagi:astronomy/test/modules/indexes/indexes_definition.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/test/modules/indexes/indexes_definition.js.map","sourceFileName":"/packages/jagi:astronomy/test/modules/indexes/indexes_definition.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"indexes_definition"},"ignored":false,"code":"Tinytest.add('Indexes - Add', function (test) {\n  // Reset Astro.\n  reset();\n\n  var Future = Npm.require('fibers/future');\n  var hasIndex = function hasIndex(Collection, indexName) {\n    var raw = Collection.rawCollection();\n    var future = new Future();\n\n    raw.indexExists(indexName, function (err, exists) {\n      if (err) {\n        future['throw'](err);\n      }\n\n      future['return'](exists);\n    });\n\n    return future.wait();\n  };\n\n  var Indexes = new Mongo.Collection('indexes');\n\n  try {\n    Indexes._dropIndex('object');\n    Indexes._dropIndex('array');\n    Indexes._dropIndex('field');\n    Indexes._dropIndex('indexes');\n  } catch (e) {}\n\n  var Index = Astro.Class.create({\n    name: 'Index',\n    collection: Indexes,\n    fields: {\n      'object': {\n        type: 'object',\n        index: 1\n      },\n      'array': {\n        type: 'array',\n        index: 1\n      },\n      'field': {\n        type: String,\n        index: 1\n      },\n      'string': 'string',\n      'number': 'number'\n    },\n    indexes: {\n      'indexes': {\n        fields: {\n          string: 1,\n          number: 1\n        }\n      }\n    }\n  });\n\n  test.isTrue(hasIndex(Indexes, 'field'), 'Index defined in the field definition should be added');\n\n  test.isTrue(hasIndex(Indexes, 'object'), 'Index defined in the object field definition should be added');\n\n  test.isTrue(hasIndex(Indexes, 'array'), 'Index defined in the array field definition should be added');\n\n  test.isTrue(hasIndex(Indexes, 'indexes'), 'Index defined in the class definition should be added');\n});","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/test/modules/indexes/indexes_definition.js"],"names":[],"mappings":"AAAA,SAAS,GAAT,CAAa,eAAb,EAA8B,UAAS,IAAT,EAAe;;AAE3C;;AAEA,MAAI,SAAS,IAAI,OAAJ,CAAY,eAAZ,CAAb;AACA,MAAI,WAAW,SAAX,QAAW,CAAS,UAAT,EAAqB,SAArB,EAAgC;AAC7C,QAAI,MAAM,WAAW,aAAX,EAAV;AACA,QAAI,SAAS,IAAI,MAAJ,EAAb;;AAEA,QAAI,WAAJ,CAAgB,SAAhB,EAA2B,UAAS,GAAT,EAAc,MAAd,EAAsB;AAC/C,UAAI,GAAJ,EAAS;AACP,wBAAa,GAAb;AACD;;AAED,uBAAc,MAAd;AACD,KAND;;AAQA,WAAO,OAAO,IAAP,EAAP;AACD,GAbD;;AAeA,MAAI,UAAU,IAAI,MAAM,UAAV,CAAqB,SAArB,CAAd;;AAEA,MAAI;AACF,YAAQ,UAAR,CAAmB,QAAnB;AACA,YAAQ,UAAR,CAAmB,OAAnB;AACA,YAAQ,UAAR,CAAmB,OAAnB;AACA,YAAQ,UAAR,CAAmB,SAAnB;AACD,GALD,CAKE,OAAO,CAAP,EAAU,CAAE;;AAEd,MAAI,QAAQ,MAAM,KAAN,CAAY,MAAZ,CAAmB;AAC7B,UAAM,OADuB;AAE7B,gBAAY,OAFiB;AAG7B,YAAQ;AACN,gBAAU;AACR,cAAM,QADE;AAER,eAAO;AAFC,OADJ;AAKN,eAAS;AACP,cAAM,OADC;AAEP,eAAO;AAFA,OALH;AASN,eAAS;AACP,cAAM,MADC;AAEP,eAAO;AAFA,OATH;AAaN,gBAAU,QAbJ;AAcN,gBAAU;AAdJ,KAHqB;AAmB7B,aAAS;AACP,iBAAW;AACT,gBAAQ;AACN,kBAAQ,CADF;AAEN,kBAAQ;AAFF;AADC;AADJ;AAnBoB,GAAnB,CAAZ;;AA6BA,OAAK,MAAL,CAAY,SAAS,OAAT,EAAkB,OAAlB,CAAZ,EACE,uDADF;;AAIA,OAAK,MAAL,CAAY,SAAS,OAAT,EAAkB,QAAlB,CAAZ,EACE,8DADF;;AAIA,OAAK,MAAL,CAAY,SAAS,OAAT,EAAkB,OAAlB,CAAZ,EACE,6DADF;;AAIA,OAAK,MAAL,CAAY,SAAS,OAAT,EAAkB,SAAlB,CAAZ,EACE,uDADF;AAGD,CAzED","file":"/packages/jagi:astronomy/test/modules/indexes/indexes_definition.js.map","sourcesContent":["Tinytest.add('Indexes - Add', function(test) {\n  // Reset Astro.\n  reset();\n\n  var Future = Npm.require('fibers/future');\n  var hasIndex = function(Collection, indexName) {\n    var raw = Collection.rawCollection();\n    var future = new Future();\n\n    raw.indexExists(indexName, function(err, exists) {\n      if (err) {\n        future.throw(err);\n      }\n\n      future.return(exists);\n    });\n\n    return future.wait();\n  };\n\n  var Indexes = new Mongo.Collection('indexes');\n\n  try {\n    Indexes._dropIndex('object');\n    Indexes._dropIndex('array');\n    Indexes._dropIndex('field');\n    Indexes._dropIndex('indexes');\n  } catch (e) {}\n\n  var Index = Astro.Class.create({\n    name: 'Index',\n    collection: Indexes,\n    fields: {\n      'object': {\n        type: 'object',\n        index: 1\n      },\n      'array': {\n        type: 'array',\n        index: 1\n      },\n      'field': {\n        type: String,\n        index: 1\n      },\n      'string': 'string',\n      'number': 'number'\n    },\n    indexes: {\n      'indexes': {\n        fields: {\n          string: 1,\n          number: 1\n        }\n      }\n    }\n  });\n\n  test.isTrue(hasIndex(Indexes, 'field'),\n    'Index defined in the field definition should be added'\n  );\n\n  test.isTrue(hasIndex(Indexes, 'object'),\n    'Index defined in the object field definition should be added'\n  );\n\n  test.isTrue(hasIndex(Indexes, 'array'),\n    'Index defined in the array field definition should be added'\n  );\n\n  test.isTrue(hasIndex(Indexes, 'indexes'),\n    'Index defined in the class definition should be added'\n  );\n});\n"]},"hash":"bf13b08f5940c7a95c0aec87b8dd8560eb08a61d"}
