{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./trigger_before_remove.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"triggerBeforeRemove"}]},{"source":"./trigger_after_remove.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"triggerAfterRemove"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/storage/utils/document_remove.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/storage/utils/document_remove.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/storage/utils/document_remove.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/storage/utils/document_remove.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"document_remove"},"ignored":false,"code":"var triggerBeforeRemove;module.import('./trigger_before_remove.js',{\"default\":function(v){triggerBeforeRemove=v}});var triggerAfterRemove;module.import('./trigger_after_remove.js',{\"default\":function(v){triggerAfterRemove=v}});\n\n\nfunction documentRemove() {\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n  var doc = args.doc;\n  var _args$simulation = args.simulation;\n  var simulation = _args$simulation === undefined ? true : _args$simulation;\n  var _args$trusted = args.trusted;\n  var trusted = _args$trusted === undefined ? false : _args$trusted;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  var Class = doc.constructor;\n  var Collection = Class.getCollection();\n\n  // Remove only when document has the \"_id\" field (it's persisted).\n  if (doc._isNew || !doc._id) {\n    return 0;\n  }\n\n  // Check if a class is secured.\n  if (Class.isSecured('remove') && Meteor.isServer && !trusted) {\n    throw new Meteor.Error(403, 'Removing from the client is not allowed');\n  }\n\n  // Trigger before events.\n  triggerBeforeRemove(doc, trusted);\n\n  // Remove a document.\n  try {\n    var result = Collection._collection.remove({\n      _id: doc._id\n    });\n\n    // Mark a document as new, so it will be possible to save it again.\n    doc._isNew = true;\n\n    // Trigger after events.\n    triggerAfterRemove(doc, trusted);\n\n    return result;\n  } catch (err) {\n    if (err.name === 'MongoError' || err.name === 'MinimongoError') {\n      throw new Meteor.Error(409, err.toString());\n    } else {\n      throw err;\n    }\n  }\n};\n\nmodule.export(\"default\",exports.default=(documentRemove));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/storage/utils/document_remove.js"],"names":[],"mappings":"AAAA,OAAO,mBAAP,MAAgC,4BAAhC;AACA,OAAO,kBAAP,MAA+B,2BAA/B;;AAEA,SAAS,cAAT,GAAmC;AAAA,MAAX,IAAW,yDAAJ,EAAI;AAAA,MAE/B,GAF+B,GAK7B,IAL6B,CAE/B,GAF+B;AAAA,yBAK7B,IAL6B,CAG/B,UAH+B;AAAA,MAG/B,UAH+B,oCAGlB,IAHkB;AAAA,sBAK7B,IAL6B,CAI/B,OAJ+B;AAAA,MAI/B,OAJ+B,iCAIrB,KAJqB;;;;;AASjC,MAAI,CAAC,UAAD,IAAe,CAAC,OAAO,QAA3B,EAAqC;AACnC;AACD;;AAED,MAAM,QAAQ,IAAI,WAAlB;AACA,MAAM,aAAa,MAAM,aAAN,EAAnB;;;AAGA,MAAI,IAAI,MAAJ,IAAc,CAAC,IAAI,GAAvB,EAA4B;AAC1B,WAAO,CAAP;AACD;;;AAGD,MAAI,MAAM,SAAN,CAAgB,QAAhB,KAA6B,OAAO,QAApC,IAAgD,CAAC,OAArD,EAA8D;AAC5D,UAAM,IAAI,OAAO,KAAX,CAAiB,GAAjB,EAAsB,yCAAtB,CAAN;AACD;;;AAGD,sBAAoB,GAApB,EAAyB,OAAzB;;;AAGA,MAAI;AACF,QAAM,SAAS,WAAW,WAAX,CAAuB,MAAvB,CAA8B;AAC3C,WAAK,IAAI;AADkC,KAA9B,CAAf;;;AAKA,QAAI,MAAJ,GAAa,IAAb;;;AAGA,uBAAmB,GAAnB,EAAwB,OAAxB;;AAEA,WAAO,MAAP;AACD,GAZD,CAaA,OAAM,GAAN,EAAW;AACT,QAAI,IAAI,IAAJ,KAAa,YAAb,IAA6B,IAAI,IAAJ,KAAa,gBAA9C,EAAgE;AAC9D,YAAM,IAAI,OAAO,KAAX,CAAiB,GAAjB,EAAsB,IAAI,QAAJ,EAAtB,CAAN;AACD,KAFD,MAGK;AACH,YAAM,GAAN;AACD;AACF;AACF;;AAED,eAAe,cAAf","file":"/packages/jagi:astronomy/lib/modules/storage/utils/document_remove.js.map","sourcesContent":["import triggerBeforeRemove from './trigger_before_remove.js';\nimport triggerAfterRemove from './trigger_after_remove.js';\n\nfunction documentRemove(args = {}) {\n  const {\n    doc,\n    simulation = true,\n    trusted = false\n  } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  const Class = doc.constructor;\n  const Collection = Class.getCollection();\n\n  // Remove only when document has the \"_id\" field (it's persisted).\n  if (doc._isNew || !doc._id) {\n    return 0;\n  }\n\n  // Check if a class is secured.\n  if (Class.isSecured('remove') && Meteor.isServer && !trusted) {\n    throw new Meteor.Error(403, 'Removing from the client is not allowed');\n  }\n\n  // Trigger before events.\n  triggerBeforeRemove(doc, trusted);\n\n  // Remove a document.\n  try {\n    const result = Collection._collection.remove({\n      _id: doc._id\n    });\n\n    // Mark a document as new, so it will be possible to save it again.\n    doc._isNew = true;\n\n    // Trigger after events.\n    triggerAfterRemove(doc, trusted);\n\n    return result;\n  }\n  catch(err) {\n    if (err.name === 'MongoError' || err.name === 'MinimongoError') {\n      throw new Meteor.Error(409, err.toString());\n    }\n    else {\n      throw err;\n    }\n  }\n};\n\nexport default documentRemove;"]},"hash":"c478a4af4a5b356b010b96607b3209461ad079c8"}
