{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/tracker","imported":["Tracker"],"specifiers":[{"kind":"named","imported":"Tracker","local":"Tracker"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/ultimatejs:tracker-react/Tracker.js","filenameRelative":"/packages/ultimatejs:tracker-react/Tracker.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/ultimatejs:tracker-react/Tracker.js.map","sourceFileName":"/packages/ultimatejs:tracker-react/Tracker.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"Tracker"},"ignored":false,"code":"var Tracker;module.import('meteor/tracker',{\"Tracker\":function(v){Tracker=v}});// Also available as a global\n\n\n/**\n * Create \"one-time\" reactive computations with Tracker\n * @param name {string} Component Reactive Data Property for Computation\n * @param context {*} Target Component Instance\n * @param dataFunc {*} Data Context\n * @param updateFunc {*} Component ForceUpdate Method - To re-trigger render function\n * @returns {*} Symbol(react.element) - Result data-element composition\n */\nTracker.once = function (name, context, dataFunc, updateFunc) {\n  var data = void 0;\n\n  // Stop it just in case the autorun never re-ran\n  if (context[name] && !context[name].stopped) context[name].stop();\n\n  // NOTE: we may want to run this code in `setTimeout(func, 0)` so it doesn't impact the rendering phase at all\n  context[name] = Tracker.nonreactive(function () {\n    return Tracker.autorun(function (c) {\n      if (c.firstRun) {\n\n        data = dataFunc.call(context);\n      } else {\n\n        // Stop autorun here so rendering \"phase\" doesn't have extra work of also stopping autoruns; likely not too\n        // important though.\n        if (context[name]) context[name].stop();\n\n        // where `forceUpdate` will be called in above implementation\n        updateFunc.call(context);\n      }\n    });\n  });\n\n  return data;\n};\n\nmodule.export(\"default\",exports.default=(Tracker));","ast":null,"map":{"version":3,"sources":["/packages/ultimatejs:tracker-react/Tracker.js"],"names":[],"mappings":";AACA,SAAQ,OAAR,QAAsB,gBAAtB;;;;;;;;;;AAUA,QAAQ,IAAR,GAAe,UAAU,IAAV,EAAgB,OAAhB,EAAyB,QAAzB,EAAmC,UAAnC,EAA+C;AAC5D,MAAI,aAAJ;;;AAGA,MAAI,QAAQ,IAAR,KAAiB,CAAC,QAAQ,IAAR,EAAc,OAApC,EAA6C,QAAQ,IAAR,EAAc,IAAd;;;AAG7C,UAAQ,IAAR,IAAgB,QAAQ,WAAR,CAAoB,YAAM;AACxC,WAAO,QAAQ,OAAR,CAAgB,aAAK;AAC1B,UAAI,EAAE,QAAN,EAAgB;;AAEd,eAAO,SAAS,IAAT,CAAc,OAAd,CAAP;AAED,OAJD,MAIO;;;;AAIL,YAAI,QAAQ,IAAR,CAAJ,EAAmB,QAAQ,IAAR,EAAc,IAAd;;;AAGnB,mBAAW,IAAX,CAAgB,OAAhB;AACD;AACF,KAdM,CAAP;AAeD,GAhBe,CAAhB;;AAkBA,SAAO,IAAP;AACD,CA1BD;;AA4BA,eAAe,OAAf","file":"/packages/ultimatejs:tracker-react/Tracker.js.map","sourcesContent":["// Also available as a global\nimport {Tracker} from 'meteor/tracker';\n\n/**\n * Create \"one-time\" reactive computations with Tracker\n * @param name {string} Component Reactive Data Property for Computation\n * @param context {*} Target Component Instance\n * @param dataFunc {*} Data Context\n * @param updateFunc {*} Component ForceUpdate Method - To re-trigger render function\n * @returns {*} Symbol(react.element) - Result data-element composition\n */\nTracker.once = function (name, context, dataFunc, updateFunc) {\n  let data;\n\n  // Stop it just in case the autorun never re-ran\n  if (context[name] && !context[name].stopped) context[name].stop();\n\n  // NOTE: we may want to run this code in `setTimeout(func, 0)` so it doesn't impact the rendering phase at all\n  context[name] = Tracker.nonreactive(() => {\n    return Tracker.autorun(c => {\n      if (c.firstRun) {\n\n        data = dataFunc.call(context);\n\n      } else {\n\n        // Stop autorun here so rendering \"phase\" doesn't have extra work of also stopping autoruns; likely not too\n        // important though.\n        if (context[name]) context[name].stop();\n\n        // where `forceUpdate` will be called in above implementation\n        updateFunc.call(context);\n      }\n    });\n  });\n\n  return data;\n};\n\nexport default Tracker"]},"hash":"49ec2c5e3390a7512c2c7cdb6e0f2fe96d0a79fd"}
