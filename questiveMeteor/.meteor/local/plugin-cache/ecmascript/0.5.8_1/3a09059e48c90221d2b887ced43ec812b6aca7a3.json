{"metadata":{"usedHelpers":["classCallCheck"],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/jagi:astronomy","imported":["Class"],"specifiers":[{"kind":"named","imported":"Class","local":"Class"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/test/modules/storage/transform.js","filenameRelative":"/packages/jagi:astronomy/test/modules/storage/transform.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/test/modules/storage/transform.js.map","sourceFileName":"/packages/jagi:astronomy/test/modules/storage/transform.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"transform"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _;module.import('lodash',{\"default\":function(v){_=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var Class;module.import('meteor/jagi:astronomy',{\"Class\":function(v){Class=v}});\n\n\n\n\nTinytest.add('Modules - Storage - Transform', function (test) {\n  var Transforms = new Mongo.Collection(null);\n\n  // Insert a document.\n  Transforms.insert({\n    name: 'name'\n  });\n\n  // Default transform function.\n  var DefaultTransform = Class.create({\n    name: 'DefaultTransform',\n    collection: Transforms,\n    fields: {\n      name: {\n        type: String\n      }\n    }\n  });\n\n  // Custom transform function.\n  var CustomClass = function () {\n    function CustomClass(values) {\n      _classCallCheck(this, CustomClass);\n\n      _.extend(this, values);\n    }\n\n    return CustomClass;\n  }();\n  var CustomTransform = Class.create({\n    name: 'CustomTransform',\n    collection: Transforms,\n    transform: function () {\n      function transform(values) {\n        return new CustomClass(values);\n      }\n\n      return transform;\n    }(),\n    fields: {\n      name: {\n        type: String\n      }\n    }\n  });\n\n  // No transform function.\n  var NoTransform = Class.create({\n    name: 'NoTransform',\n    collection: Transforms,\n    transform: null,\n    fields: {\n      name: {\n        type: String\n      }\n    }\n  });\n\n  test.instanceOf(DefaultTransform.findOne(), DefaultTransform, 'Default transform function should be applied to the fetched documents');\n  test.instanceOf(CustomTransform.findOne(), CustomClass, 'Custom transform function should be applied to the fetched documents');\n  test.equal(NoTransform.findOne().constructor, Object, 'No transform function should be applied to the fetched documents');\n});","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/test/modules/storage/transform.js"],"names":[],"mappings":";AAAA,OAAO,CAAP,MAAc,QAAd;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,SAAS,KAAT,QAAsB,uBAAtB;;AAEA,SAAS,GAAT,CAAa,+BAAb,EAA8C,UAAS,IAAT,EAAe;AAC3D,MAAM,aAAa,IAAI,MAAM,UAAV,CAAqB,IAArB,CAAnB;;;AAGA,aAAW,MAAX,CAAkB;AAChB,UAAM;AADU,GAAlB;;;AAKA,MAAM,mBAAmB,MAAM,MAAN,CAAa;AACpC,UAAM,kBAD8B;AAEpC,gBAAY,UAFwB;AAGpC,YAAQ;AACN,YAAM;AACJ,cAAM;AADF;AADA;AAH4B,GAAb,CAAzB;;;AAWA,MAAM;AACJ,yBAAY,MAAZ,EAAoB;AAAA;;AAClB,QAAE,MAAF,CAAS,IAAT,EAAe,MAAf;AACD;;AAHG;AAAA,KAAN;AAKA,MAAM,kBAAkB,MAAM,MAAN,CAAa;AACnC,UAAM,iBAD6B;AAEnC,gBAAY,UAFuB;AAGnC;AAAW,yBAAS,MAAT,EAAiB;AAC1B,eAAO,IAAI,WAAJ,CAAgB,MAAhB,CAAP;AACD;;AAFD;AAAA,OAHmC;AAMnC,YAAQ;AACN,YAAM;AACJ,cAAM;AADF;AADA;AAN2B,GAAb,CAAxB;;;AAcA,MAAM,cAAc,MAAM,MAAN,CAAa;AAC/B,UAAM,aADyB;AAE/B,gBAAY,UAFmB;AAG/B,eAAW,IAHoB;AAI/B,YAAQ;AACN,YAAM;AACJ,cAAM;AADF;AADA;AAJuB,GAAb,CAApB;;AAWA,OAAK,UAAL,CAAgB,iBAAiB,OAAjB,EAAhB,EAA4C,gBAA5C,EACE,uEADF;AAGA,OAAK,UAAL,CAAgB,gBAAgB,OAAhB,EAAhB,EAA2C,WAA3C,EACE,sEADF;AAGA,OAAK,KAAL,CAAW,YAAY,OAAZ,GAAsB,WAAjC,EAA8C,MAA9C,EACE,kEADF;AAGD,CA3DD","file":"/packages/jagi:astronomy/test/modules/storage/transform.js.map","sourcesContent":["import _ from 'lodash';\nimport { Mongo } from 'meteor/mongo';\nimport { Class } from 'meteor/jagi:astronomy';\n\nTinytest.add('Modules - Storage - Transform', function(test) {\n  const Transforms = new Mongo.Collection(null);\n\n  // Insert a document.\n  Transforms.insert({\n    name: 'name',\n  });\n\n  // Default transform function.\n  const DefaultTransform = Class.create({\n    name: 'DefaultTransform',\n    collection: Transforms,\n    fields: {\n      name: {\n        type: String\n      }\n    }\n  });\n\n  // Custom transform function.\n  const CustomClass = class {\n    constructor(values) {\n      _.extend(this, values);\n    }\n  };\n  const CustomTransform = Class.create({\n    name: 'CustomTransform',\n    collection: Transforms,\n    transform: function(values) {\n      return new CustomClass(values);\n    },\n    fields: {\n      name: {\n        type: String\n      }\n    }\n  });\n\n  // No transform function.\n  const NoTransform = Class.create({\n    name: 'NoTransform',\n    collection: Transforms,\n    transform: null,\n    fields: {\n      name: {\n        type: String\n      }\n    }\n  });\n\n  test.instanceOf(DefaultTransform.findOne(), DefaultTransform,\n    'Default transform function should be applied to the fetched documents'\n  );\n  test.instanceOf(CustomTransform.findOne(), CustomClass,\n    'Custom transform function should be applied to the fetched documents'\n  );\n  test.equal(NoTransform.findOne().constructor, Object,\n    'No transform function should be applied to the fetched documents'\n  );\n});"]},"hash":"3a09059e48c90221d2b887ced43ec812b6aca7a3"}
