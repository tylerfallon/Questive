{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"./type.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Type"}]},{"source":"../validators/validators.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Validators"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/fields/enum.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/fields/enum.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/fields/enum.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/fields/enum.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"enum"},"ignored":false,"code":"var _;module.import('lodash',{\"default\":function(v){_=v}});var Type;module.import('./type.js',{\"default\":function(v){Type=v}});var Validators;module.import('../validators/validators.js',{\"default\":function(v){Validators=v}});var check,Match;module.import('meteor/check',{\"check\":function(v){check=v},\"Match\":function(v){Match=v}});\n\n\n\n\nvar enumDefinitionPattern = {\n  name: String,\n  identifiers: Match.OneOf(Array, Object)\n};\n\nvar Enum = {\n  create: function () {\n    function create(definition) {\n      check(definition, enumDefinitionPattern);\n\n      // Get identifiers and values.\n      var identifiers = void 0;\n      if (Match.test(definition.identifiers, Array)) {\n        identifiers = _.zipObject(definition.identifiers, _.range(definition.identifiers.length));\n      } else if (Match.test(definition.identifiers, Object)) {\n        (function () {\n          identifiers = definition.identifiers;\n          var i = 0;\n          _.forOwn(identifiers, function (value, key) {\n            if (_.isNil(value)) {\n              identifiers[key] = i;\n              i++;\n            } else if (_.isNumber(value)) {\n              i = value + 1;\n            }\n          });\n        })();\n      }\n      var values = _.values(identifiers);\n      var keys = _.keys(identifiers);\n      // Create a new Enum constructor.\n      var Enum = function () {\n        function Enum(identifier) {\n          return Enum[identifier];\n        }\n\n        return Enum;\n      }();\n      Enum.getIdentifiers = function () {\n        return keys;\n      };\n      Enum.getIdentifier = function (value) {\n        var index = _.indexOf(values, value);\n        return keys[index];\n      };\n      // Set identifiers properties in the class.\n      _.each(identifiers, function (value, name) {\n        if (Object.defineProperty) {\n          Object.defineProperty(Enum, name, {\n            writable: false,\n            enumerable: true,\n            value: value\n          });\n        } else {\n          Enum[name] = value;\n        }\n      });\n      // Create type definition for the given enum.\n      Type.create({\n        name: definition.name,\n        'class': Enum,\n        validate: function () {\n          function validate(args) {\n            args.param = values;\n            Validators.choice(args);\n          }\n\n          return validate;\n        }()\n      });\n      // Store enum in the enums list.\n      this.enums[definition.name] = Enum;\n\n      return Enum;\n    }\n\n    return create;\n  }(),\n\n  enums: {}\n};\n\nmodule.export(\"default\",exports.default=(Enum));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/fields/enum.js"],"names":[],"mappings":"AAAA,OAAO,CAAP,MAAc,QAAd;AACA,OAAO,IAAP,MAAiB,WAAjB;AACA,OAAO,UAAP,MAAuB,6BAAvB;AACA,SAAS,KAAT,EAAgB,KAAhB,QAA6B,cAA7B;;AAEA,IAAM,wBAAwB;AAC5B,QAAM,MADsB;AAE5B,eAAa,MAAM,KAAN,CAAY,KAAZ,EAAmB,MAAnB;AAFe,CAA9B;;AAKA,IAAM,OAAO;AACX,QADW;AAAA,oBACJ,UADI,EACQ;AACjB,YAAM,UAAN,EAAkB,qBAAlB;;;AAGA,UAAI,oBAAJ;AACA,UAAI,MAAM,IAAN,CAAW,WAAW,WAAtB,EAAmC,KAAnC,CAAJ,EAA+C;AAC7C,sBAAc,EAAE,SAAF,CACZ,WAAW,WADC,EACY,EAAE,KAAF,CAAQ,WAAW,WAAX,CAAuB,MAA/B,CADZ,CAAd;AAGD,OAJD,MAKK,IAAI,MAAM,IAAN,CAAW,WAAW,WAAtB,EAAmC,MAAnC,CAAJ,EAAgD;AAAA;AACnD,wBAAc,WAAW,WAAzB;AACA,cAAI,IAAI,CAAR;AACA,YAAE,MAAF,CAAS,WAAT,EAAsB,UAAS,KAAT,EAAgB,GAAhB,EAAqB;AACzC,gBAAI,EAAE,KAAF,CAAQ,KAAR,CAAJ,EAAoB;AAClB,0BAAY,GAAZ,IAAmB,CAAnB;AACA;AACD,aAHD,MAIK,IAAI,EAAE,QAAF,CAAW,KAAX,CAAJ,EAAuB;AAC1B,kBAAI,QAAQ,CAAZ;AACD;AACF,WARD;AAHmD;AAYpD;AACD,UAAM,SAAS,EAAE,MAAF,CAAS,WAAT,CAAf;AACA,UAAM,OAAO,EAAE,IAAF,CAAO,WAAP,CAAb;;AAEA,UAAM;AAAO,iBAAS,IAAT,CAAc,UAAd,EAA0B;AACrC,iBAAO,KAAK,UAAL,CAAP;AACD;;AAFK,eAAgB,IAAhB;AAAA,SAAN;AAGA,WAAK,cAAL,GAAsB,YAAW;AAC/B,eAAO,IAAP;AACD,OAFD;AAGA,WAAK,aAAL,GAAqB,UAAS,KAAT,EAAgB;AACnC,YAAM,QAAQ,EAAE,OAAF,CAAU,MAAV,EAAkB,KAAlB,CAAd;AACA,eAAO,KAAK,KAAL,CAAP;AACD,OAHD;;AAKA,QAAE,IAAF,CAAO,WAAP,EAAoB,UAAC,KAAD,EAAQ,IAAR,EAAiB;AACnC,YAAI,OAAO,cAAX,EAA2B;AACzB,iBAAO,cAAP,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC;AAChC,sBAAU,KADsB;AAEhC,wBAAY,IAFoB;AAGhC;AAHgC,WAAlC;AAKD,SAND,MAOK;AACH,eAAK,IAAL,IAAa,KAAb;AACD;AACF,OAXD;;AAaA,WAAK,MAAL,CAAY;AACV,cAAM,WAAW,IADP;AAEV,iBAAO,IAFG;AAGV,gBAHU;AAAA,4BAGD,IAHC,EAGK;AACb,iBAAK,KAAL,GAAa,MAAb;AACA,uBAAW,MAAX,CAAkB,IAAlB;AACD;;AANS;AAAA;AAAA,OAAZ;;AASA,WAAK,KAAL,CAAW,WAAW,IAAtB,IAA8B,IAA9B;;AAEA,aAAO,IAAP;AACD;;AA/DU;AAAA;;AAgEX,SAAO;AAhEI,CAAb;;AAmEA,eAAe,IAAf","file":"/packages/jagi:astronomy/lib/modules/fields/enum.js.map","sourcesContent":["import _ from 'lodash';\nimport Type from './type.js';\nimport Validators from '../validators/validators.js';\nimport { check, Match } from 'meteor/check';\n\nconst enumDefinitionPattern = {\n  name: String,\n  identifiers: Match.OneOf(Array, Object)\n};\n\nconst Enum = {\n  create(definition) {\n    check(definition, enumDefinitionPattern);\n\n    // Get identifiers and values.\n    let identifiers;\n    if (Match.test(definition.identifiers, Array)) {\n      identifiers = _.zipObject(\n        definition.identifiers, _.range(definition.identifiers.length)\n      );\n    }\n    else if (Match.test(definition.identifiers, Object)) {\n      identifiers = definition.identifiers;\n      let i = 0;\n      _.forOwn(identifiers, function(value, key) {\n        if (_.isNil(value)) {\n          identifiers[key] = i;\n          i++;\n        }\n        else if (_.isNumber(value)) {\n          i = value + 1;\n        }\n      });\n    }\n    const values = _.values(identifiers);\n    const keys = _.keys(identifiers);\n    // Create a new Enum constructor.\n    const Enum = function Enum(identifier) {\n      return Enum[identifier];\n    };\n    Enum.getIdentifiers = function() {\n      return keys;\n    };\n    Enum.getIdentifier = function(value) {\n      const index = _.indexOf(values, value);\n      return keys[index];\n    };\n    // Set identifiers properties in the class.\n    _.each(identifiers, (value, name) => {\n      if (Object.defineProperty) {\n        Object.defineProperty(Enum, name, {\n          writable: false,\n          enumerable: true,\n          value\n        });\n      }\n      else {\n        Enum[name] = value;\n      }\n    });\n    // Create type definition for the given enum.\n    Type.create({\n      name: definition.name,\n      class: Enum,\n      validate(args) {\n        args.param = values;\n        Validators.choice(args);\n      }\n    });\n    // Store enum in the enums list.\n    this.enums[definition.name] = Enum;\n\n    return Enum;\n  },\n  enums: {}\n};\n\nexport default Enum;"]},"hash":"ed82fa7f073d068df4468e498689134172f02440"}
