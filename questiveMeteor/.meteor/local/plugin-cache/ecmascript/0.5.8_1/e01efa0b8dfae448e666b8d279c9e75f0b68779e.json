{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/ui/join.js","filenameRelative":"/imports/ui/join.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/ui/join.js.map","sourceFileName":"/imports/ui/join.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"join"},"ignored":false,"code":"var React = require('react');\nvar Router = require('react-router');\nvar Query = require('./Search/Query');\nvar Results = require('./Search/Results');\n\nvar Join = React.createClass({\n\tdisplayName: 'Join',\n\n\n\t/*Here we set the initial state variables (this allows us to propagate the variables for maniuplation by the children components*/\n\t/*Also note the \"resuls\" state. This will be where we hold the data from our results*/\n\tgetInitialState: function () {\n\t\tfunction getInitialState() {\n\t\t\treturn {\n\t\t\t\tqueryTerm: \"\",\n\t\t\t\tstartYear: \"\",\n\t\t\t\tendYear: \"\",\n\t\t\t\tresults: {}\n\t\t\t};\n\t\t}\n\n\t\treturn getInitialState;\n\t}(),\n\n\t/*This function gets called if the user searches for a completely new set of parameters (i.e. if any of the search terms changes)*/\n\t/*If the user searches for the exact same thing, then React will ignore it.*/\n\tcomponentDidUpdate: function () {\n\t\tfunction componentDidUpdate(prevProps, prevState) {\n\t\t\tconsole.log(\"COMPONENT UPDATED\");\n\t\t\tconsole.log(this.state.queryTerm);\n\t\t\tconsole.log(this.state.startYear);\n\t\t\tconsole.log(this.state.endYear);\n\n\t\t\tconsole.log(\"Previous State\", prevState);\n\n\t\t\tif (this.state.queryTerm != \"\" && (prevState.queryTerm != this.state.queryTerm || prevState.startYear != this.state.startYear || prevState.endYear != this.state.endYear)) {\n\t\t\t\thelpers.runQuery(this.state.queryTerm, this.state.startYear, this.state.endYear).then(function (data) {\n\t\t\t\t\tif (data != this.state.results) {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tresults: data\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// console.log(\"RESULTS\", results)\n\t\t\t\t\t// console.log(\"DATA\", data)\n\n\t\t\t\t\t// This code is necessary to bind the keyword \"this\" when we say this.setState\n\t\t\t\t\t// to actually mean the component itself and not the runQuery function.\n\t\t\t\t}.bind(this));\n\t\t\t}\n\t\t}\n\n\t\treturn componentDidUpdate;\n\t}(),\n\n\t// This function will be passed down into children components so they can change the \"parent\"\n\t// i.e we will pass this method to the query component that way it can change the main component\n\t// to perform a new search\n\tsetQuery: function () {\n\t\tfunction setQuery(newQuery, newStart, newEnd) {\n\t\t\tconsole.log(\"TEST\");\n\t\t\tthis.setState({\n\t\t\t\tqueryTerm: newQuery,\n\t\t\t\tstartYear: newStart,\n\t\t\t\tendYear: newEnd\n\t\t\t});\n\t\t}\n\n\t\treturn setQuery;\n\t}(),\n\n\t/*Render the function. Note how we deploy both the Query and the Results*/render: function () {\n\t\tfunction render() {\n\t\t\tconsole.log(\"Render Results\", this.state.results);\n\n\t\t\treturn React.createElement(\n\t\t\t\t'div',\n\t\t\t\t{ className: 'main-container' },\n\t\t\t\tReact.createElement(Query, { updateSearch: this.setQuery }),\n\t\t\t\tReact.createElement(Results, { results: this.state.results })\n\t\t\t);\n\t\t}\n\n\t\treturn render;\n\t}()\n});\n\n// Export the module back to the route\nmodule.export(\"default\",exports.default=(Join));","ast":null,"map":{"version":3,"sources":["/imports/ui/join.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,SAAS,QAAQ,cAAR,CAAb;AACA,IAAI,QAAQ,QAAQ,gBAAR,CAAZ;AACA,IAAI,UAAU,QAAQ,kBAAR,CAAd;;AAEA,IAAI,OAAO,MAAM,WAAN,CAAkB;AAAA;;;;;AAI5B;AAAiB,6BAAU;AAC1B,UAAO;AACN,eAAW,EADL;AAEN,eAAW,EAFL;AAGN,aAAS,EAHH;AAIN,aAAS;AAJH,IAAP;AAMA;;AAPD;AAAA,IAJ4B;;;;AAgB5B;AAAoB,8BAAS,SAAT,EAAoB,SAApB,EAA8B;AACjD,WAAQ,GAAR,CAAY,mBAAZ;AACA,WAAQ,GAAR,CAAY,KAAK,KAAL,CAAW,SAAvB;AACA,WAAQ,GAAR,CAAY,KAAK,KAAL,CAAW,SAAvB;AACA,WAAQ,GAAR,CAAY,KAAK,KAAL,CAAW,OAAvB;;AAEA,WAAQ,GAAR,CAAY,gBAAZ,EAA8B,SAA9B;;AAGA,OAAI,KAAK,KAAL,CAAW,SAAX,IAAwB,EAAxB,KAA+B,UAAU,SAAV,IAAuB,KAAK,KAAL,CAAW,SAAlC,IAA+C,UAAU,SAAV,IAAuB,KAAK,KAAL,CAAW,SAAjF,IAA8F,UAAU,OAAV,IAAqB,KAAK,KAAL,CAAW,OAA7J,CAAJ,EACA;AACC,YAAQ,QAAR,CAAiB,KAAK,KAAL,CAAW,SAA5B,EAAuC,KAAK,KAAL,CAAW,SAAlD,EAA6D,KAAK,KAAL,CAAW,OAAxE,EACE,IADF,CACO,UAAS,IAAT,EAAc;AACnB,SAAI,QAAQ,KAAK,KAAL,CAAW,OAAvB,EACA;AACC,WAAK,QAAL,CAAc;AACb,gBAAS;AADI,OAAd;AAGA;;;;;;;AAOD,KAbK,CAaJ,IAbI,CAaC,IAbD,CADP;AAeA;AACD;;AA3BD;AAAA,IAhB4B;;;;;AAgD5B;AAAU,oBAAS,QAAT,EAAmB,QAAnB,EAA6B,MAA7B,EAAoC;AAC7C,WAAQ,GAAR,CAAY,MAAZ;AACA,QAAK,QAAL,CAAc;AACb,eAAW,QADE;AAEb,eAAW,QAFE;AAGb,aAAS;AAHI,IAAd;AAKA;;AAPD;AAAA,IAhD4B;;2EA0D5B;AAAQ,oBAAU;AACjB,WAAQ,GAAR,CAAY,gBAAZ,EAA8B,KAAK,KAAL,CAAW,OAAzC;;AAEA,UAEC;AAAA;AAAA,MAAK,WAAU,gBAAf;AAGC,wBAAC,KAAD,IAAO,cAAc,KAAK,QAA1B,GAHD;AAMC,wBAAC,OAAD,IAAS,SAAS,KAAK,KAAL,CAAW,OAA7B;AAND,IAFD;AAaA;;AAhBD;AAAA;AA1D4B,CAAlB,CAAX;;;AA8EA,eAAe,IAAf","file":"/imports/ui/join.js.map","sourcesContent":["var React = require('react');\nvar Router = require('react-router');\nvar Query = require('./Search/Query');\nvar Results = require('./Search/Results');\n\nvar Join = React.createClass({\n\n\t/*Here we set the initial state variables (this allows us to propagate the variables for maniuplation by the children components*/\n\t/*Also note the \"resuls\" state. This will be where we hold the data from our results*/\n\tgetInitialState: function(){\n\t\treturn { \n\t\t\tqueryTerm: \"\",\n\t\t\tstartYear: \"\",\n\t\t\tendYear: \"\",\n\t\t\tresults: {}\n\t\t}\n\t},\n\n\n\t/*This function gets called if the user searches for a completely new set of parameters (i.e. if any of the search terms changes)*/\n\t/*If the user searches for the exact same thing, then React will ignore it.*/\n\tcomponentDidUpdate: function(prevProps, prevState){\n\t\tconsole.log(\"COMPONENT UPDATED\");\n\t\tconsole.log(this.state.queryTerm);\n\t\tconsole.log(this.state.startYear);\n\t\tconsole.log(this.state.endYear);\n\n\t\tconsole.log(\"Previous State\", prevState);\n\n\t\t\n\t\tif (this.state.queryTerm != \"\" && (prevState.queryTerm != this.state.queryTerm || prevState.startYear != this.state.startYear || prevState.endYear != this.state.endYear))\n\t\t{\n\t\t\thelpers.runQuery(this.state.queryTerm, this.state.startYear, this.state.endYear)\n\t\t\t\t.then(function(data){\n\t\t\t\t\tif (data != this.state.results)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tresults: data\n\t\t\t\t\t\t})\t\t\n\t\t\t\t\t}\n\n\t\t\t\t// console.log(\"RESULTS\", results)\n\t\t\t\t// console.log(\"DATA\", data)\n\n\t\t\t\t// This code is necessary to bind the keyword \"this\" when we say this.setState \n\t\t\t\t// to actually mean the component itself and not the runQuery function.\n\t\t\t\t}.bind(this))\t\t\t\n\t\t}\n\t},\n\n\t// This function will be passed down into children components so they can change the \"parent\"\n\t// i.e we will pass this method to the query component that way it can change the main component \n\t// to perform a new search\n\tsetQuery: function(newQuery, newStart, newEnd){\n\t\tconsole.log(\"TEST\");\n\t\tthis.setState({\n\t\t\tqueryTerm: newQuery,\n\t\t\tstartYear: newStart,\n\t\t\tendYear: newEnd\n\t\t})\n\t},\n\n\t/*Render the function. Note how we deploy both the Query and the Results*/\n\trender: function(){\n\t\tconsole.log(\"Render Results\", this.state.results)\n\n\t\treturn(\n\n\t\t\t<div className=\"main-container\"> \n\n\t\t\t\t{/*Note how we pass the setQuery function to enable Query to perform searches*/}\n\t\t\t\t<Query updateSearch={this.setQuery} />\n\n\t\t\t\t{/*Note how we pass in the results into this component*/}\n\t\t\t\t<Results results={this.state.results}/>\n\n\t\t\t</div>\n\n\t\t)\n\t}\n});\n\n// Export the module back to the route\nexport default Join;"]},"hash":"e01efa0b8dfae448e666b8d279c9e75f0b68779e"}
