{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/test/behaviors/behaviors_slug.js","filenameRelative":"/packages/jagi:astronomy/test/behaviors/behaviors_slug.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/test/behaviors/behaviors_slug.js.map","sourceFileName":"/packages/jagi:astronomy/test/behaviors/behaviors_slug.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"behaviors_slug"},"ignored":false,"code":"var _;module.import('lodash',{\"default\":function(v){_=v}});\n\nTinytest.add('Behaviors - Slug', function (test) {\n  // Reset Astro.\n  reset();\n\n  var SlugsA = new Mongo.Collection(null);\n  var SlugsB = new Mongo.Collection(null);\n\n  SlugsA.find({}, {\n    transform: null\n  }).forEach(function (slug) {\n    SlugsA.remove(slug._id);\n  });\n\n  SlugsB.find({}, {\n    transform: null\n  }).forEach(function (slug) {\n    SlugsB.remove(slug._id);\n  });\n\n  var SlugA = Astro.Class.create({\n    name: 'SlugA',\n    collection: SlugsA,\n    fields: {\n      name: 'string'\n    },\n    behaviors: {\n      slug: {}\n    }\n  });\n\n  var SlugB = Astro.Class.create({\n    name: 'SlugB',\n    collection: SlugsB,\n    fields: {\n      title: 'string'\n    },\n    behaviors: {\n      slug: {\n        fieldName: 'title',\n        slugFieldName: 'slugged',\n        canUpdate: true,\n        unique: false,\n        separator: '_'\n      }\n    }\n  });\n\n  var diacritics = 'ąáàâãăåäāǟ' + 'ćĉčçċ' + 'ďđḑ' + 'ęéèêěĕëēė' + 'ģĝğġģ' + 'ĥħ' + 'íìîĭïīįĩı' + 'ĵ' + 'ķ' + 'łļĺľŀ' + 'ňńņñŉ' + 'óòôŏöōøőȯȱȭõ' + 'řŗŕ' + 'śŝšş' + 'ťțŧ' + 'úùûūųüűŭũů' + 'ŵ' + 'ŷýÿ' + 'źżž' + 'абчдеёэфгийяъюкхлмнопрсшщтцувызж';\n  var expected = 'aaaaaaaaaa' + 'ccccc' + 'ddd' + 'eeeeeeeee' + 'ggggg' + 'hh' + 'iiiiiiiii' + 'j' + 'k' + 'lllll' + 'nnnnn' + 'oooooooooooo' + 'rrr' + 'ssss' + 'ttt' + 'uuuuuuuuuu' + 'w' + 'yyy' + 'zzz' + 'abchdeeefgiiiaieiukkhlmnoprsshshchttsuvyzzh';\n\n  var slugA1 = new SlugA();\n  slugA1.set('name', 'Slug ' + diacritics);\n  slugA1.save();\n  test.equal(slugA1.get('slug'), 'slug-' + expected, 'The slug function does not work properly');\n\n  var slugA2 = new SlugA();\n  slugA2.set('name', 'Slug ' + diacritics);\n  slugA2.save();\n  test.equal(slugA2.get('slug'), 'slug-' + expected + '-2', 'The value of the slag field should be unique');\n\n  slugA1.set('name', 'Slug2 ' + diacritics);\n  slugA1.save();\n  test.equal(slugA1.get('slug'), 'slug-' + expected, 'It should not be possible to update a slug');\n\n  var slugB1 = new SlugB();\n  slugB1.set('title', 'Slug ' + diacritics);\n  slugB1.save();\n  test.isNotUndefined(slugB1.get('slugged'), 'The name of a field for the slug storage should be \"slugged\"');\n  test.isTrue(_.isString(slugB1.get('slugged')), 'The slug should be created from the value of the \"title\" field');\n  test.isTrue(_.contains(slugB1.get('slugged'), '_'), 'The prefix character should be \"_\"');\n\n  slugB1.set('title', 'Slug2 ' + diacritics);\n  slugB1.save();\n  test.equal(slugB1.get('slugged'), 'slug2_' + expected, 'It should be possible to update a slug\"');\n\n  slugB2 = new SlugB();\n  slugB2.set('title', 'Slug2 ' + diacritics);\n  slugB2.save();\n  test.equal(slugB2.get('slugged'), 'slug2_' + expected, 'The value of the slag field should not be unique');\n});","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/test/behaviors/behaviors_slug.js"],"names":[],"mappings":"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","file":"/packages/jagi:astronomy/test/behaviors/behaviors_slug.js.map","sourcesContent":["import _ from 'lodash';\n\nTinytest.add('Behaviors - Slug', function(test) {\n  // Reset Astro.\n  reset();\n\n  var SlugsA = new Mongo.Collection(null);\n  var SlugsB = new Mongo.Collection(null);\n\n  SlugsA.find({}, {\n    transform: null\n  }).forEach(function(slug) {\n    SlugsA.remove(slug._id);\n  });\n\n  SlugsB.find({}, {\n    transform: null\n  }).forEach(function(slug) {\n    SlugsB.remove(slug._id);\n  });\n\n  var SlugA = Astro.Class.create({\n    name: 'SlugA',\n    collection: SlugsA,\n    fields: {\n      name: 'string'\n    },\n    behaviors: {\n      slug: {}\n    }\n  });\n\n  var SlugB = Astro.Class.create({\n    name: 'SlugB',\n    collection: SlugsB,\n    fields: {\n      title: 'string'\n    },\n    behaviors: {\n      slug: {\n        fieldName: 'title',\n        slugFieldName: 'slugged',\n        canUpdate: true,\n        unique: false,\n        separator: '_'\n      }\n    }\n  });\n\n  var diacritics = 'ąáàâãăåäāǟ' + 'ćĉčçċ' + 'ďđḑ' + 'ęéèêěĕëēė' + 'ģĝğġģ' +\n    'ĥħ' + 'íìîĭïīįĩı' + 'ĵ' + 'ķ' + 'łļĺľŀ' + 'ňńņñŉ' + 'óòôŏöōøőȯȱȭõ' +\n    'řŗŕ' + 'śŝšş' + 'ťțŧ' + 'úùûūųüűŭũů' + 'ŵ' + 'ŷýÿ' + 'źżž' +\n    'абчдеёэфгийяъюкхлмнопрсшщтцувызж';\n  var expected = 'aaaaaaaaaa' + 'ccccc' + 'ddd' + 'eeeeeeeee' + 'ggggg' +\n    'hh' + 'iiiiiiiii' + 'j' + 'k' + 'lllll' + 'nnnnn' + 'oooooooooooo' +\n    'rrr' + 'ssss' + 'ttt' + 'uuuuuuuuuu' + 'w' + 'yyy' + 'zzz' +\n    'abchdeeefgiiiaieiukkhlmnoprsshshchttsuvyzzh';\n\n  var slugA1 = new SlugA();\n  slugA1.set('name', 'Slug ' + diacritics);\n  slugA1.save();\n  test.equal(slugA1.get('slug'), 'slug-' + expected,\n    'The slug function does not work properly'\n  );\n\n  var slugA2 = new SlugA();\n  slugA2.set('name', 'Slug ' + diacritics);\n  slugA2.save();\n  test.equal(slugA2.get('slug'), 'slug-' + expected + '-2',\n    'The value of the slag field should be unique'\n  );\n\n  slugA1.set('name', 'Slug2 ' + diacritics);\n  slugA1.save();\n  test.equal(slugA1.get('slug'), 'slug-' + expected,\n    'It should not be possible to update a slug'\n  );\n\n  var slugB1 = new SlugB();\n  slugB1.set('title', 'Slug ' + diacritics);\n  slugB1.save();\n  test.isNotUndefined(slugB1.get('slugged'),\n    'The name of a field for the slug storage should be \"slugged\"'\n  );\n  test.isTrue(_.isString(slugB1.get('slugged')),\n    'The slug should be created from the value of the \"title\" field'\n  );\n  test.isTrue(_.contains(slugB1.get('slugged'), '_'),\n    'The prefix character should be \"_\"'\n  );\n\n  slugB1.set('title', 'Slug2 ' + diacritics);\n  slugB1.save();\n  test.equal(slugB1.get('slugged'), 'slug2_' + expected,\n    'It should be possible to update a slug\"'\n  );\n\n  slugB2 = new SlugB();\n  slugB2.set('title', 'Slug2 ' + diacritics);\n  slugB2.save();\n  test.equal(slugB2.get('slugged'), 'slug2_' + expected,\n    'The value of the slag field should not be unique'\n  );\n});\n"]},"hash":"6fe008cbd01cdc73981f9817306c0c526cb1fd70"}
