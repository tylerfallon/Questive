{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/test/core/extend.js","filenameRelative":"/packages/jagi:astronomy/test/core/extend.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/test/core/extend.js.map","sourceFileName":"/packages/jagi:astronomy/test/core/extend.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"extend"},"ignored":false,"code":"Tinytest.add('Core - Extend', function (test) {\n  reset();\n\n  var Extended = Astro.Class.create({\n    name: 'Extended',\n    fields: {\n      originalField: {\n        type: String\n      }\n    },\n    methods: {\n      originalMethod: function () {\n        function originalMethod() {}\n\n        return originalMethod;\n      }()\n    },\n    events: {\n      afterInit: function () {\n        function afterInit() {}\n\n        return afterInit;\n      }()\n    }\n  });\n\n  Extended.extend({\n    fields: {\n      extendField: {\n        type: String\n      }\n    },\n    methods: {\n      extendMethod: function () {\n        function extendMethod() {}\n\n        return extendMethod;\n      }()\n    },\n    events: {\n      afterInit: function () {\n        function afterInit() {}\n\n        return afterInit;\n      }()\n    }\n  });\n\n  // Fields.\n  test.instanceOf(Extended.getField('originalField'), Astro.Field, 'Class should contain original fields');\n  test.instanceOf(Extended.getField('extendField'), Astro.Field, 'Class should contain extended fields');\n\n  // Methods.\n  test.instanceOf(Extended.getMethod('originalMethod'), Function, 'Class should contain original methods');\n  test.instanceOf(Extended.getMethod('extendMethod'), Function, 'Class should contain extended methods');\n\n  // Events.\n  test.equal(Extended.getEvents('afterInit').length, 2, 'Class should contain two \"afterInit\" event handlers');\n});","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/test/core/extend.js"],"names":[],"mappings":"AAAA,SAAS,GAAT,CAAa,eAAb,EAA8B,UAAS,IAAT,EAAe;AAC3C;;AAEA,MAAI,WAAW,MAAM,KAAN,CAAY,MAAZ,CAAmB;AAChC,UAAM,UAD0B;AAEhC,YAAQ;AACN,qBAAe;AACb,cAAM;AADO;AADT,KAFwB;AAOhC,aAAS;AACP;AAAgB,kCAAW,CAAE;;AAA7B;AAAA;AADO,KAPuB;AAUhC,YAAQ;AACN;AAAW,6BAAW,CAAE;;AAAxB;AAAA;AADM;AAVwB,GAAnB,CAAf;;AAeA,WAAS,MAAT,CAAgB;AACd,YAAQ;AACN,mBAAa;AACX,cAAM;AADK;AADP,KADM;AAMd,aAAS;AACP;AAAc,gCAAW,CAAE;;AAA3B;AAAA;AADO,KANK;AASd,YAAQ;AACN;AAAW,6BAAW,CAAE;;AAAxB;AAAA;AADM;AATM,GAAhB;;;AAeA,OAAK,UAAL,CAAgB,SAAS,QAAT,CAAkB,eAAlB,CAAhB,EAAoD,MAAM,KAA1D,EACE,sCADF;AAGA,OAAK,UAAL,CAAgB,SAAS,QAAT,CAAkB,aAAlB,CAAhB,EAAkD,MAAM,KAAxD,EACE,sCADF;;;AAKA,OAAK,UAAL,CAAgB,SAAS,SAAT,CAAmB,gBAAnB,CAAhB,EAAsD,QAAtD,EACE,uCADF;AAGA,OAAK,UAAL,CAAgB,SAAS,SAAT,CAAmB,cAAnB,CAAhB,EAAoD,QAApD,EACE,uCADF;;;AAKA,OAAK,KAAL,CAAW,SAAS,SAAT,CAAmB,WAAnB,EAAgC,MAA3C,EAAmD,CAAnD,EACE,qDADF;AAGD,CApDD","file":"/packages/jagi:astronomy/test/core/extend.js.map","sourcesContent":["Tinytest.add('Core - Extend', function(test) {\n  reset();\n\n  let Extended = Astro.Class.create({\n    name: 'Extended',\n    fields: {\n      originalField: {\n        type: String\n      }\n    },\n    methods: {\n      originalMethod: function() {}\n    },\n    events: {\n      afterInit: function() {}\n    }\n  });\n\n  Extended.extend({\n    fields: {\n      extendField: {\n        type: String\n      }\n    },\n    methods: {\n      extendMethod: function() {}\n    },\n    events: {\n      afterInit: function() {}\n    }\n  });\n\n  // Fields.\n  test.instanceOf(Extended.getField('originalField'), Astro.Field,\n    'Class should contain original fields'\n  );\n  test.instanceOf(Extended.getField('extendField'), Astro.Field,\n    'Class should contain extended fields'\n  );\n\n  // Methods.\n  test.instanceOf(Extended.getMethod('originalMethod'), Function,\n    'Class should contain original methods'\n  );\n  test.instanceOf(Extended.getMethod('extendMethod'), Function,\n    'Class should contain extended methods'\n  );\n\n  // Events.\n  test.equal(Extended.getEvents('afterInit').length, 2,\n    'Class should contain two \"afterInit\" event handlers'\n  );\n});"]},"hash":"515e81e1f752bde893b83428824579352559c07f"}
