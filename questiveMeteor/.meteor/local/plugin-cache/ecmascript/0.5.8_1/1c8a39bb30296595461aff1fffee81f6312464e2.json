{"metadata":{"usedHelpers":["classCallCheck"],"marked":[],"modules":{"imports":[{"source":"meteor/mdg:validation-error","imported":["ValidationError"],"specifiers":[{"kind":"named","imported":"ValidationError","local":"ValidationError"}]},{"source":"./validators.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Validators"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/validators/validator.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/validators/validator.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/validators/validator.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/validators/validator.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"validator"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var ValidationError;module.import('meteor/mdg:validation-error',{\"ValidationError\":function(v){ValidationError=v}});var Validators;module.import('./validators.js',{\"default\":function(v){Validators=v}});\n\n\n\nvar Validator = function () {\n  function Validator(definition) {\n    _classCallCheck(this, Validator);\n\n    this.name = definition.name;\n    if (definition.parseParam) {\n      this.parseParam = definition.parseParam;\n    }\n    if (definition.isValid) {\n      this.isValid = definition.isValid;\n    }\n    if (definition.validate) {\n      this.validate = definition.validate;\n    }\n    if (definition.resolveError) {\n      this.resolveError = definition.resolveError;\n    }\n  }\n\n  Validator.prototype.validate = function validate(_ref) {\n    var _this = this;\n\n    var doc = _ref.doc;\n    var name = _ref.name;\n    var nestedName = _ref.nestedName;\n    var value = _ref.value;\n    var param = _ref.param;\n    var resolveParam = _ref.resolveParam;\n    var message = _ref.message;\n    var resolveError = _ref.resolveError;\n\n    // Get the class name, which will be used later for letting know what class\n    // thrown error.\n    var className = doc.constructor.getName();\n\n    // Resolve param is the \"resolveParam\" function is provided.\n    if (Match.test(resolveParam, Function)) {\n      param = resolveParam({\n        doc: doc,\n        name: name,\n        nestedName: nestedName,\n        value: value\n      });\n    }\n    // Parse param type if validator has parsing function.\n    if (Match.test(this.parseParam, Function)) {\n      this.parseParam(param);\n    }\n    // Prepare data for validation.\n    var args = {\n      className: className,\n      doc: doc,\n      name: name,\n      nestedName: nestedName,\n      value: value,\n      param: param,\n      validator: this.name\n    };\n    // Perform validation.\n    if (!this.isValid(args)) {\n      // Prepare function for throwing validation error.\n      var throwError = function throwError(message) {\n        // Throw error only if the error message has been successfully\n        // generated.\n        if (!message) {\n          return;\n        }\n        // Throw error.\n        throw new ValidationError([{\n          className: className,\n          type: _this.name,\n          name: name,\n          nestedName: nestedName,\n          value: value,\n          param: param,\n          message: message\n        }], message);\n      };\n\n      // Generate error message using the \"resolveError\" function if provided.\n      if (Match.test(resolveError, Function)) {\n        throwError(resolveError(args));\n      }\n      // Get error message from the string if provided.\n      if (Match.test(message, String)) {\n        throwError(message);\n      }\n      // Get error by executing a class level \"resolveError\" function.\n      var Class = doc.constructor;\n      var classResolveError = Class.getResolveError();\n      if (classResolveError instanceof Function) {\n        throwError(classResolveError(args));\n      }\n      // Get default error message.\n      if (this.resolveError instanceof Function) {\n        throwError(this.resolveError(args));\n      }\n      throwError(ValidationError.DEFAULT_REASON);\n    }\n  };\n\n  Validator.create = function create(definition) {\n    var validator = new Validator(definition);\n    Validator.validators[validator.name] = validator;\n\n    // Create a validation function.\n    return Validators[validator.name] = function (options) {\n      validator.validate(options);\n    };\n  };\n\n  return Validator;\n}();\n\n;\n\nValidator.validators = {};\n\nmodule.export(\"default\",exports.default=(Validator));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/validators/validator.js"],"names":[],"mappings":";AAAA,SAAS,eAAT,QAAgC,6BAAhC;AACA,OAAO,UAAP,MAAuB,iBAAvB;;IAEM,S;AACJ,qBAAY,UAAZ,EAAwB;AAAA;;AACtB,SAAK,IAAL,GAAY,WAAW,IAAvB;AACA,QAAI,WAAW,UAAf,EAA2B;AACzB,WAAK,UAAL,GAAkB,WAAW,UAA7B;AACD;AACD,QAAI,WAAW,OAAf,EAAwB;AACtB,WAAK,OAAL,GAAe,WAAW,OAA1B;AACD;AACD,QAAI,WAAW,QAAf,EAAyB;AACvB,WAAK,QAAL,GAAgB,WAAW,QAA3B;AACD;AACD,QAAI,WAAW,YAAf,EAA6B;AAC3B,WAAK,YAAL,GAAoB,WAAW,YAA/B;AACD;AACF;;sBAED,Q,2BASG;AAAA;;AAAA,QARD,GAQC,QARD,GAQC;AAAA,QAPD,IAOC,QAPD,IAOC;AAAA,QAND,UAMC,QAND,UAMC;AAAA,QALD,KAKC,QALD,KAKC;AAAA,QAJD,KAIC,QAJD,KAIC;AAAA,QAHD,YAGC,QAHD,YAGC;AAAA,QAFD,OAEC,QAFD,OAEC;AAAA,QADD,YACC,QADD,YACC;;;;AAGD,QAAM,YAAY,IAAI,WAAJ,CAAgB,OAAhB,EAAlB;;;AAGA,QAAI,MAAM,IAAN,CAAW,YAAX,EAAyB,QAAzB,CAAJ,EAAwC;AACtC,cAAQ,aAAa;AACnB,gBADmB;AAEnB,kBAFmB;AAGnB,8BAHmB;AAInB;AAJmB,OAAb,CAAR;AAMD;;AAED,QAAI,MAAM,IAAN,CAAW,KAAK,UAAhB,EAA4B,QAA5B,CAAJ,EAA2C;AACzC,WAAK,UAAL,CAAgB,KAAhB;AACD;;AAED,QAAM,OAAO;AACX,0BADW;AAEX,cAFW;AAGX,gBAHW;AAIX,4BAJW;AAKX,kBALW;AAMX,kBANW;AAOX,iBAAW,KAAK;AAPL,KAAb;;AAUA,QAAI,CAAC,KAAK,OAAL,CAAa,IAAb,CAAL,EAAyB;;AAEvB,UAAM,aAAa,SAAb,UAAa,CAAC,OAAD,EAAa;;;AAG9B,YAAI,CAAC,OAAL,EAAc;AACZ;AACD;;AAED,cAAM,IAAI,eAAJ,CAAoB,CAAC;AACzB,8BADyB;AAEzB,gBAAM,MAAK,IAFc;AAGzB,oBAHyB;AAIzB,gCAJyB;AAKzB,sBALyB;AAMzB,sBANyB;AAOzB;AAPyB,SAAD,CAApB,EAQF,OARE,CAAN;AASD,OAhBD;;;AAmBA,UAAI,MAAM,IAAN,CAAW,YAAX,EAAyB,QAAzB,CAAJ,EAAwC;AACtC,mBAAW,aAAa,IAAb,CAAX;AACD;;AAED,UAAI,MAAM,IAAN,CAAW,OAAX,EAAoB,MAApB,CAAJ,EAAiC;AAC/B,mBAAW,OAAX;AACD;;AAED,UAAI,QAAQ,IAAI,WAAhB;AACA,UAAI,oBAAoB,MAAM,eAAN,EAAxB;AACA,UAAI,6BAA6B,QAAjC,EAA2C;AACzC,mBAAW,kBAAkB,IAAlB,CAAX;AACD;;AAED,UAAI,KAAK,YAAL,YAA6B,QAAjC,EAA2C;AACzC,mBAAW,KAAK,YAAL,CAAkB,IAAlB,CAAX;AACD;AACD,iBAAW,gBAAgB,cAA3B;AACD;AACF,G;;YAEM,M,mBAAO,U,EAAY;AACxB,QAAI,YAAY,IAAI,SAAJ,CAAc,UAAd,CAAhB;AACA,cAAU,UAAV,CAAqB,UAAU,IAA/B,IAAuC,SAAvC;;;AAGA,WAAO,WAAW,UAAU,IAArB,IAA6B,UAAS,OAAT,EAAkB;AACpD,gBAAU,QAAV,CAAmB,OAAnB;AACD,KAFD;AAGD,G;;;;;AACF;;AAED,UAAU,UAAV,GAAuB,EAAvB;;AAEA,eAAe,SAAf","file":"/packages/jagi:astronomy/lib/modules/validators/validator.js.map","sourcesContent":["import { ValidationError } from 'meteor/mdg:validation-error';\nimport Validators from './validators.js';\n\nclass Validator {\n  constructor(definition) {\n    this.name = definition.name;\n    if (definition.parseParam) {\n      this.parseParam = definition.parseParam;\n    }\n    if (definition.isValid) {\n      this.isValid = definition.isValid;\n    }\n    if (definition.validate) {\n      this.validate = definition.validate;\n    }\n    if (definition.resolveError) {\n      this.resolveError = definition.resolveError;\n    }\n  }\n\n  validate({\n    doc,\n    name,\n    nestedName,\n    value,\n    param,\n    resolveParam,\n    message,\n    resolveError\n  }) {\n    // Get the class name, which will be used later for letting know what class\n    // thrown error.\n    const className = doc.constructor.getName();\n\n    // Resolve param is the \"resolveParam\" function is provided.\n    if (Match.test(resolveParam, Function)) {\n      param = resolveParam({\n        doc,\n        name,\n        nestedName,\n        value\n      });\n    }\n    // Parse param type if validator has parsing function.\n    if (Match.test(this.parseParam, Function)) {\n      this.parseParam(param);\n    }\n    // Prepare data for validation.\n    const args = {\n      className,\n      doc,\n      name,\n      nestedName,\n      value,\n      param,\n      validator: this.name\n    };\n    // Perform validation.\n    if (!this.isValid(args)) {\n      // Prepare function for throwing validation error.\n      const throwError = (message) => {\n        // Throw error only if the error message has been successfully\n        // generated.\n        if (!message) {\n          return;\n        }\n        // Throw error.\n        throw new ValidationError([{\n          className,\n          type: this.name,\n          name,\n          nestedName,\n          value,\n          param,\n          message\n        }], message);\n      };\n\n      // Generate error message using the \"resolveError\" function if provided.\n      if (Match.test(resolveError, Function)) {\n        throwError(resolveError(args));\n      }\n      // Get error message from the string if provided.\n      if (Match.test(message, String)) {\n        throwError(message);\n      }\n      // Get error by executing a class level \"resolveError\" function.\n      let Class = doc.constructor;\n      let classResolveError = Class.getResolveError();\n      if (classResolveError instanceof Function) {\n        throwError(classResolveError(args));\n      }\n      // Get default error message.\n      if (this.resolveError instanceof Function) {\n        throwError(this.resolveError(args));\n      }\n      throwError(ValidationError.DEFAULT_REASON);\n    }\n  }\n\n  static create(definition) {\n    let validator = new Validator(definition);\n    Validator.validators[validator.name] = validator;\n\n    // Create a validation function.\n    return Validators[validator.name] = function(options) {\n      validator.validate(options);\n    }\n  }\n};\n\nValidator.validators = {};\n\nexport default Validator;"]},"hash":"1c8a39bb30296595461aff1fffee81f6312464e2"}
