{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck"],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"./Field","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Field"}]},{"source":"./utils/castToClass","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"castToClass"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/fields/ObjectField.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/fields/ObjectField.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/fields/ObjectField.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/fields/ObjectField.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"ObjectField"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var _;module.import('lodash',{\"default\":function(v){_=v}});var Field;module.import('./Field',{\"default\":function(v){Field=v}});var castToClass;module.import('./utils/castToClass',{\"default\":function(v){castToClass=v}});\n\n\n\n\n\n\nvar ObjectField = function (_Field) {\n  _inherits(ObjectField, _Field);\n\n  function ObjectField() {\n    _classCallCheck(this, ObjectField);\n\n    return _possibleConstructorReturn(this, _Field.apply(this, arguments));\n  }\n\n  ObjectField.prototype.cast = function () {\n    function cast(value, options) {\n      // We only cast if value is a plain object.\n      if (!_.isPlainObject(value)) {\n        return value;\n      }\n\n      // Get class from type property.\n      var Class = this.type['class'];\n\n      // Cast value to an instance of the class.\n      return castToClass({\n        Class: Class,\n        rawDoc: value,\n        options: options\n      });\n    }\n\n    return cast;\n  }();\n\n  ObjectField.prototype.validate = function () {\n    function validate(args) {\n      _Field.prototype.validate.call(this, args);\n\n      this.type.validate(args);\n    }\n\n    return validate;\n  }();\n\n  return ObjectField;\n}(Field);\n\n;\n\nmodule.export(\"default\",exports.default=(ObjectField));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/fields/ObjectField.js"],"names":[],"mappings":";;;AAAA,OAAO,CAAP,MAAc,QAAd;AACA,OAAO,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP,MAAwB,qBAAxB;;IAEM,W;;;;;;;;;wBACJ,I;kBAAK,K,EAAO,O,EAAS;;AAEnB,UAAI,CAAC,EAAE,aAAF,CAAgB,KAAhB,CAAL,EAA6B;AAC3B,eAAO,KAAP;AACD;;;AAGD,UAAM,QAAQ,KAAK,IAAL,SAAd;;;AAGA,aAAO,YAAY;AACjB,oBADiB;AAEjB,gBAAQ,KAFS;AAGjB;AAHiB,OAAZ,CAAP;AAKD;;;;;wBAED,Q;sBAAS,I,EAAM;AACb,uBAAM,QAAN,YAAe,IAAf;;AAEA,WAAK,IAAL,CAAU,QAAV,CAAmB,IAAnB;AACD;;;;;;EAtBuB,K;;AAuBzB;;AAED,eAAe,WAAf","file":"/packages/jagi:astronomy/lib/modules/fields/ObjectField.js.map","sourcesContent":["import _ from 'lodash';\nimport Field from './Field';\nimport castToClass from './utils/castToClass';\n\nclass ObjectField extends Field {\n  cast(value, options) {\n    // We only cast if value is a plain object.\n    if (!_.isPlainObject(value)) {\n      return value;\n    }\n\n    // Get class from type property.\n    const Class = this.type.class;\n\n    // Cast value to an instance of the class.\n    return castToClass({\n      Class,\n      rawDoc: value,\n      options\n    });\n  }\n\n  validate(args) {\n    super.validate(args);\n\n    this.type.validate(args);\n  }\n};\n\nexport default ObjectField;"]},"hash":"241364e0390fc97d907136fab04fa647fd732943"}
