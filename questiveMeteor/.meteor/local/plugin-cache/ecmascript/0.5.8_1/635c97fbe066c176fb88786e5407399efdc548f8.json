{"metadata":{"usedHelpers":["classCallCheck"],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"../validators/validators.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Validators"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/fields/type.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/fields/type.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/fields/type.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/fields/type.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"type"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _;module.import('lodash',{\"default\":function(v){_=v}});var Validators;module.import('../validators/validators.js',{\"default\":function(v){Validators=v}});\n\n\n\nvar typeDefinitionPattern = {\n  name: String,\n  'class': Match.Any,\n  cast: Match.Optional(Function),\n  validate: Match.Optional(Function)\n};\n\nvar enumDefinitionPattern = {\n  name: String,\n  options: Object\n};\n\nvar Type = function () {\n  function Type(definition) {\n    _classCallCheck(this, Type);\n\n    check(definition, typeDefinitionPattern);\n\n    this.name = definition.name;\n    this['class'] = definition['class'];\n\n    if (_.isFunction(definition.validate)) {\n      this.validate = definition.validate;\n    }\n\n    if (_.isFunction(definition.cast)) {\n      this.cast = definition.cast;\n    }\n  }\n\n  Type.prototype.cast = function () {\n    function cast(value) {\n      return value;\n    }\n\n    return cast;\n  }();\n\n  Type.prototype.validate = function () {\n    function validate(doc, fieldName) {\n      return true;\n    }\n\n    return validate;\n  }();\n\n  Type.create = function () {\n    function create(definition) {\n      var type = new Type(definition);\n      this.types[type.name] = type;\n    }\n\n    return create;\n  }();\n\n  Type.get = function () {\n    function get(name) {\n      return this.types[name];\n    }\n\n    return get;\n  }();\n\n  Type.has = function () {\n    function has(name) {\n      return _.has(this.types, name);\n    }\n\n    return has;\n  }();\n\n  Type.find = function () {\n    function find(Class) {\n      return _.find(this.types, function (type) {\n        return type['class'].prototype === Class.prototype;\n      });\n    }\n\n    return find;\n  }();\n\n  return Type;\n}();\n\n;\n\nType.types = {};\n\nmodule.export(\"default\",exports.default=(Type));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/fields/type.js"],"names":[],"mappings":";AAAA,OAAO,CAAP,MAAc,QAAd;AACA,OAAO,UAAP,MAAuB,6BAAvB;;AAEA,IAAM,wBAAwB;AAC5B,QAAM,MADsB;AAE5B,WAAO,MAAM,GAFe;AAG5B,QAAM,MAAM,QAAN,CAAe,QAAf,CAHsB;AAI5B,YAAU,MAAM,QAAN,CAAe,QAAf;AAJkB,CAA9B;;AAOA,IAAM,wBAAwB;AAC5B,QAAM,MADsB;AAE5B,WAAS;AAFmB,CAA9B;;IAKM,I;AACJ,gBAAY,UAAZ,EAAwB;AAAA;;AACtB,UAAM,UAAN,EAAkB,qBAAlB;;AAEA,SAAK,IAAL,GAAY,WAAW,IAAvB;AACA,oBAAa,mBAAb;;AAEA,QAAI,EAAE,UAAF,CAAa,WAAW,QAAxB,CAAJ,EAAuC;AACrC,WAAK,QAAL,GAAgB,WAAW,QAA3B;AACD;;AAED,QAAI,EAAE,UAAF,CAAa,WAAW,IAAxB,CAAJ,EAAmC;AACjC,WAAK,IAAL,GAAY,WAAW,IAAvB;AACD;AACF;;iBAED,I;kBAAK,K,EAAO;AACV,aAAO,KAAP;AACD;;;;;iBAED,Q;sBAAS,G,EAAK,S,EAAW;AACvB,aAAO,IAAP;AACD;;;;;OAEM,M;oBAAO,U,EAAY;AACxB,UAAI,OAAO,IAAI,IAAJ,CAAS,UAAT,CAAX;AACA,WAAK,KAAL,CAAW,KAAK,IAAhB,IAAwB,IAAxB;AACD;;;;;OAEM,G;iBAAI,I,EAAM;AACf,aAAO,KAAK,KAAL,CAAW,IAAX,CAAP;AACD;;;;;OAEM,G;iBAAI,I,EAAM;AACf,aAAO,EAAE,GAAF,CAAM,KAAK,KAAX,EAAkB,IAAlB,CAAP;AACD;;;;;OAEM,I;kBAAK,K,EAAO;AACjB,aAAO,EAAE,IAAF,CAAO,KAAK,KAAZ,EAAmB,UAAC,IAAD,EAAU;AAClC,eAAO,cAAW,SAAX,KAAyB,MAAM,SAAtC;AACD,OAFM,CAAP;AAGD;;;;;;;;AACF;;AAED,KAAK,KAAL,GAAa,EAAb;;AAEA,eAAe,IAAf","file":"/packages/jagi:astronomy/lib/modules/fields/type.js.map","sourcesContent":["import _ from 'lodash';\nimport Validators from '../validators/validators.js';\n\nconst typeDefinitionPattern = {\n  name: String,\n  class: Match.Any,\n  cast: Match.Optional(Function),\n  validate: Match.Optional(Function)\n};\n\nconst enumDefinitionPattern = {\n  name: String,\n  options: Object\n};\n\nclass Type {\n  constructor(definition) {\n    check(definition, typeDefinitionPattern);\n\n    this.name = definition.name;\n    this.class = definition.class;\n\n    if (_.isFunction(definition.validate)) {\n      this.validate = definition.validate;\n    }\n\n    if (_.isFunction(definition.cast)) {\n      this.cast = definition.cast;\n    }\n  }\n\n  cast(value) {\n    return value;\n  }\n\n  validate(doc, fieldName) {\n    return true;\n  }\n\n  static create(definition) {\n    let type = new Type(definition);\n    this.types[type.name] = type;\n  }\n\n  static get(name) {\n    return this.types[name];\n  }\n\n  static has(name) {\n    return _.has(this.types, name);\n  }\n\n  static find(Class) {\n    return _.find(this.types, (type) => {\n      return type.class.prototype === Class.prototype;\n    });\n  }\n};\n\nType.types = {};\n\nexport default Type;"]},"hash":"635c97fbe066c176fb88786e5407399efdc548f8"}
