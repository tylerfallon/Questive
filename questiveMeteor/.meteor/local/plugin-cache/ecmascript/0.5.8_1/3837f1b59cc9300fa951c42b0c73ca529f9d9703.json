{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/test/behaviors/behaviors_softremove.js","filenameRelative":"/packages/jagi:astronomy/test/behaviors/behaviors_softremove.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/test/behaviors/behaviors_softremove.js.map","sourceFileName":"/packages/jagi:astronomy/test/behaviors/behaviors_softremove.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"behaviors_softremove"},"ignored":false,"code":"Tinytest.add('Behaviors - Softremove', function (test) {\n  // Reset Astro.\n  reset();\n\n  SoftremovesA = new Mongo.Collection(null);\n  SoftremovesB = new Mongo.Collection(null);\n  SoftremovesC = new Mongo.Collection(null);\n\n  SoftremovesA.find({}, {\n    transform: null\n  }).forEach(function (item) {\n    SoftremovesA.remove(item._id);\n  });\n\n  SoftremovesB.find({}, {\n    transform: null\n  }).forEach(function (item) {\n    SoftremovesB.remove(item._id);\n  });\n\n  SoftremovesC.find({}, {\n    transform: null\n  }).forEach(function (item) {\n    SoftremovesC.remove(item._id);\n  });\n\n  var SoftremoveA = Astro.Class.create({\n    name: 'SoftremoveA',\n    collection: SoftremovesA,\n    fields: {\n      name: 'string'\n    },\n    behaviors: {\n      softremove: {}\n    }\n  });\n\n  var SoftremoveB = Astro.Class.create({\n    name: 'SoftremoveB',\n    collection: SoftremovesB,\n    fields: {\n      name: 'string'\n    },\n    behaviors: {\n      softremove: {\n        removedFieldName: 'deleted',\n        hasRemovedAtField: true,\n        removedAtFieldName: 'removedDate'\n      }\n    }\n  });\n\n  var SoftremoveC = Astro.Class.create({\n    name: 'SoftremoveC',\n    collection: SoftremovesC,\n    fields: {\n      name: 'string'\n    },\n    behaviors: {\n      softremove: {\n        hasRemovedAtField: false\n      }\n    }\n  });\n\n  var softremoveA = new SoftremoveA();\n  softremoveA.save();\n  softremoveA.softRemove();\n  test.isTrue(softremoveA.get('removed'), 'The \"removed\" flag should be set after soft removing document');\n  test.instanceOf(softremoveA.get('removedAt'), Date, 'The \"removedAt\" field should be set with a date of document removal');\n  test.equal(SoftremovesA.find().count(), 1, 'Wrong number of fetched documents from the \"Collection.find()\" method call');\n  test.equal(SoftremoveA.find().count(), 0, 'Wrong number of fetched documents from the \"Class.find()\" method call');\n\n  var softremoveB = new SoftremoveB();\n  softremoveB.save();\n  softremoveB.softRemove();\n  test.isTrue(softremoveB.get('deleted'), 'The \"deleted\" flag should be set after soft removing document');\n  test.instanceOf(softremoveB.get('removedDate'), Date, 'The \"removedDate\" field should be set with a date of document removal');\n  test.equal(SoftremovesB.find().count(), 1, 'Wrong number of fetched documents from the \"Collection.find()\" method call');\n  test.equal(SoftremoveB.find().count(), 0, 'Wrong number of fetched documents from the \"Class.find()\" method call');\n\n  var softremoveC = new SoftremoveC();\n  softremoveC.save();\n  softremoveC.softRemove();\n  test.isUndefined(softremoveC.get('removedAt'), 'The \"removedAt\" field should not be available');\n  test.equal(SoftremovesC.find().count(), 1, 'Wrong number of fetched documents from the \"Collection.find()\" method call');\n  test.equal(SoftremoveC.find().count(), 0, 'Wrong number of fetched documents from the \"Class.find()\" method call');\n});","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/test/behaviors/behaviors_softremove.js"],"names":[],"mappings":"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","file":"/packages/jagi:astronomy/test/behaviors/behaviors_softremove.js.map","sourcesContent":["Tinytest.add('Behaviors - Softremove', function(test) {\n  // Reset Astro.\n  reset();\n\n  SoftremovesA = new Mongo.Collection(null);\n  SoftremovesB = new Mongo.Collection(null);\n  SoftremovesC = new Mongo.Collection(null);\n\n  SoftremovesA.find({}, {\n    transform: null\n  }).forEach(function(item) {\n    SoftremovesA.remove(item._id);\n  });\n\n  SoftremovesB.find({}, {\n    transform: null\n  }).forEach(function(item) {\n    SoftremovesB.remove(item._id);\n  });\n\n  SoftremovesC.find({}, {\n    transform: null\n  }).forEach(function(item) {\n    SoftremovesC.remove(item._id);\n  });\n\n  var SoftremoveA = Astro.Class.create({\n    name: 'SoftremoveA',\n    collection: SoftremovesA,\n    fields: {\n      name: 'string'\n    },\n    behaviors: {\n      softremove: {}\n    }\n  });\n\n  var SoftremoveB = Astro.Class.create({\n    name: 'SoftremoveB',\n    collection: SoftremovesB,\n    fields: {\n      name: 'string'\n    },\n    behaviors: {\n      softremove: {\n        removedFieldName: 'deleted',\n        hasRemovedAtField: true,\n        removedAtFieldName: 'removedDate'\n      }\n    }\n  });\n\n  var SoftremoveC = Astro.Class.create({\n    name: 'SoftremoveC',\n    collection: SoftremovesC,\n    fields: {\n      name: 'string'\n    },\n    behaviors: {\n      softremove: {\n        hasRemovedAtField: false\n      }\n    }\n  });\n\n  var softremoveA = new SoftremoveA();\n  softremoveA.save();\n  softremoveA.softRemove();\n  test.isTrue(softremoveA.get('removed'),\n    'The \"removed\" flag should be set after soft removing document'\n  );\n  test.instanceOf(softremoveA.get('removedAt'), Date,\n    'The \"removedAt\" field should be set with a date of document removal'\n  );\n  test.equal(SoftremovesA.find().count(), 1,\n    'Wrong number of fetched documents from the \"Collection.find()\" method call'\n  );\n  test.equal(SoftremoveA.find().count(), 0,\n    'Wrong number of fetched documents from the \"Class.find()\" method call'\n  );\n\n  var softremoveB = new SoftremoveB();\n  softremoveB.save();\n  softremoveB.softRemove();\n  test.isTrue(softremoveB.get('deleted'),\n    'The \"deleted\" flag should be set after soft removing document'\n  );\n  test.instanceOf(softremoveB.get('removedDate'), Date,\n    'The \"removedDate\" field should be set with a date of document removal'\n  );\n  test.equal(SoftremovesB.find().count(), 1,\n    'Wrong number of fetched documents from the \"Collection.find()\" method call'\n  );\n  test.equal(SoftremoveB.find().count(), 0,\n    'Wrong number of fetched documents from the \"Class.find()\" method call'\n  );\n\n  var softremoveC = new SoftremoveC();\n  softremoveC.save();\n  softremoveC.softRemove();\n  test.isUndefined(softremoveC.get('removedAt'),\n    'The \"removedAt\" field should not be available'\n  );\n  test.equal(SoftremovesC.find().count(), 1,\n    'Wrong number of fetched documents from the \"Collection.find()\" method call'\n  );\n  test.equal(SoftremoveC.find().count(), 0,\n    'Wrong number of fetched documents from the \"Class.find()\" method call'\n  );\n});\n"]},"hash":"3837f1b59cc9300fa951c42b0c73ca529f9d9703"}
