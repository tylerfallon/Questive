{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/accounts-password/password_tests.js","filenameRelative":"/packages/accounts-password/password_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/accounts-password/password_tests.js.map","sourceFileName":"/packages/accounts-password/password_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"password_tests"},"ignored":false,"code":"Accounts._noConnectionCloseDelayForTest = true;\n\nif (Meteor.isServer) {\n  Accounts.removeDefaultRateLimit();\n\n  Meteor.methods({\n    getResetToken: function getResetToken() {\n      var token = Meteor.users.findOne(this.userId).services.password.reset;\n      return token;\n    },\n    addSkipCaseInsensitiveChecksForTest: function addSkipCaseInsensitiveChecksForTest(value) {\n      Accounts._skipCaseInsensitiveChecksForTest[value] = true;\n    },\n    removeSkipCaseInsensitiveChecksForTest: function removeSkipCaseInsensitiveChecksForTest(value) {\n      delete Accounts._skipCaseInsensitiveChecksForTest[value];\n    },\n    countUsersOnServer: function countUsersOnServer(query) {\n      return Meteor.users.find(query).count();\n    }\n  });\n}\n\nif (Meteor.isClient) (function () {\n\n  // XXX note, only one test can do login/logout things at once! for\n  // now, that is this test.\n\n  Accounts._isolateLoginTokenForTest();\n\n  var addSkipCaseInsensitiveChecksForTest = function addSkipCaseInsensitiveChecksForTest(value, test, expect) {\n    Meteor.call('addSkipCaseInsensitiveChecksForTest', value);\n  };\n\n  var removeSkipCaseInsensitiveChecksForTest = function removeSkipCaseInsensitiveChecksForTest(value, test, expect) {\n    Meteor.call('removeSkipCaseInsensitiveChecksForTest', value);\n  };\n\n  var createUserStep = function createUserStep(test, expect) {\n    // Hack because Tinytest does not clean the database between tests/runs\n    this.randomSuffix = Random.id(10);\n    this.username = 'AdaLovelace' + this.randomSuffix;\n    this.email = \"Ada-intercept@lovelace.com\" + this.randomSuffix;\n    this.password = 'password';\n    Accounts.createUser({ username: this.username, email: this.email, password: this.password }, loggedInAs(this.username, test, expect));\n  };\n  var logoutStep = function logoutStep(test, expect) {\n    Meteor.logout(expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n      test.equal(Meteor.user(), null);\n    }));\n  };\n  var loggedInAs = function loggedInAs(someUsername, test, expect) {\n    return expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n      test.equal(Meteor.userId() && Meteor.user().username, someUsername);\n    });\n  };\n  var loggedInUserHasEmail = function loggedInUserHasEmail(someEmail, test, expect) {\n    return expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n      var user = Meteor.user();\n      test.isTrue(user && _.some(user.emails, function (email) {\n        return email.address === someEmail;\n      }));\n    });\n  };\n  var expectError = function expectError(expectedError, test, expect) {\n    return expect(function (actualError) {\n      test.equal(actualError && actualError.error, expectedError.error);\n      test.equal(actualError && actualError.reason, expectedError.reason);\n    });\n  };\n  var expectUserNotFound = function expectUserNotFound(test, expect) {\n    return expectError(new Meteor.Error(403, \"User not found\"), test, expect);\n  };\n  var waitForLoggedOutStep = function waitForLoggedOutStep(test, expect) {\n    pollUntil(expect, function () {\n      return Meteor.userId() === null;\n    }, 10 * 1000, 100);\n  };\n  var invalidateLoginsStep = function invalidateLoginsStep(test, expect) {\n    Meteor.call(\"testInvalidateLogins\", 'fail', expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n  var hideActualLoginErrorStep = function hideActualLoginErrorStep(test, expect) {\n    Meteor.call(\"testInvalidateLogins\", 'hide', expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n  var validateLoginsStep = function validateLoginsStep(test, expect) {\n    Meteor.call(\"testInvalidateLogins\", false, expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n\n  testAsyncMulti(\"passwords - basic login with password\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.email = Random.id() + '-intercept@example.com';\n    this.password = 'password';\n\n    Accounts.createUser({ username: this.username, email: this.email, password: this.password }, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    test.notEqual(Meteor.userId(), null);\n  }, logoutStep, function (test, expect) {\n    Meteor.loginWithPassword(this.username, this.password, loggedInAs(this.username, test, expect));\n  }, logoutStep,\n  // This next step tests reactive contexts which are reactive on\n  // Meteor.user().\n  function (test, expect) {\n    // Set up a reactive context that only refreshes when Meteor.user() is\n    // invalidated.\n    var loaded = false;\n    var handle = Tracker.autorun(function () {\n      if (Meteor.user() && Meteor.user().emails) loaded = true;\n    });\n    // At the beginning, we're not logged in.\n    test.isFalse(loaded);\n    Meteor.loginWithPassword(this.username, this.password, expect(function (error) {\n      test.equal(error, undefined);\n      test.notEqual(Meteor.userId(), null);\n      // By the time of the login callback, the user should be loaded.\n      test.isTrue(Meteor.user().emails);\n      // Flushing should get us the rerun as well.\n      Tracker.flush();\n      test.isTrue(loaded);\n      handle.stop();\n    }));\n  }, logoutStep, function (test, expect) {\n    Meteor.loginWithPassword({ username: this.username }, this.password, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    Meteor.loginWithPassword(this.email, this.password, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    Meteor.loginWithPassword({ email: this.email }, this.password, loggedInAs(this.username, test, expect));\n  }, logoutStep]);\n\n  testAsyncMulti(\"passwords - plain text passwords\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.email = Random.id() + '-intercept@example.com';\n    this.password = 'password';\n\n    // create user with raw password (no API, need to invoke callLoginMethod\n    // directly)\n    Accounts.callLoginMethod({\n      methodName: 'createUser',\n      methodArguments: [{ username: this.username, password: this.password }],\n      userCallback: loggedInAs(this.username, test, expect)\n    });\n  }, logoutStep,\n  // check can login normally with this password.\n  function (test, expect) {\n    Meteor.loginWithPassword({ username: this.username }, this.password, loggedInAs(this.username, test, expect));\n  }, logoutStep,\n  // plain text password. no API for this, have to invoke callLoginMethod\n  // directly.\n  function (test, expect) {\n    Accounts.callLoginMethod({\n      // wrong password\n      methodArguments: [{ user: { username: this.username }, password: 'wrong' }],\n      userCallback: expect(function (error) {\n        test.isTrue(error);\n        test.isFalse(Meteor.user());\n      }) });\n  }, function (test, expect) {\n    Accounts.callLoginMethod({\n      // right password\n      methodArguments: [{ user: { username: this.username },\n        password: this.password }],\n      userCallback: loggedInAs(this.username, test, expect)\n    });\n  }, logoutStep]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username\", [createUserStep, logoutStep,\n  // We should be able to log in with the username in lower case\n  function (test, expect) {\n    Meteor.loginWithPassword({ username: \"adalovelace\" + this.randomSuffix }, this.password, loggedInAs(this.username, test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" + \"with non-ASCII characters\", [function (test, expect) {\n    // Hack because Tinytest does not clean the database between tests/runs\n    this.randomSuffix = Random.id(10);\n    this.username = '√ÅdaL√òvelaüòàe' + this.randomSuffix;\n    this.password = 'password';\n    Accounts.createUser({ username: this.username, email: this.email, password: this.password }, loggedInAs(this.username, test, expect));\n  }, logoutStep,\n  // We should be able to log in with the username in lower case\n  function (test, expect) {\n    Meteor.loginWithPassword({ username: \"√°dal√∏velaüòàe\" + this.randomSuffix }, this.password, loggedInAs(this.username, test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" + \"should escape regex special characters\", [createUserStep, logoutStep,\n  // We shouldn't be able to log in with a regex expression for the username\n  function (test, expect) {\n    Meteor.loginWithPassword({ username: \".+\" + this.randomSuffix }, this.password, expectUserNotFound(test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" + \"should require a match of the full string\", [createUserStep, logoutStep,\n  // We shouldn't be able to log in with a partial match for the username\n  function (test, expect) {\n    Meteor.loginWithPassword({ username: \"lovelace\" + this.randomSuffix }, this.password, expectUserNotFound(test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username when \" + \"there are multiple matches\", [createUserStep, logoutStep, function (test, expect) {\n    this.otherUsername = 'Adalovelace' + this.randomSuffix;\n    addSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n  },\n  // Create another user with a username that only differs in case\n  function (test, expect) {\n    Accounts.createUser({ username: this.otherUsername, password: this.password }, loggedInAs(this.otherUsername, test, expect));\n  }, function (test, expect) {\n    removeSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n  },\n  // We shouldn't be able to log in with the username in lower case\n  function (test, expect) {\n    Meteor.loginWithPassword({ username: \"adalovelace\" + this.randomSuffix }, this.password, expectUserNotFound(test, expect));\n  },\n  // We should still be able to log in with the username in original case\n  function (test, expect) {\n    Meteor.loginWithPassword({ username: this.username }, this.password, loggedInAs(this.username, test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - creating users with the same case insensitive \" + \"username\", [createUserStep, logoutStep,\n  // Attempting to create another user with a username that only differs in\n  // case should fail\n  function (test, expect) {\n    this.newUsername = 'adalovelace' + this.randomSuffix;\n    Accounts.createUser({ username: this.newUsername, password: this.password }, expectError(new Meteor.Error(403, \"Username already exists.\"), test, expect));\n  },\n  // Make sure the new user has not been inserted\n  function (test, expect) {\n    Meteor.call('countUsersOnServer', { username: this.newUsername }, expect(function (error, result) {\n      test.equal(result, 0);\n    }));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email\", [createUserStep, logoutStep,\n  // We should be able to log in with the email in lower case\n  function (test, expect) {\n    Meteor.loginWithPassword({ email: \"ada-intercept@lovelace.com\" + this.randomSuffix }, this.password, loggedInAs(this.username, test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email should \" + \"escape regex special characters\", [createUserStep, logoutStep,\n  // We shouldn't be able to log in with a regex expression for the email\n  function (test, expect) {\n    Meteor.loginWithPassword({ email: \".+\" + this.randomSuffix }, this.password, expectUserNotFound(test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email should \" + \"require a match of the full string\", [createUserStep, logoutStep,\n  // We shouldn't be able to log in with a partial match for the email\n  function (test, expect) {\n    Meteor.loginWithPassword({ email: \"com\" + this.randomSuffix }, this.password, expectUserNotFound(test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email when \" + \"there are multiple matches\", [createUserStep, logoutStep, function (test, expect) {\n    this.otherUsername = 'AdaLovelace' + Random.id(10);\n    this.otherEmail = \"ADA-intercept@lovelace.com\" + this.randomSuffix;\n    addSkipCaseInsensitiveChecksForTest(this.otherEmail, test, expect);\n  },\n  // Create another user with an email that only differs in case\n  function (test, expect) {\n    Accounts.createUser({ username: this.otherUsername,\n      email: this.otherEmail,\n      password: this.password }, loggedInAs(this.otherUsername, test, expect));\n  }, function (test, expect) {\n    removeSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n  }, logoutStep,\n  // We shouldn't be able to log in with the email in lower case\n  function (test, expect) {\n    Meteor.loginWithPassword({ email: \"ada-intercept@lovelace.com\" + this.randomSuffix }, this.password, expectUserNotFound(test, expect));\n  },\n  // We should still be able to log in with the email in original case\n  function (test, expect) {\n    Meteor.loginWithPassword({ email: this.email }, this.password, loggedInAs(this.username, test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - creating users with the same case insensitive \" + \"email\", [createUserStep, logoutStep,\n  // Attempting to create another user with an email that only differs in\n  // case should fail\n  function (test, expect) {\n    this.newEmail = \"ada-intercept@lovelace.com\" + this.randomSuffix;\n    Accounts.createUser({ email: this.newEmail, password: this.password }, expectError(new Meteor.Error(403, \"Email already exists.\"), test, expect));\n  },\n  // Make sure the new user has not been inserted\n  function (test, expect) {\n    Meteor.call('countUsersOnServer', { 'emails.address': this.newEmail }, expect(function (error, result) {\n      test.equal(result, 0);\n    }));\n  }]);\n\n  testAsyncMulti(\"passwords - changing passwords\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.email = Random.id() + '-intercept@example.com';\n    this.password = 'password';\n    this.password2 = 'password2';\n\n    Accounts.createUser({ username: this.username, email: this.email, password: this.password }, loggedInAs(this.username, test, expect));\n  },\n  // Send a password reset email so that we can test that password\n  // reset tokens get deleted on password change.\n  function (test, expect) {\n    Meteor.call(\"forgotPassword\", { email: this.email }, expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    var self = this;\n    Meteor.call(\"getResetToken\", expect(function (err, token) {\n      test.isFalse(err);\n      test.isTrue(token);\n      self.token = token;\n    }));\n  },\n  // change password with bad old password. we stay logged in.\n  function (test, expect) {\n    var self = this;\n    Accounts.changePassword('wrong', 'doesntmatter', expect(function (error) {\n      test.isTrue(error);\n      test.equal(Meteor.user().username, self.username);\n    }));\n  },\n  // change password with good old password.\n  function (test, expect) {\n    Accounts.changePassword(this.password, this.password2, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    Meteor.call(\"getResetToken\", expect(function (err, token) {\n      test.isFalse(err);\n      test.isFalse(token);\n    }));\n  }, logoutStep,\n  // old password, failed login\n  function (test, expect) {\n    Meteor.loginWithPassword(this.email, this.password, expect(function (error) {\n      test.isTrue(error);\n      test.isFalse(Meteor.user());\n    }));\n  },\n  // new password, success\n  function (test, expect) {\n    Meteor.loginWithPassword(this.email, this.password2, loggedInAs(this.username, test, expect));\n  }, logoutStep]);\n\n  testAsyncMulti(\"passwords - changing password logs out other clients\", [function (test, expect) {\n    this.username = Random.id();\n    this.email = Random.id() + '-intercept@example.com';\n    this.password = 'password';\n    this.password2 = 'password2';\n    Accounts.createUser({ username: this.username, email: this.email, password: this.password }, loggedInAs(this.username, test, expect));\n  },\n  // Log in a second connection as this user.\n  function (test, expect) {\n    var self = this;\n\n    self.secondConn = DDP.connect(Meteor.absoluteUrl());\n    self.secondConn.call('login', { user: { username: self.username }, password: self.password }, expect(function (err, result) {\n      test.isFalse(err);\n      self.secondConn.setUserId(result.id);\n      test.isTrue(self.secondConn.userId());\n\n      self.secondConn.onReconnect = function () {\n        self.secondConn.apply('login', [{ resume: result.token }], { wait: true }, function (err, result) {\n          self.secondConn.setUserId(result && result.id || null);\n        });\n      };\n    }));\n  }, function (test, expect) {\n    var self = this;\n    Accounts.changePassword(self.password, self.password2, expect(function (err) {\n      test.isFalse(err);\n    }));\n  },\n  // Now that we've changed the password, wait until the second\n  // connection gets logged out.\n  function (test, expect) {\n    var self = this;\n    pollUntil(expect, function () {\n      return self.secondConn.userId() === null;\n    }, 10 * 1000, 100);\n  }]);\n\n  testAsyncMulti(\"passwords - new user hooks\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.email = Random.id() + '-intercept@example.com';\n    this.password = 'password';\n  },\n  // test Accounts.validateNewUser\n  function (test, expect) {\n    Accounts.createUser({ username: this.username, password: this.password,\n      // should fail the new user validators\n      profile: { invalid: true } }, expect(function (error) {\n      test.equal(error.error, 403);\n      test.equal(error.reason, \"User validation failed\");\n    }));\n  }, logoutStep, function (test, expect) {\n    Accounts.createUser({ username: this.username, password: this.password,\n      // should fail the new user validator with a special\n      // exception\n      profile: { invalidAndThrowException: true } }, expect(function (error) {\n      test.equal(error.reason, \"An exception thrown within Accounts.validateNewUser\");\n    }));\n  },\n  // test Accounts.onCreateUser\n  function (test, expect) {\n    Accounts.createUser({ username: this.username, password: this.password,\n      testOnCreateUserHook: true }, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    test.equal(Meteor.user().profile.touchedByOnCreateUser, true);\n  }, logoutStep]);\n\n  testAsyncMulti(\"passwords - Meteor.user()\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.password = 'password';\n\n    Accounts.createUser({ username: this.username, password: this.password,\n      testOnCreateUserHook: true }, loggedInAs(this.username, test, expect));\n  },\n  // test Meteor.user(). This test properly belongs in\n  // accounts-base/accounts_tests.js, but this is where the tests that\n  // actually log in are.\n  function (test, expect) {\n    var self = this;\n    var clientUser = Meteor.user();\n    Accounts.connection.call('testMeteorUser', expect(function (err, result) {\n      test.equal(result._id, clientUser._id);\n      test.equal(result.username, clientUser.username);\n      test.equal(result.username, self.username);\n      test.equal(result.profile.touchedByOnCreateUser, true);\n      test.equal(err, undefined);\n    }));\n  }, function (test, expect) {\n    // Test that even with no published fields, we still have a document.\n    Accounts.connection.call('clearUsernameAndProfile', expect(function () {\n      test.isTrue(Meteor.userId());\n      var user = Meteor.user();\n      test.equal(user, { _id: Meteor.userId() });\n    }));\n  }, logoutStep, function (test, expect) {\n    var clientUser = Meteor.user();\n    test.equal(clientUser, null);\n    test.equal(Meteor.userId(), null);\n    Accounts.connection.call('testMeteorUser', expect(function (err, result) {\n      test.equal(err, undefined);\n      test.equal(result, null);\n    }));\n  }]);\n\n  testAsyncMulti(\"passwords - allow rules\", [\n  // create a second user to have an id for in a later test\n  function (test, expect) {\n    this.otherUsername = Random.id();\n    Accounts.createUser({ username: this.otherUsername, password: 'dontcare',\n      testOnCreateUserHook: true }, loggedInAs(this.otherUsername, test, expect));\n  }, function (test, expect) {\n    this.otherUserId = Meteor.userId();\n  }, function (test, expect) {\n    // real setup\n    this.username = Random.id();\n    this.password = 'password';\n\n    Accounts.createUser({ username: this.username, password: this.password,\n      testOnCreateUserHook: true }, loggedInAs(this.username, test, expect));\n  },\n  // test the default Meteor.users allow rule. This test properly belongs in\n  // accounts-base/accounts_tests.js, but this is where the tests that\n  // actually log in are.\n  function (test, expect) {\n    this.userId = Meteor.userId();\n    test.notEqual(this.userId, null);\n    test.notEqual(this.userId, this.otherUserId);\n    // Can't update fields other than profile.\n    Meteor.users.update(this.userId, { $set: { disallowed: true, 'profile.updated': 42 } }, expect(function (err) {\n      test.isTrue(err);\n      test.equal(err.error, 403);\n      test.isFalse(_.has(Meteor.user(), 'disallowed'));\n      test.isFalse(_.has(Meteor.user().profile, 'updated'));\n    }));\n  }, function (test, expect) {\n    // Can't update another user.\n    Meteor.users.update(this.otherUserId, { $set: { 'profile.updated': 42 } }, expect(function (err) {\n      test.isTrue(err);\n      test.equal(err.error, 403);\n    }));\n  }, function (test, expect) {\n    // Can't update using a non-ID selector. (This one is thrown client-side.)\n    test.throws(function () {\n      Meteor.users.update({ username: this.username }, { $set: { 'profile.updated': 42 } });\n    });\n    test.isFalse(_.has(Meteor.user().profile, 'updated'));\n  }, function (test, expect) {\n    // Can update own profile using ID.\n    Meteor.users.update(this.userId, { $set: { 'profile.updated': 42 } }, expect(function (err) {\n      test.isFalse(err);\n      test.equal(42, Meteor.user().profile.updated);\n    }));\n  }, logoutStep]);\n\n  testAsyncMulti(\"passwords - tokens\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.password = 'password';\n\n    Accounts.createUser({ username: this.username, password: this.password }, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    // we can't login with an invalid token\n    var expectLoginError = expect(function (err) {\n      test.isTrue(err);\n    });\n    Meteor.loginWithToken('invalid', expectLoginError);\n  }, function (test, expect) {\n    // we can login with a valid token\n    var expectLoginOK = expect(function (err) {\n      test.isFalse(err);\n    });\n    Meteor.loginWithToken(Accounts._storedLoginToken(), expectLoginOK);\n  }, function (test, expect) {\n    // test logging out invalidates our token\n    var expectLoginError = expect(function (err) {\n      test.isTrue(err);\n    });\n    var token = Accounts._storedLoginToken();\n    test.isTrue(token);\n    Meteor.logout(function () {\n      Meteor.loginWithToken(token, expectLoginError);\n    });\n  }, function (test, expect) {\n    var self = this;\n    // Test that login tokens get expired. We should get logged out when a\n    // token expires, and not be able to log in again with the same token.\n    var expectNoError = expect(function (err) {\n      test.isFalse(err);\n    });\n\n    Meteor.loginWithPassword(this.username, this.password, function (error) {\n      self.token = Accounts._storedLoginToken();\n      test.isTrue(self.token);\n      expectNoError(error);\n      Accounts.connection.call(\"expireTokens\");\n    });\n  }, waitForLoggedOutStep, function (test, expect) {\n    var token = Accounts._storedLoginToken();\n    test.isFalse(token);\n  }, function (test, expect) {\n    // Test that once expireTokens is finished, we can't login again with our\n    // previous token.\n    Meteor.loginWithToken(this.token, expect(function (err, result) {\n      test.isTrue(err);\n      test.equal(Meteor.userId(), null);\n    }));\n  }, logoutStep, function (test, expect) {\n    var self = this;\n    // Test that Meteor.logoutOtherClients logs out a second\n    // authentcated connection while leaving Accounts.connection\n    // logged in.\n    var secondConn = DDP.connect(Meteor.absoluteUrl());\n    var token;\n\n    var expectSecondConnLoggedOut = expect(function (err, result) {\n      test.isTrue(err);\n    });\n\n    var expectAccountsConnLoggedIn = expect(function (err, result) {\n      test.isFalse(err);\n    });\n\n    var expectSecondConnLoggedIn = expect(function (err, result) {\n      test.equal(result.token, token);\n      test.isFalse(err);\n      Meteor.logoutOtherClients(function (err) {\n        test.isFalse(err);\n        secondConn.call('login', { resume: token }, expectSecondConnLoggedOut);\n        Accounts.connection.call('login', {\n          resume: Accounts._storedLoginToken()\n        }, expectAccountsConnLoggedIn);\n      });\n    });\n\n    Meteor.loginWithPassword(self.username, self.password, expect(function (err) {\n      test.isFalse(err);\n      token = Accounts._storedLoginToken();\n      test.isTrue(token);\n      secondConn.call('login', { resume: token }, expectSecondConnLoggedIn);\n    }));\n  }, logoutStep,\n\n  // The tests below this point are for the deprecated\n  // `logoutOtherClients` method.\n\n  function (test, expect) {\n    var self = this;\n\n    // Test that Meteor.logoutOtherClients logs out a second authenticated\n    // connection while leaving Accounts.connection logged in.\n    var token;\n    self.secondConn = DDP.connect(Meteor.absoluteUrl());\n\n    var expectLoginError = expect(function (err) {\n      test.isTrue(err);\n    });\n    var expectValidToken = expect(function (err, result) {\n      test.isFalse(err);\n      test.isTrue(result);\n      self.tokenFromLogoutOthers = result.token;\n    });\n    var expectSecondConnLoggedIn = expect(function (err, result) {\n      test.equal(result.token, token);\n      test.isFalse(err);\n      // This test will fail if an unrelated reconnect triggers before the\n      // connection is logged out. In general our tests aren't resilient to\n      // mid-test reconnects.\n      self.secondConn.onReconnect = function () {\n        self.secondConn.call(\"login\", { resume: token }, expectLoginError);\n      };\n      Accounts.connection.call(\"logoutOtherClients\", expectValidToken);\n    });\n\n    Meteor.loginWithPassword(this.username, this.password, expect(function (err) {\n      test.isFalse(err);\n      token = Accounts._storedLoginToken();\n      self.beforeLogoutOthersToken = token;\n      test.isTrue(token);\n      self.secondConn.call(\"login\", { resume: token }, expectSecondConnLoggedIn);\n    }));\n  },\n  // Test that logoutOtherClients logged out Accounts.connection and that the\n  // previous token is no longer valid.\n  waitForLoggedOutStep, function (test, expect) {\n    var self = this;\n    var token = Accounts._storedLoginToken();\n    test.isFalse(token);\n    this.secondConn.close();\n    Meteor.loginWithToken(self.beforeLogoutOthersToken, expect(function (err) {\n      test.isTrue(err);\n      test.isFalse(Meteor.userId());\n    }));\n  },\n  // Test that logoutOtherClients returned a new token that we can use to\n  // log in.\n  function (test, expect) {\n    var self = this;\n    Meteor.loginWithToken(self.tokenFromLogoutOthers, expect(function (err) {\n      test.isFalse(err);\n      test.isTrue(Meteor.userId());\n    }));\n  }, logoutStep, function (test, expect) {\n    var self = this;\n    // Test that deleting a user logs out that user's connections.\n    Meteor.loginWithPassword(this.username, this.password, expect(function (err) {\n      test.isFalse(err);\n      Accounts.connection.call(\"removeUser\", self.username);\n    }));\n  }, waitForLoggedOutStep]);\n\n  testAsyncMulti(\"passwords - validateLoginAttempt\", [function (test, expect) {\n    this.username = Random.id();\n    this.password = \"password\";\n\n    Accounts.createUser({ username: this.username, password: this.password }, loggedInAs(this.username, test, expect));\n  }, logoutStep, invalidateLoginsStep, function (test, expect) {\n    Meteor.loginWithPassword(this.username, this.password, expect(function (error) {\n      test.isTrue(error);\n      test.equal(error.reason, \"Login forbidden\");\n    }));\n  }, validateLoginsStep, function (test, expect) {\n    Meteor.loginWithPassword(\"no such user\", \"some password\", expect(function (error) {\n      test.isTrue(error);\n      test.equal(error.reason, 'User not found');\n    }));\n  }, hideActualLoginErrorStep, function (test, expect) {\n    Meteor.loginWithPassword(\"no such user\", \"some password\", expect(function (error) {\n      test.isTrue(error);\n      test.equal(error.reason, 'hide actual error');\n    }));\n  }, validateLoginsStep]);\n\n  testAsyncMulti(\"passwords - server onLogin hook\", [function (test, expect) {\n    Meteor.call(\"testCaptureLogins\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    this.username = Random.id();\n    this.password = \"password\";\n\n    Accounts.createUser({ username: this.username, password: this.password }, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    var self = this;\n    Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n      test.isFalse(error);\n      test.equal(logins.length, 1);\n      var login = logins[0];\n      test.isTrue(login.successful);\n      var attempt = login.attempt;\n      test.equal(attempt.type, \"password\");\n      test.isTrue(attempt.allowed);\n      test.equal(attempt.methodArguments[0].username, self.username);\n    }));\n  }]);\n\n  testAsyncMulti(\"passwords - client onLogin hook\", [function (test, expect) {\n    var self = this;\n    this.username = Random.id();\n    this.password = \"password\";\n    this.attempt = false;\n\n    this.onLogin = Accounts.onLogin(function (attempt) {\n      self.attempt = true;\n    });\n\n    Accounts.createUser({ username: this.username, password: this.password }, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    this.onLogin.stop();\n    test.isTrue(this.attempt);\n    expect(function () {})();\n  }]);\n\n  testAsyncMulti(\"passwords - server onLogout hook\", [function (test, expect) {\n    Meteor.call(\"testCaptureLogouts\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    this.username = Random.id();\n    this.password = \"password\";\n\n    Accounts.createUser({ username: this.username, password: this.password }, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    var self = this;\n    Meteor.call(\"testFetchCapturedLogouts\", expect(function (error, logouts) {\n      test.isFalse(error);\n      test.equal(logouts.length, 1);\n      var logout = logouts[0];\n      test.isTrue(logout.successful);\n    }));\n  }]);\n\n  testAsyncMulti(\"passwords - client onLogout hook\", [function (test, expect) {\n    var self = this;\n    this.username = Random.id();\n    this.password = \"password\";\n    this.attempt = false;\n\n    this.onLogout = Accounts.onLogout(function () {\n      self.logoutSuccess = true;\n    });\n\n    Accounts.createUser({ username: this.username, password: this.password }, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    test.isTrue(this.logoutSuccess);\n    expect(function () {})();\n  }]);\n\n  testAsyncMulti(\"passwords - server onLoginFailure hook\", [function (test, expect) {\n    this.username = Random.id();\n    this.password = \"password\";\n\n    Accounts.createUser({ username: this.username, password: this.password }, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    Meteor.call(\"testCaptureLogins\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    Meteor.loginWithPassword(this.username, \"incorrect\", expect(function (error) {\n      test.isTrue(error);\n    }));\n  }, function (test, expect) {\n    Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n      test.isFalse(error);\n      test.equal(logins.length, 1);\n      var login = logins[0];\n      test.isFalse(login.successful);\n      var attempt = login.attempt;\n      test.equal(attempt.type, \"password\");\n      test.isFalse(attempt.allowed);\n      test.equal(attempt.error.reason, \"Incorrect password\");\n    }));\n  }, function (test, expect) {\n    Meteor.call(\"testCaptureLogins\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    Meteor.loginWithPassword(\"no such user\", \"incorrect\", expect(function (error) {\n      test.isTrue(error);\n    }));\n  }, function (test, expect) {\n    Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n      test.isFalse(error);\n      test.equal(logins.length, 1);\n      var login = logins[0];\n      test.isFalse(login.successful);\n      var attempt = login.attempt;\n      test.equal(attempt.type, \"password\");\n      test.isFalse(attempt.allowed);\n      test.equal(attempt.error.reason, \"User not found\");\n    }));\n  }]);\n\n  testAsyncMulti(\"passwords - client onLoginFailure hook\", [function (test, expect) {\n    var self = this;\n    this.username = Random.id();\n    this.password = \"password\";\n    this.attempt = false;\n\n    this.onLoginFailure = Accounts.onLoginFailure(function () {\n      self.attempt = true;\n    });\n\n    Accounts.createUser({ username: this.username, password: this.password }, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    Meteor.call(\"testCaptureLogins\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    Meteor.loginWithPassword(this.username, \"incorrect\", expect(function (error) {\n      test.isTrue(error);\n    }));\n  }, function (test, expect) {\n    this.onLoginFailure.stop();\n    test.isTrue(this.attempt);\n    expect(function () {})();\n  }]);\n\n  testAsyncMulti(\"passwords - srp to bcrypt upgrade\", [logoutStep,\n  // Create user with old SRP credentials in the database.\n  function (test, expect) {\n    var self = this;\n    Meteor.call(\"testCreateSRPUser\", expect(function (error, result) {\n      test.isFalse(error);\n      self.username = result;\n    }));\n  },\n  // We are able to login with the old style credentials in the database.\n  function (test, expect) {\n    Meteor.loginWithPassword(this.username, 'abcdef', expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    Meteor.call(\"testSRPUpgrade\", this.username, expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, logoutStep,\n  // After the upgrade to bcrypt we're still able to login.\n  function (test, expect) {\n    Meteor.loginWithPassword(this.username, 'abcdef', expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, logoutStep, function (test, expect) {\n    Meteor.call(\"removeUser\", this.username, expect(function (error) {\n      test.isFalse(error);\n    }));\n  }]);\n\n  testAsyncMulti(\"passwords - srp to bcrypt upgrade via password change\", [logoutStep,\n  // Create user with old SRP credentials in the database.\n  function (test, expect) {\n    var self = this;\n    Meteor.call(\"testCreateSRPUser\", expect(function (error, result) {\n      test.isFalse(error);\n      self.username = result;\n    }));\n  },\n  // Log in with the plaintext password handler, which should NOT upgrade us to bcrypt.\n  function (test, expect) {\n    Accounts.callLoginMethod({\n      methodName: \"login\",\n      methodArguments: [{ user: { username: this.username }, password: \"abcdef\" }],\n      userCallback: expect(function (err) {\n        test.isFalse(err);\n      })\n    });\n  }, function (test, expect) {\n    Meteor.call(\"testNoSRPUpgrade\", this.username, expect(function (error) {\n      test.isFalse(error);\n    }));\n  },\n  // Changing our password should upgrade us to bcrypt.\n  function (test, expect) {\n    Accounts.changePassword(\"abcdef\", \"abcdefg\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    Meteor.call(\"testSRPUpgrade\", this.username, expect(function (error) {\n      test.isFalse(error);\n    }));\n  },\n  // And after the upgrade we should be able to change our password again.\n  function (test, expect) {\n    Accounts.changePassword(\"abcdefg\", \"abcdef\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, logoutStep]);\n})();\n\nif (Meteor.isServer) (function () {\n\n  Tinytest.add('passwords - setup more than one onCreateUserHook', function (test) {\n    test.throws(function () {\n      Accounts.onCreateUser(function () {});\n    });\n  });\n\n  Tinytest.add('passwords - createUser hooks', function (test) {\n    var username = Random.id();\n    test.throws(function () {\n      // should fail the new user validators\n      Accounts.createUser({ username: username, profile: { invalid: true } });\n    });\n\n    var userId = Accounts.createUser({ username: username,\n      testOnCreateUserHook: true });\n\n    test.isTrue(userId);\n    var user = Meteor.users.findOne(userId);\n    test.equal(user.profile.touchedByOnCreateUser, true);\n  });\n\n  Tinytest.add('passwords - setPassword', function (test) {\n    var username = Random.id();\n    var email = username + '-intercept@example.com';\n\n    var userId = Accounts.createUser({ username: username, email: email });\n\n    var user = Meteor.users.findOne(userId);\n    // no services yet.\n    test.equal(user.services.password, undefined);\n\n    // set a new password.\n    Accounts.setPassword(userId, 'new password');\n    user = Meteor.users.findOne(userId);\n    var oldSaltedHash = user.services.password.bcrypt;\n    test.isTrue(oldSaltedHash);\n\n    // Send a reset password email (setting a reset token) and insert a login\n    // token.\n    Accounts.sendResetPasswordEmail(userId, email);\n    Accounts._insertLoginToken(userId, Accounts._generateStampedLoginToken());\n    test.isTrue(Meteor.users.findOne(userId).services.password.reset);\n    test.isTrue(Meteor.users.findOne(userId).services.resume.loginTokens);\n\n    // reset with the same password, see we get a different salted hash\n    Accounts.setPassword(userId, 'new password', { logout: false });\n    user = Meteor.users.findOne(userId);\n    var newSaltedHash = user.services.password.bcrypt;\n    test.isTrue(newSaltedHash);\n    test.notEqual(oldSaltedHash, newSaltedHash);\n    // No more reset token.\n    test.isFalse(Meteor.users.findOne(userId).services.password.reset);\n    // But loginTokens are still here since we did logout: false.\n    test.isTrue(Meteor.users.findOne(userId).services.resume.loginTokens);\n\n    // reset again, see that the login tokens are gone.\n    Accounts.setPassword(userId, 'new password');\n    user = Meteor.users.findOne(userId);\n    var newerSaltedHash = user.services.password.bcrypt;\n    test.isTrue(newerSaltedHash);\n    test.notEqual(oldSaltedHash, newerSaltedHash);\n    test.notEqual(newSaltedHash, newerSaltedHash);\n    // No more tokens.\n    test.isFalse(Meteor.users.findOne(userId).services.password.reset);\n    test.isFalse(Meteor.users.findOne(userId).services.resume.loginTokens);\n\n    // cleanup\n    Meteor.users.remove(userId);\n  });\n\n  // This test properly belongs in accounts-base/accounts_tests.js, but\n  // this is where the tests that actually log in are.\n  Tinytest.add('accounts - user() out of context', function (test) {\n    // basic server context, no method.\n    test.throws(function () {\n      Meteor.user();\n    });\n  });\n\n  // XXX would be nice to test\n  // Accounts.config({forbidClientAccountCreation: true})\n\n  Tinytest.addAsync('passwords - login token observes get cleaned up', function (test, onComplete) {\n    var username = Random.id();\n    Accounts.createUser({\n      username: username,\n      password: 'password'\n    });\n\n    makeTestConnection(test, function (clientConn, serverConn) {\n      serverConn.onClose(function () {\n        test.isFalse(Accounts._getUserObserve(serverConn.id));\n        onComplete();\n      });\n      var result = clientConn.call('login', {\n        user: { username: username },\n        password: 'password'\n      });\n      test.isTrue(result);\n      var token = Accounts._getAccountData(serverConn.id, 'loginToken');\n      test.isTrue(token);\n\n      // We poll here, instead of just checking `_getUserObserve`\n      // once, because the login method defers the creation of the\n      // observe, and setting up the observe yields, so we could end\n      // up here before the observe has been set up.\n      simplePoll(function () {\n        return !!Accounts._getUserObserve(serverConn.id);\n      }, function () {\n        test.isTrue(Accounts._getUserObserve(serverConn.id));\n        clientConn.disconnect();\n      }, function () {\n        test.fail(\"timed out waiting for user observe for connection \" + serverConn.id);\n        onComplete();\n      });\n    }, onComplete);\n  });\n\n  Tinytest.add('passwords - reset password doesn\\t work if email changed after email sent', function (test) {\n    var username = Random.id();\n    var email = username + '-intercept@example.com';\n\n    var userId = Accounts.createUser({\n      username: username,\n      email: email,\n      password: \"old-password\"\n    });\n\n    var user = Meteor.users.findOne(userId);\n\n    Accounts.sendResetPasswordEmail(userId, email);\n\n    var resetPasswordEmailOptions = Meteor.call(\"getInterceptedEmails\", email)[0];\n\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n    var match = resetPasswordEmailOptions.text.match(re);\n    test.isTrue(match);\n    var resetPasswordToken = match[1];\n\n    var newEmail = Random.id() + '-new@example.com';\n    Meteor.users.update(userId, { $set: { \"emails.0.address\": newEmail } });\n\n    test.throws(function () {\n      Meteor.call(\"resetPassword\", resetPasswordToken, \"new-password\");\n    }, /Token has invalid email address/);\n    test.throws(function () {\n      Meteor.call(\"login\", { user: { username: username }, password: \"new-password\" });\n    }, /Incorrect password/);\n  });\n\n  Tinytest.addAsync('passwords - reset password should work when token is not expired', function (test, onComplete) {\n    var username = Random.id();\n    var email = username + '-intercept@example.com';\n\n    var userId = Accounts.createUser({\n      username: username,\n      email: email,\n      password: \"old-password\"\n    });\n\n    var user = Meteor.users.findOne(userId);\n\n    Accounts.sendResetPasswordEmail(userId, email);\n\n    var resetPasswordEmailOptions = Meteor.call(\"getInterceptedEmails\", email)[0];\n\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n    var match = resetPasswordEmailOptions.text.match(re);\n    test.isTrue(match);\n    var resetPasswordToken = match[1];\n\n    makeTestConnection(test, function (clientConn) {\n      test.isTrue(clientConn.call(\"resetPassword\", resetPasswordToken, \"new-password\"));\n\n      test.isTrue(clientConn.call(\"login\", {\n        user: { username: username },\n        password: \"new-password\"\n      }));\n\n      onComplete();\n    });\n  });\n\n  Tinytest.add('passwords - reset password should not work when token is expired', function (test) {\n    var username = Random.id();\n    var email = username + '-intercept@example.com';\n\n    var userId = Accounts.createUser({\n      username: username,\n      email: email,\n      password: \"old-password\"\n    });\n\n    var user = Meteor.users.findOne(userId);\n\n    Accounts.sendResetPasswordEmail(userId, email);\n\n    var resetPasswordEmailOptions = Meteor.call(\"getInterceptedEmails\", email)[0];\n\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n    var match = resetPasswordEmailOptions.text.match(re);\n    test.isTrue(match);\n    var resetPasswordToken = match[1];\n\n    Meteor.users.update(userId, { $set: { \"services.password.reset.when\": new Date(Date.now() + -5 * 24 * 3600 * 1000) } });\n\n    test.throws(function () {\n      Meteor.call(\"resetPassword\", resetPasswordToken, \"new-password\");\n    }, /Token expired/);\n    test.throws(function () {\n      Meteor.call(\"login\", { user: { username: username }, password: \"new-password\" });\n    }, /Incorrect password/);\n  });\n\n  Tinytest.add('passwords - reset tokens get cleaned up', function (test) {\n    var email = test.id + '-intercept@example.com';\n    var userId = Accounts.createUser({ email: email, password: 'password' });\n    Accounts.sendResetPasswordEmail(userId, email);\n    test.isTrue(!!Meteor.users.findOne(userId).services.password.reset);\n\n    Accounts._expirePasswordResetTokens(new Date(), userId);\n\n    test.isUndefined(Meteor.users.findOne(userId).services.password.reset);\n  });\n\n  // We should be able to change the username\n  Tinytest.add(\"passwords - change username\", function (test) {\n    var username = Random.id();\n    var userId = Accounts.createUser({\n      username: username\n    });\n\n    test.isTrue(userId);\n\n    var newUsername = Random.id();\n    Accounts.setUsername(userId, newUsername);\n\n    test.equal(Accounts._findUserByQuery({ id: userId }).username, newUsername);\n\n    // Test findUserByUsername as well while we're here\n    test.equal(Accounts.findUserByUsername(newUsername)._id, userId);\n  });\n\n  Tinytest.add(\"passwords - change username to a new one only differing \" + \"in case\", function (test) {\n    var username = Random.id() + \"user\";\n    var userId = Accounts.createUser({\n      username: username.toUpperCase()\n    });\n\n    test.isTrue(userId);\n\n    var newUsername = username.toLowerCase();\n    Accounts.setUsername(userId, newUsername);\n\n    test.equal(Accounts._findUserByQuery({ id: userId }).username, newUsername);\n  });\n\n  // We should not be able to change the username to one that only\n  // differs in case from an existing one\n  Tinytest.add(\"passwords - change username should fail when there are \" + \"existing users with a username only differing in case\", function (test) {\n    var username = Random.id() + \"user\";\n    var usernameUpper = username.toUpperCase();\n\n    var userId1 = Accounts.createUser({\n      username: username\n    });\n\n    var user2OriginalUsername = Random.id();\n    var userId2 = Accounts.createUser({\n      username: user2OriginalUsername\n    });\n\n    test.isTrue(userId1);\n    test.isTrue(userId2);\n\n    test.throws(function () {\n      Accounts.setUsername(userId2, usernameUpper);\n    }, /Username already exists/);\n\n    test.equal(Accounts._findUserByQuery({ id: userId2 }).username, user2OriginalUsername);\n  });\n\n  Tinytest.add(\"passwords - add email\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n\n    var thirdEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, thirdEmail, true);\n\n    test.equal(Accounts._findUserByQuery({ id: userId }).emails, [{ address: origEmail, verified: false }, { address: newEmail, verified: false }, { address: thirdEmail, verified: true }]);\n\n    // Test findUserByEmail as well while we're here\n    test.equal(Accounts.findUserByEmail(origEmail)._id, userId);\n  });\n\n  Tinytest.add(\"passwords - add email when the user has an existing email \" + \"only differing in case\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n\n    var thirdEmail = origEmail.toUpperCase();\n    Accounts.addEmail(userId, thirdEmail, true);\n\n    test.equal(Accounts._findUserByQuery({ id: userId }).emails, [{ address: thirdEmail, verified: true }, { address: newEmail, verified: false }]);\n  });\n\n  Tinytest.add(\"passwords - add email should fail when there is an existing \" + \"user with an email only differing in case\", function (test) {\n    var user1Email = Random.id() + \"@turing.com\";\n    var userId1 = Accounts.createUser({\n      email: user1Email\n    });\n\n    var user2Email = Random.id() + \"@turing.com\";\n    var userId2 = Accounts.createUser({\n      email: user2Email\n    });\n\n    var dupEmail = user1Email.toUpperCase();\n    test.throws(function () {\n      Accounts.addEmail(userId2, dupEmail);\n    }, /Email already exists/);\n\n    test.equal(Accounts._findUserByQuery({ id: userId1 }).emails, [{ address: user1Email, verified: false }]);\n\n    test.equal(Accounts._findUserByQuery({ id: userId2 }).emails, [{ address: user2Email, verified: false }]);\n  });\n\n  Tinytest.add(\"passwords - remove email\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n\n    var thirdEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, thirdEmail, true);\n\n    test.equal(Accounts._findUserByQuery({ id: userId }).emails, [{ address: origEmail, verified: false }, { address: newEmail, verified: false }, { address: thirdEmail, verified: true }]);\n\n    Accounts.removeEmail(userId, newEmail);\n\n    test.equal(Accounts._findUserByQuery({ id: userId }).emails, [{ address: origEmail, verified: false }, { address: thirdEmail, verified: true }]);\n\n    Accounts.removeEmail(userId, origEmail);\n\n    test.equal(Accounts._findUserByQuery({ id: userId }).emails, [{ address: thirdEmail, verified: true }]);\n  });\n})();","ast":null,"map":{"version":3,"sources":["/packages/accounts-password/password_tests.js"],"names":[],"mappings":"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","file":"/packages/accounts-password/password_tests.js.map","sourcesContent":["Accounts._noConnectionCloseDelayForTest = true;\n\nif (Meteor.isServer) {\n  Accounts.removeDefaultRateLimit();\n  \n  Meteor.methods({\n    getResetToken: function () {\n      var token = Meteor.users.findOne(this.userId).services.password.reset;\n      return token;\n    },\n    addSkipCaseInsensitiveChecksForTest: function (value) {\n      Accounts._skipCaseInsensitiveChecksForTest[value] = true;\n    },\n    removeSkipCaseInsensitiveChecksForTest: function (value) {\n      delete Accounts._skipCaseInsensitiveChecksForTest[value];\n    },\n    countUsersOnServer: function (query) {\n      return Meteor.users.find(query).count();\n    }\n  });\n}\n\nif (Meteor.isClient) (function () {\n\n  // XXX note, only one test can do login/logout things at once! for\n  // now, that is this test.\n\n  Accounts._isolateLoginTokenForTest();\n\n  var addSkipCaseInsensitiveChecksForTest = function (value, test, expect) {\n    Meteor.call('addSkipCaseInsensitiveChecksForTest', value);\n  };\n\n  var removeSkipCaseInsensitiveChecksForTest = function (value, test, expect) {\n    Meteor.call('removeSkipCaseInsensitiveChecksForTest', value);\n  };\n\n  var createUserStep = function (test, expect) {\n    // Hack because Tinytest does not clean the database between tests/runs\n    this.randomSuffix = Random.id(10);\n    this.username = 'AdaLovelace' + this.randomSuffix;\n    this.email =  \"Ada-intercept@lovelace.com\" + this.randomSuffix;\n    this.password = 'password';\n    Accounts.createUser(\n      {username: this.username, email: this.email, password: this.password},\n      loggedInAs(this.username, test, expect));\n  };\n  var logoutStep = function (test, expect) {\n    Meteor.logout(expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n      test.equal(Meteor.user(), null);\n    }));\n  };\n  var loggedInAs = function (someUsername, test, expect) {\n    return expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n      test.equal(Meteor.userId() && Meteor.user().username, someUsername);\n    });\n  };\n  var loggedInUserHasEmail = function (someEmail, test, expect) {\n    return expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n      var user = Meteor.user();\n      test.isTrue(user && _.some(user.emails, function(email) {\n        return email.address === someEmail;\n      }));\n    });\n  };\n  var expectError = function (expectedError, test, expect) {\n    return expect(function (actualError) {\n      test.equal(actualError && actualError.error, expectedError.error);\n      test.equal(actualError && actualError.reason, expectedError.reason);\n    });\n  };\n  var expectUserNotFound = function (test, expect) {\n    return expectError(new Meteor.Error(403, \"User not found\"), test, expect);\n  };\n  var waitForLoggedOutStep = function (test, expect) {\n    pollUntil(expect, function () {\n      return Meteor.userId() === null;\n    }, 10 * 1000, 100);\n  };\n  var invalidateLoginsStep = function (test, expect) {\n    Meteor.call(\"testInvalidateLogins\", 'fail', expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n  var hideActualLoginErrorStep = function (test, expect) {\n    Meteor.call(\"testInvalidateLogins\", 'hide', expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n  var validateLoginsStep = function (test, expect) {\n    Meteor.call(\"testInvalidateLogins\", false, expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n\n  testAsyncMulti(\"passwords - basic login with password\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.email = Random.id() + '-intercept@example.com';\n      this.password = 'password';\n\n      Accounts.createUser(\n        {username: this.username, email: this.email, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    function (test, expect) {\n      test.notEqual(Meteor.userId(), null);\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.loginWithPassword(this.username, this.password,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    // This next step tests reactive contexts which are reactive on\n    // Meteor.user().\n    function (test, expect) {\n      // Set up a reactive context that only refreshes when Meteor.user() is\n      // invalidated.\n      var loaded = false;\n      var handle = Tracker.autorun(function () {\n        if (Meteor.user() && Meteor.user().emails)\n          loaded = true;\n      });\n      // At the beginning, we're not logged in.\n      test.isFalse(loaded);\n      Meteor.loginWithPassword(this.username, this.password, expect(function (error) {\n        test.equal(error, undefined);\n        test.notEqual(Meteor.userId(), null);\n        // By the time of the login callback, the user should be loaded.\n        test.isTrue(Meteor.user().emails);\n        // Flushing should get us the rerun as well.\n        Tracker.flush();\n        test.isTrue(loaded);\n        handle.stop();\n      }));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.loginWithPassword({username: this.username}, this.password,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.loginWithPassword(this.email, this.password,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.loginWithPassword({email: this.email}, this.password,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep\n  ]);\n\n\n  testAsyncMulti(\"passwords - plain text passwords\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.email = Random.id() + '-intercept@example.com';\n      this.password = 'password';\n\n      // create user with raw password (no API, need to invoke callLoginMethod\n      // directly)\n      Accounts.callLoginMethod({\n        methodName: 'createUser',\n        methodArguments: [{username: this.username, password: this.password}],\n        userCallback: loggedInAs(this.username, test, expect)\n      });\n    },\n    logoutStep,\n    // check can login normally with this password.\n    function(test, expect) {\n      Meteor.loginWithPassword({username: this.username}, this.password,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    // plain text password. no API for this, have to invoke callLoginMethod\n    // directly.\n    function (test, expect) {\n      Accounts.callLoginMethod({\n        // wrong password\n        methodArguments: [{user: {username: this.username}, password: 'wrong'}],\n        userCallback: expect(function (error) {\n          test.isTrue(error);\n          test.isFalse(Meteor.user());\n        })});\n    },\n    function (test, expect) {\n      Accounts.callLoginMethod({\n        // right password\n        methodArguments: [{user: {username: this.username},\n                           password: this.password}],\n        userCallback: loggedInAs(this.username, test, expect)\n      });\n    },\n    logoutStep\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username\", [\n    createUserStep,\n    logoutStep,\n    // We should be able to log in with the username in lower case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: \"adalovelace\" + this.randomSuffix },\n        this.password,\n        loggedInAs(this.username, test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" +\n      \"with non-ASCII characters\", [\n    function (test, expect) {\n      // Hack because Tinytest does not clean the database between tests/runs\n      this.randomSuffix = Random.id(10);\n      this.username = '√ÅdaL√òvelaüòàe' + this.randomSuffix;\n      this.password = 'password';\n      Accounts.createUser(\n        {username: this.username, email: this.email, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    // We should be able to log in with the username in lower case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: \"√°dal√∏velaüòàe\" + this.randomSuffix },\n        this.password,\n        loggedInAs(this.username, test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" +\n      \"should escape regex special characters\", [\n    createUserStep,\n    logoutStep,\n    // We shouldn't be able to log in with a regex expression for the username\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: \".+\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" +\n     \"should require a match of the full string\", [\n    createUserStep,\n    logoutStep,\n    // We shouldn't be able to log in with a partial match for the username\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: \"lovelace\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username when \" +\n      \"there are multiple matches\", [\n    createUserStep,\n    logoutStep,\n    function (test, expect) {\n      this.otherUsername = 'Adalovelace' + this.randomSuffix;\n      addSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n    },\n    // Create another user with a username that only differs in case\n    function (test, expect) {\n      Accounts.createUser(\n        { username: this.otherUsername, password: this.password },\n        loggedInAs(this.otherUsername, test, expect));\n    },\n    function (test, expect) {\n      removeSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n    },\n    // We shouldn't be able to log in with the username in lower case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: \"adalovelace\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    },\n    // We should still be able to log in with the username in original case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: this.username },\n        this.password,\n        loggedInAs(this.username, test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - creating users with the same case insensitive \" +\n      \"username\", [\n    createUserStep,\n    logoutStep,\n    // Attempting to create another user with a username that only differs in\n    // case should fail\n    function (test, expect) {\n      this.newUsername = 'adalovelace' + this.randomSuffix;\n      Accounts.createUser(\n        { username: this.newUsername, password: this.password },\n        expectError(\n          new Meteor.Error(403, \"Username already exists.\"),\n          test,\n          expect));\n    },\n    // Make sure the new user has not been inserted\n    function (test, expect) {\n      Meteor.call('countUsersOnServer',\n        { username: this.newUsername },\n        expect(function (error, result) {\n          test.equal(result, 0);\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email\", [\n    createUserStep,\n    logoutStep,\n    // We should be able to log in with the email in lower case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { email: \"ada-intercept@lovelace.com\" + this.randomSuffix },\n        this.password,\n        loggedInAs(this.username, test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email should \" +\n      \"escape regex special characters\", [\n    createUserStep,\n    logoutStep,\n    // We shouldn't be able to log in with a regex expression for the email\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { email: \".+\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email should \" +\n     \"require a match of the full string\", [\n    createUserStep,\n    logoutStep,\n    // We shouldn't be able to log in with a partial match for the email\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { email: \"com\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email when \" +\n      \"there are multiple matches\", [\n    createUserStep,\n    logoutStep,\n    function (test, expect) {\n      this.otherUsername = 'AdaLovelace' + Random.id(10);\n      this.otherEmail =  \"ADA-intercept@lovelace.com\" + this.randomSuffix;\n      addSkipCaseInsensitiveChecksForTest(this.otherEmail, test, expect);\n    },\n    // Create another user with an email that only differs in case\n    function (test, expect) {\n      Accounts.createUser(\n        { username: this.otherUsername,\n          email: this.otherEmail,\n          password: this.password },\n        loggedInAs(this.otherUsername, test, expect));\n    },\n    function (test, expect) {\n      removeSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n    },\n    logoutStep,\n    // We shouldn't be able to log in with the email in lower case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { email: \"ada-intercept@lovelace.com\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    },\n    // We should still be able to log in with the email in original case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { email: this.email },\n        this.password,\n        loggedInAs(this.username, test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - creating users with the same case insensitive \" +\n      \"email\", [\n    createUserStep,\n    logoutStep,\n    // Attempting to create another user with an email that only differs in\n    // case should fail\n    function (test, expect) {\n      this.newEmail =  \"ada-intercept@lovelace.com\" + this.randomSuffix;\n      Accounts.createUser(\n        { email: this.newEmail, password: this.password },\n        expectError(\n          new Meteor.Error(403, \"Email already exists.\"),\n          test,\n          expect));\n    },\n    // Make sure the new user has not been inserted\n    function (test, expect) {\n      Meteor.call('countUsersOnServer',\n        { 'emails.address': this.newEmail },\n        expect (function (error, result) {\n          test.equal(result, 0);\n        })\n      );\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - changing passwords\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.email = Random.id() + '-intercept@example.com';\n      this.password = 'password';\n      this.password2 = 'password2';\n\n      Accounts.createUser(\n        { username: this.username, email: this.email, password: this.password },\n        loggedInAs(this.username, test, expect));\n    },\n    // Send a password reset email so that we can test that password\n    // reset tokens get deleted on password change.\n    function (test, expect) {\n      Meteor.call(\"forgotPassword\",\n        { email: this.email }, expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      var self = this;\n      Meteor.call(\"getResetToken\", expect(function (err, token) {\n        test.isFalse(err);\n        test.isTrue(token);\n        self.token = token;\n      }));\n    },\n    // change password with bad old password. we stay logged in.\n    function (test, expect) {\n      var self = this;\n      Accounts.changePassword('wrong', 'doesntmatter', expect(function (error) {\n        test.isTrue(error);\n        test.equal(Meteor.user().username, self.username);\n      }));\n    },\n    // change password with good old password.\n    function (test, expect) {\n      Accounts.changePassword(this.password, this.password2,\n                              loggedInAs(this.username, test, expect));\n    },\n    function (test, expect) {\n      Meteor.call(\"getResetToken\", expect(function (err, token) {\n        test.isFalse(err);\n        test.isFalse(token);\n      }));\n    },\n    logoutStep,\n    // old password, failed login\n    function (test, expect) {\n      Meteor.loginWithPassword(this.email, this.password, expect(function (error) {\n        test.isTrue(error);\n        test.isFalse(Meteor.user());\n      }));\n    },\n    // new password, success\n    function (test, expect) {\n      Meteor.loginWithPassword(this.email, this.password2,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep\n  ]);\n\n  testAsyncMulti(\"passwords - changing password logs out other clients\", [\n    function (test, expect) {\n      this.username = Random.id();\n      this.email = Random.id() + '-intercept@example.com';\n      this.password = 'password';\n      this.password2 = 'password2';\n      Accounts.createUser(\n        { username: this.username, email: this.email, password: this.password },\n        loggedInAs(this.username, test, expect));\n    },\n    // Log in a second connection as this user.\n    function (test, expect) {\n      var self = this;\n\n      self.secondConn = DDP.connect(Meteor.absoluteUrl());\n      self.secondConn.call('login',\n                { user: { username: self.username }, password: self.password },\n                expect(function (err, result) {\n                  test.isFalse(err);\n                  self.secondConn.setUserId(result.id);\n                  test.isTrue(self.secondConn.userId());\n\n                  self.secondConn.onReconnect = function () {\n                    self.secondConn.apply(\n                      'login',\n                      [{ resume: result.token }],\n                      { wait: true },\n                      function (err, result) {\n                        self.secondConn.setUserId(result && result.id || null);\n                      }\n                    );\n                  };\n                }));\n    },\n    function (test, expect) {\n      var self = this;\n      Accounts.changePassword(self.password, self.password2, expect(function (err) {\n        test.isFalse(err);\n      }));\n    },\n    // Now that we've changed the password, wait until the second\n    // connection gets logged out.\n    function (test, expect) {\n      var self = this;\n      pollUntil(expect, function () {\n        return self.secondConn.userId() === null;\n      }, 10 * 1000, 100);\n    }\n  ]);\n\n\n  testAsyncMulti(\"passwords - new user hooks\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.email = Random.id() + '-intercept@example.com';\n      this.password = 'password';\n    },\n    // test Accounts.validateNewUser\n    function(test, expect) {\n      Accounts.createUser(\n        {username: this.username, password: this.password,\n         // should fail the new user validators\n         profile: {invalid: true}},\n        expect(function (error) {\n          test.equal(error.error, 403);\n          test.equal(error.reason, \"User validation failed\");\n        }));\n    },\n    logoutStep,\n    function(test, expect) {\n      Accounts.createUser(\n        {username: this.username, password: this.password,\n         // should fail the new user validator with a special\n         // exception\n         profile: {invalidAndThrowException: true}},\n        expect(function (error) {\n          test.equal(\n            error.reason,\n            \"An exception thrown within Accounts.validateNewUser\");\n        }));\n    },\n    // test Accounts.onCreateUser\n    function(test, expect) {\n      Accounts.createUser(\n        {username: this.username, password: this.password,\n         testOnCreateUserHook: true},\n        loggedInAs(this.username, test, expect));\n    },\n    function(test, expect) {\n      test.equal(Meteor.user().profile.touchedByOnCreateUser, true);\n    },\n    logoutStep\n  ]);\n\n\n  testAsyncMulti(\"passwords - Meteor.user()\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.password = 'password';\n\n      Accounts.createUser(\n        {username: this.username, password: this.password,\n         testOnCreateUserHook: true},\n        loggedInAs(this.username, test, expect));\n    },\n    // test Meteor.user(). This test properly belongs in\n    // accounts-base/accounts_tests.js, but this is where the tests that\n    // actually log in are.\n    function(test, expect) {\n      var self = this;\n      var clientUser = Meteor.user();\n      Accounts.connection.call('testMeteorUser', expect(function (err, result) {\n        test.equal(result._id, clientUser._id);\n        test.equal(result.username, clientUser.username);\n        test.equal(result.username, self.username);\n        test.equal(result.profile.touchedByOnCreateUser, true);\n        test.equal(err, undefined);\n      }));\n    },\n    function(test, expect) {\n      // Test that even with no published fields, we still have a document.\n      Accounts.connection.call('clearUsernameAndProfile', expect(function() {\n        test.isTrue(Meteor.userId());\n        var user = Meteor.user();\n        test.equal(user, {_id: Meteor.userId()});\n      }));\n    },\n    logoutStep,\n    function(test, expect) {\n      var clientUser = Meteor.user();\n      test.equal(clientUser, null);\n      test.equal(Meteor.userId(), null);\n      Accounts.connection.call('testMeteorUser', expect(function (err, result) {\n        test.equal(err, undefined);\n        test.equal(result, null);\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - allow rules\", [\n    // create a second user to have an id for in a later test\n    function (test, expect) {\n      this.otherUsername = Random.id();\n      Accounts.createUser(\n        {username: this.otherUsername, password: 'dontcare',\n         testOnCreateUserHook: true},\n        loggedInAs(this.otherUsername, test, expect));\n    },\n    function (test, expect) {\n      this.otherUserId = Meteor.userId();\n    },\n    function (test, expect) {\n      // real setup\n      this.username = Random.id();\n      this.password = 'password';\n\n      Accounts.createUser(\n        {username: this.username, password: this.password,\n         testOnCreateUserHook: true},\n        loggedInAs(this.username, test, expect));\n    },\n    // test the default Meteor.users allow rule. This test properly belongs in\n    // accounts-base/accounts_tests.js, but this is where the tests that\n    // actually log in are.\n    function(test, expect) {\n      this.userId = Meteor.userId();\n      test.notEqual(this.userId, null);\n      test.notEqual(this.userId, this.otherUserId);\n      // Can't update fields other than profile.\n      Meteor.users.update(\n        this.userId, {$set: {disallowed: true, 'profile.updated': 42}},\n        expect(function (err) {\n          test.isTrue(err);\n          test.equal(err.error, 403);\n          test.isFalse(_.has(Meteor.user(), 'disallowed'));\n          test.isFalse(_.has(Meteor.user().profile, 'updated'));\n        }));\n    },\n    function(test, expect) {\n      // Can't update another user.\n      Meteor.users.update(\n        this.otherUserId, {$set: {'profile.updated': 42}},\n        expect(function (err) {\n          test.isTrue(err);\n          test.equal(err.error, 403);\n        }));\n    },\n    function(test, expect) {\n      // Can't update using a non-ID selector. (This one is thrown client-side.)\n      test.throws(function () {\n        Meteor.users.update(\n          {username: this.username}, {$set: {'profile.updated': 42}});\n      });\n      test.isFalse(_.has(Meteor.user().profile, 'updated'));\n    },\n    function(test, expect) {\n      // Can update own profile using ID.\n      Meteor.users.update(\n        this.userId, {$set: {'profile.updated': 42}},\n        expect(function (err) {\n          test.isFalse(err);\n          test.equal(42, Meteor.user().profile.updated);\n        }));\n    },\n    logoutStep\n  ]);\n\n\n  testAsyncMulti(\"passwords - tokens\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.password = 'password';\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n\n    function (test, expect) {\n      // we can't login with an invalid token\n      var expectLoginError = expect(function (err) {\n        test.isTrue(err);\n      });\n      Meteor.loginWithToken('invalid', expectLoginError);\n    },\n\n    function (test, expect) {\n      // we can login with a valid token\n      var expectLoginOK = expect(function (err) {\n        test.isFalse(err);\n      });\n      Meteor.loginWithToken(Accounts._storedLoginToken(), expectLoginOK);\n    },\n\n    function (test, expect) {\n      // test logging out invalidates our token\n      var expectLoginError = expect(function (err) {\n        test.isTrue(err);\n      });\n      var token = Accounts._storedLoginToken();\n      test.isTrue(token);\n      Meteor.logout(function () {\n        Meteor.loginWithToken(token, expectLoginError);\n      });\n    },\n\n    function (test, expect) {\n      var self = this;\n      // Test that login tokens get expired. We should get logged out when a\n      // token expires, and not be able to log in again with the same token.\n      var expectNoError = expect(function (err) {\n        test.isFalse(err);\n      });\n\n      Meteor.loginWithPassword(this.username, this.password, function (error) {\n        self.token = Accounts._storedLoginToken();\n        test.isTrue(self.token);\n        expectNoError(error);\n        Accounts.connection.call(\"expireTokens\");\n      });\n    },\n    waitForLoggedOutStep,\n    function (test, expect) {\n      var token = Accounts._storedLoginToken();\n      test.isFalse(token);\n    },\n    function (test, expect) {\n      // Test that once expireTokens is finished, we can't login again with our\n      // previous token.\n      Meteor.loginWithToken(this.token, expect(function (err, result) {\n        test.isTrue(err);\n        test.equal(Meteor.userId(), null);\n      }));\n    },\n    logoutStep,\n    function (test, expect) {\n      var self = this;\n      // Test that Meteor.logoutOtherClients logs out a second\n      // authentcated connection while leaving Accounts.connection\n      // logged in.\n      var secondConn = DDP.connect(Meteor.absoluteUrl());\n      var token;\n\n      var expectSecondConnLoggedOut = expect(function (err, result) {\n        test.isTrue(err);\n      });\n\n      var expectAccountsConnLoggedIn = expect(function (err, result) {\n        test.isFalse(err);\n      });\n\n      var expectSecondConnLoggedIn = expect(function (err, result) {\n        test.equal(result.token, token);\n        test.isFalse(err);\n        Meteor.logoutOtherClients(function (err) {\n          test.isFalse(err);\n          secondConn.call('login', { resume: token },\n                          expectSecondConnLoggedOut);\n          Accounts.connection.call('login', {\n            resume: Accounts._storedLoginToken()\n          }, expectAccountsConnLoggedIn);\n        });\n      });\n\n      Meteor.loginWithPassword(\n        self.username,\n        self.password,\n        expect(function (err) {\n          test.isFalse(err);\n          token = Accounts._storedLoginToken();\n          test.isTrue(token);\n          secondConn.call('login', { resume: token },\n                          expectSecondConnLoggedIn);\n        })\n      );\n    },\n    logoutStep,\n\n    // The tests below this point are for the deprecated\n    // `logoutOtherClients` method.\n\n    function (test, expect) {\n      var self = this;\n\n      // Test that Meteor.logoutOtherClients logs out a second authenticated\n      // connection while leaving Accounts.connection logged in.\n      var token;\n      self.secondConn = DDP.connect(Meteor.absoluteUrl());\n\n      var expectLoginError = expect(function (err) {\n        test.isTrue(err);\n      });\n      var expectValidToken = expect(function (err, result) {\n        test.isFalse(err);\n        test.isTrue(result);\n        self.tokenFromLogoutOthers = result.token;\n      });\n      var expectSecondConnLoggedIn = expect(function (err, result) {\n        test.equal(result.token, token);\n        test.isFalse(err);\n        // This test will fail if an unrelated reconnect triggers before the\n        // connection is logged out. In general our tests aren't resilient to\n        // mid-test reconnects.\n        self.secondConn.onReconnect = function () {\n          self.secondConn.call(\"login\", { resume: token }, expectLoginError);\n        };\n        Accounts.connection.call(\"logoutOtherClients\", expectValidToken);\n      });\n\n      Meteor.loginWithPassword(this.username, this.password, expect(function (err) {\n        test.isFalse(err);\n        token = Accounts._storedLoginToken();\n        self.beforeLogoutOthersToken = token;\n        test.isTrue(token);\n        self.secondConn.call(\"login\", { resume: token },\n                             expectSecondConnLoggedIn);\n      }));\n    },\n    // Test that logoutOtherClients logged out Accounts.connection and that the\n    // previous token is no longer valid.\n    waitForLoggedOutStep,\n    function (test, expect) {\n      var self = this;\n      var token = Accounts._storedLoginToken();\n      test.isFalse(token);\n      this.secondConn.close();\n      Meteor.loginWithToken(\n        self.beforeLogoutOthersToken,\n        expect(function (err) {\n          test.isTrue(err);\n          test.isFalse(Meteor.userId());\n        })\n      );\n    },\n    // Test that logoutOtherClients returned a new token that we can use to\n    // log in.\n    function (test, expect) {\n      var self = this;\n      Meteor.loginWithToken(\n        self.tokenFromLogoutOthers,\n        expect(function (err) {\n          test.isFalse(err);\n          test.isTrue(Meteor.userId());\n        })\n      );\n    },\n    logoutStep,\n\n\n\n    function (test, expect) {\n      var self = this;\n      // Test that deleting a user logs out that user's connections.\n      Meteor.loginWithPassword(this.username, this.password, expect(function (err) {\n        test.isFalse(err);\n        Accounts.connection.call(\"removeUser\", self.username);\n      }));\n    },\n    waitForLoggedOutStep\n  ]);\n\n  testAsyncMulti(\"passwords - validateLoginAttempt\", [\n    function (test, expect) {\n      this.username = Random.id();\n      this.password = \"password\";\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    invalidateLoginsStep,\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        this.username,\n        this.password,\n        expect(function (error) {\n          test.isTrue(error);\n          test.equal(error.reason, \"Login forbidden\");\n        })\n      );\n    },\n    validateLoginsStep,\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        \"no such user\",\n        \"some password\",\n        expect(function (error) {\n          test.isTrue(error);\n          test.equal(error.reason, 'User not found');\n        })\n      );\n    },\n    hideActualLoginErrorStep,\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        \"no such user\",\n        \"some password\",\n        expect(function (error) {\n          test.isTrue(error);\n          test.equal(error.reason, 'hide actual error');\n        })\n      );\n    },\n    validateLoginsStep\n  ]);\n\n  testAsyncMulti(\"passwords - server onLogin hook\", [\n    function (test, expect) {\n      Meteor.call(\"testCaptureLogins\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      this.username = Random.id();\n      this.password = \"password\";\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    function (test, expect) {\n      var self = this;\n      Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n        test.isFalse(error);\n        test.equal(logins.length, 1);\n        var login = logins[0];\n        test.isTrue(login.successful);\n        var attempt = login.attempt;\n        test.equal(attempt.type, \"password\");\n        test.isTrue(attempt.allowed);\n        test.equal(attempt.methodArguments[0].username, self.username);\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - client onLogin hook\", [\n    function (test, expect) {\n      var self = this;\n      this.username = Random.id();\n      this.password = \"password\";\n      this.attempt = false;\n\n      this.onLogin = Accounts.onLogin(function (attempt) {\n        self.attempt = true;\n      });\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    function (test, expect) {\n      this.onLogin.stop();\n      test.isTrue(this.attempt);\n      expect(function () {})();\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - server onLogout hook\", [\n    function (test, expect) {\n      Meteor.call(\"testCaptureLogouts\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      this.username = Random.id();\n      this.password = \"password\";\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      var self = this;\n      Meteor.call(\"testFetchCapturedLogouts\", expect(function (error, logouts) {\n        test.isFalse(error);\n        test.equal(logouts.length, 1);\n        var logout = logouts[0];\n        test.isTrue(logout.successful);\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - client onLogout hook\", [\n    function (test, expect) {\n      var self = this;\n      this.username = Random.id();\n      this.password = \"password\";\n      this.attempt = false;\n\n      this.onLogout = Accounts.onLogout(function () {\n        self.logoutSuccess = true;\n      });\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      test.isTrue(this.logoutSuccess);\n      expect(function() {})();\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - server onLoginFailure hook\", [\n    function (test, expect) {\n      this.username = Random.id();\n      this.password = \"password\";\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.call(\"testCaptureLogins\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.loginWithPassword(this.username, \"incorrect\", expect(function (error) {\n        test.isTrue(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n        test.isFalse(error);\n        test.equal(logins.length, 1);\n        var login = logins[0];\n        test.isFalse(login.successful);\n        var attempt = login.attempt;\n        test.equal(attempt.type, \"password\");\n        test.isFalse(attempt.allowed);\n        test.equal(attempt.error.reason, \"Incorrect password\");\n      }));\n    },\n    function (test, expect) {\n      Meteor.call(\"testCaptureLogins\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.loginWithPassword(\"no such user\", \"incorrect\", expect(function (error) {\n        test.isTrue(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n        test.isFalse(error);\n        test.equal(logins.length, 1);\n        var login = logins[0];\n        test.isFalse(login.successful);\n        var attempt = login.attempt;\n        test.equal(attempt.type, \"password\");\n        test.isFalse(attempt.allowed);\n        test.equal(attempt.error.reason, \"User not found\");\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - client onLoginFailure hook\", [\n    function (test, expect) {\n      var self = this;\n      this.username = Random.id();\n      this.password = \"password\";\n      this.attempt = false;\n\n      this.onLoginFailure = Accounts.onLoginFailure(function () {\n        self.attempt = true;\n      })\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.call(\"testCaptureLogins\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.loginWithPassword(this.username, \"incorrect\", expect(function (error) {\n        test.isTrue(error);\n      }));\n    },\n    function (test, expect) {\n      this.onLoginFailure.stop();\n      test.isTrue(this.attempt);\n      expect(function () {})();\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - srp to bcrypt upgrade\", [\n    logoutStep,\n    // Create user with old SRP credentials in the database.\n    function (test, expect) {\n      var self = this;\n      Meteor.call(\"testCreateSRPUser\", expect(function (error, result) {\n        test.isFalse(error);\n        self.username = result;\n      }));\n    },\n    // We are able to login with the old style credentials in the database.\n    function (test, expect) {\n      Meteor.loginWithPassword(this.username, 'abcdef', expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.call(\"testSRPUpgrade\", this.username, expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    logoutStep,\n    // After the upgrade to bcrypt we're still able to login.\n    function (test, expect) {\n      Meteor.loginWithPassword(this.username, 'abcdef', expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.call(\"removeUser\", this.username, expect(function (error) {\n        test.isFalse(error);\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - srp to bcrypt upgrade via password change\", [\n    logoutStep,\n    // Create user with old SRP credentials in the database.\n    function (test, expect) {\n      var self = this;\n      Meteor.call(\"testCreateSRPUser\", expect(function (error, result) {\n        test.isFalse(error);\n        self.username = result;\n      }));\n    },\n    // Log in with the plaintext password handler, which should NOT upgrade us to bcrypt.\n    function (test, expect) {\n      Accounts.callLoginMethod({\n        methodName: \"login\",\n        methodArguments: [ { user: { username: this.username }, password: \"abcdef\" } ],\n        userCallback: expect(function (err) {\n          test.isFalse(err);\n        })\n      });\n    },\n    function (test, expect) {\n      Meteor.call(\"testNoSRPUpgrade\", this.username, expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    // Changing our password should upgrade us to bcrypt.\n    function (test, expect) {\n      Accounts.changePassword(\"abcdef\", \"abcdefg\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.call(\"testSRPUpgrade\", this.username, expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    // And after the upgrade we should be able to change our password again.\n    function (test, expect) {\n      Accounts.changePassword(\"abcdefg\", \"abcdef\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    logoutStep\n  ]);\n}) ();\n\n\nif (Meteor.isServer) (function () {\n\n  Tinytest.add(\n    'passwords - setup more than one onCreateUserHook',\n    function (test) {\n      test.throws(function() {\n        Accounts.onCreateUser(function () {});\n      });\n    });\n\n\n  Tinytest.add(\n    'passwords - createUser hooks',\n    function (test) {\n      var username = Random.id();\n      test.throws(function () {\n        // should fail the new user validators\n        Accounts.createUser({username: username, profile: {invalid: true}});\n      });\n\n      var userId = Accounts.createUser({username: username,\n                                        testOnCreateUserHook: true});\n\n      test.isTrue(userId);\n      var user = Meteor.users.findOne(userId);\n      test.equal(user.profile.touchedByOnCreateUser, true);\n    });\n\n\n  Tinytest.add(\n    'passwords - setPassword',\n    function (test) {\n      var username = Random.id();\n      var email = username + '-intercept@example.com';\n\n      var userId = Accounts.createUser({username: username, email: email});\n\n      var user = Meteor.users.findOne(userId);\n      // no services yet.\n      test.equal(user.services.password, undefined);\n\n      // set a new password.\n      Accounts.setPassword(userId, 'new password');\n      user = Meteor.users.findOne(userId);\n      var oldSaltedHash = user.services.password.bcrypt;\n      test.isTrue(oldSaltedHash);\n\n      // Send a reset password email (setting a reset token) and insert a login\n      // token.\n      Accounts.sendResetPasswordEmail(userId, email);\n      Accounts._insertLoginToken(userId, Accounts._generateStampedLoginToken());\n      test.isTrue(Meteor.users.findOne(userId).services.password.reset);\n      test.isTrue(Meteor.users.findOne(userId).services.resume.loginTokens);\n\n      // reset with the same password, see we get a different salted hash\n      Accounts.setPassword(userId, 'new password', {logout: false});\n      user = Meteor.users.findOne(userId);\n      var newSaltedHash = user.services.password.bcrypt;\n      test.isTrue(newSaltedHash);\n      test.notEqual(oldSaltedHash, newSaltedHash);\n      // No more reset token.\n      test.isFalse(Meteor.users.findOne(userId).services.password.reset);\n      // But loginTokens are still here since we did logout: false.\n      test.isTrue(Meteor.users.findOne(userId).services.resume.loginTokens);\n\n      // reset again, see that the login tokens are gone.\n      Accounts.setPassword(userId, 'new password');\n      user = Meteor.users.findOne(userId);\n      var newerSaltedHash = user.services.password.bcrypt;\n      test.isTrue(newerSaltedHash);\n      test.notEqual(oldSaltedHash, newerSaltedHash);\n      test.notEqual(newSaltedHash, newerSaltedHash);\n      // No more tokens.\n      test.isFalse(Meteor.users.findOne(userId).services.password.reset);\n      test.isFalse(Meteor.users.findOne(userId).services.resume.loginTokens);\n\n      // cleanup\n      Meteor.users.remove(userId);\n    });\n\n\n  // This test properly belongs in accounts-base/accounts_tests.js, but\n  // this is where the tests that actually log in are.\n  Tinytest.add('accounts - user() out of context', function (test) {\n    // basic server context, no method.\n    test.throws(function () {\n      Meteor.user();\n    });\n  });\n\n  // XXX would be nice to test\n  // Accounts.config({forbidClientAccountCreation: true})\n\n  Tinytest.addAsync(\n    'passwords - login token observes get cleaned up',\n    function (test, onComplete) {\n      var username = Random.id();\n      Accounts.createUser({\n        username: username,\n        password: 'password'\n      });\n\n      makeTestConnection(\n        test,\n        function (clientConn, serverConn) {\n          serverConn.onClose(function () {\n            test.isFalse(Accounts._getUserObserve(serverConn.id));\n            onComplete();\n          });\n          var result = clientConn.call('login', {\n            user: {username: username},\n            password: 'password'\n          });\n          test.isTrue(result);\n          var token = Accounts._getAccountData(serverConn.id, 'loginToken');\n          test.isTrue(token);\n\n          // We poll here, instead of just checking `_getUserObserve`\n          // once, because the login method defers the creation of the\n          // observe, and setting up the observe yields, so we could end\n          // up here before the observe has been set up.\n          simplePoll(\n            function () {\n              return !! Accounts._getUserObserve(serverConn.id);\n            },\n            function () {\n              test.isTrue(Accounts._getUserObserve(serverConn.id));\n              clientConn.disconnect();\n            },\n            function () {\n              test.fail(\"timed out waiting for user observe for connection \" +\n                        serverConn.id);\n              onComplete();\n            }\n          );\n        },\n        onComplete\n      );\n    }\n  );\n\n  Tinytest.add(\n    'passwords - reset password doesn\\t work if email changed after email sent',\n    function (test) {\n      var username = Random.id();\n      var email = username + '-intercept@example.com';\n\n      var userId = Accounts.createUser({\n        username: username,\n        email: email,\n        password: \"old-password\"\n      });\n\n      var user = Meteor.users.findOne(userId);\n\n      Accounts.sendResetPasswordEmail(userId, email);\n\n      var resetPasswordEmailOptions =\n        Meteor.call(\"getInterceptedEmails\", email)[0];\n\n      var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n      var match = resetPasswordEmailOptions.text.match(re);\n      test.isTrue(match);\n      var resetPasswordToken = match[1];\n\n      var newEmail = Random.id() + '-new@example.com';\n      Meteor.users.update(userId, {$set: {\"emails.0.address\": newEmail}});\n\n      test.throws(function () {\n        Meteor.call(\"resetPassword\", resetPasswordToken, \"new-password\");\n      }, /Token has invalid email address/);\n      test.throws(function () {\n        Meteor.call(\"login\", {user: {username: username}, password: \"new-password\"});\n      }, /Incorrect password/);\n    });\n\n  Tinytest.addAsync(\n    'passwords - reset password should work when token is not expired',\n    function (test, onComplete) {\n      var username = Random.id();\n      var email = username + '-intercept@example.com';\n\n      var userId = Accounts.createUser({\n        username: username,\n        email: email,\n        password: \"old-password\"\n      });\n\n      var user = Meteor.users.findOne(userId);\n\n      Accounts.sendResetPasswordEmail(userId, email);\n\n      var resetPasswordEmailOptions =\n        Meteor.call(\"getInterceptedEmails\", email)[0];\n\n      var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n      var match = resetPasswordEmailOptions.text.match(re);\n      test.isTrue(match);\n      var resetPasswordToken = match[1];\n\n      makeTestConnection(\n        test,\n        function (clientConn) {\n          test.isTrue(clientConn.call(\n            \"resetPassword\",\n            resetPasswordToken,\n            \"new-password\"\n          ));\n\n          test.isTrue(clientConn.call(\"login\", {\n            user: { username },\n            password: \"new-password\"\n          }));\n\n          onComplete();\n      });\n    });\n\n  Tinytest.add(\n    'passwords - reset password should not work when token is expired',\n    function (test) {\n      var username = Random.id();\n      var email = username + '-intercept@example.com';\n\n      var userId = Accounts.createUser({\n        username: username,\n        email: email,\n        password: \"old-password\"\n      });\n\n      var user = Meteor.users.findOne(userId);\n\n      Accounts.sendResetPasswordEmail(userId, email);\n\n      var resetPasswordEmailOptions =\n        Meteor.call(\"getInterceptedEmails\", email)[0];\n\n      var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n      var match = resetPasswordEmailOptions.text.match(re);\n      test.isTrue(match);\n      var resetPasswordToken = match[1];\n\n      Meteor.users.update(userId, {$set: {\"services.password.reset.when\":  new Date(Date.now() + -5 * 24 * 3600 * 1000) }});\n\n      test.throws(function () {\n        Meteor.call(\"resetPassword\", resetPasswordToken, \"new-password\");\n      }, /Token expired/);\n      test.throws(function () {\n        Meteor.call(\"login\", {user: {username: username}, password: \"new-password\"});\n      }, /Incorrect password/);\n    });\n\n  Tinytest.add(\n    'passwords - reset tokens get cleaned up',\n    function (test) {\n      var email = test.id + '-intercept@example.com';\n      var userId = Accounts.createUser({email: email, password: 'password'});\n      Accounts.sendResetPasswordEmail(userId, email);\n      test.isTrue(!!Meteor.users.findOne(userId).services.password.reset);\n\n      Accounts._expirePasswordResetTokens(new Date(), userId);\n\n      test.isUndefined(Meteor.users.findOne(userId).services.password.reset);\n    }\n  )\n\n  // We should be able to change the username\n  Tinytest.add(\"passwords - change username\", function (test) {\n    var username = Random.id();\n    var userId = Accounts.createUser({\n      username: username\n    });\n\n    test.isTrue(userId);\n\n    var newUsername = Random.id();\n    Accounts.setUsername(userId, newUsername);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).username, newUsername);\n\n    // Test findUserByUsername as well while we're here\n    test.equal(Accounts.findUserByUsername(newUsername)._id, userId);\n  });\n\n  Tinytest.add(\"passwords - change username to a new one only differing \" +\n      \"in case\", function (test) {\n    var username = Random.id() + \"user\";\n    var userId = Accounts.createUser({\n      username: username.toUpperCase()\n    });\n\n    test.isTrue(userId);\n\n    var newUsername = username.toLowerCase();\n    Accounts.setUsername(userId, newUsername);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).username, newUsername);\n  });\n\n  // We should not be able to change the username to one that only\n  // differs in case from an existing one\n  Tinytest.add(\"passwords - change username should fail when there are \" +\n      \"existing users with a username only differing in case\", function (test) {\n    var username = Random.id() + \"user\";\n    var usernameUpper = username.toUpperCase();\n\n    var userId1 = Accounts.createUser({\n      username: username\n    });\n\n    var user2OriginalUsername = Random.id();\n    var userId2 = Accounts.createUser({\n      username: user2OriginalUsername\n    });\n\n    test.isTrue(userId1);\n    test.isTrue(userId2);\n\n    test.throws(function () {\n      Accounts.setUsername(userId2, usernameUpper);\n    }, /Username already exists/);\n\n    test.equal(Accounts._findUserByQuery({id: userId2}).username,\n      user2OriginalUsername);\n  });\n\n  Tinytest.add(\"passwords - add email\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n\n    var thirdEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, thirdEmail, true);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).emails, [\n      { address: origEmail, verified: false },\n      { address: newEmail, verified: false },\n      { address: thirdEmail, verified: true }\n    ]);\n\n    // Test findUserByEmail as well while we're here\n    test.equal(Accounts.findUserByEmail(origEmail)._id, userId);\n  });\n\n  Tinytest.add(\"passwords - add email when the user has an existing email \" +\n      \"only differing in case\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n\n    var thirdEmail = origEmail.toUpperCase();\n    Accounts.addEmail(userId, thirdEmail, true);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).emails, [\n      { address: thirdEmail, verified: true },\n      { address: newEmail, verified: false }\n    ]);\n  });\n\n  Tinytest.add(\"passwords - add email should fail when there is an existing \" +\n      \"user with an email only differing in case\", function (test) {\n    var user1Email = Random.id() + \"@turing.com\";\n    var userId1 = Accounts.createUser({\n      email: user1Email\n    });\n\n    var user2Email = Random.id() + \"@turing.com\";\n    var userId2 = Accounts.createUser({\n      email: user2Email\n    });\n\n    var dupEmail = user1Email.toUpperCase();\n    test.throws(function () {\n      Accounts.addEmail(userId2, dupEmail);\n    }, /Email already exists/);\n\n    test.equal(Accounts._findUserByQuery({id: userId1}).emails, [\n      { address: user1Email, verified: false }\n    ]);\n\n    test.equal(Accounts._findUserByQuery({id: userId2}).emails, [\n      { address: user2Email, verified: false }\n    ]);\n  });\n\n  Tinytest.add(\"passwords - remove email\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n\n    var thirdEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, thirdEmail, true);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).emails, [\n      { address: origEmail, verified: false },\n      { address: newEmail, verified: false },\n      { address: thirdEmail, verified: true }\n    ]);\n\n    Accounts.removeEmail(userId, newEmail);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).emails, [\n      { address: origEmail, verified: false },\n      { address: thirdEmail, verified: true }\n    ]);\n\n    Accounts.removeEmail(userId, origEmail);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).emails, [\n      { address: thirdEmail, verified: true }\n    ]);\n  });\n\n}) ();\n"]},"hash":"8dfd7d876bf8ec2499a2b7c4b9ca179408433383"}
