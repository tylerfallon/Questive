{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/jagi:astronomy","imported":["Class"],"specifiers":[{"kind":"named","imported":"Class","local":"Class"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/test/modules/validators/validate.js","filenameRelative":"/packages/jagi:astronomy/test/modules/validators/validate.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/test/modules/validators/validate.js.map","sourceFileName":"/packages/jagi:astronomy/test/modules/validators/validate.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"validate"},"ignored":false,"code":"var Class;module.import('meteor/jagi:astronomy',{\"Class\":function(v){Class=v}});\n\nTinytest.add('Modules - Validators - Validate', function (test) {\n  var ClassValidator = Class.create({\n    name: 'ClassValidator',\n    fields: {\n      nameA: {\n        type: String,\n        validators: [{\n          type: 'custom',\n          param: 'abc'\n        }]\n      },\n      nameB: {\n        type: Number,\n        validators: [{\n          type: 'custom',\n          param: 123\n        }]\n      }\n    }\n  });\n\n  var docValidator = new ClassValidator();\n\n  // Stop on the first error.\n  docValidator.nameA = 'abc';\n  docValidator.nameB = 123;\n  test.isUndefined(docValidator.validate(), 'Document not validated properly');\n\n  test.isUndefined(docValidator.validate({\n    fields: 'nameA'\n  }), 'Field not validated properly');\n\n  test.isUndefined(docValidator.validate({\n    fields: ['nameB']\n  }), 'List of fields not validated properly');\n\n  // Do not stop on the first error.\n  docValidator.nameA = 'cba';\n  docValidator.nameB = 321;\n  try {\n    docValidator.validate();\n  } catch (e) {\n    test.instanceOf(e, Meteor.Error, 'Should throw Meteor.Error');\n\n    test.equal(e.error, Astro.ValidationError.ERROR_CODE, 'Should throw validation error');\n\n    test.equal(e.details.length, 1, 'Should throw one error');\n\n    var error = e.details[0];\n    test.equal(error.name, 'nameA', 'Wrong validation error');\n  }\n\n  try {\n    docValidator.validate({\n      stopOnFirstError: false\n    });\n  } catch (e) {\n    test.instanceOf(e, Meteor.Error, 'Should throw Meteor.Error');\n\n    test.equal(e.error, Astro.ValidationError.ERROR_CODE, 'Should throw validation error');\n\n    test.equal(e.details.length, 2, 'Should throw two errors');\n\n    var errors = e.details;\n    test.equal(errors[0].name, 'nameA', 'Wrong validation error');\n\n    test.equal(errors[1].name, 'nameB', 'Wrong validation error');\n  }\n\n  var ClassWithDynamicOptionalField = Class.create({\n    name: 'ClassWithDynamicOptionalField',\n    fields: {\n      nameA: {\n        type: String\n      },\n      nameB: {\n        type: String,\n        optional: function optional(doc) {\n          return doc.nameA !== 'specialValue';\n        }\n      }\n    }\n  });\n\n  var docWithDynamicOptionalField = new ClassWithDynamicOptionalField();\n\n  docWithDynamicOptionalField.nameA = 'abc';\n\n  test.isUndefined(docWithDynamicOptionalField.validate(), 'Document not validated properly');\n\n  docWithDynamicOptionalField.nameA = 'specialValue';\n  docWithDynamicOptionalField.nameB = 'must be set';\n  test.isUndefined(docWithDynamicOptionalField.validate(), 'Document not validated properly');\n\n  docWithDynamicOptionalField.nameA = 'specialValue';\n  docWithDynamicOptionalField.nameB = null;\n\n  var exceptionHandlerCalled = false;\n\n  try {\n    docWithDynamicOptionalField.validate();\n  } catch (e) {\n    exceptionHandlerCalled = true;\n    test.instanceOf(e, Meteor.Error, 'Should throw Meteor.Error');\n\n    test.equal(e.error, Astro.ValidationError.ERROR_CODE, 'Should throw validation error');\n\n    test.equal(e.details.length, 1, 'Should throw one error');\n\n    var _error = e.details[0];\n    test.equal(_error.name, 'nameB', 'Wrong validation error');\n  }\n\n  // Test that the validation has really failed.\n  test.equal(exceptionHandlerCalled, true, 'Validation did not throw an error');\n});","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/test/modules/validators/validate.js"],"names":[],"mappings":"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","file":"/packages/jagi:astronomy/test/modules/validators/validate.js.map","sourcesContent":["import { Class } from 'meteor/jagi:astronomy';\n\nTinytest.add('Modules - Validators - Validate', function(test) {\n  const ClassValidator = Class.create({\n    name: 'ClassValidator',\n    fields: {\n      nameA: {\n        type: String,\n        validators: [{\n          type: 'custom',\n          param: 'abc'\n        }]\n      },\n      nameB: {\n        type: Number,\n        validators: [{\n          type: 'custom',\n          param: 123\n        }]\n      }\n    }\n  });\n\n  let docValidator = new ClassValidator();\n\n  // Stop on the first error.\n  docValidator.nameA = 'abc';\n  docValidator.nameB = 123;\n  test.isUndefined(\n    docValidator.validate(),\n    'Document not validated properly'\n  );\n\n  test.isUndefined(\n    docValidator.validate({\n      fields: 'nameA'\n    }),\n    'Field not validated properly'\n  );\n\n  test.isUndefined(\n    docValidator.validate({\n      fields: ['nameB']\n    }),\n    'List of fields not validated properly'\n  );\n\n  // Do not stop on the first error.\n  docValidator.nameA = 'cba';\n  docValidator.nameB = 321;\n  try {\n    docValidator.validate();\n  }\n  catch (e) {\n    test.instanceOf(\n      e, Meteor.Error,\n      'Should throw Meteor.Error'\n    );\n\n    test.equal(\n      e.error, Astro.ValidationError.ERROR_CODE,\n      'Should throw validation error'\n    );\n\n    test.equal(\n      e.details.length, 1,\n      'Should throw one error'\n    );\n\n    let error = e.details[0];\n    test.equal(\n      error.name, 'nameA',\n      'Wrong validation error'\n    );\n  }\n\n  try {\n    docValidator.validate({\n      stopOnFirstError: false\n    });\n  }\n  catch (e) {\n    test.instanceOf(\n      e, Meteor.Error,\n      'Should throw Meteor.Error'\n    );\n\n    test.equal(\n      e.error, Astro.ValidationError.ERROR_CODE,\n      'Should throw validation error'\n    );\n\n    test.equal(\n      e.details.length, 2,\n      'Should throw two errors'\n    );\n\n    let errors = e.details;\n    test.equal(\n      errors[0].name, 'nameA',\n      'Wrong validation error'\n    );\n\n    test.equal(\n      errors[1].name, 'nameB',\n      'Wrong validation error'\n    );\n  }\n\n  const ClassWithDynamicOptionalField = Class.create({\n    name: 'ClassWithDynamicOptionalField',\n    fields: {\n      nameA: {\n        type: String\n      },\n      nameB: {\n        type: String,\n        optional: function(doc) {\n          return doc.nameA !== 'specialValue';\n        }\n      }\n    }\n  });\n\n  let docWithDynamicOptionalField = new ClassWithDynamicOptionalField();\n\n  docWithDynamicOptionalField.nameA = 'abc';\n\n  test.isUndefined(\n    docWithDynamicOptionalField.validate(),\n    'Document not validated properly'\n  );\n\n  docWithDynamicOptionalField.nameA = 'specialValue';\n  docWithDynamicOptionalField.nameB = 'must be set';\n  test.isUndefined(\n    docWithDynamicOptionalField.validate(),\n    'Document not validated properly'\n  );\n\n  docWithDynamicOptionalField.nameA = 'specialValue';\n  docWithDynamicOptionalField.nameB = null;\n\n  let exceptionHandlerCalled = false;\n\n  try {\n    docWithDynamicOptionalField.validate();\n  }\n  catch (e) {\n    exceptionHandlerCalled = true;\n    test.instanceOf(\n      e, Meteor.Error,\n      'Should throw Meteor.Error'\n    );\n\n    test.equal(\n      e.error, Astro.ValidationError.ERROR_CODE,\n      'Should throw validation error'\n    );\n\n    test.equal(\n      e.details.length, 1,\n      'Should throw one error'\n    );\n\n    let error = e.details[0];\n    test.equal(\n      error.name, 'nameB',\n      'Wrong validation error'\n    );\n  }\n\n  // Test that the validation has really failed.\n  test.equal(exceptionHandlerCalled,\n    true,\n    'Validation did not throw an error');\n});"]},"hash":"8a9bca9e3fa07fbab2aa45023a8e51842f5caab7"}
