{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/http/httpcall_common.js","filenameRelative":"/packages/http/httpcall_common.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/http/httpcall_common.js.map","sourceFileName":"/packages/http/httpcall_common.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"httpcall_common"},"ignored":false,"code":"var MAX_LENGTH = 500; // if you change this, also change the appropriate test\n\nmakeErrorByStatus = function makeErrorByStatus(statusCode, content) {\n  var message = 'failed [' + statusCode + ']';\n\n  if (content) {\n    var stringContent = typeof content == \"string\" ? content : content.toString();\n\n    message += ' ' + truncate(stringContent.replace(/\\n/g, ' '), MAX_LENGTH);\n  }\n\n  return new Error(message);\n};\n\nfunction truncate(str, length) {\n  return str.length > length ? str.slice(0, length) + '...' : str;\n}\n\n// Fill in `response.data` if the content-type is JSON.\npopulateData = function populateData(response) {\n  // Read Content-Type header, up to a ';' if there is one.\n  // A typical header might be \"application/json; charset=utf-8\"\n  // or just \"application/json\".\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];\n\n  // Only try to parse data as JSON if server sets correct content type.\n  if (_.include(['application/json', 'text/javascript', 'application/javascript', 'application/x-javascript'], contentType)) {\n    try {\n      response.data = JSON.parse(response.content);\n    } catch (err) {\n      response.data = null;\n    }\n  } else {\n    response.data = null;\n  }\n};\n\nHTTP = {};\n\n/**\n * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with \"GET\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.get = function () /* varargs */{\n  return HTTP.call.apply(this, [\"GET\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with \"POST\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.post = function () /* varargs */{\n  return HTTP.call.apply(this, [\"POST\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PUT\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.put = function () /* varargs */{\n  return HTTP.call.apply(this, [\"PUT\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with \"DELETE\" as the first argument. (Named `del` to avoid conflict with the Javascript keyword `delete`)\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.del = function () /* varargs */{\n  return HTTP.call.apply(this, [\"DELETE\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `PATCH` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PATCH\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.patch = function () /* varargs */{\n  return HTTP.call.apply(this, [\"PATCH\"].concat(_.toArray(arguments)));\n};","ast":null,"map":{"version":3,"sources":["/packages/http/httpcall_common.js"],"names":[],"mappings":"AAAA,IAAM,aAAa,GAAnB,C;;AAEA,oBAAoB,2BAAS,UAAT,EAAqB,OAArB,EAA8B;AAChD,MAAI,uBAAqB,UAArB,MAAJ;;AAEA,MAAI,OAAJ,EAAa;AACX,QAAM,gBAAgB,OAAO,OAAP,IAAkB,QAAlB,GACpB,OADoB,GACV,QAAQ,QAAR,EADZ;;AAGA,eAAW,MAAM,SAAS,cAAc,OAAd,CAAsB,KAAtB,EAA6B,GAA7B,CAAT,EAA4C,UAA5C,CAAjB;AACD;;AAED,SAAO,IAAI,KAAJ,CAAU,OAAV,CAAP;AACD,CAXD;;AAaA,SAAS,QAAT,CAAkB,GAAlB,EAAuB,MAAvB,EAA+B;AAC7B,SAAO,IAAI,MAAJ,GAAa,MAAb,GAAsB,IAAI,KAAJ,CAAU,CAAV,EAAa,MAAb,IAAuB,KAA7C,GAAqD,GAA5D;AACD;;;AAGD,eAAe,sBAAS,QAAT,EAAmB;;;;AAIhC,MAAI,cAAc,CAAC,SAAS,OAAT,CAAiB,cAAjB,KAAoC,GAArC,EAA0C,KAA1C,CAAgD,GAAhD,EAAqD,CAArD,CAAlB;;;AAGA,MAAI,EAAE,OAAF,CAAU,CAAC,kBAAD,EAAqB,iBAArB,EACV,wBADU,EACgB,0BADhB,CAAV,EACuD,WADvD,CAAJ,EACyE;AACvE,QAAI;AACF,eAAS,IAAT,GAAgB,KAAK,KAAL,CAAW,SAAS,OAApB,CAAhB;AACD,KAFD,CAEE,OAAO,GAAP,EAAY;AACZ,eAAS,IAAT,GAAgB,IAAhB;AACD;AACF,GAPD,MAOO;AACL,aAAS,IAAT,GAAgB,IAAhB;AACD;AACF,CAjBD;;AAmBA,OAAO,EAAP;;;;;;;;;AASA,KAAK,GAAL,GAAW,Y,aAAyB;AAClC,SAAO,KAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,EAAsB,CAAC,KAAD,EAAQ,MAAR,CAAe,EAAE,OAAF,CAAU,SAAV,CAAf,CAAtB,CAAP;AACD,CAFD;;;;;;;;;AAWA,KAAK,IAAL,GAAY,Y,aAAyB;AACnC,SAAO,KAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,EAAsB,CAAC,MAAD,EAAS,MAAT,CAAgB,EAAE,OAAF,CAAU,SAAV,CAAhB,CAAtB,CAAP;AACD,CAFD;;;;;;;;;AAWA,KAAK,GAAL,GAAW,Y,aAAyB;AAClC,SAAO,KAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,EAAsB,CAAC,KAAD,EAAQ,MAAR,CAAe,EAAE,OAAF,CAAU,SAAV,CAAf,CAAtB,CAAP;AACD,CAFD;;;;;;;;;AAWA,KAAK,GAAL,GAAW,Y,aAAyB;AAClC,SAAO,KAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,EAAsB,CAAC,QAAD,EAAW,MAAX,CAAkB,EAAE,OAAF,CAAU,SAAV,CAAlB,CAAtB,CAAP;AACD,CAFD;;;;;;;;;AAWA,KAAK,KAAL,GAAa,Y,aAAyB;AACpC,SAAO,KAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,EAAsB,CAAC,OAAD,EAAU,MAAV,CAAiB,EAAE,OAAF,CAAU,SAAV,CAAjB,CAAtB,CAAP;AACD,CAFD","file":"/packages/http/httpcall_common.js.map","sourcesContent":["const MAX_LENGTH = 500; // if you change this, also change the appropriate test\n\nmakeErrorByStatus = function(statusCode, content) {\n  let message = `failed [${statusCode}]`;\n\n  if (content) {\n    const stringContent = typeof content == \"string\" ?\n      content : content.toString();\n\n    message += ' ' + truncate(stringContent.replace(/\\n/g, ' '), MAX_LENGTH);\n  }\n\n  return new Error(message);\n};\n\nfunction truncate(str, length) {\n  return str.length > length ? str.slice(0, length) + '...' : str;\n}\n\n// Fill in `response.data` if the content-type is JSON.\npopulateData = function(response) {\n  // Read Content-Type header, up to a ';' if there is one.\n  // A typical header might be \"application/json; charset=utf-8\"\n  // or just \"application/json\".\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];\n\n  // Only try to parse data as JSON if server sets correct content type.\n  if (_.include(['application/json', 'text/javascript',\n      'application/javascript', 'application/x-javascript'], contentType)) {\n    try {\n      response.data = JSON.parse(response.content);\n    } catch (err) {\n      response.data = null;\n    }\n  } else {\n    response.data = null;\n  }\n};\n\nHTTP = {};\n\n/**\n * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with \"GET\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.get = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"GET\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with \"POST\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.post = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"POST\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PUT\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.put = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"PUT\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with \"DELETE\" as the first argument. (Named `del` to avoid conflict with the Javascript keyword `delete`)\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.del = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"DELETE\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `PATCH` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PATCH\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.patch = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"PATCH\"].concat(_.toArray(arguments)));\n};\n"]},"hash":"e66925843122cc79a0e14858c78bf7bd8ce20871"}
