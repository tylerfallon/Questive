{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/accounts-password/email_tests_setup.js","filenameRelative":"/packages/accounts-password/email_tests_setup.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/accounts-password/email_tests_setup.js.map","sourceFileName":"/packages/accounts-password/email_tests_setup.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"email_tests_setup"},"ignored":false,"code":"//\n// a mechanism to intercept emails sent to addressing including\n// the string \"intercept\", storing them in an array that can then\n// be retrieved using the getInterceptedEmails method\n//\nvar interceptedEmails = {}; // (email address) -> (array of options)\n\n// add html email templates that just contain the url\nAccounts.emailTemplates.resetPassword.html = Accounts.emailTemplates.enrollAccount.html = Accounts.emailTemplates.verifyEmail.html = function (user, url) {\n  return url;\n};\n\n// override the from address\nAccounts.emailTemplates.resetPassword.from = Accounts.emailTemplates.enrollAccount.from = Accounts.emailTemplates.verifyEmail.from = function (user) {\n  return 'test@meteor.com';\n};\n\n// add a custom header to check against\nAccounts.emailTemplates.headers = {\n  'My-Custom-Header': 'Cool'\n};\n\nEmailTest.hookSend(function (options) {\n  var to = options.to;\n  if (!to || to.indexOf('intercept') === -1) {\n    return true; // go ahead and send\n  } else {\n      if (!interceptedEmails[to]) interceptedEmails[to] = [];\n\n      interceptedEmails[to].push(options);\n      return false; // skip sending\n    }\n});\n\nMeteor.methods({\n  getInterceptedEmails: function getInterceptedEmails(email) {\n    check(email, String);\n    return interceptedEmails[email];\n  },\n\n  addEmailForTestAndVerify: function addEmailForTestAndVerify(email) {\n    check(email, String);\n    Meteor.users.update({ _id: this.userId }, { $push: { emails: { address: email, verified: false } } });\n    Accounts.sendVerificationEmail(this.userId, email);\n  },\n\n  createUserOnServer: function createUserOnServer(email) {\n    check(email, String);\n    var userId = Accounts.createUser({ email: email });\n    Accounts.sendEnrollmentEmail(userId);\n    return Meteor.users.findOne(userId);\n  }\n});","ast":null,"map":{"version":3,"sources":["/packages/accounts-password/email_tests_setup.js"],"names":[],"mappings":";;;;;AAKA,IAAI,oBAAoB,EAAxB,C;;;AAGA,SAAS,cAAT,CAAwB,aAAxB,CAAsC,IAAtC,GACE,SAAS,cAAT,CAAwB,aAAxB,CAAsC,IAAtC,GACA,SAAS,cAAT,CAAwB,WAAxB,CAAoC,IAApC,GAA2C,UAAU,IAAV,EAAgB,GAAhB,EAAqB;AAC9D,SAAO,GAAP;AACD,CAJH;;;AAOA,SAAS,cAAT,CAAwB,aAAxB,CAAsC,IAAtC,GACE,SAAS,cAAT,CAAwB,aAAxB,CAAsC,IAAtC,GACE,SAAS,cAAT,CAAwB,WAAxB,CAAoC,IAApC,GAA2C,UAAU,IAAV,EAAgB;AACzD,SAAO,iBAAP;AACD,CAJL;;;AAOA,SAAS,cAAT,CAAwB,OAAxB,GAAkC;AAChC,sBAAqB;AADW,CAAlC;;AAIA,UAAU,QAAV,CAAmB,UAAU,OAAV,EAAmB;AACpC,MAAI,KAAK,QAAQ,EAAjB;AACA,MAAI,CAAC,EAAD,IAAO,GAAG,OAAH,CAAW,WAAX,MAA4B,CAAC,CAAxC,EAA2C;AACzC,WAAO,IAAP,C;AACD,GAFD,MAEO;AACL,UAAI,CAAC,kBAAkB,EAAlB,CAAL,EACE,kBAAkB,EAAlB,IAAwB,EAAxB;;AAEF,wBAAkB,EAAlB,EAAsB,IAAtB,CAA2B,OAA3B;AACA,aAAO,KAAP,C;AACD;AACF,CAXD;;AAaA,OAAO,OAAP,CAAe;AACb,wBAAsB,8BAAU,KAAV,EAAiB;AACrC,UAAM,KAAN,EAAa,MAAb;AACA,WAAO,kBAAkB,KAAlB,CAAP;AACD,GAJY;;AAMb,4BAA0B,kCAAU,KAAV,EAAiB;AACzC,UAAM,KAAN,EAAa,MAAb;AACA,WAAO,KAAP,CAAa,MAAb,CACE,EAAC,KAAK,KAAK,MAAX,EADF,EAEE,EAAC,OAAO,EAAC,QAAQ,EAAC,SAAS,KAAV,EAAiB,UAAU,KAA3B,EAAT,EAAR,EAFF;AAGA,aAAS,qBAAT,CAA+B,KAAK,MAApC,EAA4C,KAA5C;AACD,GAZY;;AAcb,sBAAoB,4BAAU,KAAV,EAAiB;AACnC,UAAM,KAAN,EAAa,MAAb;AACA,QAAI,SAAS,SAAS,UAAT,CAAoB,EAAC,OAAO,KAAR,EAApB,CAAb;AACA,aAAS,mBAAT,CAA6B,MAA7B;AACA,WAAO,OAAO,KAAP,CAAa,OAAb,CAAqB,MAArB,CAAP;AACD;AAnBY,CAAf","file":"/packages/accounts-password/email_tests_setup.js.map","sourcesContent":["//\n// a mechanism to intercept emails sent to addressing including\n// the string \"intercept\", storing them in an array that can then\n// be retrieved using the getInterceptedEmails method\n//\nvar interceptedEmails = {}; // (email address) -> (array of options)\n\n// add html email templates that just contain the url\nAccounts.emailTemplates.resetPassword.html =\n  Accounts.emailTemplates.enrollAccount.html =\n  Accounts.emailTemplates.verifyEmail.html = function (user, url) {\n    return url;\n  };\n\n// override the from address\nAccounts.emailTemplates.resetPassword.from =\n  Accounts.emailTemplates.enrollAccount.from =\n    Accounts.emailTemplates.verifyEmail.from = function (user) {\n      return 'test@meteor.com';\n    };\n\n// add a custom header to check against\nAccounts.emailTemplates.headers = {\n  'My-Custom-Header' : 'Cool'\n};\n\nEmailTest.hookSend(function (options) {\n  var to = options.to;\n  if (!to || to.indexOf('intercept') === -1) {\n    return true; // go ahead and send\n  } else {\n    if (!interceptedEmails[to])\n      interceptedEmails[to] = [];\n\n    interceptedEmails[to].push(options);\n    return false; // skip sending\n  }\n});\n\nMeteor.methods({\n  getInterceptedEmails: function (email) {\n    check(email, String);\n    return interceptedEmails[email];\n  },\n\n  addEmailForTestAndVerify: function (email) {\n    check(email, String);\n    Meteor.users.update(\n      {_id: this.userId},\n      {$push: {emails: {address: email, verified: false}}});\n    Accounts.sendVerificationEmail(this.userId, email);\n  },\n\n  createUserOnServer: function (email) {\n    check(email, String);\n    var userId = Accounts.createUser({email: email});\n    Accounts.sendEnrollmentEmail(userId);\n    return Meteor.users.findOne(userId);\n  }\n});\n"]},"hash":"8f30f1c1a955d620840a84b52db69e0300088146"}
