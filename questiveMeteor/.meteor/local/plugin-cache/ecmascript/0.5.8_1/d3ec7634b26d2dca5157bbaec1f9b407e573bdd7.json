{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"../../core/utils/throw_parse_error.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"throwParseError"}]},{"source":"../validators.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Validators"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/validators/utils/parse_validators.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/validators/utils/parse_validators.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/validators/utils/parse_validators.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/validators/utils/parse_validators.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"parse_validators"},"ignored":false,"code":"var _;module.import('lodash',{\"default\":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});var Validators;module.import('../validators.js',{\"default\":function(v){Validators=v}});\n\n\n\nvar validatorsPattern = [{\n  type: String,\n  param: Match.Optional(Match.Any),\n  resolveParam: Match.Optional(Function),\n  message: Match.Optional(String),\n  resolveError: Match.Optional(Function)\n}];\n\nfunction parseValidators(validators, parseContext) {\n  // Validators list is an array of object that should include at least the\n  // \"type\" property.\n  if (validators && !Match.test(validators, validatorsPattern)) {\n    throwParseError(_.union(parseContext, ['Validators definition has to be an array of objects']));\n  }\n\n  _.forEach(validators, function (validator) {\n    // Check if a validator of a given type exists.\n    if (!_.has(Validators, validator.type)) {\n      throwParseError(_.union(parseContext, ['There is no \"' + validator.type + '\" validator']));\n    }\n  });\n};\n\nmodule.export(\"default\",exports.default=(parseValidators));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/validators/utils/parse_validators.js"],"names":[],"mappings":"AAAA,OAAO,CAAP,MAAc,QAAd;AACA,OAAO,eAAP,MAA4B,uCAA5B;AACA,OAAO,UAAP,MAAuB,kBAAvB;;AAEA,IAAM,oBAAoB,CAAC;AACzB,QAAM,MADmB;AAEzB,SAAO,MAAM,QAAN,CAAe,MAAM,GAArB,CAFkB;AAGzB,gBAAc,MAAM,QAAN,CAAe,QAAf,CAHW;AAIzB,WAAS,MAAM,QAAN,CAAe,MAAf,CAJgB;AAKzB,gBAAc,MAAM,QAAN,CAAe,QAAf;AALW,CAAD,CAA1B;;AAQA,SAAS,eAAT,CAAyB,UAAzB,EAAqC,YAArC,EAAmD;;;AAGjD,MAAI,cAAc,CAAC,MAAM,IAAN,CAAW,UAAX,EAAuB,iBAAvB,CAAnB,EAA8D;AAC5D,oBAAgB,EAAE,KAAF,CACd,YADc,EACA,CAAC,qDAAD,CADA,CAAhB;AAGD;;AAED,IAAE,OAAF,CAAU,UAAV,EAAsB,UAAS,SAAT,EAAoB;;AAExC,QAAI,CAAC,EAAE,GAAF,CAAM,UAAN,EAAkB,UAAU,IAA5B,CAAL,EAAwC;AACtC,sBAAgB,EAAE,KAAF,CACd,YADc,EACA,mBAAiB,UAAU,IAA3B,iBADA,CAAhB;AAGD;AACF,GAPD;AAQD;;AAED,eAAe,eAAf","file":"/packages/jagi:astronomy/lib/modules/validators/utils/parse_validators.js.map","sourcesContent":["import _ from 'lodash';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport Validators from '../validators.js';\n\nconst validatorsPattern = [{\n  type: String,\n  param: Match.Optional(Match.Any),\n  resolveParam: Match.Optional(Function),\n  message: Match.Optional(String),\n  resolveError: Match.Optional(Function)\n}];\n\nfunction parseValidators(validators, parseContext) {\n  // Validators list is an array of object that should include at least the\n  // \"type\" property.\n  if (validators && !Match.test(validators, validatorsPattern)) {\n    throwParseError(_.union(\n      parseContext, ['Validators definition has to be an array of objects']\n    ));\n  }\n\n  _.forEach(validators, function(validator) {\n    // Check if a validator of a given type exists.\n    if (!_.has(Validators, validator.type)) {\n      throwParseError(_.union(\n        parseContext, [`There is no \"${validator.type}\" validator`]\n      ));\n    }\n  });\n};\n\nexport default parseValidators;"]},"hash":"d3ec7634b26d2dca5157bbaec1f9b407e573bdd7"}
