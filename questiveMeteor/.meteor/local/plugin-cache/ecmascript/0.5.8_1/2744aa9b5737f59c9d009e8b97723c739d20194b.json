{"metadata":{"usedHelpers":["typeof"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/http/httpcall_tests.js","filenameRelative":"/packages/http/httpcall_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/http/httpcall_tests.js.map","sourceFileName":"/packages/http/httpcall_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"httpcall_tests"},"ignored":false,"code":"var _typeof;module.import(\"babel-runtime/helpers/typeof\",{\"default\":function(v){_typeof=v}});\n// URL prefix for tests to talk to\nvar _XHR_URL_PREFIX = \"/http_test_responder\";\n\nvar url_base = function url_base() {\n  if (Meteor.isServer) {\n    var address = WebApp.httpServer.address();\n    return \"http://127.0.0.1:\" + address.port;\n  } else {\n    return \"\";\n  }\n};\n\nvar url_prefix = function url_prefix() {\n  if (Meteor.isServer && _XHR_URL_PREFIX.indexOf(\"http\") !== 0) {\n    _XHR_URL_PREFIX = url_base() + _XHR_URL_PREFIX;\n  }\n  return _XHR_URL_PREFIX;\n};\n\ntestAsyncMulti(\"httpcall - basic\", [function (test, expect) {\n  var basic_get = function basic_get(url, options, expected_url) {\n\n    var callback = function callback(error, result) {\n      test.isFalse(error);\n      if (!error) {\n        test.equal(typeof result === \"undefined\" ? \"undefined\" : _typeof(result), \"object\");\n        test.equal(result.statusCode, 200);\n\n        var data = result.data;\n\n        // allow dropping of final ? (which mobile browsers seem to do)\n        var allowed = [expected_url];\n        if (expected_url.slice(-1) === '?') allowed.push(expected_url.slice(0, -1));\n\n        test.include(allowed, expected_url);\n        test.equal(data.method, \"GET\");\n      }\n    };\n\n    HTTP.call(\"GET\", url_prefix() + url, options, expect(callback));\n\n    if (Meteor.isServer) {\n      // test sync version\n      try {\n        var result = HTTP.call(\"GET\", url_prefix() + url, options);\n        callback(undefined, result);\n      } catch (e) {\n        callback(e, e.response);\n      }\n    }\n  };\n\n  basic_get(\"/foo\", null, \"/foo\");\n  basic_get(\"/foo?\", null, \"/foo?\");\n  basic_get(\"/foo?a=b\", null, \"/foo?a=b\");\n  basic_get(\"/foo\", { params: { fruit: \"apple\" } }, \"/foo?fruit=apple\");\n  basic_get(\"/foo\", { params: { fruit: \"apple\", dog: \"Spot the dog\" } }, \"/foo?fruit=apple&dog=Spot+the+dog\");\n  basic_get(\"/foo?\", { params: { fruit: \"apple\", dog: \"Spot the dog\" } }, \"/foo?fruit=apple&dog=Spot+the+dog\");\n  basic_get(\"/foo?bar\", { params: { fruit: \"apple\", dog: \"Spot the dog\" } }, \"/foo?bar&fruit=apple&dog=Spot+the+dog\");\n  basic_get(\"/foo?bar\", { params: { fruit: \"apple\", dog: \"Spot the dog\" },\n    query: \"baz\" }, \"/foo?baz&fruit=apple&dog=Spot+the+dog\");\n  basic_get(\"/foo\", { params: { fruit: \"apple\", dog: \"Spot the dog\" },\n    query: \"baz\" }, \"/foo?baz&fruit=apple&dog=Spot+the+dog\");\n  basic_get(\"/foo?\", { params: { fruit: \"apple\", dog: \"Spot the dog\" },\n    query: \"baz\" }, \"/foo?baz&fruit=apple&dog=Spot+the+dog\");\n  basic_get(\"/foo?bar\", { query: \"\" }, \"/foo?\");\n  basic_get(\"/foo?bar\", { params: { fruit: \"apple\", dog: \"Spot the dog\" },\n    query: \"\" }, \"/foo?fruit=apple&dog=Spot+the+dog\");\n}]);\n\ntestAsyncMulti(\"httpcall - errors\", [function (test, expect) {\n\n  // Accessing unknown server (should fail to make any connection)\n  var unknownServerCallback = function unknownServerCallback(error, result) {\n    test.isTrue(error);\n    test.isFalse(result);\n    test.isFalse(error.response);\n  };\n\n  var invalidIp = \"0.0.0.199\";\n  // This is an invalid destination IP address, and thus should always give an error.\n  // If your ISP is intercepting DNS misses and serving ads, an obviously\n  // invalid URL (http://asdf.asdf) might produce an HTTP response.\n  HTTP.call(\"GET\", \"http://\" + invalidIp + \"/\", expect(unknownServerCallback));\n\n  if (Meteor.isServer) {\n    // test sync version\n    try {\n      var unknownServerResult = HTTP.call(\"GET\", \"http://\" + invalidIp + \"/\");\n      unknownServerCallback(undefined, unknownServerResult);\n    } catch (e) {\n      unknownServerCallback(e, e.response);\n    }\n  }\n\n  // Server serves 500\n  var error500Callback = function error500Callback(error, result) {\n    test.isTrue(error);\n    test.isTrue(error.message.indexOf(\"500\") !== -1); // message has statusCode\n    test.isTrue(error.message.indexOf(error.response.content.substring(0, 10)) !== -1); // message has part of content\n\n    test.isTrue(result);\n    test.isTrue(error.response);\n    test.equal(result, error.response);\n    test.equal(error.response.statusCode, 500);\n\n    // in test_responder.js we make a very long response body, to make sure\n    // that we truncate messages. first of all, make sure we didn't make that\n    // message too short, so that we can be sure we're verifying that we truncate.\n    test.isTrue(error.response.content.length > 520);\n    test.isTrue(error.message.length < 520); // make sure we truncate.\n  };\n  HTTP.call(\"GET\", url_prefix() + \"/fail\", expect(error500Callback));\n\n  if (Meteor.isServer) {\n    // test sync version\n    try {\n      var error500Result = HTTP.call(\"GET\", url_prefix() + \"/fail\");\n      error500Callback(undefined, error500Result);\n    } catch (e) {\n      error500Callback(e, e.response);\n    }\n  }\n}]);\n\ntestAsyncMulti(\"httpcall - timeout\", [function (test, expect) {\n\n  // Should time out\n  var timeoutCallback = function timeoutCallback(error, result) {\n    test.isTrue(error);\n    test.isFalse(result);\n    test.isFalse(error.response);\n  };\n  var timeoutUrl = url_prefix() + \"/slow-\" + Random.id();\n  HTTP.call(\"GET\", timeoutUrl, { timeout: 500 }, expect(timeoutCallback));\n\n  if (Meteor.isServer) {\n    // test sync version\n    try {\n      var timeoutResult = HTTP.call(\"GET\", timeoutUrl, { timeout: 500 });\n      timeoutCallback(undefined, timeoutResult);\n    } catch (e) {\n      timeoutCallback(e, e.response);\n    }\n  }\n\n  // Should not time out\n  var noTimeoutCallback = function noTimeoutCallback(error, result) {\n    test.isFalse(error);\n    test.isTrue(result);\n    test.equal(result.statusCode, 200);\n    var data = result.data;\n    test.equal(data.url.substring(0, 4), \"/foo\");\n    test.equal(data.method, \"GET\");\n  };\n  var noTimeoutUrl = url_prefix() + \"/foo-\" + Random.id();\n  HTTP.call(\"GET\", noTimeoutUrl, { timeout: 2000 }, expect(noTimeoutCallback));\n\n  if (Meteor.isServer) {\n    // test sync version\n    try {\n      var noTimeoutResult = HTTP.call(\"GET\", noTimeoutUrl, { timeout: 2000 });\n      noTimeoutCallback(undefined, noTimeoutResult);\n    } catch (e) {\n      noTimeoutCallback(e, e.response);\n    }\n  }\n}]);\n\ntestAsyncMulti(\"httpcall - redirect\", [function (test, expect) {\n  // Test that we follow redirects by default\n  HTTP.call(\"GET\", url_prefix() + \"/redirect\", expect(function (error, result) {\n    test.isFalse(error);\n    test.isTrue(result);\n\n    // should be redirected transparently to /foo\n    test.equal(result.statusCode, 200);\n    var data = result.data;\n    test.equal(data.url, \"/foo\");\n    test.equal(data.method, \"GET\");\n  }));\n\n  // followRedirect option; can't be false on client\n  _.each([false, true], function (followRedirects) {\n    var do_it = function do_it(should_work) {\n      var maybe_expect = should_work ? expect : _.identity;\n      _.each([\"GET\", \"POST\"], function (method) {\n        HTTP.call(method, url_prefix() + \"/redirect\", { followRedirects: followRedirects }, maybe_expect(function (error, result) {\n          test.isFalse(error);\n          test.isTrue(result);\n\n          if (followRedirects) {\n            // should be redirected transparently to /foo\n            test.equal(result.statusCode, 200);\n            var data = result.data;\n            test.equal(data.url, \"/foo\");\n            // This is \"GET\" even when the initial request was a\n            // POST because browsers follow redirects with a GET\n            // even when the initial request was a different method.\n            test.equal(data.method, \"GET\");\n          } else {\n            // should see redirect\n            test.equal(result.statusCode, 301);\n          }\n        }));\n      });\n    };\n    if (Meteor.isClient && !followRedirects) {\n      // not supported, should fail\n      test.throws(do_it);\n    } else {\n      do_it(true);\n    }\n  });\n}]);\n\ntestAsyncMulti(\"httpcall - methods\", [function (test, expect) {\n  // non-get methods\n  var test_method = function test_method(meth, func_name) {\n    func_name = func_name || meth.toLowerCase();\n    HTTP[func_name](url_prefix() + \"/foo\", expect(function (error, result) {\n      test.isFalse(error);\n      test.isTrue(result);\n      test.equal(result.statusCode, 200);\n      var data = result.data;\n      test.equal(data.url, \"/foo\");\n\n      // IE <= 8 turns seems to turn POSTs with no body into\n      // GETs, inexplicably.\n      //\n      // XXX Except now it doesn't!? Not sure what changed, but\n      // these lines now break the test...\n      // if (Meteor.isClient && $.browser.msie && $.browser.version <= 8\n      //     && meth === \"POST\")\n      //   meth = \"GET\";\n\n      test.equal(data.method, meth);\n    }));\n  };\n\n  test_method(\"GET\");\n  test_method(\"POST\");\n  test_method(\"PUT\");\n  test_method(\"DELETE\", 'del');\n  test_method(\"PATCH\");\n}, function (test, expect) {\n  // contents and data\n  HTTP.call(\"POST\", url_prefix() + \"/foo\", { content: \"Hello World!\" }, expect(function (error, result) {\n    test.isFalse(error);\n    test.isTrue(result);\n    test.equal(result.statusCode, 200);\n    var data = result.data;\n    test.equal(data.body, \"Hello World!\");\n  }));\n\n  HTTP.call(\"POST\", url_prefix() + \"/data-test\", { data: { greeting: \"Hello World!\" } }, expect(function (error, result) {\n    test.isFalse(error);\n    test.isTrue(result);\n    test.equal(result.statusCode, 200);\n    var data = result.data;\n    test.equal(data.body, { greeting: \"Hello World!\" });\n    // nb: some browsers include a charset here too.\n    test.matches(data.headers['content-type'], /^application\\/json\\b/);\n  }));\n\n  HTTP.call(\"POST\", url_prefix() + \"/data-test-explicit\", { data: { greeting: \"Hello World!\" },\n    headers: { 'Content-Type': 'text/stupid' } }, expect(function (error, result) {\n    test.isFalse(error);\n    test.isTrue(result);\n    test.equal(result.statusCode, 200);\n    var data = result.data;\n    test.equal(data.body, { greeting: \"Hello World!\" });\n    // nb: some browsers include a charset here too.\n    test.matches(data.headers['content-type'], /^text\\/stupid\\b/);\n  }));\n}]);\n\ntestAsyncMulti(\"httpcall - http auth\", [function (test, expect) {\n  // Test basic auth\n\n  // Unfortunately, any failed auth will result in a browser\n  // password prompt.  So we don't test auth failure, only\n  // success.\n\n  // Random password breaks in Firefox, because Firefox incorrectly\n  // uses cached credentials even if we supply different ones:\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=654348\n  var password = 'rocks';\n  //var password = Random.id().replace(/[^0-9a-zA-Z]/g, '');\n  HTTP.call(\"GET\", url_prefix() + \"/login?\" + password, { auth: \"meteor:\" + password }, expect(function (error, result) {\n    // should succeed\n    test.isFalse(error);\n    test.isTrue(result);\n    test.equal(result.statusCode, 200);\n    var data = result.data;\n    test.equal(data.url, \"/login?\" + password);\n  }));\n\n  // test fail on malformed username:password\n  test.throws(function () {\n    HTTP.call(\"GET\", url_prefix() + \"/login?\" + password, { auth: \"fooooo\" }, function () {\n      throw new Error(\"can't get here\");\n    });\n  });\n}]);\n\ntestAsyncMulti(\"httpcall - headers\", [function (test, expect) {\n  HTTP.call(\"GET\", url_prefix() + \"/foo-with-headers\", { headers: { \"Test-header\": \"Value\",\n      \"another\": \"Value2\" } }, expect(function (error, result) {\n    test.isFalse(error);\n    test.isTrue(result);\n\n    test.equal(result.statusCode, 200);\n    var data = result.data;\n    test.equal(data.url, \"/foo-with-headers\");\n    test.equal(data.method, \"GET\");\n    test.equal(data.headers['test-header'], \"Value\");\n    test.equal(data.headers['another'], \"Value2\");\n  }));\n\n  HTTP.call(\"GET\", url_prefix() + \"/headers\", expect(function (error, result) {\n    test.isFalse(error);\n    test.isTrue(result);\n\n    test.equal(result.statusCode, 201);\n    test.equal(result.headers['a-silly-header'], \"Tis a\");\n    test.equal(result.headers['another-silly-header'], \"Silly place.\");\n  }));\n}]);\n\ntestAsyncMulti(\"httpcall - params\", [function (test, expect) {\n  var do_test = function do_test(method, url, params, opt_opts, expect_url, expect_body) {\n    var opts = {};\n    if (typeof opt_opts === \"string\") {\n      // opt_opts omitted\n      expect_body = expect_url;\n      expect_url = opt_opts;\n    } else {\n      opts = opt_opts;\n    }\n    HTTP.call(method, url_prefix() + url, _.extend({ params: params }, opts), expect(function (error, result) {\n      test.isFalse(error);\n      test.isTrue(result);\n      test.equal(result.statusCode, 200);\n      if (method !== \"HEAD\") {\n        var data = result.data;\n        test.equal(data.method, method);\n        test.equal(data.url, expect_url);\n        test.equal(data.body, expect_body);\n      }\n    }));\n  };\n\n  do_test(\"GET\", \"/blah\", { foo: \"bar\" }, \"/blah?foo=bar\", \"\");\n  do_test(\"GET\", \"/\", { foo: \"bar\", fruit: \"apple\" }, \"/?foo=bar&fruit=apple\", \"\");\n  do_test(\"POST\", \"/\", { foo: \"bar\", fruit: \"apple\" }, \"/\", \"foo=bar&fruit=apple\");\n  do_test(\"POST\", \"/\", { foo: \"bar\", fruit: \"apple\" }, \"/\", \"foo=bar&fruit=apple\");\n  do_test(\"GET\", \"/\", { 'foo!': \"bang!\" }, {}, \"/?foo%21=bang%21\", \"\");\n  do_test(\"POST\", \"/\", { 'foo!': \"bang!\" }, {}, \"/\", \"foo%21=bang%21\");\n  do_test(\"POST\", \"/\", { foo: \"bar\", fruit: \"apple\" }, {\n    content: \"stuff!\" }, \"/?foo=bar&fruit=apple\", \"stuff!\");\n  do_test(\"POST\", \"/\", { foo: \"bar\", greeting: \"Hello World\" }, {\n    content: \"stuff!\" }, \"/?foo=bar&greeting=Hello+World\", \"stuff!\");\n  do_test(\"POST\", \"/foo\", { foo: \"bar\", greeting: \"Hello World\" }, \"/foo\", \"foo=bar&greeting=Hello+World\");\n  do_test(\"HEAD\", \"/head\", { foo: \"bar\" }, \"/head?foo=bar\", \"\");\n  do_test(\"PUT\", \"/put\", { foo: \"bar\" }, \"/put\", \"foo=bar\");\n}]);\n\ntestAsyncMulti(\"httpcall - npmRequestOptions\", [function (test, expect) {\n  if (Meteor.isClient) {\n    test.throws(function () {\n      HTTP.get(url_prefix() + \"/\", { npmRequestOptions: { encoding: null } }, function () {});\n    });\n    return;\n  }\n\n  HTTP.get(url_prefix() + \"/\", { npmRequestOptions: { encoding: null } }, expect(function (error, result) {\n    test.isFalse(error);\n    test.isTrue(result);\n    test.equal(result.statusCode, 200);\n    test.instanceOf(result.content, Buffer);\n  }));\n}]);\n\nMeteor.isClient && testAsyncMulti(\"httpcall - beforeSend\", [function (test, expect) {\n  var fired = false;\n  var bSend = function bSend(xhr) {\n    test.isFalse(fired);\n    fired = true;\n    test.isTrue(xhr instanceof XMLHttpRequest);\n  };\n\n  HTTP.get(url_prefix() + \"/\", { beforeSend: bSend }, expect(function () {\n    test.isTrue(fired);\n  }));\n}]);\n\nif (Meteor.isServer) {\n  // This is testing the server's static file sending code, not the http\n  // package. It's here because it is very similar to the other tests\n  // here, even though it is testing something else.\n  //\n  // client http library mangles paths before they are requested. only\n  // run this test on the server.\n  testAsyncMulti(\"httpcall - static file serving\", [function (test, expect) {\n    // Suppress error printing for this test (and for any other code that sets\n    // the x-suppress-error header).\n    WebApp.suppressConnectErrors();\n\n    var do_test = function do_test(path, code, match) {\n      HTTP.get(url_base() + path, { headers: { 'x-suppress-error': 'true' } }, expect(function (error, result) {\n        test.equal(result.statusCode, code);\n        if (match) test.matches(result.content, match);\n      }));\n    };\n\n    // existing static file\n    do_test(\"/packages/local-test_http/test_static.serveme\", 200, /static file serving/);\n\n    // no such file, so return the default app HTML.\n    var getsAppHtml = [\n    // This file doesn't exist.\n    \"/nosuchfile\",\n\n    // Our static file serving doesn't process .. or its encoded version, so\n    // any of these return the app HTML.\n    \"/../nosuchfile\", \"/%2e%2e/nosuchfile\", \"/%2E%2E/nosuchfile\", \"/%2d%2d/nosuchfile\", \"/packages/http/../http/test_static.serveme\", \"/packages/http/%2e%2e/http/test_static.serveme\", \"/packages/http/%2E%2E/http/test_static.serveme\", \"/packages/http/../../packages/http/test_static.serveme\", \"/packages/http/%2e%2e/%2e%2e/packages/http/test_static.serveme\", \"/packages/http/%2E%2E/%2E%2E/packages/http/test_static.serveme\",\n\n    // ... and they *definitely* shouldn't be able to escape the app bundle.\n    \"/packages/http/../../../../../../packages/http/test_static.serveme\", \"/../../../../../../../../../../../bin/ls\", \"/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/bin/ls\", \"/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/bin/ls\"];\n\n    _.each(getsAppHtml, function (x) {\n      do_test(x, 200, /__meteor_runtime_config__ = JSON/);\n    });\n  }]);\n}\n\nMeteor.isServer && Tinytest.add(\"httpcall - npm modules\", function (test) {\n  // Make sure the version number looks like a version number. (All published\n  // request version numbers end in \".0\".)\n  test.matches(HTTPInternals.NpmModules.request.version, /^2\\.(\\d+)\\.0/);\n  test.equal(_typeof(HTTPInternals.NpmModules.request.module), 'function');\n  test.isTrue(HTTPInternals.NpmModules.request.module.get);\n});\n\n// TO TEST/ADD:\n// - https\n// - cookies?\n// - human-readable error reason/cause?\n// - data parse error","ast":null,"map":{"version":3,"sources":["/packages/http/httpcall_tests.js"],"names":[],"mappings":"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","file":"/packages/http/httpcall_tests.js.map","sourcesContent":["// URL prefix for tests to talk to\nvar _XHR_URL_PREFIX = \"/http_test_responder\";\n\nvar url_base = function () {\n  if (Meteor.isServer) {\n    var address = WebApp.httpServer.address();\n    return \"http://127.0.0.1:\" + address.port;\n  } else {\n    return \"\";\n  }\n};\n\nvar url_prefix = function () {\n  if (Meteor.isServer && _XHR_URL_PREFIX.indexOf(\"http\") !== 0) {\n    _XHR_URL_PREFIX = url_base() + _XHR_URL_PREFIX;\n  }\n  return _XHR_URL_PREFIX;\n};\n\n\ntestAsyncMulti(\"httpcall - basic\", [\n  function(test, expect) {\n    var basic_get = function(url, options, expected_url) {\n\n      var callback = function(error, result) {\n        test.isFalse(error);\n        if (! error) {\n          test.equal(typeof result, \"object\");\n          test.equal(result.statusCode, 200);\n\n          var data = result.data;\n\n          // allow dropping of final ? (which mobile browsers seem to do)\n          var allowed = [expected_url];\n          if (expected_url.slice(-1) === '?')\n            allowed.push(expected_url.slice(0, -1));\n\n          test.include(allowed, expected_url);\n          test.equal(data.method, \"GET\");\n        }\n      };\n\n\n      HTTP.call(\"GET\", url_prefix()+url, options, expect(callback));\n\n      if (Meteor.isServer) {\n        // test sync version\n        try {\n          var result = HTTP.call(\"GET\", url_prefix()+url, options);\n          callback(undefined, result);\n        } catch (e) {\n          callback(e, e.response);\n        }\n      }\n    };\n\n    basic_get(\"/foo\", null, \"/foo\");\n    basic_get(\"/foo?\", null, \"/foo?\");\n    basic_get(\"/foo?a=b\", null, \"/foo?a=b\");\n    basic_get(\"/foo\", {params: {fruit: \"apple\"}},\n              \"/foo?fruit=apple\");\n    basic_get(\"/foo\", {params: {fruit: \"apple\", dog: \"Spot the dog\"}},\n              \"/foo?fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo?\", {params: {fruit: \"apple\", dog: \"Spot the dog\"}},\n              \"/foo?fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo?bar\", {params: {fruit: \"apple\", dog: \"Spot the dog\"}},\n              \"/foo?bar&fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo?bar\", {params: {fruit: \"apple\", dog: \"Spot the dog\"},\n                           query: \"baz\"},\n              \"/foo?baz&fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo\", {params: {fruit: \"apple\", dog: \"Spot the dog\"},\n                       query: \"baz\"},\n              \"/foo?baz&fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo?\", {params: {fruit: \"apple\", dog: \"Spot the dog\"},\n                       query: \"baz\"},\n              \"/foo?baz&fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo?bar\", {query: \"\"}, \"/foo?\");\n    basic_get(\"/foo?bar\", {params: {fruit: \"apple\", dog: \"Spot the dog\"},\n                           query: \"\"},\n              \"/foo?fruit=apple&dog=Spot+the+dog\");\n  }]);\n\ntestAsyncMulti(\"httpcall - errors\", [\n  function(test, expect) {\n\n    // Accessing unknown server (should fail to make any connection)\n    var unknownServerCallback = function(error, result) {\n      test.isTrue(error);\n      test.isFalse(result);\n      test.isFalse(error.response);\n    };\n\n    const invalidIp = \"0.0.0.199\";\n    // This is an invalid destination IP address, and thus should always give an error.\n    // If your ISP is intercepting DNS misses and serving ads, an obviously\n    // invalid URL (http://asdf.asdf) might produce an HTTP response.\n    HTTP.call(\"GET\", `http://${invalidIp}/`, expect(unknownServerCallback));\n\n    if (Meteor.isServer) {\n      // test sync version\n      try {\n        var unknownServerResult = HTTP.call(\"GET\", `http://${invalidIp}/`);\n        unknownServerCallback(undefined, unknownServerResult);\n      } catch (e) {\n        unknownServerCallback(e, e.response);\n      }\n    }\n\n    // Server serves 500\n    var error500Callback = function(error, result) {\n      test.isTrue(error);\n      test.isTrue(error.message.indexOf(\"500\") !== -1); // message has statusCode\n      test.isTrue(error.message.indexOf(\n        error.response.content.substring(0, 10)) !== -1); // message has part of content\n\n      test.isTrue(result);\n      test.isTrue(error.response);\n      test.equal(result, error.response);\n      test.equal(error.response.statusCode, 500);\n\n      // in test_responder.js we make a very long response body, to make sure\n      // that we truncate messages. first of all, make sure we didn't make that\n      // message too short, so that we can be sure we're verifying that we truncate.\n      test.isTrue(error.response.content.length > 520);\n      test.isTrue(error.message.length < 520); // make sure we truncate.\n    };\n    HTTP.call(\"GET\", url_prefix()+\"/fail\", expect(error500Callback));\n\n    if (Meteor.isServer) {\n      // test sync version\n      try {\n        var error500Result = HTTP.call(\"GET\", url_prefix()+\"/fail\");\n        error500Callback(undefined, error500Result);\n      } catch (e) {\n        error500Callback(e, e.response);\n      }\n    }\n  }\n]);\n\ntestAsyncMulti(\"httpcall - timeout\", [\n  function(test, expect) {\n\n    // Should time out\n    var timeoutCallback = function(error, result) {\n      test.isTrue(error);\n      test.isFalse(result);\n      test.isFalse(error.response);\n    };\n    var timeoutUrl = url_prefix()+\"/slow-\"+Random.id();\n    HTTP.call(\n      \"GET\", timeoutUrl,\n      { timeout: 500 },\n      expect(timeoutCallback));\n\n    if (Meteor.isServer) {\n      // test sync version\n      try {\n        var timeoutResult = HTTP.call(\"GET\", timeoutUrl, { timeout: 500 });\n        timeoutCallback(undefined, timeoutResult);\n      } catch (e) {\n        timeoutCallback(e, e.response);\n      }\n    }\n\n    // Should not time out\n    var noTimeoutCallback = function(error, result) {\n      test.isFalse(error);\n      test.isTrue(result);\n      test.equal(result.statusCode, 200);\n      var data = result.data;\n      test.equal(data.url.substring(0, 4), \"/foo\");\n      test.equal(data.method, \"GET\");\n    };\n    var noTimeoutUrl = url_prefix()+\"/foo-\"+Random.id();\n    HTTP.call(\n      \"GET\", noTimeoutUrl,\n      { timeout: 2000 },\n      expect(noTimeoutCallback));\n\n    if (Meteor.isServer) {\n      // test sync version\n      try {\n        var noTimeoutResult = HTTP.call(\"GET\", noTimeoutUrl, { timeout: 2000 });\n        noTimeoutCallback(undefined, noTimeoutResult);\n      } catch (e) {\n        noTimeoutCallback(e, e.response);\n      }\n    }\n  }\n]);\n\ntestAsyncMulti(\"httpcall - redirect\", [\n\n  function(test, expect) {\n    // Test that we follow redirects by default\n    HTTP.call(\"GET\", url_prefix()+\"/redirect\", expect(\n      function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n\n        // should be redirected transparently to /foo\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.url, \"/foo\");\n        test.equal(data.method, \"GET\");\n      }));\n\n    // followRedirect option; can't be false on client\n    _.each([false, true], function(followRedirects) {\n      var do_it = function(should_work) {\n        var maybe_expect = should_work ? expect : _.identity;\n        _.each([\"GET\", \"POST\"], function (method) {\n          HTTP.call(\n            method, url_prefix()+\"/redirect\",\n            {followRedirects: followRedirects},\n            maybe_expect(function(error, result) {\n              test.isFalse(error);\n              test.isTrue(result);\n\n              if (followRedirects) {\n                // should be redirected transparently to /foo\n                test.equal(result.statusCode, 200);\n                var data = result.data;\n                test.equal(data.url, \"/foo\");\n                // This is \"GET\" even when the initial request was a\n                // POST because browsers follow redirects with a GET\n                // even when the initial request was a different method.\n                test.equal(data.method, \"GET\");\n              } else {\n                // should see redirect\n                test.equal(result.statusCode, 301);\n              }\n            }));\n        });\n      };\n      if (Meteor.isClient && ! followRedirects) {\n        // not supported, should fail\n        test.throws(do_it);\n      } else {\n        do_it(true);\n      }\n    });\n  }\n\n]);\n\ntestAsyncMulti(\"httpcall - methods\", [\n\n  function(test, expect) {\n    // non-get methods\n    var test_method = function(meth, func_name) {\n      func_name = func_name || meth.toLowerCase();\n      HTTP[func_name](\n        url_prefix()+\"/foo\",\n        expect(function(error, result) {\n          test.isFalse(error);\n          test.isTrue(result);\n          test.equal(result.statusCode, 200);\n          var data = result.data;\n          test.equal(data.url, \"/foo\");\n\n          // IE <= 8 turns seems to turn POSTs with no body into\n          // GETs, inexplicably.\n          //\n          // XXX Except now it doesn't!? Not sure what changed, but\n          // these lines now break the test...\n          // if (Meteor.isClient && $.browser.msie && $.browser.version <= 8\n          //     && meth === \"POST\")\n          //   meth = \"GET\";\n\n          test.equal(data.method, meth);\n        }));\n    };\n\n    test_method(\"GET\");\n    test_method(\"POST\");\n    test_method(\"PUT\");\n    test_method(\"DELETE\", 'del');\n    test_method(\"PATCH\");\n  },\n\n  function(test, expect) {\n    // contents and data\n    HTTP.call(\n      \"POST\", url_prefix()+\"/foo\",\n      { content: \"Hello World!\" },\n      expect(function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.body, \"Hello World!\");\n      }));\n\n    HTTP.call(\n      \"POST\", url_prefix()+\"/data-test\",\n      { data: {greeting: \"Hello World!\"} },\n      expect(function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.body, {greeting: \"Hello World!\"});\n        // nb: some browsers include a charset here too.\n        test.matches(data.headers['content-type'], /^application\\/json\\b/);\n      }));\n\n    HTTP.call(\n      \"POST\", url_prefix()+\"/data-test-explicit\",\n      { data: {greeting: \"Hello World!\"},\n        headers: {'Content-Type': 'text/stupid'} },\n      expect(function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.body, {greeting: \"Hello World!\"});\n        // nb: some browsers include a charset here too.\n        test.matches(data.headers['content-type'], /^text\\/stupid\\b/);\n      }));\n  }\n]);\n\ntestAsyncMulti(\"httpcall - http auth\", [\n  function(test, expect) {\n    // Test basic auth\n\n    // Unfortunately, any failed auth will result in a browser\n    // password prompt.  So we don't test auth failure, only\n    // success.\n\n    // Random password breaks in Firefox, because Firefox incorrectly\n    // uses cached credentials even if we supply different ones:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=654348\n    var password = 'rocks';\n    //var password = Random.id().replace(/[^0-9a-zA-Z]/g, '');\n    HTTP.call(\n      \"GET\", url_prefix()+\"/login?\"+password,\n      { auth: \"meteor:\"+password },\n      expect(function(error, result) {\n        // should succeed\n        test.isFalse(error);\n        test.isTrue(result);\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.url, \"/login?\"+password);\n      }));\n\n    // test fail on malformed username:password\n    test.throws(function() {\n      HTTP.call(\n        \"GET\", url_prefix()+\"/login?\"+password,\n        { auth: \"fooooo\" },\n        function() { throw new Error(\"can't get here\"); });\n    });\n  }\n]);\n\ntestAsyncMulti(\"httpcall - headers\", [\n  function(test, expect) {\n    HTTP.call(\n      \"GET\", url_prefix()+\"/foo-with-headers\",\n      {headers: { \"Test-header\": \"Value\",\n                  \"another\": \"Value2\" } },\n      expect(function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.url, \"/foo-with-headers\");\n        test.equal(data.method, \"GET\");\n        test.equal(data.headers['test-header'], \"Value\");\n        test.equal(data.headers['another'], \"Value2\");\n      }));\n\n    HTTP.call(\n      \"GET\", url_prefix()+\"/headers\",\n      expect(function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n\n        test.equal(result.statusCode, 201);\n        test.equal(result.headers['a-silly-header'], \"Tis a\");\n        test.equal(result.headers['another-silly-header'], \"Silly place.\");\n      }));\n  }\n]);\n\ntestAsyncMulti(\"httpcall - params\", [\n  function(test, expect) {\n    var do_test = function(method, url, params, opt_opts, expect_url, expect_body) {\n      var opts = {};\n      if (typeof opt_opts === \"string\") {\n        // opt_opts omitted\n        expect_body = expect_url;\n        expect_url = opt_opts;\n      } else {\n        opts = opt_opts;\n      }\n      HTTP.call(\n        method, url_prefix()+url,\n        _.extend({ params: params }, opts),\n        expect(function(error, result) {\n          test.isFalse(error);\n          test.isTrue(result);\n          test.equal(result.statusCode, 200);\n          if (method !== \"HEAD\") {\n            var data = result.data;\n            test.equal(data.method, method);\n            test.equal(data.url, expect_url);\n            test.equal(data.body, expect_body);\n          }\n      }));\n    };\n\n    do_test(\"GET\", \"/blah\", {foo:\"bar\"}, \"/blah?foo=bar\", \"\");\n    do_test(\"GET\", \"/\", {foo:\"bar\", fruit:\"apple\"}, \"/?foo=bar&fruit=apple\", \"\");\n    do_test(\"POST\", \"/\", {foo:\"bar\", fruit:\"apple\"}, \"/\", \"foo=bar&fruit=apple\");\n    do_test(\"POST\", \"/\", {foo:\"bar\", fruit:\"apple\"}, \"/\", \"foo=bar&fruit=apple\");\n    do_test(\"GET\", \"/\", {'foo!':\"bang!\"}, {}, \"/?foo%21=bang%21\", \"\");\n    do_test(\"POST\", \"/\", {'foo!':\"bang!\"}, {}, \"/\", \"foo%21=bang%21\");\n    do_test(\"POST\", \"/\", {foo:\"bar\", fruit:\"apple\"}, {\n      content: \"stuff!\"}, \"/?foo=bar&fruit=apple\", \"stuff!\");\n    do_test(\"POST\", \"/\", {foo:\"bar\", greeting:\"Hello World\"}, {\n      content: \"stuff!\"}, \"/?foo=bar&greeting=Hello+World\", \"stuff!\");\n    do_test(\"POST\", \"/foo\", {foo:\"bar\", greeting:\"Hello World\"},\n            \"/foo\", \"foo=bar&greeting=Hello+World\");\n    do_test(\"HEAD\", \"/head\", {foo:\"bar\"}, \"/head?foo=bar\", \"\");\n    do_test(\"PUT\", \"/put\", {foo:\"bar\"}, \"/put\", \"foo=bar\");\n  }\n]);\n\ntestAsyncMulti(\"httpcall - npmRequestOptions\", [\n  function (test, expect) {\n    if (Meteor.isClient) {\n      test.throws(function () {\n        HTTP.get(url_prefix() + \"/\",\n                 { npmRequestOptions: { encoding: null } },\n                 function () {});\n      });\n      return;\n    }\n\n    HTTP.get(\n      url_prefix() + \"/\",\n      { npmRequestOptions: { encoding: null } },\n      expect(function (error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n        test.equal(result.statusCode, 200);\n        test.instanceOf(result.content, Buffer);\n      })\n    );\n  }\n]);\n\nMeteor.isClient && testAsyncMulti(\"httpcall - beforeSend\", [\n  function (test, expect) {\n    var fired = false;\n    var bSend = function(xhr){\n      test.isFalse(fired);\n      fired = true;\n      test.isTrue(xhr instanceof XMLHttpRequest);\n    };\n\n    HTTP.get(url_prefix() + \"/\", {beforeSend: bSend}, expect(function () {\n      test.isTrue(fired);\n    }));\n  }\n]);\n\n\nif (Meteor.isServer) {\n  // This is testing the server's static file sending code, not the http\n  // package. It's here because it is very similar to the other tests\n  // here, even though it is testing something else.\n  //\n  // client http library mangles paths before they are requested. only\n  // run this test on the server.\n  testAsyncMulti(\"httpcall - static file serving\", [\n    function(test, expect) {\n      // Suppress error printing for this test (and for any other code that sets\n      // the x-suppress-error header).\n      WebApp.suppressConnectErrors();\n\n      var do_test = function (path, code, match) {\n        HTTP.get(\n          url_base() + path,\n          {headers: {'x-suppress-error': 'true'}},\n          expect(function(error, result) {\n            test.equal(result.statusCode, code);\n            if (match)\n              test.matches(result.content, match);\n          }));\n      };\n\n      // existing static file\n      do_test(\"/packages/local-test_http/test_static.serveme\", 200, /static file serving/);\n\n      // no such file, so return the default app HTML.\n      var getsAppHtml = [\n        // This file doesn't exist.\n        \"/nosuchfile\",\n\n        // Our static file serving doesn't process .. or its encoded version, so\n        // any of these return the app HTML.\n        \"/../nosuchfile\",\n        \"/%2e%2e/nosuchfile\",\n        \"/%2E%2E/nosuchfile\",\n        \"/%2d%2d/nosuchfile\",\n        \"/packages/http/../http/test_static.serveme\",\n        \"/packages/http/%2e%2e/http/test_static.serveme\",\n        \"/packages/http/%2E%2E/http/test_static.serveme\",\n        \"/packages/http/../../packages/http/test_static.serveme\",\n        \"/packages/http/%2e%2e/%2e%2e/packages/http/test_static.serveme\",\n        \"/packages/http/%2E%2E/%2E%2E/packages/http/test_static.serveme\",\n\n        // ... and they *definitely* shouldn't be able to escape the app bundle.\n        \"/packages/http/../../../../../../packages/http/test_static.serveme\",\n        \"/../../../../../../../../../../../bin/ls\",\n        \"/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/bin/ls\",\n        \"/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/bin/ls\"\n      ];\n\n      _.each(getsAppHtml, function (x) {\n        do_test(x, 200, /__meteor_runtime_config__ = JSON/);\n      });\n    }\n  ]);\n}\n\nMeteor.isServer && Tinytest.add(\"httpcall - npm modules\", function (test) {\n  // Make sure the version number looks like a version number. (All published\n  // request version numbers end in \".0\".)\n  test.matches(HTTPInternals.NpmModules.request.version, /^2\\.(\\d+)\\.0/);\n  test.equal(typeof(HTTPInternals.NpmModules.request.module), 'function');\n  test.isTrue(HTTPInternals.NpmModules.request.module.get);\n});\n\n// TO TEST/ADD:\n// - https\n// - cookies?\n// - human-readable error reason/cause?\n// - data parse error\n"]},"hash":"2744aa9b5737f59c9d009e8b97723c739d20194b"}
