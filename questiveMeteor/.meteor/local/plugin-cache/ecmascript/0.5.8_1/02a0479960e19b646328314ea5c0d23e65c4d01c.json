{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/jagi:astronomy","imported":["Class"],"specifiers":[{"kind":"named","imported":"Class","local":"Class"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/test/modules/storage/type_field.js","filenameRelative":"/packages/jagi:astronomy/test/modules/storage/type_field.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/test/modules/storage/type_field.js.map","sourceFileName":"/packages/jagi:astronomy/test/modules/storage/type_field.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"type_field"},"ignored":false,"code":"var Class;module.import('meteor/jagi:astronomy',{\"Class\":function(v){Class=v}});\n\nTinytest.add('Modules - Storage - Type field', function (test) {\n  var Part = Class.create({\n    name: 'Part',\n    typeField: 'type',\n    fields: {\n      name: {\n        type: String\n      }\n    }\n  });\n\n  var Engine = Part.inherit({\n    name: 'Engine'\n  });\n\n  var Wheel = Part.inherit({\n    name: 'Wheel'\n  });\n\n  var Vehicles = new Mongo.Collection(null);\n\n  var Vehicle = Class.create({\n    name: 'Vehicle',\n    collection: Vehicles,\n    typeField: 'type',\n    fields: {\n      name: {\n        type: String\n      },\n      parts: {\n        type: [Part],\n        'default': function () {\n          function _default() {\n            return [];\n          }\n\n          return _default;\n        }()\n      }\n    }\n  });\n\n  var Car = Vehicle.inherit({\n    name: 'Car'\n  });\n\n  var Plane = Vehicle.inherit({\n    name: 'Plane'\n  });\n\n  var vehicle = new Vehicle({\n    name: 'Vehicle',\n    parts: [new Engine({\n      name: 'Engine'\n    }), new Wheel({\n      name: 'Wheel'\n    })]\n  });\n  vehicle.save();\n\n  var plane = new Plane({\n    name: 'Plane'\n  });\n  plane.save();\n\n  var car = new Car({\n    name: 'Car'\n  });\n  car.save();\n\n  var vehicles = Vehicle.find().fetch();\n  test.equal(vehicles.length, 3, 'All child documents should be fetched');\n  test.instanceOf(vehicles[0], Vehicle, 'First document should be instance of the \"Vehicle\" class');\n  test.instanceOf(vehicles[1], Plane, 'Second document should be instance of the \"Plane\" class');\n  test.instanceOf(vehicles[2], Car, 'Second document should be instance of the \"Car\" class');\n  vehicles = Vehicle.find({}, {\n    children: false\n  }).fetch();\n  test.equal(vehicles.length, 1, 'Only one document should be fetched');\n  test.instanceOf(vehicles[0], Vehicle, 'First document should be instance of the \"Vehicle\" class');\n  test.instanceOf(vehicles[0].parts[0], Engine, 'First nested document should be instance of the \"Engine\" class');\n  test.instanceOf(vehicles[0].parts[1], Wheel, 'Second nested document should be instance of the \"Wheel\" class');\n});","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/test/modules/storage/type_field.js"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAAsB,uBAAtB;;AAEA,SAAS,GAAT,CAAa,gCAAb,EAA+C,UAAS,IAAT,EAAe;AAC5D,MAAM,OAAO,MAAM,MAAN,CAAa;AACxB,UAAM,MADkB;AAExB,eAAW,MAFa;AAGxB,YAAQ;AACN,YAAM;AACJ,cAAM;AADF;AADA;AAHgB,GAAb,CAAb;;AAUA,MAAM,SAAS,KAAK,OAAL,CAAa;AAC1B,UAAM;AADoB,GAAb,CAAf;;AAIA,MAAM,QAAQ,KAAK,OAAL,CAAa;AACzB,UAAM;AADmB,GAAb,CAAd;;AAIA,MAAM,WAAW,IAAI,MAAM,UAAV,CAAqB,IAArB,CAAjB;;AAEA,MAAM,UAAU,MAAM,MAAN,CAAa;AAC3B,UAAM,SADqB;AAE3B,gBAAY,QAFe;AAG3B,eAAW,MAHgB;AAI3B,YAAQ;AACN,YAAM;AACJ,cAAM;AADF,OADA;AAIN,aAAO;AACL,cAAM,CAAC,IAAD,CADD;AAAA;AAAA,8BAEK;AACR,mBAAO,EAAP;AACD;;AAJI;AAAA;AAAA;AAJD;AAJmB,GAAb,CAAhB;;AAiBA,MAAM,MAAM,QAAQ,OAAR,CAAgB;AAC1B,UAAM;AADoB,GAAhB,CAAZ;;AAIA,MAAM,QAAQ,QAAQ,OAAR,CAAgB;AAC5B,UAAM;AADsB,GAAhB,CAAd;;AAIA,MAAI,UAAU,IAAI,OAAJ,CAAY;AACxB,UAAM,SADkB;AAExB,WAAO,CACL,IAAI,MAAJ,CAAW;AACT,YAAM;AADG,KAAX,CADK,EAIL,IAAI,KAAJ,CAAU;AACR,YAAM;AADE,KAAV,CAJK;AAFiB,GAAZ,CAAd;AAWA,UAAQ,IAAR;;AAEA,MAAI,QAAQ,IAAI,KAAJ,CAAU;AACpB,UAAM;AADc,GAAV,CAAZ;AAGA,QAAM,IAAN;;AAEA,MAAI,MAAM,IAAI,GAAJ,CAAQ;AAChB,UAAM;AADU,GAAR,CAAV;AAGA,MAAI,IAAJ;;AAEA,MAAI,WAAW,QAAQ,IAAR,GAAe,KAAf,EAAf;AACA,OAAK,KAAL,CAAW,SAAS,MAApB,EAA4B,CAA5B,EACE,uCADF;AAGA,OAAK,UAAL,CAAgB,SAAS,CAAT,CAAhB,EAA6B,OAA7B,EACE,0DADF;AAGA,OAAK,UAAL,CAAgB,SAAS,CAAT,CAAhB,EAA6B,KAA7B,EACE,yDADF;AAGA,OAAK,UAAL,CAAgB,SAAS,CAAT,CAAhB,EAA6B,GAA7B,EACE,uDADF;AAGA,aAAW,QAAQ,IAAR,CAAa,EAAb,EAAiB;AAC1B,cAAU;AADgB,GAAjB,EAER,KAFQ,EAAX;AAGA,OAAK,KAAL,CAAW,SAAS,MAApB,EAA4B,CAA5B,EACE,qCADF;AAGA,OAAK,UAAL,CAAgB,SAAS,CAAT,CAAhB,EAA6B,OAA7B,EACE,0DADF;AAGA,OAAK,UAAL,CAAgB,SAAS,CAAT,EAAY,KAAZ,CAAkB,CAAlB,CAAhB,EAAsC,MAAtC,EACE,gEADF;AAGA,OAAK,UAAL,CAAgB,SAAS,CAAT,EAAY,KAAZ,CAAkB,CAAlB,CAAhB,EAAsC,KAAtC,EACE,gEADF;AAGD,CAjGD","file":"/packages/jagi:astronomy/test/modules/storage/type_field.js.map","sourcesContent":["import { Class } from 'meteor/jagi:astronomy';\n\nTinytest.add('Modules - Storage - Type field', function(test) {\n  const Part = Class.create({\n    name: 'Part',\n    typeField: 'type',\n    fields: {\n      name: {\n        type: String,\n      },\n    },\n  });\n\n  const Engine = Part.inherit({\n    name: 'Engine',\n  });\n\n  const Wheel = Part.inherit({\n    name: 'Wheel'\n  });\n\n  const Vehicles = new Mongo.Collection(null);\n\n  const Vehicle = Class.create({\n    name: 'Vehicle',\n    collection: Vehicles,\n    typeField: 'type',\n    fields: {\n      name: {\n        type: String,\n      },\n      parts: {\n        type: [Part],\n        default() {\n          return [];\n        },\n      },\n    },\n  });\n\n  const Car = Vehicle.inherit({\n    name: 'Car',\n  });\n\n  const Plane = Vehicle.inherit({\n    name: 'Plane',\n  });\n\n  let vehicle = new Vehicle({\n    name: 'Vehicle',\n    parts: [\n      new Engine({\n        name: 'Engine',\n      }),\n      new Wheel({\n        name: 'Wheel',\n      }),\n    ],\n  });\n  vehicle.save();\n\n  let plane = new Plane({\n    name: 'Plane',\n  });\n  plane.save();\n\n  let car = new Car({\n    name: 'Car',\n  });\n  car.save();\n\n  let vehicles = Vehicle.find().fetch();\n  test.equal(vehicles.length, 3,\n    'All child documents should be fetched'\n  );\n  test.instanceOf(vehicles[0], Vehicle,\n    'First document should be instance of the \"Vehicle\" class'\n  );\n  test.instanceOf(vehicles[1], Plane,\n    'Second document should be instance of the \"Plane\" class'\n  );\n  test.instanceOf(vehicles[2], Car,\n    'Second document should be instance of the \"Car\" class'\n  );\n  vehicles = Vehicle.find({}, {\n    children: false\n  }).fetch();\n  test.equal(vehicles.length, 1,\n    'Only one document should be fetched'\n  );\n  test.instanceOf(vehicles[0], Vehicle,\n    'First document should be instance of the \"Vehicle\" class'\n  );\n  test.instanceOf(vehicles[0].parts[0], Engine,\n    'First nested document should be instance of the \"Engine\" class'\n  );\n  test.instanceOf(vehicles[0].parts[1], Wheel,\n    'Second nested document should be instance of the \"Wheel\" class'\n  );\n});"]},"hash":"02a0479960e19b646328314ea5c0d23e65c4d01c"}
