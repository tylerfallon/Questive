{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"../../core/utils/throw_parse_error.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"throwParseError"}]},{"source":"../type.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Type"}]},{"source":"../../../core/class.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"AstroClass"}]},{"source":"../ScalarField","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ScalarField"}]},{"source":"../ObjectField","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ObjectField"}]},{"source":"../ListField","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ListField"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/fields/hooks/apply_definition.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/fields/hooks/apply_definition.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/fields/hooks/apply_definition.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/fields/hooks/apply_definition.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"apply_definition"},"ignored":false,"code":"var _;module.import('lodash',{\"default\":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{\"default\":function(v){throwParseError=v}});var Type;module.import('../type.js',{\"default\":function(v){Type=v}});var AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});var ScalarField;module.import('../ScalarField',{\"default\":function(v){ScalarField=v}});var ObjectField;module.import('../ObjectField',{\"default\":function(v){ObjectField=v}});var ListField;module.import('../ListField',{\"default\":function(v){ListField=v}});\n\n\n\n\n\n\n\nfunction checkTypeExistence(type, className, fieldName) {\n  if (!type) {\n    throwParseError([{\n      'class': className\n    }, {\n      'property': 'fields'\n    }, {\n      'field': fieldName\n    }, 'Type does not exist']);\n  }\n}\n\nfunction onApplyDefinition(Class, parsedDefinition, className) {\n  _.each(parsedDefinition.fields, function (fieldDefinition, fieldName) {\n    // Prepare field variable.\n    var field = void 0;\n    // List field.\n    if (Match.test(fieldDefinition.type, Array)) {\n      var type = Type.find(fieldDefinition.type[0]);\n      checkTypeExistence(type, className, fieldDefinition.name);\n      if (AstroClass.isParentOf(type['class'])) {\n        field = new ListField(_.extend({}, fieldDefinition, {\n          type: type\n        }));\n      } else {\n        field = new ListField(_.extend({}, fieldDefinition, {\n          type: type\n        }));\n      }\n    }\n    // Scalar or object field.\n    else {\n        var _type = Type.find(fieldDefinition.type);\n        checkTypeExistence(_type, className, fieldDefinition.name);\n        if (AstroClass.isParentOf(_type['class'])) {\n          field = new ObjectField(_.extend({}, fieldDefinition, {\n            type: _type\n          }));\n        } else {\n          field = new ScalarField(_.extend({}, fieldDefinition, {\n            type: _type\n          }));\n        }\n      }\n\n    // Add a field object to the fields list.\n    Class.schema.fields[fieldName] = field;\n    Class.schema.fieldsNames.push(fieldName);\n  });\n}\n\nmodule.export(\"default\",exports.default=(onApplyDefinition));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/fields/hooks/apply_definition.js"],"names":[],"mappings":"AAAA,OAAO,CAAP,MAAc,QAAd;AACA,OAAO,eAAP,MAA4B,uCAA5B;AACA,OAAO,IAAP,MAAiB,YAAjB;AACA,OAAO,UAAP,MAAuB,wBAAvB;AACA,OAAO,WAAP,MAAwB,gBAAxB;AACA,OAAO,WAAP,MAAwB,gBAAxB;AACA,OAAO,SAAP,MAAsB,cAAtB;;AAEA,SAAS,kBAAT,CAA4B,IAA5B,EAAkC,SAAlC,EAA6C,SAA7C,EAAwD;AACtD,MAAI,CAAC,IAAL,EAAW;AACT,oBAAgB,CAAC;AACb,eAAS;AADI,KAAD,EAEX;AACD,kBAAY;AADX,KAFW,EAIX;AACD,eAAS;AADR,KAJW,EAOd,qBAPc,CAAhB;AASD;AACF;;AAED,SAAS,iBAAT,CAA2B,KAA3B,EAAkC,gBAAlC,EAAoD,SAApD,EAA+D;AAC7D,IAAE,IAAF,CAAO,iBAAiB,MAAxB,EAAgC,UAAS,eAAT,EAA0B,SAA1B,EAAqC;;AAEnE,QAAI,cAAJ;;AAEA,QAAI,MAAM,IAAN,CAAW,gBAAgB,IAA3B,EAAiC,KAAjC,CAAJ,EAA6C;AAC3C,UAAI,OAAO,KAAK,IAAL,CAAU,gBAAgB,IAAhB,CAAqB,CAArB,CAAV,CAAX;AACA,yBAAmB,IAAnB,EAAyB,SAAzB,EAAoC,gBAAgB,IAApD;AACA,UAAI,WAAW,UAAX,CAAsB,aAAtB,CAAJ,EAAuC;AACrC,gBAAQ,IAAI,SAAJ,CACN,EAAE,MAAF,CAAS,EAAT,EAAa,eAAb,EAA8B;AAC5B,gBAAM;AADsB,SAA9B,CADM,CAAR;AAKD,OAND,MAOK;AACH,gBAAQ,IAAI,SAAJ,CACN,EAAE,MAAF,CAAS,EAAT,EAAa,eAAb,EAA8B;AAC5B,gBAAM;AADsB,SAA9B,CADM,CAAR;AAKD;AACF;;AAjBD,SAmBK;AACH,YAAI,QAAO,KAAK,IAAL,CAAU,gBAAgB,IAA1B,CAAX;AACA,2BAAmB,KAAnB,EAAyB,SAAzB,EAAoC,gBAAgB,IAApD;AACA,YAAI,WAAW,UAAX,CAAsB,cAAtB,CAAJ,EAAuC;AACrC,kBAAQ,IAAI,WAAJ,CACN,EAAE,MAAF,CAAS,EAAT,EAAa,eAAb,EAA8B;AAC5B,kBAAM;AADsB,WAA9B,CADM,CAAR;AAKD,SAND,MAOK;AACH,kBAAQ,IAAI,WAAJ,CACN,EAAE,MAAF,CAAS,EAAT,EAAa,eAAb,EAA8B;AAC5B,kBAAM;AADsB,WAA9B,CADM,CAAR;AAKD;AACF;;;AAGD,UAAM,MAAN,CAAa,MAAb,CAAoB,SAApB,IAAiC,KAAjC;AACA,UAAM,MAAN,CAAa,WAAb,CAAyB,IAAzB,CAA8B,SAA9B;AACD,GA7CD;AA8CD;;AAED,eAAe,iBAAf","file":"/packages/jagi:astronomy/lib/modules/fields/hooks/apply_definition.js.map","sourcesContent":["import _ from 'lodash';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport Type from '../type.js';\nimport AstroClass from '../../../core/class.js';\nimport ScalarField from '../ScalarField';\nimport ObjectField from '../ObjectField';\nimport ListField from '../ListField';\n\nfunction checkTypeExistence(type, className, fieldName) {\n  if (!type) {\n    throwParseError([{\n        'class': className\n      }, {\n        'property': 'fields'\n      }, {\n        'field': fieldName\n      },\n      'Type does not exist'\n    ]);\n  }\n}\n\nfunction onApplyDefinition(Class, parsedDefinition, className) {\n  _.each(parsedDefinition.fields, function(fieldDefinition, fieldName) {\n    // Prepare field variable.\n    let field;\n    // List field.\n    if (Match.test(fieldDefinition.type, Array)) {\n      let type = Type.find(fieldDefinition.type[0]);\n      checkTypeExistence(type, className, fieldDefinition.name);\n      if (AstroClass.isParentOf(type.class)) {\n        field = new ListField(\n          _.extend({}, fieldDefinition, {\n            type: type\n          })\n        );\n      }\n      else {\n        field = new ListField(\n          _.extend({}, fieldDefinition, {\n            type: type\n          })\n        );\n      }\n    }\n    // Scalar or object field.\n    else {\n      let type = Type.find(fieldDefinition.type);\n      checkTypeExistence(type, className, fieldDefinition.name);\n      if (AstroClass.isParentOf(type.class)) {\n        field = new ObjectField(\n          _.extend({}, fieldDefinition, {\n            type: type\n          })\n        );\n      }\n      else {\n        field = new ScalarField(\n          _.extend({}, fieldDefinition, {\n            type: type\n          })\n        );\n      }\n    }\n\n    // Add a field object to the fields list.\n    Class.schema.fields[fieldName] = field;\n    Class.schema.fieldsNames.push(fieldName);\n  });\n}\n\nexport default onApplyDefinition;"]},"hash":"dde1c33c33f579daa459340beaa2f4017a7ab307"}
