{"metadata":{"usedHelpers":["classCallCheck","typeof"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/react-meteor-data/ReactMeteorData.jsx","filenameRelative":"/packages/react-meteor-data/ReactMeteorData.jsx","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/react-meteor-data/ReactMeteorData.jsx.map","sourceFileName":"/packages/react-meteor-data/ReactMeteorData.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"ReactMeteorData"},"ignored":false,"code":"var _typeof;module.import(\"babel-runtime/helpers/typeof\",{\"default\":function(v){_typeof=v}});var _classCallCheck;module.import(\"babel-runtime/helpers/classCallCheck\",{\"default\":function(v){_classCallCheck=v}});\n\nvar ReactMeteorData = {\n  componentWillMount: function componentWillMount() {\n    this.data = {};\n    this._meteorDataManager = new MeteorDataManager(this);\n    var newData = this._meteorDataManager.calculateData();\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUpdate: function componentWillUpdate(nextProps, nextState) {\n    var saveProps = this.props;\n    var saveState = this.state;\n    var newData = void 0;\n    try {\n      // Temporarily assign this.state and this.props,\n      // so that they are seen by getMeteorData!\n      // This is a simulation of how the proposed Observe API\n      // for React will work, which calls observe() after\n      // componentWillUpdate and after props and state are\n      // updated, but before render() is called.\n      // See https://github.com/facebook/react/issues/3398.\n      this.props = nextProps;\n      this.state = nextState;\n      newData = this._meteorDataManager.calculateData();\n    } finally {\n      this.props = saveProps;\n      this.state = saveState;\n    }\n\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this._meteorDataManager.dispose();\n  }\n};\n\n// A class to keep the state and utility methods needed to manage\n// the Meteor data for a component.\n\nvar MeteorDataManager = function () {\n  function MeteorDataManager(component) {\n    _classCallCheck(this, MeteorDataManager);\n\n    this.component = component;\n    this.computation = null;\n    this.oldData = null;\n  }\n\n  MeteorDataManager.prototype.dispose = function dispose() {\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n  };\n\n  MeteorDataManager.prototype.calculateData = function calculateData() {\n    var component = this.component;\n\n    if (!component.getMeteorData) {\n      return null;\n    }\n\n    // When rendering on the server, we don't want to use the Tracker.\n    // We only do the first rendering on the server so we can get the data right away\n    if (Meteor.isServer) {\n      return component.getMeteorData();\n    }\n\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n\n    var data = void 0;\n    // Use Tracker.nonreactive in case we are inside a Tracker Computation.\n    // This can happen if someone calls `ReactDOM.render` inside a Computation.\n    // In that case, we want to opt out of the normal behavior of nested\n    // Computations, where if the outer one is invalidated or stopped,\n    // it stops the inner one.\n    this.computation = Tracker.nonreactive(function () {\n      return Tracker.autorun(function (c) {\n        if (c.firstRun) {\n          var savedSetState = component.setState;\n          try {\n            component.setState = function () {\n              throw new Error(\"Can't call `setState` inside `getMeteorData` as this could cause an endless\" + \" loop. To respond to Meteor data changing, consider making this component\" + \" a \\\"wrapper component\\\" that only fetches data and passes it in as props to\" + \" a child component. Then you can use `componentWillReceiveProps` in that\" + \" child component.\");\n            };\n\n            data = component.getMeteorData();\n          } finally {\n            component.setState = savedSetState;\n          }\n        } else {\n          // Stop this computation instead of using the re-run.\n          // We use a brand-new autorun for each call to getMeteorData\n          // to capture dependencies on any reactive data sources that\n          // are accessed.  The reason we can't use a single autorun\n          // for the lifetime of the component is that Tracker only\n          // re-runs autoruns at flush time, while we need to be able to\n          // re-call getMeteorData synchronously whenever we want, e.g.\n          // from componentWillUpdate.\n          c.stop();\n          // Calling forceUpdate() triggers componentWillUpdate which\n          // recalculates getMeteorData() and re-renders the component.\n          component.forceUpdate();\n        }\n      });\n    });\n\n    if (Package.mongo && Package.mongo.Mongo) {\n      Object.keys(data).forEach(function (key) {\n        if (data[key] instanceof Package.mongo.Mongo.Cursor) {\n          console.warn(\"Warning: you are returning a Mongo cursor from getMeteorData. This value \" + \"will not be reactive. You probably want to call `.fetch()` on the cursor \" + \"before returning it.\");\n        }\n      });\n    }\n\n    return data;\n  };\n\n  MeteorDataManager.prototype.updateData = function updateData(newData) {\n    var component = this.component;\n    var oldData = this.oldData;\n\n    if (!(newData && (typeof newData === \"undefined\" ? \"undefined\" : _typeof(newData)) === 'object')) {\n      throw new Error(\"Expected object returned from getMeteorData\");\n    }\n    // update componentData in place based on newData\n    for (var key in newData) {\n      component.data[key] = newData[key];\n    }\n    // if there is oldData (which is every time this method is called\n    // except the first), delete keys in newData that aren't in\n    // oldData.  don't interfere with other keys, in case we are\n    // co-existing with something else that writes to a component's\n    // this.data.\n    if (oldData) {\n      for (var _key in oldData) {\n        if (!(_key in newData)) {\n          delete component.data[_key];\n        }\n      }\n    }\n    this.oldData = newData;\n  };\n\n  return MeteorDataManager;\n}();\n\nmodule.export(\"default\",exports.default=(ReactMeteorData));","ast":null,"map":{"version":3,"sources":["/packages/react-meteor-data/ReactMeteorData.jsx"],"names":[],"mappings":"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","file":"/packages/react-meteor-data/ReactMeteorData.jsx.map","sourcesContent":["const ReactMeteorData = {\n  componentWillMount() {\n    this.data = {};\n    this._meteorDataManager = new MeteorDataManager(this);\n    const newData = this._meteorDataManager.calculateData();\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUpdate(nextProps, nextState) {\n    const saveProps = this.props;\n    const saveState = this.state;\n    let newData;\n    try {\n      // Temporarily assign this.state and this.props,\n      // so that they are seen by getMeteorData!\n      // This is a simulation of how the proposed Observe API\n      // for React will work, which calls observe() after\n      // componentWillUpdate and after props and state are\n      // updated, but before render() is called.\n      // See https://github.com/facebook/react/issues/3398.\n      this.props = nextProps;\n      this.state = nextState;\n      newData = this._meteorDataManager.calculateData();\n    } finally {\n      this.props = saveProps;\n      this.state = saveState;\n    }\n\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUnmount() {\n    this._meteorDataManager.dispose();\n  },\n};\n\n// A class to keep the state and utility methods needed to manage\n// the Meteor data for a component.\nclass MeteorDataManager {\n  constructor(component) {\n    this.component = component;\n    this.computation = null;\n    this.oldData = null;\n  }\n\n  dispose() {\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n  }\n\n  calculateData() {\n    const component = this.component;\n\n    if (! component.getMeteorData) {\n      return null;\n    }\n\n    // When rendering on the server, we don't want to use the Tracker.\n    // We only do the first rendering on the server so we can get the data right away\n    if (Meteor.isServer) {\n      return component.getMeteorData();\n    }\n\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n\n    let data;\n    // Use Tracker.nonreactive in case we are inside a Tracker Computation.\n    // This can happen if someone calls `ReactDOM.render` inside a Computation.\n    // In that case, we want to opt out of the normal behavior of nested\n    // Computations, where if the outer one is invalidated or stopped,\n    // it stops the inner one.\n    this.computation = Tracker.nonreactive(() => {\n      return Tracker.autorun((c) => {\n        if (c.firstRun) {\n          const savedSetState = component.setState;\n          try {\n            component.setState = () => {\n              throw new Error(\n\"Can't call `setState` inside `getMeteorData` as this could cause an endless\" +\n\" loop. To respond to Meteor data changing, consider making this component\" +\n\" a \\\"wrapper component\\\" that only fetches data and passes it in as props to\" +\n\" a child component. Then you can use `componentWillReceiveProps` in that\" +\n\" child component.\");\n            };\n\n            data = component.getMeteorData();\n          } finally {\n            component.setState = savedSetState;\n          }\n        } else {\n          // Stop this computation instead of using the re-run.\n          // We use a brand-new autorun for each call to getMeteorData\n          // to capture dependencies on any reactive data sources that\n          // are accessed.  The reason we can't use a single autorun\n          // for the lifetime of the component is that Tracker only\n          // re-runs autoruns at flush time, while we need to be able to\n          // re-call getMeteorData synchronously whenever we want, e.g.\n          // from componentWillUpdate.\n          c.stop();\n          // Calling forceUpdate() triggers componentWillUpdate which\n          // recalculates getMeteorData() and re-renders the component.\n          component.forceUpdate();\n        }\n      });\n    });\n\n    if (Package.mongo && Package.mongo.Mongo) {\n      Object.keys(data).forEach(function (key) {\n        if (data[key] instanceof Package.mongo.Mongo.Cursor) {\n          console.warn(\n  \"Warning: you are returning a Mongo cursor from getMeteorData. This value \" +\n  \"will not be reactive. You probably want to call `.fetch()` on the cursor \" +\n  \"before returning it.\");\n        }\n      });\n    }\n\n    return data;\n  }\n\n  updateData(newData) {\n    const component = this.component;\n    const oldData = this.oldData;\n\n    if (! (newData && (typeof newData) === 'object')) {\n      throw new Error(\"Expected object returned from getMeteorData\");\n    }\n    // update componentData in place based on newData\n    for (let key in newData) {\n      component.data[key] = newData[key];\n    }\n    // if there is oldData (which is every time this method is called\n    // except the first), delete keys in newData that aren't in\n    // oldData.  don't interfere with other keys, in case we are\n    // co-existing with something else that writes to a component's\n    // this.data.\n    if (oldData) {\n      for (let key in oldData) {\n        if (!(key in newData)) {\n          delete component.data[key];\n        }\n      }\n    }\n    this.oldData = newData;\n  }\n}\n\nexport default ReactMeteorData;\n"]},"hash":"3f27e240d92e03ddf8f9e04d9da8be3cf6a1f66d"}
