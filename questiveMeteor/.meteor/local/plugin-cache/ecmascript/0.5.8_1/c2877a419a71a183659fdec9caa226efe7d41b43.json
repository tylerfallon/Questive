{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/accounts-base/accounts_reconnect_tests.js","filenameRelative":"/packages/accounts-base/accounts_reconnect_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/accounts-base/accounts_reconnect_tests.js.map","sourceFileName":"/packages/accounts-base/accounts_reconnect_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"accounts_reconnect_tests"},"ignored":false,"code":"if (Meteor.isServer) {\n  Meteor.methods({\n    getConnectionUserId: function () {\n      function getConnectionUserId() {\n        return this.userId;\n      }\n\n      return getConnectionUserId;\n    }()\n  });\n}\n\nif (Meteor.isClient) {\n  Tinytest.addAsync('accounts - reconnect auto-login', function (test, done) {\n    var username1 = 'testuser1-' + Random.id();\n    var username2 = 'testuser2-' + Random.id();\n    var password1 = 'password1-' + Random.id();\n    var password2 = 'password2-' + Random.id();\n    var timeoutHandle;\n    var onLoginStopper;\n\n    loginAsUser1();\n\n    function loginAsUser1() {\n      Accounts.createUser({\n        username: username1,\n        password: password1\n      }, onUser1LoggedIn);\n    }\n\n    function onUser1LoggedIn(err) {\n      test.isUndefined(err, 'Unexpected error logging in as user1');\n      Accounts.createUser({\n        username: username2,\n        password: password2\n      }, onUser2LoggedIn);\n    }\n\n    function onUser2LoggedIn(err) {\n      test.isUndefined(err, 'Unexpected error logging in as user2');\n      onLoginStopper = Accounts.onLogin(onUser2LoggedInAfterReconnect);\n      Meteor.disconnect();\n      Meteor.reconnect();\n    }\n\n    function onUser2LoggedInAfterReconnect() {\n      onLoginStopper.stop();\n      Meteor.loginWithPassword('non-existent-user', 'or-wrong-password', onFailedLogin);\n    }\n\n    function onFailedLogin(err) {\n      test.instanceOf(err, Meteor.Error, 'No Meteor.Error on login failure');\n      onLoginStopper = Accounts.onLogin(onUser2LoggedInAfterReconnectAfterFailedLogin);\n      Meteor.disconnect();\n      Meteor.reconnect();\n      timeoutHandle = Meteor.setTimeout(failTest, 1000);\n    }\n\n    function failTest() {\n      onLoginStopper.stop();\n      test.fail('Issue #4970 has occured.');\n      Meteor.call('getConnectionUserId', checkFinalState);\n    }\n\n    function onUser2LoggedInAfterReconnectAfterFailedLogin() {\n      onLoginStopper.stop();\n      Meteor.clearTimeout(timeoutHandle);\n      Meteor.call('getConnectionUserId', checkFinalState);\n    }\n\n    function checkFinalState(err, connectionUserId) {\n      test.isUndefined(err, 'Unexpected error calling getConnectionUserId');\n      test.equal(connectionUserId, Meteor.userId(), 'userId is different on client and server');\n      done();\n    }\n  });\n}","ast":null,"map":{"version":3,"sources":["/packages/accounts-base/accounts_reconnect_tests.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAX,EAAqB;AACnB,SAAO,OAAP,CAAe;AACb;AAAqB,qCAAW;AAC9B,eAAO,KAAK,MAAZ;AACD;;AAFD;AAAA;AADa,GAAf;AAKD;;AAED,IAAI,OAAO,QAAX,EAAqB;AACnB,WAAS,QAAT,CAAkB,iCAAlB,EAAqD,UAAS,IAAT,EAAe,IAAf,EAAqB;AACxE,QAAI,YAAY,eAAe,OAAO,EAAP,EAA/B;AACA,QAAI,YAAY,eAAe,OAAO,EAAP,EAA/B;AACA,QAAI,YAAY,eAAe,OAAO,EAAP,EAA/B;AACA,QAAI,YAAY,eAAe,OAAO,EAAP,EAA/B;AACA,QAAI,aAAJ;AACA,QAAI,cAAJ;;AAEA;;AAEA,aAAS,YAAT,GAAwB;AACtB,eAAS,UAAT,CAAoB;AAClB,kBAAU,SADQ;AAElB,kBAAU;AAFQ,OAApB,EAGG,eAHH;AAID;;AAED,aAAS,eAAT,CAAyB,GAAzB,EAA8B;AAC5B,WAAK,WAAL,CAAiB,GAAjB,EAAsB,sCAAtB;AACA,eAAS,UAAT,CAAoB;AAClB,kBAAU,SADQ;AAElB,kBAAU;AAFQ,OAApB,EAGG,eAHH;AAID;;AAED,aAAS,eAAT,CAAyB,GAAzB,EAA8B;AAC5B,WAAK,WAAL,CAAiB,GAAjB,EAAsB,sCAAtB;AACA,uBAAiB,SAAS,OAAT,CAAiB,6BAAjB,CAAjB;AACA,aAAO,UAAP;AACA,aAAO,SAAP;AACD;;AAED,aAAS,6BAAT,GAAyC;AACvC,qBAAe,IAAf;AACA,aAAO,iBAAP,CAAyB,mBAAzB,EAA8C,mBAA9C,EACE,aADF;AAED;;AAED,aAAS,aAAT,CAAuB,GAAvB,EAA4B;AAC1B,WAAK,UAAL,CAAgB,GAAhB,EAAqB,OAAO,KAA5B,EAAmC,kCAAnC;AACA,uBAAiB,SAAS,OAAT,CAAiB,6CAAjB,CAAjB;AACA,aAAO,UAAP;AACA,aAAO,SAAP;AACA,sBAAgB,OAAO,UAAP,CAAkB,QAAlB,EAA4B,IAA5B,CAAhB;AACD;;AAED,aAAS,QAAT,GAAoB;AAClB,qBAAe,IAAf;AACA,WAAK,IAAL,CAAU,0BAAV;AACA,aAAO,IAAP,CAAY,qBAAZ,EAAmC,eAAnC;AACD;;AAED,aAAS,6CAAT,GAAyD;AACvD,qBAAe,IAAf;AACA,aAAO,YAAP,CAAoB,aAApB;AACA,aAAO,IAAP,CAAY,qBAAZ,EAAmC,eAAnC;AACD;;AAED,aAAS,eAAT,CAAyB,GAAzB,EAA8B,gBAA9B,EAAgD;AAC9C,WAAK,WAAL,CAAiB,GAAjB,EAAsB,8CAAtB;AACA,WAAK,KAAL,CAAW,gBAAX,EAA6B,OAAO,MAAP,EAA7B,EACE,0CADF;AAEA;AACD;AACF,GAhED;AAiED","file":"/packages/accounts-base/accounts_reconnect_tests.js.map","sourcesContent":["if (Meteor.isServer) {\n  Meteor.methods({\n    getConnectionUserId: function() {\n      return this.userId;\n    }\n  });\n}\n\nif (Meteor.isClient) {\n  Tinytest.addAsync('accounts - reconnect auto-login', function(test, done) {\n    var username1 = 'testuser1-' + Random.id();\n    var username2 = 'testuser2-' + Random.id();\n    var password1 = 'password1-' + Random.id();\n    var password2 = 'password2-' + Random.id();\n    var timeoutHandle;\n    var onLoginStopper;\n\n    loginAsUser1();\n\n    function loginAsUser1() {\n      Accounts.createUser({\n        username: username1,\n        password: password1\n      }, onUser1LoggedIn);\n    }\n\n    function onUser1LoggedIn(err) {\n      test.isUndefined(err, 'Unexpected error logging in as user1');\n      Accounts.createUser({\n        username: username2,\n        password: password2\n      }, onUser2LoggedIn);\n    }\n\n    function onUser2LoggedIn(err) {\n      test.isUndefined(err, 'Unexpected error logging in as user2');\n      onLoginStopper = Accounts.onLogin(onUser2LoggedInAfterReconnect);\n      Meteor.disconnect();\n      Meteor.reconnect();\n    }\n\n    function onUser2LoggedInAfterReconnect() {\n      onLoginStopper.stop();\n      Meteor.loginWithPassword('non-existent-user', 'or-wrong-password',\n        onFailedLogin);\n    }\n\n    function onFailedLogin(err) {\n      test.instanceOf(err, Meteor.Error, 'No Meteor.Error on login failure');\n      onLoginStopper = Accounts.onLogin(onUser2LoggedInAfterReconnectAfterFailedLogin);\n      Meteor.disconnect();\n      Meteor.reconnect();\n      timeoutHandle = Meteor.setTimeout(failTest, 1000);\n    }\n\n    function failTest() {\n      onLoginStopper.stop();\n      test.fail('Issue #4970 has occured.');\n      Meteor.call('getConnectionUserId', checkFinalState);\n    }\n\n    function onUser2LoggedInAfterReconnectAfterFailedLogin() {\n      onLoginStopper.stop();\n      Meteor.clearTimeout(timeoutHandle);\n      Meteor.call('getConnectionUserId', checkFinalState);\n    }\n\n    function checkFinalState(err, connectionUserId) {\n      test.isUndefined(err, 'Unexpected error calling getConnectionUserId');\n      test.equal(connectionUserId, Meteor.userId(),\n        'userId is different on client and server');\n      done();\n    }\n  });\n}\n"]},"hash":"c2877a419a71a183659fdec9caa226efe7d41b43"}
