{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"meteor/ejson","imported":["EJSON"],"specifiers":[{"kind":"named","imported":"EJSON","local":"EJSON"}]},{"source":"../utils/traverse.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"traverse"}]},{"source":"../../core/utils/warn.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"warn"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/fields/utils/set_one.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/fields/utils/set_one.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/fields/utils/set_one.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/fields/utils/set_one.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"set_one"},"ignored":false,"code":"var _;module.import('lodash',{\"default\":function(v){_=v}});var EJSON;module.import('meteor/ejson',{\"EJSON\":function(v){EJSON=v}});var traverse;module.import('../utils/traverse.js',{\"default\":function(v){traverse=v}});var warn;module.import('../../core/utils/warn.js',{\"default\":function(v){warn=v}});\n\n\n\n\nfunction setOne(doc, fieldPattern, fieldValue) {\n  var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];\n\n  _.defaults(options, {\n    clone: true\n  });\n\n  if (options.clone && _.isObject(fieldValue)) {\n    fieldValue = EJSON.clone(fieldValue);\n  }\n\n  return traverse(doc, fieldPattern, function (nestedDoc, nestedFieldName, field) {\n    // If a field does not exist than we don't return anything.\n    if (!field) {\n      var Class = doc.constructor;\n      warn('[\"' + Class.getName() + '\" class][\"' + fieldPattern + '\" field] ' + 'Trying to set a value of the field that does not exist in the class');\n      return;\n    }\n\n    nestedDoc[nestedFieldName] = fieldValue;\n  });\n};\n\nmodule.export(\"default\",exports.default=(setOne));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/fields/utils/set_one.js"],"names":[],"mappings":"AAAA,OAAO,CAAP,MAAc,QAAd;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,OAAO,QAAP,MAAqB,sBAArB;AACA,OAAO,IAAP,MAAiB,0BAAjB;;AAEA,SAAS,MAAT,CAAgB,GAAhB,EAAqB,YAArB,EAAmC,UAAnC,EAA6D;AAAA,MAAd,OAAc,yDAAJ,EAAI;;AAC3D,IAAE,QAAF,CAAW,OAAX,EAAoB;AAClB,WAAO;AADW,GAApB;;AAIA,MAAI,QAAQ,KAAR,IAAiB,EAAE,QAAF,CAAW,UAAX,CAArB,EAA6C;AAC3C,iBAAa,MAAM,KAAN,CAAY,UAAZ,CAAb;AACD;;AAED,SAAO,SACL,GADK,EACA,YADA,EAEL,UAAS,SAAT,EAAoB,eAApB,EAAqC,KAArC,EAA4C;;AAE1C,QAAI,CAAC,KAAL,EAAY;AACV,UAAI,QAAQ,IAAI,WAAhB;AACA,WACE,OAAO,MAAM,OAAN,EAAP,GAAyB,YAAzB,GAAwC,YAAxC,GAAuD,WAAvD,GACA,qEAFF;AAIA;AACD;;AAED,cAAU,eAAV,IAA6B,UAA7B;AACD,GAdI,CAAP;AAgBD;;AAED,eAAe,MAAf","file":"/packages/jagi:astronomy/lib/modules/fields/utils/set_one.js.map","sourcesContent":["import _ from 'lodash';\nimport { EJSON } from 'meteor/ejson';\nimport traverse from '../utils/traverse.js';\nimport warn from '../../core/utils/warn.js';\n\nfunction setOne(doc, fieldPattern, fieldValue, options = {}) {\n  _.defaults(options, {\n    clone: true\n  });\n\n  if (options.clone && _.isObject(fieldValue)) {\n    fieldValue = EJSON.clone(fieldValue);\n  }\n\n  return traverse(\n    doc, fieldPattern,\n    function(nestedDoc, nestedFieldName, field) {\n      // If a field does not exist than we don't return anything.\n      if (!field) {\n        let Class = doc.constructor;\n        warn(\n          '[\"' + Class.getName() + '\" class][\"' + fieldPattern + '\" field] ' +\n          'Trying to set a value of the field that does not exist in the class'\n        );\n        return;\n      }\n\n      nestedDoc[nestedFieldName] = fieldValue;\n    }\n  );\n};\n\nexport default setOne;"]},"hash":"5696eb09fb9db361d55b6cc0f8817795229700ec"}
