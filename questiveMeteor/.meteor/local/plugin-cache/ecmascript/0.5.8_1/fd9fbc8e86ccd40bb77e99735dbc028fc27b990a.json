{"metadata":{"usedHelpers":["typeof"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/accounts-base/accounts_tests.js","filenameRelative":"/packages/accounts-base/accounts_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/accounts-base/accounts_tests.js.map","sourceFileName":"/packages/accounts-base/accounts_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"accounts_tests"},"ignored":false,"code":"var _typeof;module.import('babel-runtime/helpers/typeof',{\"default\":function(v){_typeof=v}});\nMeteor.methods({\n  getCurrentLoginToken: function () {\n    function getCurrentLoginToken() {\n      return Accounts._getLoginToken(this.connection.id);\n    }\n\n    return getCurrentLoginToken;\n  }()\n});\n\n// XXX it'd be cool to also test that the right thing happens if options\n// *are* validated, but Accounts._options is global state which makes this hard\n// (impossible?)\nTinytest.add('accounts - config validates keys', function (test) {\n  test.throws(function () {\n    Accounts.config({ foo: \"bar\" });\n  });\n});\n\nvar idsInValidateNewUser = {};\nAccounts.validateNewUser(function (user) {\n  idsInValidateNewUser[user._id] = true;\n  return true;\n});\n\nTinytest.add('accounts - validateNewUser gets passed user with _id', function (test) {\n  var newUserId = Accounts.updateOrCreateUserFromExternalService('foobook', { id: Random.id() }).userId;\n  test.isTrue(newUserId in idsInValidateNewUser);\n});\n\nTinytest.add('accounts - updateOrCreateUserFromExternalService - Facebook', function (test) {\n  var facebookId = Random.id();\n\n  // create an account with facebook\n  var uid1 = Accounts.updateOrCreateUserFromExternalService('facebook', { id: facebookId, monkey: 42 }, { profile: { foo: 1 } }).id;\n  var users = Meteor.users.find({ \"services.facebook.id\": facebookId }).fetch();\n  test.length(users, 1);\n  test.equal(users[0].profile.foo, 1);\n  test.equal(users[0].services.facebook.monkey, 42);\n\n  // create again with the same id, see that we get the same user.\n  // it should update services.facebook but not profile.\n  var uid2 = Accounts.updateOrCreateUserFromExternalService('facebook', { id: facebookId, llama: 50 }, { profile: { foo: 1000, bar: 2 } }).id;\n  test.equal(uid1, uid2);\n  users = Meteor.users.find({ \"services.facebook.id\": facebookId }).fetch();\n  test.length(users, 1);\n  test.equal(users[0].profile.foo, 1);\n  test.equal(users[0].profile.bar, undefined);\n  test.equal(users[0].services.facebook.llama, 50);\n  // make sure we *don't* lose values not passed this call to\n  // updateOrCreateUserFromExternalService\n  test.equal(users[0].services.facebook.monkey, 42);\n\n  // cleanup\n  Meteor.users.remove(uid1);\n});\n\nTinytest.add('accounts - updateOrCreateUserFromExternalService - Weibo', function (test) {\n  var weiboId1 = Random.id();\n  var weiboId2 = Random.id();\n\n  // users that have different service ids get different users\n  var uid1 = Accounts.updateOrCreateUserFromExternalService('weibo', { id: weiboId1 }, { profile: { foo: 1 } }).id;\n  var uid2 = Accounts.updateOrCreateUserFromExternalService('weibo', { id: weiboId2 }, { profile: { bar: 2 } }).id;\n  test.equal(Meteor.users.find({ \"services.weibo.id\": { $in: [weiboId1, weiboId2] } }).count(), 2);\n  test.equal(Meteor.users.findOne({ \"services.weibo.id\": weiboId1 }).profile.foo, 1);\n  test.equal(Meteor.users.findOne({ \"services.weibo.id\": weiboId1 }).emails, undefined);\n  test.equal(Meteor.users.findOne({ \"services.weibo.id\": weiboId2 }).profile.bar, 2);\n  test.equal(Meteor.users.findOne({ \"services.weibo.id\": weiboId2 }).emails, undefined);\n\n  // cleanup\n  Meteor.users.remove(uid1);\n  Meteor.users.remove(uid2);\n});\n\nTinytest.add('accounts - updateOrCreateUserFromExternalService - Twitter', function (test) {\n  var twitterIdOld = parseInt(Random.hexString(4), 16);\n  var twitterIdNew = '' + twitterIdOld;\n\n  // create an account with twitter using the old ID format of integer\n  var uid1 = Accounts.updateOrCreateUserFromExternalService('twitter', { id: twitterIdOld, monkey: 42 }, { profile: { foo: 1 } }).id;\n  var users = Meteor.users.find({ \"services.twitter.id\": twitterIdOld }).fetch();\n  test.length(users, 1);\n  test.equal(users[0].profile.foo, 1);\n  test.equal(users[0].services.twitter.monkey, 42);\n\n  // Update the account with the new ID format of string\n  // test that the existing user is found, and that the ID\n  // gets updated to a string value\n  var uid2 = Accounts.updateOrCreateUserFromExternalService('twitter', { id: twitterIdNew, monkey: 42 }, { profile: { foo: 1 } }).id;\n  test.equal(uid1, uid2);\n  users = Meteor.users.find({ \"services.twitter.id\": twitterIdNew }).fetch();\n  test.length(users, 1);\n\n  // cleanup\n  Meteor.users.remove(uid1);\n});\n\nTinytest.add('accounts - insertUserDoc username', function (test) {\n  var userIn = {\n    username: Random.id()\n  };\n\n  // user does not already exist. create a user object with fields set.\n  var userId = Accounts.insertUserDoc({ profile: { name: 'Foo Bar' } }, userIn);\n  var userOut = Meteor.users.findOne(userId);\n\n  test.equal(_typeof(userOut.createdAt), 'object');\n  test.equal(userOut.profile.name, 'Foo Bar');\n  test.equal(userOut.username, userIn.username);\n\n  // run the hook again. now the user exists, so it throws an error.\n  test.throws(function () {\n    Accounts.insertUserDoc({ profile: { name: 'Foo Bar' } }, userIn);\n  }, 'Username already exists.');\n\n  // cleanup\n  Meteor.users.remove(userId);\n});\n\nTinytest.add('accounts - insertUserDoc email', function (test) {\n  var email1 = Random.id();\n  var email2 = Random.id();\n  var email3 = Random.id();\n  var userIn = {\n    emails: [{ address: email1, verified: false }, { address: email2, verified: true }]\n  };\n\n  // user does not already exist. create a user object with fields set.\n  var userId = Accounts.insertUserDoc({ profile: { name: 'Foo Bar' } }, userIn);\n  var userOut = Meteor.users.findOne(userId);\n\n  test.equal(_typeof(userOut.createdAt), 'object');\n  test.equal(userOut.profile.name, 'Foo Bar');\n  test.equal(userOut.emails, userIn.emails);\n\n  // run the hook again with the exact same emails.\n  // run the hook again. now the user exists, so it throws an error.\n  test.throws(function () {\n    Accounts.insertUserDoc({ profile: { name: 'Foo Bar' } }, userIn);\n  }, 'Email already exists.');\n\n  // now with only one of them.\n  test.throws(function () {\n    Accounts.insertUserDoc({}, { emails: [{ address: email1 }] });\n  }, 'Email already exists.');\n\n  test.throws(function () {\n    Accounts.insertUserDoc({}, { emails: [{ address: email2 }] });\n  }, 'Email already exists.');\n\n  // a third email works.\n  var userId3 = Accounts.insertUserDoc({}, { emails: [{ address: email3 }] });\n  var user3 = Meteor.users.findOne(userId3);\n  test.equal(_typeof(user3.createdAt), 'object');\n\n  // cleanup\n  Meteor.users.remove(userId);\n  Meteor.users.remove(userId3);\n});\n\n// More token expiration tests are in accounts-password\nTinytest.addAsync('accounts - expire numeric token', function (test, onComplete) {\n  var userIn = { username: Random.id() };\n  var userId = Accounts.insertUserDoc({ profile: {\n      name: 'Foo Bar'\n    } }, userIn);\n  var date = new Date(new Date() - 5000);\n  Meteor.users.update(userId, {\n    $set: {\n      \"services.resume.loginTokens\": [{\n        hashedToken: Random.id(),\n        when: date\n      }, {\n        hashedToken: Random.id(),\n        when: +date\n      }]\n    }\n  });\n  var observe = Meteor.users.find(userId).observe({\n    changed: function () {\n      function changed(newUser) {\n        if (newUser.services && newUser.services.resume && _.isEmpty(newUser.services.resume.loginTokens)) {\n          observe.stop();\n          onComplete();\n        }\n      }\n\n      return changed;\n    }()\n  });\n  Accounts._expireTokens(new Date(), userId);\n});\n\n// Login tokens used to be stored unhashed in the database.  We want\n// to make sure users can still login after upgrading.\nvar insertUnhashedLoginToken = function insertUnhashedLoginToken(userId, stampedToken) {\n  Meteor.users.update(userId, { $push: { 'services.resume.loginTokens': stampedToken } });\n};\n\nTinytest.addAsync('accounts - login token', function (test, onComplete) {\n  // Test that we can login when the database contains a leftover\n  // old style unhashed login token.\n  var userId1 = Accounts.insertUserDoc({}, { username: Random.id() });\n  var stampedToken = Accounts._generateStampedLoginToken();\n  insertUnhashedLoginToken(userId1, stampedToken);\n  var connection = DDP.connect(Meteor.absoluteUrl());\n  connection.call('login', { resume: stampedToken.token });\n  connection.disconnect();\n\n  // Steal the unhashed token from the database and use it to login.\n  // This is a sanity check so that when we *can't* login with a\n  // stolen *hashed* token, we know it's not a problem with the test.\n  var userId2 = Accounts.insertUserDoc({}, { username: Random.id() });\n  insertUnhashedLoginToken(userId2, Accounts._generateStampedLoginToken());\n  var stolenToken = Meteor.users.findOne(userId2).services.resume.loginTokens[0].token;\n  test.isTrue(stolenToken);\n  connection = DDP.connect(Meteor.absoluteUrl());\n  connection.call('login', { resume: stolenToken });\n  connection.disconnect();\n\n  // Now do the same thing, this time with a stolen hashed token.\n  var userId3 = Accounts.insertUserDoc({}, { username: Random.id() });\n  Accounts._insertLoginToken(userId3, Accounts._generateStampedLoginToken());\n  stolenToken = Meteor.users.findOne(userId3).services.resume.loginTokens[0].hashedToken;\n  test.isTrue(stolenToken);\n  connection = DDP.connect(Meteor.absoluteUrl());\n  // evil plan foiled\n  test.throws(function () {\n    connection.call('login', { resume: stolenToken });\n  }, /You\\'ve been logged out by the server/);\n  connection.disconnect();\n\n  // Old style unhashed tokens are replaced by hashed tokens when\n  // encountered.  This means that after someone logins once, the\n  // old unhashed token is no longer available to be stolen.\n  var userId4 = Accounts.insertUserDoc({}, { username: Random.id() });\n  var stampedToken = Accounts._generateStampedLoginToken();\n  insertUnhashedLoginToken(userId4, stampedToken);\n  connection = DDP.connect(Meteor.absoluteUrl());\n  connection.call('login', { resume: stampedToken.token });\n  connection.disconnect();\n\n  // The token is no longer available to be stolen.\n  stolenToken = Meteor.users.findOne(userId4).services.resume.loginTokens[0].token;\n  test.isFalse(stolenToken);\n\n  // After the upgrade, the client can still login with their original\n  // unhashed login token.\n  connection = DDP.connect(Meteor.absoluteUrl());\n  connection.call('login', { resume: stampedToken.token });\n  connection.disconnect();\n\n  onComplete();\n});\n\nTinytest.addAsync('accounts - connection data cleaned up', function (test, onComplete) {\n  makeTestConnection(test, function (clientConn, serverConn) {\n    // onClose callbacks are called in order, so we run after the\n    // close callback in accounts.\n    serverConn.onClose(function () {\n      test.isFalse(Accounts._getAccountData(serverConn.id, 'connection'));\n      onComplete();\n    });\n\n    test.isTrue(Accounts._getAccountData(serverConn.id, 'connection'));\n    serverConn.close();\n  }, onComplete);\n});\n\nTinytest.add('accounts - get new token', function (test) {\n  // Test that the `getNewToken` method returns us a valid token, with\n  // the same expiration as our original token.\n  var userId = Accounts.insertUserDoc({}, { username: Random.id() });\n  var stampedToken = Accounts._generateStampedLoginToken();\n  Accounts._insertLoginToken(userId, stampedToken);\n  var conn = DDP.connect(Meteor.absoluteUrl());\n  conn.call('login', { resume: stampedToken.token });\n  test.equal(conn.call('getCurrentLoginToken'), Accounts._hashLoginToken(stampedToken.token));\n\n  var newTokenResult = conn.call('getNewToken');\n  test.equal(newTokenResult.tokenExpires, Accounts._tokenExpiration(stampedToken.when));\n  test.equal(conn.call('getCurrentLoginToken'), Accounts._hashLoginToken(newTokenResult.token));\n  conn.disconnect();\n\n  // A second connection should be able to log in with the new token\n  // we got.\n  var secondConn = DDP.connect(Meteor.absoluteUrl());\n  secondConn.call('login', { resume: newTokenResult.token });\n  secondConn.disconnect();\n});\n\nTinytest.addAsync('accounts - remove other tokens', function (test, onComplete) {\n  // Test that the `removeOtherTokens` method removes all tokens other\n  // than the caller's token, thereby logging out and closing other\n  // connections.\n  var userId = Accounts.insertUserDoc({}, { username: Random.id() });\n  var stampedTokens = [];\n  var conns = [];\n\n  _.times(2, function (i) {\n    stampedTokens.push(Accounts._generateStampedLoginToken());\n    Accounts._insertLoginToken(userId, stampedTokens[i]);\n    var conn = DDP.connect(Meteor.absoluteUrl());\n    conn.call('login', { resume: stampedTokens[i].token });\n    test.equal(conn.call('getCurrentLoginToken'), Accounts._hashLoginToken(stampedTokens[i].token));\n    conns.push(conn);\n  });\n\n  conns[0].call('removeOtherTokens');\n  simplePoll(function () {\n    var tokens = _.map(conns, function (conn) {\n      return conn.call('getCurrentLoginToken');\n    });\n    return !tokens[1] && tokens[0] === Accounts._hashLoginToken(stampedTokens[0].token);\n  }, function () {\n    // success\n    _.each(conns, function (conn) {\n      conn.disconnect();\n    });\n    onComplete();\n  }, function () {\n    // timed out\n    throw new Error(\"accounts - remove other tokens timed out\");\n  });\n});\n\nTinytest.add('accounts - hook callbacks can access Meteor.userId()', function (test) {\n  var userId = Accounts.insertUserDoc({}, { username: Random.id() });\n  var stampedToken = Accounts._generateStampedLoginToken();\n  Accounts._insertLoginToken(userId, stampedToken);\n\n  var validateStopper = Accounts.validateLoginAttempt(function (attempt) {\n    test.equal(Meteor.userId(), validateAttemptExpectedUserId, \"validateLoginAttempt\");\n    return true;\n  });\n  var onLoginStopper = Accounts.onLogin(function (attempt) {\n    test.equal(Meteor.userId(), onLoginExpectedUserId, \"onLogin\");\n  });\n  var onLogoutStopper = Accounts.onLogout(function (logoutContext) {\n    test.equal(logoutContext.user._id, onLogoutExpectedUserId, \"onLogout\");\n    test.instanceOf(logoutContext.connection, Object);\n  });\n  var onLoginFailureStopper = Accounts.onLoginFailure(function (attempt) {\n    test.equal(Meteor.userId(), onLoginFailureExpectedUserId, \"onLoginFailure\");\n  });\n\n  var conn = DDP.connect(Meteor.absoluteUrl());\n\n  // On a new connection, Meteor.userId() should be null until logged in.\n  var validateAttemptExpectedUserId = null;\n  var onLoginExpectedUserId = userId;\n  conn.call('login', { resume: stampedToken.token });\n\n  // Now that the user is logged in on the connection, Meteor.userId() should\n  // return that user.\n  validateAttemptExpectedUserId = userId;\n  conn.call('login', { resume: stampedToken.token });\n\n  // Trigger onLoginFailure callbacks\n  var onLoginFailureExpectedUserId = userId;\n  test.throws(function () {\n    conn.call('login', { resume: \"bogus\" });\n  }, '403');\n\n  // Trigger onLogout callbacks\n  var onLogoutExpectedUserId = userId;\n  conn.call('logout');\n\n  conn.disconnect();\n  validateStopper.stop();\n  onLoginStopper.stop();\n  onLogoutStopper.stop();\n  onLoginFailureStopper.stop();\n});","ast":null,"map":{"version":3,"sources":["/packages/accounts-base/accounts_tests.js"],"names":[],"mappings":"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","file":"/packages/accounts-base/accounts_tests.js.map","sourcesContent":["Meteor.methods({\n  getCurrentLoginToken: function () {\n    return Accounts._getLoginToken(this.connection.id);\n  }\n});\n\n// XXX it'd be cool to also test that the right thing happens if options\n// *are* validated, but Accounts._options is global state which makes this hard\n// (impossible?)\nTinytest.add('accounts - config validates keys', function (test) {\n  test.throws(function () {\n    Accounts.config({foo: \"bar\"});\n  });\n});\n\n\nvar idsInValidateNewUser = {};\nAccounts.validateNewUser(function (user) {\n  idsInValidateNewUser[user._id] = true;\n  return true;\n});\n\nTinytest.add('accounts - validateNewUser gets passed user with _id', function (test) {\n  var newUserId = Accounts.updateOrCreateUserFromExternalService('foobook', {id: Random.id()}).userId;\n  test.isTrue(newUserId in idsInValidateNewUser);\n});\n\nTinytest.add('accounts - updateOrCreateUserFromExternalService - Facebook', function (test) {\n  var facebookId = Random.id();\n\n  // create an account with facebook\n  var uid1 = Accounts.updateOrCreateUserFromExternalService(\n    'facebook', {id: facebookId, monkey: 42}, {profile: {foo: 1}}).id;\n  var users = Meteor.users.find({\"services.facebook.id\": facebookId}).fetch();\n  test.length(users, 1);\n  test.equal(users[0].profile.foo, 1);\n  test.equal(users[0].services.facebook.monkey, 42);\n\n  // create again with the same id, see that we get the same user.\n  // it should update services.facebook but not profile.\n  var uid2 = Accounts.updateOrCreateUserFromExternalService(\n    'facebook', {id: facebookId, llama: 50},\n    {profile: {foo: 1000, bar: 2}}).id;\n  test.equal(uid1, uid2);\n  users = Meteor.users.find({\"services.facebook.id\": facebookId}).fetch();\n  test.length(users, 1);\n  test.equal(users[0].profile.foo, 1);\n  test.equal(users[0].profile.bar, undefined);\n  test.equal(users[0].services.facebook.llama, 50);\n  // make sure we *don't* lose values not passed this call to\n  // updateOrCreateUserFromExternalService\n  test.equal(users[0].services.facebook.monkey, 42);\n\n  // cleanup\n  Meteor.users.remove(uid1);\n});\n\nTinytest.add('accounts - updateOrCreateUserFromExternalService - Weibo', function (test) {\n  var weiboId1 = Random.id();\n  var weiboId2 = Random.id();\n\n  // users that have different service ids get different users\n  var uid1 = Accounts.updateOrCreateUserFromExternalService(\n    'weibo', {id: weiboId1}, {profile: {foo: 1}}).id;\n  var uid2 = Accounts.updateOrCreateUserFromExternalService(\n    'weibo', {id: weiboId2}, {profile: {bar: 2}}).id;\n  test.equal(Meteor.users.find({\"services.weibo.id\": {$in: [weiboId1, weiboId2]}}).count(), 2);\n  test.equal(Meteor.users.findOne({\"services.weibo.id\": weiboId1}).profile.foo, 1);\n  test.equal(Meteor.users.findOne({\"services.weibo.id\": weiboId1}).emails, undefined);\n  test.equal(Meteor.users.findOne({\"services.weibo.id\": weiboId2}).profile.bar, 2);\n  test.equal(Meteor.users.findOne({\"services.weibo.id\": weiboId2}).emails, undefined);\n\n  // cleanup\n  Meteor.users.remove(uid1);\n  Meteor.users.remove(uid2);\n});\n\nTinytest.add('accounts - updateOrCreateUserFromExternalService - Twitter', function (test) {\n  var twitterIdOld = parseInt(Random.hexString(4), 16);\n  var twitterIdNew = ''+twitterIdOld;\n\n  // create an account with twitter using the old ID format of integer\n  var uid1 = Accounts.updateOrCreateUserFromExternalService(\n    'twitter', {id: twitterIdOld, monkey: 42}, {profile: {foo: 1}}).id;\n  var users = Meteor.users.find({\"services.twitter.id\": twitterIdOld}).fetch();\n  test.length(users, 1);\n  test.equal(users[0].profile.foo, 1);\n  test.equal(users[0].services.twitter.monkey, 42);\n\n  // Update the account with the new ID format of string\n  // test that the existing user is found, and that the ID\n  // gets updated to a string value\n  var uid2 = Accounts.updateOrCreateUserFromExternalService(\n    'twitter', {id: twitterIdNew, monkey: 42}, {profile: {foo: 1}}).id;\n  test.equal(uid1, uid2);\n  users = Meteor.users.find({\"services.twitter.id\": twitterIdNew}).fetch();\n  test.length(users, 1);\n\n  // cleanup\n  Meteor.users.remove(uid1);\n});\n\n\nTinytest.add('accounts - insertUserDoc username', function (test) {\n  var userIn = {\n    username: Random.id()\n  };\n\n  // user does not already exist. create a user object with fields set.\n  var userId = Accounts.insertUserDoc(\n    {profile: {name: 'Foo Bar'}},\n    userIn\n  );\n  var userOut = Meteor.users.findOne(userId);\n\n  test.equal(typeof userOut.createdAt, 'object');\n  test.equal(userOut.profile.name, 'Foo Bar');\n  test.equal(userOut.username, userIn.username);\n\n  // run the hook again. now the user exists, so it throws an error.\n  test.throws(function () {\n    Accounts.insertUserDoc(\n      {profile: {name: 'Foo Bar'}},\n      userIn\n    );\n  }, 'Username already exists.');\n\n  // cleanup\n  Meteor.users.remove(userId);\n});\n\nTinytest.add('accounts - insertUserDoc email', function (test) {\n  var email1 = Random.id();\n  var email2 = Random.id();\n  var email3 = Random.id();\n  var userIn = {\n    emails: [{address: email1, verified: false},\n             {address: email2, verified: true}]\n  };\n\n  // user does not already exist. create a user object with fields set.\n  var userId = Accounts.insertUserDoc(\n    {profile: {name: 'Foo Bar'}},\n    userIn\n  );\n  var userOut = Meteor.users.findOne(userId);\n\n  test.equal(typeof userOut.createdAt, 'object');\n  test.equal(userOut.profile.name, 'Foo Bar');\n  test.equal(userOut.emails, userIn.emails);\n\n  // run the hook again with the exact same emails.\n  // run the hook again. now the user exists, so it throws an error.\n  test.throws(function () {\n    Accounts.insertUserDoc(\n      {profile: {name: 'Foo Bar'}},\n      userIn\n    );\n  }, 'Email already exists.');\n\n  // now with only one of them.\n  test.throws(function () {\n    Accounts.insertUserDoc(\n      {}, {emails: [{address: email1}]}\n    );\n  }, 'Email already exists.');\n\n  test.throws(function () {\n    Accounts.insertUserDoc(\n      {}, {emails: [{address: email2}]}\n    );\n  }, 'Email already exists.');\n\n\n  // a third email works.\n  var userId3 = Accounts.insertUserDoc(\n      {}, {emails: [{address: email3}]}\n  );\n  var user3 = Meteor.users.findOne(userId3);\n  test.equal(typeof user3.createdAt, 'object');\n\n  // cleanup\n  Meteor.users.remove(userId);\n  Meteor.users.remove(userId3);\n});\n\n// More token expiration tests are in accounts-password\nTinytest.addAsync('accounts - expire numeric token', function (test, onComplete) {\n  var userIn = { username: Random.id() };\n  var userId = Accounts.insertUserDoc({ profile: {\n    name: 'Foo Bar'\n  } }, userIn);\n  var date = new Date(new Date() - 5000);\n  Meteor.users.update(userId, {\n    $set: {\n      \"services.resume.loginTokens\": [{\n        hashedToken: Random.id(),\n        when: date\n      }, {\n        hashedToken: Random.id(),\n        when: +date\n      }]\n    }\n  });\n  var observe = Meteor.users.find(userId).observe({\n    changed: function (newUser) {\n      if (newUser.services && newUser.services.resume &&\n          _.isEmpty(newUser.services.resume.loginTokens)) {\n        observe.stop();\n        onComplete();\n      }\n    }\n  });\n  Accounts._expireTokens(new Date(), userId);\n});\n\n\n// Login tokens used to be stored unhashed in the database.  We want\n// to make sure users can still login after upgrading.\nvar insertUnhashedLoginToken = function (userId, stampedToken) {\n  Meteor.users.update(\n    userId,\n    {$push: {'services.resume.loginTokens': stampedToken}}\n  );\n};\n\nTinytest.addAsync('accounts - login token', function (test, onComplete) {\n  // Test that we can login when the database contains a leftover\n  // old style unhashed login token.\n  var userId1 = Accounts.insertUserDoc({}, {username: Random.id()});\n  var stampedToken = Accounts._generateStampedLoginToken();\n  insertUnhashedLoginToken(userId1, stampedToken);\n  var connection = DDP.connect(Meteor.absoluteUrl());\n  connection.call('login', {resume: stampedToken.token});\n  connection.disconnect();\n\n  // Steal the unhashed token from the database and use it to login.\n  // This is a sanity check so that when we *can't* login with a\n  // stolen *hashed* token, we know it's not a problem with the test.\n  var userId2 = Accounts.insertUserDoc({}, {username: Random.id()});\n  insertUnhashedLoginToken(userId2, Accounts._generateStampedLoginToken());\n  var stolenToken = Meteor.users.findOne(userId2).services.resume.loginTokens[0].token;\n  test.isTrue(stolenToken);\n  connection = DDP.connect(Meteor.absoluteUrl());\n  connection.call('login', {resume: stolenToken});\n  connection.disconnect();\n\n  // Now do the same thing, this time with a stolen hashed token.\n  var userId3 = Accounts.insertUserDoc({}, {username: Random.id()});\n  Accounts._insertLoginToken(userId3, Accounts._generateStampedLoginToken());\n  stolenToken = Meteor.users.findOne(userId3).services.resume.loginTokens[0].hashedToken;\n  test.isTrue(stolenToken);\n  connection = DDP.connect(Meteor.absoluteUrl());\n  // evil plan foiled\n  test.throws(\n    function () {\n      connection.call('login', {resume: stolenToken});\n    },\n    /You\\'ve been logged out by the server/\n  );\n  connection.disconnect();\n\n  // Old style unhashed tokens are replaced by hashed tokens when\n  // encountered.  This means that after someone logins once, the\n  // old unhashed token is no longer available to be stolen.\n  var userId4 = Accounts.insertUserDoc({}, {username: Random.id()});\n  var stampedToken = Accounts._generateStampedLoginToken();\n  insertUnhashedLoginToken(userId4, stampedToken);\n  connection = DDP.connect(Meteor.absoluteUrl());\n  connection.call('login', {resume: stampedToken.token});\n  connection.disconnect();\n\n  // The token is no longer available to be stolen.\n  stolenToken = Meteor.users.findOne(userId4).services.resume.loginTokens[0].token;\n  test.isFalse(stolenToken);\n\n  // After the upgrade, the client can still login with their original\n  // unhashed login token.\n  connection = DDP.connect(Meteor.absoluteUrl());\n  connection.call('login', {resume: stampedToken.token});\n  connection.disconnect();\n\n  onComplete();\n});\n\nTinytest.addAsync(\n  'accounts - connection data cleaned up',\n  function (test, onComplete) {\n    makeTestConnection(\n      test,\n      function (clientConn, serverConn) {\n        // onClose callbacks are called in order, so we run after the\n        // close callback in accounts.\n        serverConn.onClose(function () {\n          test.isFalse(Accounts._getAccountData(serverConn.id, 'connection'));\n          onComplete();\n        });\n\n        test.isTrue(Accounts._getAccountData(serverConn.id, 'connection'));\n        serverConn.close();\n      },\n      onComplete\n    );\n  }\n);\n\nTinytest.add(\n  'accounts - get new token',\n  function (test) {\n    // Test that the `getNewToken` method returns us a valid token, with\n    // the same expiration as our original token.\n    var userId = Accounts.insertUserDoc({}, { username: Random.id() });\n    var stampedToken = Accounts._generateStampedLoginToken();\n    Accounts._insertLoginToken(userId, stampedToken);\n    var conn = DDP.connect(Meteor.absoluteUrl());\n    conn.call('login', { resume: stampedToken.token });\n    test.equal(conn.call('getCurrentLoginToken'),\n               Accounts._hashLoginToken(stampedToken.token));\n\n    var newTokenResult = conn.call('getNewToken');\n    test.equal(newTokenResult.tokenExpires,\n               Accounts._tokenExpiration(stampedToken.when));\n    test.equal(conn.call('getCurrentLoginToken'),\n               Accounts._hashLoginToken(newTokenResult.token));\n    conn.disconnect();\n\n    // A second connection should be able to log in with the new token\n    // we got.\n    var secondConn = DDP.connect(Meteor.absoluteUrl());\n    secondConn.call('login', { resume: newTokenResult.token });\n    secondConn.disconnect();\n  }\n);\n\nTinytest.addAsync(\n  'accounts - remove other tokens',\n  function (test, onComplete) {\n    // Test that the `removeOtherTokens` method removes all tokens other\n    // than the caller's token, thereby logging out and closing other\n    // connections.\n    var userId = Accounts.insertUserDoc({}, { username: Random.id() });\n    var stampedTokens = [];\n    var conns = [];\n\n    _.times(2, function (i) {\n      stampedTokens.push(Accounts._generateStampedLoginToken());\n      Accounts._insertLoginToken(userId, stampedTokens[i]);\n      var conn = DDP.connect(Meteor.absoluteUrl());\n      conn.call('login', { resume: stampedTokens[i].token });\n      test.equal(conn.call('getCurrentLoginToken'),\n                 Accounts._hashLoginToken(stampedTokens[i].token));\n      conns.push(conn);\n    });\n\n    conns[0].call('removeOtherTokens');\n    simplePoll(\n      function () {\n        var tokens = _.map(conns, function (conn) {\n          return conn.call('getCurrentLoginToken');\n        });\n        return ! tokens[1] &&\n          tokens[0] === Accounts._hashLoginToken(stampedTokens[0].token);\n      },\n      function () { // success\n        _.each(conns, function (conn) {\n          conn.disconnect();\n        });\n        onComplete();\n      },\n      function () { // timed out\n        throw new Error(\"accounts - remove other tokens timed out\");\n      }\n    );\n  }\n);\n\nTinytest.add(\n  'accounts - hook callbacks can access Meteor.userId()',\n  function (test) {\n    var userId = Accounts.insertUserDoc({}, { username: Random.id() });\n    var stampedToken = Accounts._generateStampedLoginToken();\n    Accounts._insertLoginToken(userId, stampedToken);\n\n    var validateStopper = Accounts.validateLoginAttempt(function(attempt) {\n      test.equal(Meteor.userId(), validateAttemptExpectedUserId, \"validateLoginAttempt\");\n      return true;\n    });\n    var onLoginStopper = Accounts.onLogin(function(attempt) {\n      test.equal(Meteor.userId(), onLoginExpectedUserId, \"onLogin\");\n    });\n    var onLogoutStopper = Accounts.onLogout(function(logoutContext) {\n      test.equal(logoutContext.user._id, onLogoutExpectedUserId, \"onLogout\");\n      test.instanceOf(logoutContext.connection, Object);\n    });\n    var onLoginFailureStopper = Accounts.onLoginFailure(function(attempt) {\n      test.equal(Meteor.userId(), onLoginFailureExpectedUserId, \"onLoginFailure\");\n    });\n\n    var conn = DDP.connect(Meteor.absoluteUrl());\n\n    // On a new connection, Meteor.userId() should be null until logged in.\n    var validateAttemptExpectedUserId = null;\n    var onLoginExpectedUserId = userId;\n    conn.call('login', { resume: stampedToken.token });\n\n    // Now that the user is logged in on the connection, Meteor.userId() should\n    // return that user.\n    validateAttemptExpectedUserId = userId;\n    conn.call('login', { resume: stampedToken.token });\n\n    // Trigger onLoginFailure callbacks\n    var onLoginFailureExpectedUserId = userId;\n    test.throws(function() { conn.call('login', { resume: \"bogus\" }) }, '403');\n\n    // Trigger onLogout callbacks\n    var onLogoutExpectedUserId = userId;\n    conn.call('logout');\n\n    conn.disconnect();\n    validateStopper.stop();\n    onLoginStopper.stop();\n    onLogoutStopper.stop();\n    onLoginFailureStopper.stop();\n  }\n);\n"]},"hash":"fd9fbc8e86ccd40bb77e99735dbc028fc27b990a"}
