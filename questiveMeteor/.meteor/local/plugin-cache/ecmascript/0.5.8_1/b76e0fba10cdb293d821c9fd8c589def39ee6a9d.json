{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"../utils/is_remote.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"isRemote"}]},{"source":"../utils/call_meteor_method.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"callMeteorMethod"}]},{"source":"../utils/class_insert.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"classInsert"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/storage/class_static_methods/insert.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/storage/class_static_methods/insert.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/storage/class_static_methods/insert.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/storage/class_static_methods/insert.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"insert"},"ignored":false,"code":"var isRemote;module.import('../utils/is_remote.js',{\"default\":function(v){isRemote=v}});var callMeteorMethod;module.import('../utils/call_meteor_method.js',{\"default\":function(v){callMeteorMethod=v}});var classInsert;module.import('../utils/class_insert.js',{\"default\":function(v){classInsert=v}});\n\n\n\nfunction insert(rawDoc, callback) {\n  var Class = this;\n  var Collection = Class.getCollection();\n\n  // Prepare arguments.\n  var args = {\n    className: Class.getName(),\n    rawDoc: rawDoc\n  };\n\n  // Generate ID if not provided.\n  if (!rawDoc._id) {\n    var generateId = true;\n    // Don't generate the id if we're the client and the 'outermost' call.\n    // This optimization saves us passing both the randomSeed and the id.\n    // Passing both is redundant.\n    if (Collection._isRemoteCollection()) {\n      var enclosing = DDP._CurrentInvocation.get();\n      if (!enclosing) {\n        generateId = false;\n      }\n    }\n    if (generateId) {\n      rawDoc._id = Collection._makeNewID();\n    }\n  }\n\n  // If we are dealing with a remote collection and we are not on the server.\n  if (isRemote(Class)) {\n    // Prepare meteor method name to be called.\n    var methodName = '/Astronomy/insert';\n\n    try {\n      // Run Meteor method.\n      return callMeteorMethod(Class, methodName, [args], callback);\n    }\n    // Catch stub exceptions.\n    catch (err) {\n      if (callback) {\n        callback(err);\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  // If we can just insert a document without calling the meteor method. We may\n  // be on the server or the collection may be local.\n  try {\n    // Set the \"trusted\" argument to true.\n    args.trusted = true;\n    // Insert a document.\n    var result = classInsert(args);\n    if (callback) {\n      callback(undefined, result);\n    }\n    return result;\n  } catch (err) {\n    if (callback) {\n      callback(err);\n      return null;\n    }\n    throw err;\n  }\n}\n\nmodule.export(\"default\",exports.default=(insert));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/storage/class_static_methods/insert.js"],"names":[],"mappings":"AAAA,OAAO,QAAP,MAAqB,uBAArB;AACA,OAAO,gBAAP,MAA6B,gCAA7B;AACA,OAAO,WAAP,MAAwB,0BAAxB;;AAEA,SAAS,MAAT,CAAgB,MAAhB,EAAwB,QAAxB,EAAkC;AAChC,MAAM,QAAQ,IAAd;AACA,MAAM,aAAa,MAAM,aAAN,EAAnB;;;AAGA,MAAM,OAAO;AACX,eAAW,MAAM,OAAN,EADA;AAEX;AAFW,GAAb;;;AAMA,MAAI,CAAC,OAAO,GAAZ,EAAiB;AACf,QAAI,aAAa,IAAjB;;;;AAIA,QAAI,WAAW,mBAAX,EAAJ,EAAsC;AACpC,UAAM,YAAY,IAAI,kBAAJ,CAAuB,GAAvB,EAAlB;AACA,UAAI,CAAC,SAAL,EAAgB;AACd,qBAAa,KAAb;AACD;AACF;AACD,QAAI,UAAJ,EAAgB;AACd,aAAO,GAAP,GAAa,WAAW,UAAX,EAAb;AACD;AACF;;;AAGD,MAAI,SAAS,KAAT,CAAJ,EAAqB;;AAEnB,QAAM,aAAa,mBAAnB;;AAEA,QAAI;;AAEF,aAAO,iBACL,KADK,EACE,UADF,EACc,CAAC,IAAD,CADd,EACsB,QADtB,CAAP;AAGD;;AAED,WAAO,GAAP,EAAY;AACV,UAAI,QAAJ,EAAc;AACZ,iBAAS,GAAT;AACA,eAAO,IAAP;AACD;AACD,YAAM,GAAN;AACD;AACF;;;;AAID,MAAI;;AAEF,SAAK,OAAL,GAAe,IAAf;;AAEA,QAAI,SAAS,YAAY,IAAZ,CAAb;AACA,QAAI,QAAJ,EAAc;AACZ,eAAS,SAAT,EAAoB,MAApB;AACD;AACD,WAAO,MAAP;AACD,GATD,CAUA,OAAO,GAAP,EAAY;AACV,QAAI,QAAJ,EAAc;AACZ,eAAS,GAAT;AACA,aAAO,IAAP;AACD;AACD,UAAM,GAAN;AACD;AACF;;AAED,eAAe,MAAf","file":"/packages/jagi:astronomy/lib/modules/storage/class_static_methods/insert.js.map","sourcesContent":["import isRemote from '../utils/is_remote.js';\nimport callMeteorMethod from '../utils/call_meteor_method.js';\nimport classInsert from '../utils/class_insert.js';\n\nfunction insert(rawDoc, callback) {\n  const Class = this;\n  const Collection = Class.getCollection();\n\n  // Prepare arguments.\n  const args = {\n    className: Class.getName(),\n    rawDoc\n  };\n\n  // Generate ID if not provided.\n  if (!rawDoc._id) {\n    let generateId = true;\n    // Don't generate the id if we're the client and the 'outermost' call.\n    // This optimization saves us passing both the randomSeed and the id.\n    // Passing both is redundant.\n    if (Collection._isRemoteCollection()) {\n      const enclosing = DDP._CurrentInvocation.get();\n      if (!enclosing) {\n        generateId = false;\n      }\n    }\n    if (generateId) {\n      rawDoc._id = Collection._makeNewID();\n    }\n  }\n\n  // If we are dealing with a remote collection and we are not on the server.\n  if (isRemote(Class)) {\n    // Prepare meteor method name to be called.\n    const methodName = '/Astronomy/insert';\n\n    try {\n      // Run Meteor method.\n      return callMeteorMethod(\n        Class, methodName, [args], callback\n      );\n    }\n    // Catch stub exceptions.\n    catch (err) {\n      if (callback) {\n        callback(err);\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  // If we can just insert a document without calling the meteor method. We may\n  // be on the server or the collection may be local.\n  try {\n    // Set the \"trusted\" argument to true.\n    args.trusted = true;\n    // Insert a document.\n    let result = classInsert(args);\n    if (callback) {\n      callback(undefined, result);\n    }\n    return result;\n  }\n  catch (err) {\n    if (callback) {\n      callback(err);\n      return null;\n    }\n    throw err;\n  }\n}\n\nexport default insert;"]},"hash":"b76e0fba10cdb293d821c9fd8c589def39ee6a9d"}
