{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]}],"exports":{"exported":["Scavenger_Hunts"],"specifiers":[{"kind":"local","local":"Scavenger_Hunts","exported":"Scavenger_Hunts"}]}}},"options":{"filename":"/imports/api/scavenger_hunts.js","filenameRelative":"/imports/api/scavenger_hunts.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/scavenger_hunts.js.map","sourceFileName":"/imports/api/scavenger_hunts.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"scavenger_hunts"},"ignored":false,"code":"module.export({Scavenger_Hunts:function(){return Scavenger_Hunts}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});\n\n\n\nvar Scavenger_Hunts = new Mongo.Collection('scavenger_hunts');\n\nif (Meteor.isServer) {\n  Meteor.publish('scavenger_hunts', function () {\n    function scavenger_huntsPublication() {\n      return Scavenger_Hunts.find({});\n    }\n\n    return scavenger_huntsPublication;\n  }());\n}\nMeteor.methods({\n  // add information to our task db\n\n  'scavenger_hunts.insert': function () {\n    function scavenger_huntsInsert(object) {\n      var title = object.title;\n      var user = void 0;\n      check(title, String);\n\n      // Make sure the user is logged in before inserting a task\n      if (!this.userId) {\n        throw new Meteor.Error('not-authorized');\n      }\n\n      Scavenger_Hunts.insert({\n        title: title,\n        createdAt: new Date(),\n        owner: this.userId,\n        username: Meteor.users.findOne(this.userId).username\n      });\n    }\n\n    return scavenger_huntsInsert;\n  }(),\n  'scavenger_hunts.remove': function () {\n    function scavenger_huntsRemove(scavengerId) {\n      check(taskId, String);\n\n      var task = scavenger_hunts.findOne(taskId);\n      if (task['private'] && task.owner !== this.userId) {\n        // If the task is private, make sure only the owner can delete it\n        throw new Meteor.Error('not-authorized');\n      }\n      Scavenger_Hunts.remove(scavengerId);\n    }\n\n    return scavenger_huntsRemove;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/imports/api/scavenger_hunts.js"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAM,kBAAkB,IAAI,MAAM,UAAV,CAAqB,iBAArB,CAAxB;;AAEP,IAAG,OAAO,QAAV,EAAmB;AAClB,SAAO,OAAP,CAAe,iBAAf;AAAiC,aAAS,0BAAT,GAAqC;AACrE,aAAO,gBAAgB,IAAhB,CAAqB,EAArB,CAAP;AACA;;AAFD,WAA0C,0BAA1C;AAAA;AAGA;AACD,OAAO,OAAP,CAAe;;;AAEb,0BAFa;AAAA,mCAEY,MAFZ,EAEoB;AAC/B,UAAI,QAAQ,OAAO,KAAnB;AACA,UAAI,aAAJ;AACA,YAAM,KAAN,EAAa,MAAb;;;AAIA,UAAI,CAAE,KAAK,MAAX,EAAmB;AACjB,cAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,sBAAgB,MAAhB,CAAuB;AACrB,oBADqB;AAErB,mBAAW,IAAI,IAAJ,EAFU;AAGrB,eAAO,KAAK,MAHS;AAIrB,kBAAU,OAAO,KAAP,CAAa,OAAb,CAAqB,KAAK,MAA1B,EAAkC;AAJvB,OAAvB;AAMD;;AAnBY;AAAA;AAqBb,0BArBa;AAAA,mCAqBY,WArBZ,EAqByB;AACpC,YAAM,MAAN,EAAc,MAAd;;AAEA,UAAM,OAAO,gBAAgB,OAAhB,CAAwB,MAAxB,CAAb;AACA,UAAI,mBAAgB,KAAK,KAAL,KAAe,KAAK,MAAxC,EAAgD;;AAE9C,cAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;AACD,sBAAgB,MAAhB,CAAuB,WAAvB;AACD;;AA9BY;AAAA;AAAA,CAAf","file":"/imports/api/scavenger_hunts.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nexport const Scavenger_Hunts = new Mongo.Collection('scavenger_hunts');\n\nif(Meteor.isServer){\n\tMeteor.publish('scavenger_hunts',function scavenger_huntsPublication(){\n\t\treturn Scavenger_Hunts.find({})\n\t})\n}\nMeteor.methods({\n  // add information to our task db\n  'scavenger_hunts.insert'(object) {\n    let title = object.title;\n    let user\n    check(title, String)\n  \n\n    // Make sure the user is logged in before inserting a task\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Scavenger_Hunts.insert({\n      title,\n      createdAt: new Date(),\n      owner: this.userId,\n      username: Meteor.users.findOne(this.userId).username,\n    });\n  },\n\n  'scavenger_hunts.remove'(scavengerId) {\n    check(taskId, String);\n\n    const task = scavenger_hunts.findOne(taskId);\n    if (task.private && task.owner !== this.userId) {\n      // If the task is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n    Scavenger_Hunts.remove(scavengerId);\n  },\n\n} ) ;\n"]},"hash":"419280599014b221dbba464a94039644e5f58538"}
