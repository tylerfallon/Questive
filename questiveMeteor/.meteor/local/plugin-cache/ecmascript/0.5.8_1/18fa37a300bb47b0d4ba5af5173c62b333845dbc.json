{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/test/behaviors/behaviors_timestamp.js","filenameRelative":"/packages/jagi:astronomy/test/behaviors/behaviors_timestamp.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/test/behaviors/behaviors_timestamp.js.map","sourceFileName":"/packages/jagi:astronomy/test/behaviors/behaviors_timestamp.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"behaviors_timestamp"},"ignored":false,"code":"Tinytest.addAsync('Behaviors - Timestamp', function (test, next) {\n  // Reset Astro.\n  reset();\n\n  var TimestampsA = new Mongo.Collection(null);\n  var TimestampsB = new Mongo.Collection(null);\n  var TimestampsC = new Mongo.Collection(null);\n\n  TimestampsA.find({}, {\n    transform: null\n  }).forEach(function (item) {\n    TimestampsA.remove(item._id);\n  });\n\n  TimestampsB.find({}, {\n    transform: null\n  }).forEach(function (item) {\n    TimestampsB.remove(item._id);\n  });\n\n  TimestampsC.find({}, {\n    transform: null\n  }).forEach(function (item) {\n    TimestampsC.remove(item._id);\n  });\n\n  var TimestampA = Astro.Class.create({\n    name: 'TimestampA',\n    collection: TimestampsA,\n    fields: {\n      name: 'string'\n    },\n    behaviors: {\n      timestamp: {}\n    }\n  });\n\n  var TimestampB = Astro.Class.create({\n    name: 'TimestampB',\n    collection: TimestampsB,\n    fields: {\n      name: 'string'\n    },\n    behaviors: {\n      timestamp: {\n        createdFieldName: 'created',\n        updatedFieldName: 'updated'\n      }\n    }\n  });\n\n  var TimestampC = Astro.Class.create({\n    name: 'TimestampC',\n    collection: TimestampsC,\n    fields: {\n      name: 'string'\n    },\n    behaviors: {\n      timestamp: {\n        hasCreatedField: false,\n        hasUpdatedField: false\n      }\n    }\n  });\n\n  var timestampA = new TimestampA({\n    name: 'TimestampA'\n  });\n  timestampA.save();\n\n  test.instanceOf(timestampA.get('createdAt'), Date, 'The \"createdAt\" field should be instance of Date');\n  test.instanceOf(timestampA.get('updatedAt'), Date, 'The \"updatedAt\" field should be instance of Date');\n  test.equal(timestampA.get('createdAt'), timestampA.get('updatedAt'), 'The \"createdAt\" and \"updatedAt\" fields should be equal');\n\n  timestampA.set('name', 'TimestampA2');\n\n  Meteor.setTimeout(function () {\n    timestampA.save();\n    test.isTrue(timestampA.get('createdAt') < timestampA.get('updatedAt'), 'The value of the \"updatedAt\" field should be greater than the value ' + 'of the \"createdAt\" field');\n    next();\n  }, 1);\n\n  var timestampB = new TimestampB({\n    name: 'TimestampB'\n  });\n  timestampB.save();\n\n  test.instanceOf(timestampB.get('created'), Date, 'The \"created\" field should be instance of Date');\n  test.instanceOf(timestampB.get('updated'), Date, 'The \"updated\" field should be instance of Date');\n  test.equal(timestampB.get('created'), timestampB.get('updated'), 'The \"created\" and \"updated\" fields should be equal');\n\n  var timestampC = new TimestampC({\n    name: 'TimestampC'\n  });\n  timestampC.save();\n\n  test.isUndefined(timestampC.get('createdAt'), 'The \"createdAt\" field should be undefined');\n  test.isUndefined(timestampC.get('updatedAt'), 'The \"updatedAt\" field should be undefined');\n});","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/test/behaviors/behaviors_timestamp.js"],"names":[],"mappings":"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","file":"/packages/jagi:astronomy/test/behaviors/behaviors_timestamp.js.map","sourcesContent":["Tinytest.addAsync('Behaviors - Timestamp', function(test, next) {\n  // Reset Astro.\n  reset();\n\n  var TimestampsA = new Mongo.Collection(null);\n  var TimestampsB = new Mongo.Collection(null);\n  var TimestampsC = new Mongo.Collection(null);\n\n  TimestampsA.find({}, {\n    transform: null\n  }).forEach(function(item) {\n    TimestampsA.remove(item._id);\n  });\n\n  TimestampsB.find({}, {\n    transform: null\n  }).forEach(function(item) {\n    TimestampsB.remove(item._id);\n  });\n\n  TimestampsC.find({}, {\n    transform: null\n  }).forEach(function(item) {\n    TimestampsC.remove(item._id);\n  });\n\n  var TimestampA = Astro.Class.create({\n    name: 'TimestampA',\n    collection: TimestampsA,\n    fields: {\n      name: 'string'\n    },\n    behaviors: {\n      timestamp: {}\n    }\n  });\n\n  var TimestampB = Astro.Class.create({\n    name: 'TimestampB',\n    collection: TimestampsB,\n    fields: {\n      name: 'string'\n    },\n    behaviors: {\n      timestamp: {\n        createdFieldName: 'created',\n        updatedFieldName: 'updated'\n      }\n    }\n  });\n\n  var TimestampC = Astro.Class.create({\n  name: 'TimestampC',\n  collection: TimestampsC,\n  fields: {\n    name: 'string'\n  },\n  behaviors: {\n    timestamp: {\n      hasCreatedField: false,\n      hasUpdatedField: false\n    }\n  }\n});\n\n  var timestampA = new TimestampA({\n    name: 'TimestampA'\n  });\n  timestampA.save();\n\n  test.instanceOf(timestampA.get('createdAt'), Date,\n    'The \"createdAt\" field should be instance of Date'\n  );\n  test.instanceOf(timestampA.get('updatedAt'), Date,\n    'The \"updatedAt\" field should be instance of Date'\n  );\n  test.equal(timestampA.get('createdAt'), timestampA.get('updatedAt'),\n    'The \"createdAt\" and \"updatedAt\" fields should be equal'\n  );\n\n  timestampA.set('name', 'TimestampA2');\n\n  Meteor.setTimeout(function() {\n    timestampA.save();\n    test.isTrue(timestampA.get('createdAt') < timestampA.get('updatedAt'),\n      'The value of the \"updatedAt\" field should be greater than the value ' +\n      'of the \"createdAt\" field'\n    );\n    next();\n  }, 1);\n\n  var timestampB = new TimestampB({\n    name: 'TimestampB'\n  });\n  timestampB.save();\n\n  test.instanceOf(timestampB.get('created'), Date,\n    'The \"created\" field should be instance of Date'\n  );\n  test.instanceOf(timestampB.get('updated'), Date,\n    'The \"updated\" field should be instance of Date'\n  );\n  test.equal(timestampB.get('created'), timestampB.get('updated'),\n    'The \"created\" and \"updated\" fields should be equal'\n  );\n\n  var timestampC = new TimestampC({\n    name: 'TimestampC'\n  });\n  timestampC.save();\n\n  test.isUndefined(timestampC.get('createdAt'),\n    'The \"createdAt\" field should be undefined'\n  );\n  test.isUndefined(timestampC.get('updatedAt'),\n    'The \"updatedAt\" field should be undefined'\n  );\n});\n"]},"hash":"18fa37a300bb47b0d4ba5af5173c62b333845dbc"}
