{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"../../../core/class.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"AstroClass"}]},{"source":"./already_in_simulation.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"alreadyInSimulation"}]},{"source":"./throw_if_selector_is_not_id.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"throwIfSelectorIsNotId"}]},{"source":"./document_insert.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"documentInsert"}]},{"source":"./document_update.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"documentUpdate"}]},{"source":"./apply_modifier.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"applyModifier"}]},{"source":"meteor/minimongo","imported":["Minimongo","LocalCollection"],"specifiers":[{"kind":"named","imported":"Minimongo","local":"Minimongo"},{"kind":"named","imported":"LocalCollection","local":"LocalCollection"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/storage/utils/class_upsert.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/storage/utils/class_upsert.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/storage/utils/class_upsert.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/storage/utils/class_upsert.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"class_upsert"},"ignored":false,"code":"var AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});var alreadyInSimulation;module.import('./already_in_simulation.js',{\"default\":function(v){alreadyInSimulation=v}});var throwIfSelectorIsNotId;module.import('./throw_if_selector_is_not_id.js',{\"default\":function(v){throwIfSelectorIsNotId=v}});var documentInsert;module.import('./document_insert.js',{\"default\":function(v){documentInsert=v}});var documentUpdate;module.import('./document_update.js',{\"default\":function(v){documentUpdate=v}});var applyModifier;module.import('./apply_modifier.js',{\"default\":function(v){applyModifier=v}});var Minimongo,LocalCollection;module.import('meteor/minimongo',{\"Minimongo\":function(v){Minimongo=v},\"LocalCollection\":function(v){LocalCollection=v}});\n\n\n\n\n\n\n\nfunction classUpsert() {\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n  var className = args.className;\n  var selector = args.selector;\n  var modifier = args.modifier;\n  var options = args.options;\n  var stopOnFirstError = args.stopOnFirstError;\n  var fields = args.fields;\n  var _args$simulation = args.simulation;\n  var simulation = _args$simulation === undefined ? true : _args$simulation;\n  var _args$trusted = args.trusted;\n  var trusted = _args$trusted === undefined ? false : _args$trusted;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  // Throw exception if we are trying to perform an operation on more than one\n  // document at once and it's not trusted call.\n  if (!trusted && !alreadyInSimulation()) {\n    throwIfSelectorIsNotId(selector, 'upsert');\n  }\n\n  var Class = AstroClass.get(className);\n  // Get all documents matching selector.\n  var docs = void 0;\n  if (options.multi) {\n    docs = Class.find(selector, options);\n  } else {\n    docs = Class.find(selector, _.extend(options, {\n      limit: 1\n    }));\n  }\n\n  // Create a minimongo matcher object to find array indexes on the projection\n  // operator use.\n  var matcher = new Minimongo.Matcher(selector);\n\n  // Prepare result of the method execution.\n  var result = {\n    numberAffected: 0,\n    insertedId: null\n  };\n\n  if (docs.count() > 0) {\n    docs.forEach(function (doc) {\n      // Use matcher to find array indexes in a given document that needs updating\n      // on the projection operator use.\n      var queryResult = matcher.documentMatches(doc);\n\n      // Apply modifier.\n      applyModifier({\n        doc: doc,\n        modifier: modifier,\n        options: queryResult.arrayIndices ? {\n          arrayIndices: queryResult.arrayIndices\n        } : {}\n      });\n\n      // Update a document.\n      result.numberAffected += documentUpdate({\n        doc: doc,\n        stopOnFirstError: stopOnFirstError,\n        simulation: simulation,\n        fields: fields,\n        trusted: trusted\n      });\n    });\n  } else {\n    // Create a new document from selector.\n    var doc = new Class(LocalCollection._removeDollarOperators(selector));\n    // Apply modifier for the insert operation.\n    applyModifier({\n      doc: doc,\n      modifier: modifier,\n      options: {\n        isInsert: true\n      }\n    });\n\n    // Insert a document.\n    result.insertedId = documentInsert({\n      doc: doc,\n      stopOnFirstError: stopOnFirstError,\n      simulation: simulation,\n      trusted: trusted\n    });\n  }\n\n  return result;\n};\n\nmodule.export(\"default\",exports.default=(classUpsert));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/storage/utils/class_upsert.js"],"names":[],"mappings":"AAAA,OAAO,UAAP,MAAuB,wBAAvB;AACA,OAAO,mBAAP,MAAgC,4BAAhC;AACA,OAAO,sBAAP,MAAmC,kCAAnC;AACA,OAAO,cAAP,MAA2B,sBAA3B;AACA,OAAO,cAAP,MAA2B,sBAA3B;AACA,OAAO,aAAP,MAA0B,qBAA1B;AACA,SAAS,SAAT,EAAoB,eAApB,QAA2C,kBAA3C;;AAEA,SAAS,WAAT,GAAgC;AAAA,MAAX,IAAW,yDAAJ,EAAI;AAAA,MAE5B,SAF4B,GAU1B,IAV0B,CAE5B,SAF4B;AAAA,MAG5B,QAH4B,GAU1B,IAV0B,CAG5B,QAH4B;AAAA,MAI5B,QAJ4B,GAU1B,IAV0B,CAI5B,QAJ4B;AAAA,MAK5B,OAL4B,GAU1B,IAV0B,CAK5B,OAL4B;AAAA,MAM5B,gBAN4B,GAU1B,IAV0B,CAM5B,gBAN4B;AAAA,MAO5B,MAP4B,GAU1B,IAV0B,CAO5B,MAP4B;AAAA,yBAU1B,IAV0B,CAQ5B,UAR4B;AAAA,MAQ5B,UAR4B,oCAQf,IARe;AAAA,sBAU1B,IAV0B,CAS5B,OAT4B;AAAA,MAS5B,OAT4B,iCASlB,KATkB;;;;;AAc9B,MAAI,CAAC,UAAD,IAAe,CAAC,OAAO,QAA3B,EAAqC;AACnC;AACD;;;;AAID,MAAI,CAAC,OAAD,IAAY,CAAC,qBAAjB,EAAwC;AACtC,2BAAuB,QAAvB,EAAiC,QAAjC;AACD;;AAED,MAAM,QAAQ,WAAW,GAAX,CAAe,SAAf,CAAd;;AAEA,MAAI,aAAJ;AACA,MAAI,QAAQ,KAAZ,EAAmB;AACjB,WAAO,MAAM,IAAN,CAAW,QAAX,EAAqB,OAArB,CAAP;AACD,GAFD,MAGK;AACH,WAAO,MAAM,IAAN,CAAW,QAAX,EAAqB,EAAE,MAAF,CAAS,OAAT,EAAkB;AAC5C,aAAO;AADqC,KAAlB,CAArB,CAAP;AAGD;;;;AAID,MAAM,UAAU,IAAI,UAAU,OAAd,CAAsB,QAAtB,CAAhB;;;AAGA,MAAM,SAAS;AACb,oBAAgB,CADH;AAEb,gBAAY;AAFC,GAAf;;AAKA,MAAI,KAAK,KAAL,KAAe,CAAnB,EAAsB;AACpB,SAAK,OAAL,CAAa,UAAC,GAAD,EAAS;;;AAGpB,UAAI,cAAc,QAAQ,eAAR,CAAwB,GAAxB,CAAlB;;;AAGA,oBAAc;AACZ,gBADY;AAEZ,0BAFY;AAGZ,iBAAS,YAAY,YAAZ,GAA2B;AAClC,wBAAc,YAAY;AADQ,SAA3B,GAEL;AALQ,OAAd;;;AASA,aAAO,cAAP,IAAyB,eAAe;AACtC,gBADsC;AAEtC,0CAFsC;AAGtC,8BAHsC;AAItC,sBAJsC;AAKtC;AALsC,OAAf,CAAzB;AAOD,KAtBD;AAuBD,GAxBD,MAyBK;;AAEH,QAAM,MAAM,IAAI,KAAJ,CAAU,gBAAgB,sBAAhB,CAAuC,QAAvC,CAAV,CAAZ;;AAEA,kBAAc;AACZ,cADY;AAEZ,wBAFY;AAGZ,eAAS;AACP,kBAAU;AADH;AAHG,KAAd;;;AASA,WAAO,UAAP,GAAoB,eAAe;AACjC,cADiC;AAEjC,wCAFiC;AAGjC,4BAHiC;AAIjC;AAJiC,KAAf,CAApB;AAMD;;AAED,SAAO,MAAP;AACD;;AAED,eAAe,WAAf","file":"/packages/jagi:astronomy/lib/modules/storage/utils/class_upsert.js.map","sourcesContent":["import AstroClass from '../../../core/class.js';\nimport alreadyInSimulation from './already_in_simulation.js';\nimport throwIfSelectorIsNotId from './throw_if_selector_is_not_id.js';\nimport documentInsert from './document_insert.js';\nimport documentUpdate from './document_update.js';\nimport applyModifier from './apply_modifier.js';\nimport { Minimongo, LocalCollection } from 'meteor/minimongo';\n\nfunction classUpsert(args = {}) {\n  const {\n    className,\n    selector,\n    modifier,\n    options,\n    stopOnFirstError,\n    fields,\n    simulation = true,\n    trusted = false,\n  } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  // Throw exception if we are trying to perform an operation on more than one\n  // document at once and it's not trusted call.\n  if (!trusted && !alreadyInSimulation()) {\n    throwIfSelectorIsNotId(selector, 'upsert');\n  }\n\n  const Class = AstroClass.get(className);\n  // Get all documents matching selector.\n  let docs;\n  if (options.multi) {\n    docs = Class.find(selector, options);\n  }\n  else {\n    docs = Class.find(selector, _.extend(options, {\n      limit: 1\n    }));\n  }\n\n  // Create a minimongo matcher object to find array indexes on the projection\n  // operator use.\n  const matcher = new Minimongo.Matcher(selector);\n\n  // Prepare result of the method execution.\n  const result = {\n    numberAffected: 0,\n    insertedId: null\n  };\n\n  if (docs.count() > 0) {\n    docs.forEach((doc) => {\n      // Use matcher to find array indexes in a given document that needs updating\n      // on the projection operator use.\n      let queryResult = matcher.documentMatches(doc);\n\n      // Apply modifier.\n      applyModifier({\n        doc,\n        modifier,\n        options: queryResult.arrayIndices ? {\n          arrayIndices: queryResult.arrayIndices\n        } : {}\n      });\n\n      // Update a document.\n      result.numberAffected += documentUpdate({\n        doc,\n        stopOnFirstError,\n        simulation,\n        fields,\n        trusted\n      });\n    });\n  }\n  else {\n    // Create a new document from selector.\n    const doc = new Class(LocalCollection._removeDollarOperators(selector));\n    // Apply modifier for the insert operation.\n    applyModifier({\n      doc,\n      modifier,\n      options: {\n        isInsert: true\n      }\n    });\n\n    // Insert a document.\n    result.insertedId = documentInsert({\n      doc,\n      stopOnFirstError,\n      simulation,\n      trusted,\n    });\n  }\n\n  return result;\n};\n\nexport default classUpsert;"]},"hash":"ab97bbb3811ce6e6410b4a194853452c1fa0d7fd"}
