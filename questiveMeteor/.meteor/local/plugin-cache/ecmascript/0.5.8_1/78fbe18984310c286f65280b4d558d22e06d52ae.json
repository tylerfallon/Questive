{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/accounts-password/password_tests_setup.js","filenameRelative":"/packages/accounts-password/password_tests_setup.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/accounts-password/password_tests_setup.js.map","sourceFileName":"/packages/accounts-password/password_tests_setup.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"password_tests_setup"},"ignored":false,"code":"Accounts.validateNewUser(function (user) {\n  if (user.profile && user.profile.invalidAndThrowException) throw new Meteor.Error(403, \"An exception thrown within Accounts.validateNewUser\");\n  return !(user.profile && user.profile.invalid);\n});\n\nAccounts.onCreateUser(function (options, user) {\n  if (options.testOnCreateUserHook) {\n    user.profile = user.profile || {};\n    user.profile.touchedByOnCreateUser = true;\n    return user;\n  } else {\n    return 'TEST DEFAULT HOOK';\n  }\n});\n\n// connection id -> action\nvar invalidateLogins = {};\n\nMeteor.methods({\n  testInvalidateLogins: function () {\n    function testInvalidateLogins(action) {\n      if (action) invalidateLogins[this.connection.id] = action;else delete invalidateLogins[this.connection.id];\n    }\n\n    return testInvalidateLogins;\n  }()\n});\n\nAccounts.validateLoginAttempt(function (attempt) {\n  var action = attempt && attempt.connection && invalidateLogins[attempt.connection.id];\n\n  if (!action) return true;else if (action === 'fail') return false;else if (action === 'hide') throw new Meteor.Error(403, 'hide actual error');else throw new Error('unknown action: ' + action);\n});\n\n// connection id -> [{successful: boolean, attempt: object}]\nvar capturedLogins = {};\n\nMeteor.methods({\n  testCaptureLogins: function () {\n    function testCaptureLogins() {\n      capturedLogins[this.connection.id] = [];\n    }\n\n    return testCaptureLogins;\n  }(),\n\n  testCaptureLogouts: function () {\n    function testCaptureLogouts() {\n      capturedLogouts = [];\n    }\n\n    return testCaptureLogouts;\n  }(),\n\n  testFetchCapturedLogins: function () {\n    function testFetchCapturedLogins() {\n      if (capturedLogins[this.connection.id]) {\n        var logins = capturedLogins[this.connection.id];\n        delete capturedLogins[this.connection.id];\n        return logins;\n      } else return [];\n    }\n\n    return testFetchCapturedLogins;\n  }(),\n\n  testFetchCapturedLogouts: function () {\n    function testFetchCapturedLogouts() {\n      return capturedLogouts;\n    }\n\n    return testFetchCapturedLogouts;\n  }()\n});\n\nAccounts.onLogin(function (attempt) {\n  if (!attempt.connection) // if login method called from the server\n    return;\n\n  if (capturedLogins[attempt.connection.id]) capturedLogins[attempt.connection.id].push({\n    successful: true,\n    attempt: _.omit(attempt, 'connection')\n  });\n});\n\nAccounts.onLoginFailure(function (attempt) {\n  if (!attempt.connection) // if login method called from the server\n    return;\n\n  if (capturedLogins[attempt.connection.id]) {\n    capturedLogins[attempt.connection.id].push({\n      successful: false,\n      attempt: _.omit(attempt, 'connection')\n    });\n  }\n});\n\nvar capturedLogouts = [];\n\nAccounts.onLogout(function () {\n  capturedLogouts.push({\n    successful: true\n  });\n});\n\n// Because this is global state that affects every client, we can't turn\n// it on and off during the tests. Doing so would mean two simultaneous\n// test runs could collide with each other.\n//\n// We should probably have some sort of server-isolation between\n// multiple test runs. Perhaps a separate server instance per run. This\n// problem isn't unique to this test, there are other places in the code\n// where we do various hacky things to work around the lack of\n// server-side isolation.\n//\n// For now, we just test the one configuration state. You can comment\n// out each configuration option and see that the tests fail.\nAccounts.config({\n  sendVerificationEmail: true\n});\n\nMeteor.methods({\n  testMeteorUser: function () {\n    function testMeteorUser() {\n      return Meteor.user();\n    }\n\n    return testMeteorUser;\n  }(),\n  clearUsernameAndProfile: function () {\n    function clearUsernameAndProfile() {\n      if (!this.userId) throw new Error(\"Not logged in!\");\n      Meteor.users.update(this.userId, { $unset: { profile: 1, username: 1 } });\n    }\n\n    return clearUsernameAndProfile;\n  }(),\n\n  expireTokens: function () {\n    function expireTokens() {\n      Accounts._expireTokens(new Date(), this.userId);\n    }\n\n    return expireTokens;\n  }(),\n  removeUser: function () {\n    function removeUser(username) {\n      Meteor.users.remove({ \"username\": username });\n    }\n\n    return removeUser;\n  }()\n});\n\n// Create a user that had previously logged in with SRP.\n\nMeteor.methods({\n  testCreateSRPUser: function () {\n    function testCreateSRPUser() {\n      var username = Random.id();\n      Meteor.users.remove({ username: username });\n      var userId = Accounts.createUser({ username: username });\n      Meteor.users.update(userId, { '$set': { 'services.password.srp': {\n            \"identity\": \"iPNrshUEcpOSO5fRDu7o4RRDc9OJBCGGljYpcXCuyg9\",\n            \"salt\": \"Dk3lFggdEtcHU3aKm6Odx7sdcaIrMskQxBbqtBtFzt6\",\n            \"verifier\": \"2e8bce266b1357edf6952cc56d979db19f699ced97edfb2854b95972f820b0c7006c1a18e98aad40edf3fe111b87c52ef7dd06b320ce452d01376df2d560fdc4d8e74f7a97bca1f67b3cfaef34dee34dd6c76571c247d762624dc166dab5499da06bc9358528efa75bf74e2e7f5a80d09e60acf8856069ae5cfb080f2239ee76\"\n          } } });\n      return username;\n    }\n\n    return testCreateSRPUser;\n  }(),\n\n  testSRPUpgrade: function () {\n    function testSRPUpgrade(username) {\n      var user = Meteor.users.findOne({ username: username });\n      if (user.services && user.services.password && user.services.password.srp) throw new Error(\"srp wasn't removed\");\n      if (!(user.services && user.services.password && user.services.password.bcrypt)) throw new Error(\"bcrypt wasn't added\");\n    }\n\n    return testSRPUpgrade;\n  }(),\n\n  testNoSRPUpgrade: function () {\n    function testNoSRPUpgrade(username) {\n      var user = Meteor.users.findOne({ username: username });\n      if (user.services && user.services.password && user.services.password.bcrypt) throw new Error(\"bcrypt was added\");\n      if (user.services && user.services.password && !user.services.password.srp) throw new Error(\"srp was removed\");\n    }\n\n    return testNoSRPUpgrade;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/packages/accounts-password/password_tests_setup.js"],"names":[],"mappings":"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","file":"/packages/accounts-password/password_tests_setup.js.map","sourcesContent":["Accounts.validateNewUser(function (user) {\n  if (user.profile && user.profile.invalidAndThrowException)\n    throw new Meteor.Error(403, \"An exception thrown within Accounts.validateNewUser\");\n  return !(user.profile && user.profile.invalid);\n});\n\nAccounts.onCreateUser(function (options, user) {\n  if (options.testOnCreateUserHook) {\n    user.profile = user.profile || {};\n    user.profile.touchedByOnCreateUser = true;\n    return user;\n  } else {\n    return 'TEST DEFAULT HOOK';\n  }\n});\n\n\n// connection id -> action\nvar invalidateLogins = {};\n\n\nMeteor.methods({\n  testInvalidateLogins: function (action) {\n    if (action)\n      invalidateLogins[this.connection.id] = action;\n    else\n      delete invalidateLogins[this.connection.id];\n  }\n});\n\n\nAccounts.validateLoginAttempt(function (attempt) {\n  var action =\n    attempt &&\n    attempt.connection &&\n    invalidateLogins[attempt.connection.id];\n\n  if (! action)\n    return true;\n  else if (action === 'fail')\n    return false;\n  else if (action === 'hide')\n    throw new Meteor.Error(403, 'hide actual error');\n  else\n    throw new Error('unknown action: ' + action);\n});\n\n\n// connection id -> [{successful: boolean, attempt: object}]\nvar capturedLogins = {};\n\nMeteor.methods({\n  testCaptureLogins: function () {\n    capturedLogins[this.connection.id] = [];\n  },\n\n  testCaptureLogouts: function() {\n    capturedLogouts = [];\n  },\n\n  testFetchCapturedLogins: function () {\n    if (capturedLogins[this.connection.id]) {\n      var logins = capturedLogins[this.connection.id];\n      delete capturedLogins[this.connection.id];\n      return logins;\n    }\n    else\n      return [];\n  },\n\n  testFetchCapturedLogouts: function() {\n    return capturedLogouts;\n  }\n});\n\nAccounts.onLogin(function (attempt) {\n  if (!attempt.connection) // if login method called from the server\n    return;\n\n  if (capturedLogins[attempt.connection.id])\n    capturedLogins[attempt.connection.id].push({\n      successful: true,\n      attempt: _.omit(attempt, 'connection')\n    });\n});\n\nAccounts.onLoginFailure(function (attempt) {\n  if (!attempt.connection) // if login method called from the server\n    return;\n\n  if (capturedLogins[attempt.connection.id]) {\n    capturedLogins[attempt.connection.id].push({\n      successful: false,\n      attempt: _.omit(attempt, 'connection')\n    });\n  }\n});\n\nvar capturedLogouts = [];\n\nAccounts.onLogout(function() {\n  capturedLogouts.push({\n    successful: true\n  });\n});\n\n// Because this is global state that affects every client, we can't turn\n// it on and off during the tests. Doing so would mean two simultaneous\n// test runs could collide with each other.\n//\n// We should probably have some sort of server-isolation between\n// multiple test runs. Perhaps a separate server instance per run. This\n// problem isn't unique to this test, there are other places in the code\n// where we do various hacky things to work around the lack of\n// server-side isolation.\n//\n// For now, we just test the one configuration state. You can comment\n// out each configuration option and see that the tests fail.\nAccounts.config({\n  sendVerificationEmail: true\n});\n\n\nMeteor.methods({\n  testMeteorUser: function () { return Meteor.user(); },\n  clearUsernameAndProfile: function () {\n    if (!this.userId)\n      throw new Error(\"Not logged in!\");\n    Meteor.users.update(this.userId,\n                        {$unset: {profile: 1, username: 1}});\n  },\n\n  expireTokens: function () {\n    Accounts._expireTokens(new Date(), this.userId);\n  },\n  removeUser: function (username) {\n    Meteor.users.remove({ \"username\": username });\n  }\n});\n\n\n// Create a user that had previously logged in with SRP.\n\nMeteor.methods({\n  testCreateSRPUser: function () {\n    var username = Random.id();\n    Meteor.users.remove({username: username});\n    var userId = Accounts.createUser({username: username});\n    Meteor.users.update(\n      userId,\n      { '$set': { 'services.password.srp': {\n          \"identity\" : \"iPNrshUEcpOSO5fRDu7o4RRDc9OJBCGGljYpcXCuyg9\",\n          \"salt\" : \"Dk3lFggdEtcHU3aKm6Odx7sdcaIrMskQxBbqtBtFzt6\",\n          \"verifier\" : \"2e8bce266b1357edf6952cc56d979db19f699ced97edfb2854b95972f820b0c7006c1a18e98aad40edf3fe111b87c52ef7dd06b320ce452d01376df2d560fdc4d8e74f7a97bca1f67b3cfaef34dee34dd6c76571c247d762624dc166dab5499da06bc9358528efa75bf74e2e7f5a80d09e60acf8856069ae5cfb080f2239ee76\"\n      } } }\n    );\n    return username;\n  },\n\n  testSRPUpgrade: function (username) {\n    var user = Meteor.users.findOne({username: username});\n    if (user.services && user.services.password && user.services.password.srp)\n      throw new Error(\"srp wasn't removed\");\n    if (!(user.services && user.services.password && user.services.password.bcrypt))\n      throw new Error(\"bcrypt wasn't added\");\n  },\n\n  testNoSRPUpgrade: function (username) {\n    var user = Meteor.users.findOne({username: username});\n    if (user.services && user.services.password && user.services.password.bcrypt)\n      throw new Error(\"bcrypt was added\");\n    if (user.services && user.services.password && ! user.services.password.srp)\n      throw new Error(\"srp was removed\");\n  }\n});\n"]},"hash":"78fbe18984310c286f65280b4d558d22e06d52ae"}
