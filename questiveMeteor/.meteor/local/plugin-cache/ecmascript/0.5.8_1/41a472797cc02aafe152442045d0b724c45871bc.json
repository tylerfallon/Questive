{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"../../fields/utils/cast_nested.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"castNested"}]},{"source":"./trigger_before_save.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"triggerBeforeSave"}]},{"source":"./trigger_before_update.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"triggerBeforeUpdate"}]},{"source":"./trigger_after_save.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"triggerAfterSave"}]},{"source":"./trigger_after_update.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"triggerAfterUpdate"}]},{"source":"./is_modified.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"isModified"}]},{"source":"./get_modifier.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"getModifier"}]},{"source":"../../validators/utils/document_validate.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"documentValidate"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/storage/utils/document_update.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/storage/utils/document_update.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/storage/utils/document_update.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/storage/utils/document_update.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"document_update"},"ignored":false,"code":"var _;module.import('lodash',{\"default\":function(v){_=v}});var castNested;module.import('../../fields/utils/cast_nested.js',{\"default\":function(v){castNested=v}});var triggerBeforeSave;module.import('./trigger_before_save.js',{\"default\":function(v){triggerBeforeSave=v}});var triggerBeforeUpdate;module.import('./trigger_before_update.js',{\"default\":function(v){triggerBeforeUpdate=v}});var triggerAfterSave;module.import('./trigger_after_save.js',{\"default\":function(v){triggerAfterSave=v}});var triggerAfterUpdate;module.import('./trigger_after_update.js',{\"default\":function(v){triggerAfterUpdate=v}});var isModified;module.import('./is_modified.js',{\"default\":function(v){isModified=v}});var getModifier;module.import('./get_modifier.js',{\"default\":function(v){getModifier=v}});var documentValidate;module.import('../../validators/utils/document_validate.js',{\"default\":function(v){documentValidate=v}});\n\n\n\n\n\n\n\n\n\nfunction documentUpdate() {\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n  var doc = args.doc;\n  var stopOnFirstError = args.stopOnFirstError;\n  var fields = args.fields;\n  var _args$simulation = args.simulation;\n  var simulation = _args$simulation === undefined ? true : _args$simulation;\n  var _args$trusted = args.trusted;\n  var trusted = _args$trusted === undefined ? false : _args$trusted;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  var Class = doc.constructor;\n  var Collection = Class.getCollection();\n\n  // Return if there were no modifications.\n  if (!isModified({\n    doc: doc,\n    fields: fields\n  })) {\n    // Validate a document even if there were no modifications.\n    documentValidate({\n      doc: doc,\n      fields: fields,\n      stopOnFirstError: stopOnFirstError,\n      simulation: simulation\n    });\n    // 0 documents were modified.\n    return 0;\n  }\n\n  // Check if a class is secured.\n  if (Class.isSecured('update') && Meteor.isServer && !trusted) {\n    throw new Meteor.Error(403, 'Updating from the client is not allowed');\n  }\n\n  // Cast nested documents.\n  castNested({\n    doc: doc\n  });\n\n  // Trigger before events.\n  triggerBeforeSave(doc, trusted);\n  triggerBeforeUpdate(doc, trusted);\n\n  // Cast nested documents.\n  castNested({\n    doc: doc\n  });\n\n  // Validate a document.\n  documentValidate({\n    doc: doc,\n    fields: fields,\n    stopOnFirstError: stopOnFirstError,\n    simulation: simulation\n  });\n\n  // Get modifier.\n  var modifier = getModifier({\n    doc: doc,\n    fields: fields\n  });\n  // Stop execution is a modifier is empty.\n  if (_.size(modifier) === 0) {\n    return 0;\n  }\n  // Update a document.\n  try {\n    var result = Collection._collection.update({\n      _id: doc._id\n    }, modifier);\n\n    // Trigger after events.\n    triggerAfterUpdate(doc, trusted);\n    triggerAfterSave(doc, trusted);\n\n    return result;\n  } catch (err) {\n    if (err.name === 'MongoError' || err.name === 'MinimongoError') {\n      throw new Meteor.Error(409, err.toString());\n    } else {\n      throw err;\n    }\n  }\n};\n\nmodule.export(\"default\",exports.default=(documentUpdate));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/storage/utils/document_update.js"],"names":[],"mappings":"AAAA,OAAO,CAAP,MAAc,QAAd;AACA,OAAO,UAAP,MAAuB,mCAAvB;AACA,OAAO,iBAAP,MAA8B,0BAA9B;AACA,OAAO,mBAAP,MAAgC,4BAAhC;AACA,OAAO,gBAAP,MAA6B,yBAA7B;AACA,OAAO,kBAAP,MAA+B,2BAA/B;AACA,OAAO,UAAP,MAAuB,kBAAvB;AACA,OAAO,WAAP,MAAwB,mBAAxB;AACA,OAAO,gBAAP,MAA6B,6CAA7B;;AAEA,SAAS,cAAT,GAAmC;AAAA,MAAX,IAAW,yDAAJ,EAAI;AAAA,MAE/B,GAF+B,GAO7B,IAP6B,CAE/B,GAF+B;AAAA,MAG/B,gBAH+B,GAO7B,IAP6B,CAG/B,gBAH+B;AAAA,MAI/B,MAJ+B,GAO7B,IAP6B,CAI/B,MAJ+B;AAAA,yBAO7B,IAP6B,CAK/B,UAL+B;AAAA,MAK/B,UAL+B,oCAKlB,IALkB;AAAA,sBAO7B,IAP6B,CAM/B,OAN+B;AAAA,MAM/B,OAN+B,iCAMrB,KANqB;;;;;AAWjC,MAAI,CAAC,UAAD,IAAe,CAAC,OAAO,QAA3B,EAAqC;AACnC;AACD;;AAED,MAAI,QAAQ,IAAI,WAAhB;AACA,MAAI,aAAa,MAAM,aAAN,EAAjB;;;AAGA,MAAI,CAAC,WAAW;AACZ,YADY;AAEZ;AAFY,GAAX,CAAL,EAGM;;AAEJ,qBAAiB;AACf,cADe;AAEf,oBAFe;AAGf,wCAHe;AAIf;AAJe,KAAjB;;AAOA,WAAO,CAAP;AACD;;;AAGD,MAAI,MAAM,SAAN,CAAgB,QAAhB,KAA6B,OAAO,QAApC,IAAgD,CAAC,OAArD,EAA8D;AAC5D,UAAM,IAAI,OAAO,KAAX,CAAiB,GAAjB,EAAsB,yCAAtB,CAAN;AACD;;;AAGD,aAAW;AACT;AADS,GAAX;;;AAKA,oBAAkB,GAAlB,EAAuB,OAAvB;AACA,sBAAoB,GAApB,EAAyB,OAAzB;;;AAGA,aAAW;AACT;AADS,GAAX;;;AAKA,mBAAiB;AACf,YADe;AAEf,kBAFe;AAGf,sCAHe;AAIf;AAJe,GAAjB;;;AAQA,MAAM,WAAW,YAAY;AAC3B,YAD2B;AAE3B;AAF2B,GAAZ,CAAjB;;AAKA,MAAI,EAAE,IAAF,CAAO,QAAP,MAAqB,CAAzB,EAA4B;AAC1B,WAAO,CAAP;AACD;;AAED,MAAI;AACF,QAAM,SAAS,WAAW,WAAX,CAAuB,MAAvB,CAA8B;AAC3C,WAAK,IAAI;AADkC,KAA9B,EAEZ,QAFY,CAAf;;;AAKA,uBAAmB,GAAnB,EAAwB,OAAxB;AACA,qBAAiB,GAAjB,EAAsB,OAAtB;;AAEA,WAAO,MAAP;AACD,GAVD,CAWA,OAAM,GAAN,EAAW;AACT,QAAI,IAAI,IAAJ,KAAa,YAAb,IAA6B,IAAI,IAAJ,KAAa,gBAA9C,EAAgE;AAC9D,YAAM,IAAI,OAAO,KAAX,CAAiB,GAAjB,EAAsB,IAAI,QAAJ,EAAtB,CAAN;AACD,KAFD,MAGK;AACH,YAAM,GAAN;AACD;AACF;AACF;;AAED,eAAe,cAAf","file":"/packages/jagi:astronomy/lib/modules/storage/utils/document_update.js.map","sourcesContent":["import _ from 'lodash';\nimport castNested from '../../fields/utils/cast_nested.js';\nimport triggerBeforeSave from './trigger_before_save.js';\nimport triggerBeforeUpdate from './trigger_before_update.js';\nimport triggerAfterSave from './trigger_after_save.js';\nimport triggerAfterUpdate from './trigger_after_update.js';\nimport isModified from './is_modified.js';\nimport getModifier from './get_modifier.js';\nimport documentValidate from '../../validators/utils/document_validate.js';\n\nfunction documentUpdate(args = {}) {\n  let {\n    doc,\n    stopOnFirstError,\n    fields,\n    simulation = true,\n    trusted = false,\n  } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  let Class = doc.constructor;\n  let Collection = Class.getCollection();\n\n  // Return if there were no modifications.\n  if (!isModified({\n      doc,\n      fields\n    })) {\n    // Validate a document even if there were no modifications.\n    documentValidate({\n      doc,\n      fields,\n      stopOnFirstError,\n      simulation\n    });\n    // 0 documents were modified.\n    return 0;\n  }\n\n  // Check if a class is secured.\n  if (Class.isSecured('update') && Meteor.isServer && !trusted) {\n    throw new Meteor.Error(403, 'Updating from the client is not allowed');\n  }\n\n  // Cast nested documents.\n  castNested({\n    doc\n  });\n\n  // Trigger before events.\n  triggerBeforeSave(doc, trusted);\n  triggerBeforeUpdate(doc, trusted);\n\n  // Cast nested documents.\n  castNested({\n    doc\n  });\n\n  // Validate a document.\n  documentValidate({\n    doc,\n    fields,\n    stopOnFirstError,\n    simulation\n  });\n\n  // Get modifier.\n  const modifier = getModifier({\n    doc,\n    fields\n  });\n  // Stop execution is a modifier is empty.\n  if (_.size(modifier) === 0) {\n    return 0;\n  }\n  // Update a document.\n  try {\n    const result = Collection._collection.update({\n      _id: doc._id\n    }, modifier);\n\n    // Trigger after events.\n    triggerAfterUpdate(doc, trusted);\n    triggerAfterSave(doc, trusted);\n\n    return result;\n  }\n  catch(err) {\n    if (err.name === 'MongoError' || err.name === 'MinimongoError') {\n      throw new Meteor.Error(409, err.toString());\n    }\n    else {\n      throw err;\n    }\n  }\n};\n\nexport default documentUpdate;\n"]},"hash":"41a472797cc02aafe152442045d0b724c45871bc"}
