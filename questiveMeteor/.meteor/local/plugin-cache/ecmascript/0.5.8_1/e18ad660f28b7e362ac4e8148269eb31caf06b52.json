{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"../../storage/utils/has_meteor_method.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"hasMeteorMethod"}]},{"source":"../meteor_methods/validate.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"meteorValidate"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/validators/hooks/apply_definition.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/validators/hooks/apply_definition.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/validators/hooks/apply_definition.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/validators/hooks/apply_definition.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"apply_definition"},"ignored":false,"code":"var _;module.import('lodash',{\"default\":function(v){_=v}});var hasMeteorMethod;module.import('../../storage/utils/has_meteor_method.js',{\"default\":function(v){hasMeteorMethod=v}});var meteorValidate;module.import('../meteor_methods/validate.js',{\"default\":function(v){meteorValidate=v}});\n\n\n\nfunction onApplyDefinition(Class, parsedDefinition, className) {\n  _.each(parsedDefinition.validators, function (validators, fieldName) {\n    Class.schema.validators[fieldName] = Class.schema.validators[fieldName] || [];\n    _.each(validators, function (validator) {\n      Class.schema.validators[fieldName] = Class.schema.validators[fieldName].concat(validator);\n    });\n  });\n\n  // Add the \"/Astronomy/validate\" meteor method only when a class has assigned\n  // collection.\n  var Collection = Class.getCollection();\n  // If it's a remote collection then we register methods on the connection\n  // object of the collection.\n  var connection = Collection && Collection._connection;\n  // If it's not a remote collection than use main Meteor connection.\n  if (!connection && (!Collection || !Collection._name)) {\n    connection = Meteor.connection || Meteor.server;\n  }\n  if (connection) {\n    // Prepare meteor methods to be added.\n    var meteorMethods = {\n      '/Astronomy/validate': meteorValidate\n    };\n    _.each(meteorMethods, function (meteorMethod, methodName) {\n      if (!hasMeteorMethod(connection, methodName)) {\n        // Add meteor method.\n        connection.methods(_.zipObject([methodName], [meteorMethod]));\n      }\n    });\n  }\n\n  Class.schema.resolveError = parsedDefinition.resolveError;\n};\n\nmodule.export(\"default\",exports.default=(onApplyDefinition));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/validators/hooks/apply_definition.js"],"names":[],"mappings":"AAAA,OAAO,CAAP,MAAc,QAAd;AACA,OAAO,eAAP,MAA4B,0CAA5B;AACA,OAAO,cAAP,MAA2B,+BAA3B;;AAEA,SAAS,iBAAT,CAA2B,KAA3B,EAAkC,gBAAlC,EAAoD,SAApD,EAA+D;AAC7D,IAAE,IAAF,CAAO,iBAAiB,UAAxB,EAAoC,UAAS,UAAT,EAAqB,SAArB,EAAgC;AAClE,UAAM,MAAN,CAAa,UAAb,CAAwB,SAAxB,IACE,MAAM,MAAN,CAAa,UAAb,CAAwB,SAAxB,KAAsC,EADxC;AAEA,MAAE,IAAF,CAAO,UAAP,EAAmB,UAAS,SAAT,EAAoB;AACrC,YAAM,MAAN,CAAa,UAAb,CAAwB,SAAxB,IACE,MAAM,MAAN,CAAa,UAAb,CAAwB,SAAxB,EAAmC,MAAnC,CAA0C,SAA1C,CADF;AAED,KAHD;AAID,GAPD;;;;AAWA,MAAI,aAAa,MAAM,aAAN,EAAjB;;;AAGA,MAAI,aAAa,cAAc,WAAW,WAA1C;;AAEA,MAAI,CAAC,UAAD,KAAgB,CAAC,UAAD,IAAe,CAAC,WAAW,KAA3C,CAAJ,EAAuD;AACrD,iBAAa,OAAO,UAAP,IAAqB,OAAO,MAAzC;AACD;AACD,MAAI,UAAJ,EAAgB;;AAEd,QAAI,gBAAgB;AAClB,6BAAuB;AADL,KAApB;AAGA,MAAE,IAAF,CAAO,aAAP,EAAsB,UAAC,YAAD,EAAe,UAAf,EAA8B;AAClD,UAAI,CAAC,gBAAgB,UAAhB,EAA4B,UAA5B,CAAL,EAA8C;;AAE5C,mBAAW,OAAX,CAAmB,EAAE,SAAF,CAAY,CAAC,UAAD,CAAZ,EAA0B,CAAC,YAAD,CAA1B,CAAnB;AACD;AACF,KALD;AAMD;;AAED,QAAM,MAAN,CAAa,YAAb,GAA4B,iBAAiB,YAA7C;AACD;;AAED,eAAe,iBAAf","file":"/packages/jagi:astronomy/lib/modules/validators/hooks/apply_definition.js.map","sourcesContent":["import _ from 'lodash';\nimport hasMeteorMethod from '../../storage/utils/has_meteor_method.js';\nimport meteorValidate from '../meteor_methods/validate.js';\n\nfunction onApplyDefinition(Class, parsedDefinition, className) {\n  _.each(parsedDefinition.validators, function(validators, fieldName) {\n    Class.schema.validators[fieldName] =\n      Class.schema.validators[fieldName] || [];\n    _.each(validators, function(validator) {\n      Class.schema.validators[fieldName] =\n        Class.schema.validators[fieldName].concat(validator);\n    });\n  });\n\n  // Add the \"/Astronomy/validate\" meteor method only when a class has assigned\n  // collection.\n  let Collection = Class.getCollection();\n  // If it's a remote collection then we register methods on the connection\n  // object of the collection.\n  let connection = Collection && Collection._connection;\n  // If it's not a remote collection than use main Meteor connection.\n  if (!connection && (!Collection || !Collection._name)) {\n    connection = Meteor.connection || Meteor.server;\n  }\n  if (connection) {\n    // Prepare meteor methods to be added.\n    let meteorMethods = {\n      '/Astronomy/validate': meteorValidate\n    };\n    _.each(meteorMethods, (meteorMethod, methodName) => {\n      if (!hasMeteorMethod(connection, methodName)) {\n        // Add meteor method.\n        connection.methods(_.zipObject([methodName], [meteorMethod]));\n      }\n    });\n  }\n\n  Class.schema.resolveError = parsedDefinition.resolveError;\n};\n\nexport default onApplyDefinition;"]},"hash":"e18ad660f28b7e362ac4e8148269eb31caf06b52"}
