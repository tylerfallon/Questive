{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"../../../core/class.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"AstroClass"}]},{"source":"../../fields/utils/resolve_values.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"resolveValues"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/storage/utils/transform_to_class.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/storage/utils/transform_to_class.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/storage/utils/transform_to_class.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/storage/utils/transform_to_class.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"transform_to_class"},"ignored":false,"code":"var _;module.import('lodash',{\"default\":function(v){_=v}});var AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});var resolveValues;module.import('../../fields/utils/resolve_values.js',{\"default\":function(v){resolveValues=v}});\n\n\n\nfunction transformToClass(className) {\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  // Set default options.\n  _.defaults(options, {\n    defaults: true\n  });\n  options.clone = false;\n\n  return function (rawDoc) {\n    var Class = AstroClass.get(className);\n\n    if (Class) {\n      var typeField = Class.getTypeField();\n      if (typeField) {\n        var TypeClass = AstroClass.get(rawDoc[typeField]);\n        if (TypeClass) {\n          Class = TypeClass;\n        }\n      }\n\n      // Resolve values using the \"resolveValue\" method if provided.\n      var resolvedDoc = resolveValues({\n        Class: Class,\n        values: rawDoc\n      });\n\n      var doc = new Class(resolvedDoc, options);\n      doc._isNew = false;\n      return doc;\n    }\n\n    return rawDoc;\n  };\n};\n\nmodule.export(\"default\",exports.default=(transformToClass));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/storage/utils/transform_to_class.js"],"names":[],"mappings":"AAAA,OAAO,CAAP,MAAc,QAAd;AACA,OAAO,UAAP,MAAuB,wBAAvB;AACA,OAAO,aAAP,MAA0B,sCAA1B;;AAEA,SAAS,gBAAT,CAA0B,SAA1B,EAAmD;AAAA,MAAd,OAAc,yDAAJ,EAAI;;;AAEjD,IAAE,QAAF,CAAW,OAAX,EAAoB;AAClB,cAAU;AADQ,GAApB;AAGA,UAAQ,KAAR,GAAgB,KAAhB;;AAEA,SAAO,UAAS,MAAT,EAAiB;AACtB,QAAI,QAAQ,WAAW,GAAX,CAAe,SAAf,CAAZ;;AAEA,QAAI,KAAJ,EAAW;AACT,UAAM,YAAY,MAAM,YAAN,EAAlB;AACA,UAAI,SAAJ,EAAe;AACb,YAAM,YAAY,WAAW,GAAX,CAAe,OAAO,SAAP,CAAf,CAAlB;AACA,YAAI,SAAJ,EAAe;AACb,kBAAQ,SAAR;AACD;AACF;;;AAGD,UAAM,cAAc,cAAc;AAChC,oBADgC;AAEhC,gBAAQ;AAFwB,OAAd,CAApB;;AAKA,UAAM,MAAM,IAAI,KAAJ,CAAU,WAAV,EAAuB,OAAvB,CAAZ;AACA,UAAI,MAAJ,GAAa,KAAb;AACA,aAAO,GAAP;AACD;;AAED,WAAO,MAAP;AACD,GAxBD;AAyBD;;AAED,eAAe,gBAAf","file":"/packages/jagi:astronomy/lib/modules/storage/utils/transform_to_class.js.map","sourcesContent":["import _ from 'lodash';\nimport AstroClass from '../../../core/class.js';\nimport resolveValues from '../../fields/utils/resolve_values.js';\n\nfunction transformToClass(className, options = {}) {\n  // Set default options.\n  _.defaults(options, {\n    defaults: true\n  });\n  options.clone = false;\n\n  return function(rawDoc) {\n    let Class = AstroClass.get(className);\n\n    if (Class) {\n      const typeField = Class.getTypeField();\n      if (typeField) {\n        const TypeClass = AstroClass.get(rawDoc[typeField]);\n        if (TypeClass) {\n          Class = TypeClass;\n        }\n      }\n\n      // Resolve values using the \"resolveValue\" method if provided.\n      const resolvedDoc = resolveValues({\n        Class,\n        values: rawDoc\n      });\n\n      const doc = new Class(resolvedDoc, options);\n      doc._isNew = false;\n      return doc;\n    }\n\n    return rawDoc;\n  };\n};\n\nexport default transformToClass;\n"]},"hash":"57023442636ac93b1befaf0b6b7253b69927f601"}
