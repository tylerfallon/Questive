{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"../utils/get_modified.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"utilGetModified"}]},{"source":"../../fields/utils/raw_one.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"rawOne"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/get_modified_values.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/get_modified_values.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/get_modified_values.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/get_modified_values.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"get_modified_values"},"ignored":false,"code":"var _;module.import('lodash',{\"default\":function(v){_=v}});var utilGetModified;module.import('../utils/get_modified.js',{\"default\":function(v){utilGetModified=v}});var rawOne;module.import('../../fields/utils/raw_one.js',{\"default\":function(v){rawOne=v}});\n\n\n\nfunction getModifiedValues() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n  var _options$old = options.old;\n  var old = _options$old === undefined ? false : _options$old;\n  var _options$raw = options.raw;\n  var raw = _options$raw === undefined ? false : _options$raw;\n\n\n  var doc = this;\n  var Class = doc.constructor;\n\n  // Get list of modified fields.\n  var modified = utilGetModified({\n    doc: doc,\n    transient: true\n  });\n\n  // Get old or new values of a document.\n  if (old) {\n    doc = doc._isNew ? new Class() : Class.findOne(doc._id);\n  }\n\n  // Collect values for each field.\n  var values = {};\n  _.each(modified, function (name) {\n    if (raw) {\n      values[name] = rawOne(doc, name);\n    } else {\n      values[name] = doc.get(name);\n    }\n  });\n\n  return values;\n};\n\nmodule.export(\"default\",exports.default=(getModifiedValues));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/get_modified_values.js"],"names":[],"mappings":"AAAA,OAAO,CAAP,MAAc,QAAd;AACA,OAAO,eAAP,MAA4B,0BAA5B;AACA,OAAO,MAAP,MAAmB,+BAAnB;;AAEA,SAAS,iBAAT,GAAyC;AAAA,MAAd,OAAc,yDAAJ,EAAI;AAAA,qBAInC,OAJmC,CAErC,GAFqC;AAAA,MAErC,GAFqC,gCAE/B,KAF+B;AAAA,qBAInC,OAJmC,CAGrC,GAHqC;AAAA,MAGrC,GAHqC,gCAG/B,KAH+B;;;AAMvC,MAAI,MAAM,IAAV;AACA,MAAM,QAAQ,IAAI,WAAlB;;;AAGA,MAAM,WAAW,gBAAgB;AAC/B,YAD+B;AAE/B,eAAW;AAFoB,GAAhB,CAAjB;;;AAMA,MAAI,GAAJ,EAAS;AACP,UAAM,IAAI,MAAJ,GAAa,IAAI,KAAJ,EAAb,GAA2B,MAAM,OAAN,CAAc,IAAI,GAAlB,CAAjC;AACD;;;AAGD,MAAM,SAAS,EAAf;AACA,IAAE,IAAF,CAAO,QAAP,EAAiB,UAAC,IAAD,EAAU;AACzB,QAAI,GAAJ,EAAS;AACP,aAAO,IAAP,IAAe,OAAO,GAAP,EAAY,IAAZ,CAAf;AACD,KAFD,MAGK;AACH,aAAO,IAAP,IAAe,IAAI,GAAJ,CAAQ,IAAR,CAAf;AACD;AACF,GAPD;;AASA,SAAO,MAAP;AACD;;AAED,eAAe,iBAAf","file":"/packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/get_modified_values.js.map","sourcesContent":["import _ from 'lodash';\nimport utilGetModified from '../utils/get_modified.js';\nimport rawOne from '../../fields/utils/raw_one.js';\n\nfunction getModifiedValues(options = {}) {\n  let {\n    old = false,\n    raw = false\n  } = options;\n\n  let doc = this;\n  const Class = doc.constructor;\n\n  // Get list of modified fields.\n  const modified = utilGetModified({\n    doc,\n    transient: true\n  });\n\n  // Get old or new values of a document.\n  if (old) {\n    doc = doc._isNew ? new Class() : Class.findOne(doc._id);\n  }\n\n  // Collect values for each field.\n  const values = {};\n  _.each(modified, (name) => {\n    if (raw) {\n      values[name] = rawOne(doc, name);\n    }\n    else {\n      values[name] = doc.get(name);\n    }\n  });\n\n  return values;\n};\n\nexport default getModifiedValues;"]},"hash":"0ef02c594aa44802d6dea0c56c93478761434e7c"}
