{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"../utils/transform_to_class.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"transformToClass"}]},{"source":"../../events/event.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Event"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]}],"exports":{"exported":["find","findOne"],"specifiers":[{"kind":"local","local":"find","exported":"find"},{"kind":"local","local":"findOne","exported":"findOne"}]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/storage/class_static_methods/find.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/storage/class_static_methods/find.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/storage/class_static_methods/find.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/storage/class_static_methods/find.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"find"},"ignored":false,"code":"module.export({find:function(){return find},findOne:function(){return findOne}});var _;module.import('lodash',{\"default\":function(v){_=v}});var transformToClass;module.import('../utils/transform_to_class.js',{\"default\":function(v){transformToClass=v}});var Event;module.import('../../events/event.js',{\"default\":function(v){Event=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});\n\n\n\n\nfunction createMethod(methodName) {\n  return function (selector, options) {\n    var Class = this;\n    var Collection = Class.getCollection();\n\n    // Get selector from arguments.\n    if (arguments.length === 0) {\n      selector = {};\n    } else {\n      selector = arguments[0];\n    }\n    // If selector is null then just proceed to collection's find method.\n    if (_.isNull(selector)) {\n      return Collection[methodName](selector, options);\n    }\n    // Rewrite selector to make it an object.\n    selector = Mongo.Collection._rewriteSelector(selector);\n\n    // Set default options.\n    options = _.defaults({}, options, {\n      defaults: true,\n      children: true\n    });\n    // We don't want to clone raw object in the \"find\" method.\n    options.clone = false;\n\n    // Modify selector and options using the \"beforeFind\" event handlers.\n    if (!options.disableEvents) {\n      Class.dispatchEvent(new Event('beforeFind', {\n        selector: selector,\n        options: options\n      }));\n    }\n\n    // If it's an inherited class, then get only documents being instances of\n    // the subclass.\n    var typeField = Class.getTypeField();\n    if (typeField) {\n      // If a class has child classes then we have to fetch document being\n      // instances of the parent and child classes depending on a value of\n      // the \"children\" option.\n      var children = Class.getChildren();\n      if (options.children === true && children.length > 0) {\n        selector[typeField] = {\n          $in: _(children).map(function (Child) {\n            return Child.getName();\n          }).concat(Class.getName()).value()\n        };\n      } else {\n        selector[typeField] = Class.getName();\n      }\n    }\n\n    // Get custom transform function from the class schema.\n    if (options.transform === undefined) {\n      options.transform = Class.getTransform(options);\n    }\n    // Get default transform function if none is provided.\n    if (options.transform === undefined) {\n      options.transform = transformToClass(Class.getName(), {\n        defaults: options.defaults\n      });\n    }\n\n    // Execute the original method.\n    var result = Collection[methodName](selector, options);\n\n    // Modify a query result using the \"afterFind\" event handlers.\n    if (!options.disableEvents) {\n      Class.dispatchEvent(new Event('afterFind', {\n        selector: selector,\n        options: options,\n        result: result\n      }));\n    }\n\n    return result;\n  };\n}\n\nvar find = createMethod('find');\nvar findOne = createMethod('findOne');\n\n","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/storage/class_static_methods/find.js"],"names":[],"mappings":"AAAA,OAAO,CAAP,MAAc,QAAd;AACA,OAAO,gBAAP,MAA6B,gCAA7B;AACA,OAAO,KAAP,MAAkB,uBAAlB;AACA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,SAAS,YAAT,CAAsB,UAAtB,EAAkC;AAChC,SAAO,UAAS,QAAT,EAAmB,OAAnB,EAA4B;AACjC,QAAI,QAAQ,IAAZ;AACA,QAAI,aAAa,MAAM,aAAN,EAAjB;;;AAGA,QAAI,UAAU,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,iBAAW,EAAX;AACD,KAFD,MAGK;AACH,iBAAW,UAAU,CAAV,CAAX;AACD;;AAED,QAAI,EAAE,MAAF,CAAS,QAAT,CAAJ,EAAwB;AACtB,aAAO,WAAW,UAAX,EAAuB,QAAvB,EAAiC,OAAjC,CAAP;AACD;;AAED,eAAW,MAAM,UAAN,CAAiB,gBAAjB,CAAkC,QAAlC,CAAX;;;AAGA,cAAU,EAAE,QAAF,CAAW,EAAX,EAAe,OAAf,EAAwB;AAChC,gBAAU,IADsB;AAEhC,gBAAU;AAFsB,KAAxB,CAAV;;AAKA,YAAQ,KAAR,GAAgB,KAAhB;;;AAGA,QAAI,CAAC,QAAQ,aAAb,EAA4B;AAC1B,YAAM,aAAN,CAAoB,IAAI,KAAJ,CAAU,YAAV,EAAwB;AAC1C,0BAD0C;AAE1C;AAF0C,OAAxB,CAApB;AAID;;;;AAID,QAAM,YAAY,MAAM,YAAN,EAAlB;AACA,QAAI,SAAJ,EAAe;;;;AAIb,UAAM,WAAW,MAAM,WAAN,EAAjB;AACA,UAAI,QAAQ,QAAR,KAAqB,IAArB,IAA6B,SAAS,MAAT,GAAkB,CAAnD,EAAsD;AACpD,iBAAS,SAAT,IAAsB;AACpB,eAAK,EAAE,QAAF,EAAY,GAAZ,CAAgB,UAAS,KAAT,EAAgB;AACnC,mBAAO,MAAM,OAAN,EAAP;AACD,WAFI,EAEF,MAFE,CAEK,MAAM,OAAN,EAFL,EAEsB,KAFtB;AADe,SAAtB;AAKD,OAND,MAOK;AACH,iBAAS,SAAT,IAAsB,MAAM,OAAN,EAAtB;AACD;AACF;;;AAGD,QAAI,QAAQ,SAAR,KAAsB,SAA1B,EAAqC;AACnC,cAAQ,SAAR,GAAoB,MAAM,YAAN,CAAmB,OAAnB,CAApB;AACD;;AAED,QAAI,QAAQ,SAAR,KAAsB,SAA1B,EAAqC;AACnC,cAAQ,SAAR,GAAoB,iBAAiB,MAAM,OAAN,EAAjB,EAAkC;AACpD,kBAAU,QAAQ;AADkC,OAAlC,CAApB;AAGD;;;AAGD,QAAI,SAAS,WAAW,UAAX,EAAuB,QAAvB,EAAiC,OAAjC,CAAb;;;AAGA,QAAI,CAAC,QAAQ,aAAb,EAA4B;AAC1B,YAAM,aAAN,CAAoB,IAAI,KAAJ,CAAU,WAAV,EAAuB;AACzC,0BADyC;AAEzC,wBAFyC;AAGzC;AAHyC,OAAvB,CAApB;AAKD;;AAED,WAAO,MAAP;AACD,GA9ED;AA+ED;;AAED,IAAM,OAAO,aAAa,MAAb,CAAb;AACA,IAAM,UAAU,aAAa,SAAb,CAAhB;;AAEA,SAAS,IAAT,EAAe,OAAf","file":"/packages/jagi:astronomy/lib/modules/storage/class_static_methods/find.js.map","sourcesContent":["import _ from 'lodash';\nimport transformToClass from '../utils/transform_to_class.js';\nimport Event from '../../events/event.js';\nimport { Mongo } from 'meteor/mongo';\n\nfunction createMethod(methodName) {\n  return function(selector, options) {\n    let Class = this;\n    let Collection = Class.getCollection();\n\n    // Get selector from arguments.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n    else {\n      selector = arguments[0];\n    }\n    // If selector is null then just proceed to collection's find method.\n    if (_.isNull(selector)) {\n      return Collection[methodName](selector, options);\n    }\n    // Rewrite selector to make it an object.\n    selector = Mongo.Collection._rewriteSelector(selector);\n\n    // Set default options.\n    options = _.defaults({}, options, {\n      defaults: true,\n      children: true\n    });\n    // We don't want to clone raw object in the \"find\" method.\n    options.clone = false;\n\n    // Modify selector and options using the \"beforeFind\" event handlers.\n    if (!options.disableEvents) {\n      Class.dispatchEvent(new Event('beforeFind', {\n        selector,\n        options\n      }));\n    }\n\n    // If it's an inherited class, then get only documents being instances of\n    // the subclass.\n    const typeField = Class.getTypeField();\n    if (typeField) {\n      // If a class has child classes then we have to fetch document being\n      // instances of the parent and child classes depending on a value of\n      // the \"children\" option.\n      const children = Class.getChildren();\n      if (options.children === true && children.length > 0) {\n        selector[typeField] = {\n          $in: _(children).map(function(Child) {\n            return Child.getName();\n          }).concat(Class.getName()).value()\n        };\n      }\n      else {\n        selector[typeField] = Class.getName();\n      }\n    }\n\n    // Get custom transform function from the class schema.\n    if (options.transform === undefined) {\n      options.transform = Class.getTransform(options);\n    }\n    // Get default transform function if none is provided.\n    if (options.transform === undefined) {\n      options.transform = transformToClass(Class.getName(), {\n        defaults: options.defaults\n      });\n    }\n\n    // Execute the original method.\n    let result = Collection[methodName](selector, options);\n\n    // Modify a query result using the \"afterFind\" event handlers.\n    if (!options.disableEvents) {\n      Class.dispatchEvent(new Event('afterFind', {\n        selector,\n        options,\n        result\n      }));\n    }\n\n    return result;\n  };\n}\n\nconst find = createMethod('find');\nconst findOne = createMethod('findOne');\n\nexport { find, findOne };\n"]},"hash":"7ab871b8d0f4e4e75af1812506d586bd8b03d810"}
