{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]}],"exports":{"exported":["Tasks"],"specifiers":[{"kind":"local","local":"Tasks","exported":"Tasks"}]}}},"options":{"filename":"/imports/api/tasks.js","filenameRelative":"/imports/api/tasks.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/tasks.js.map","sourceFileName":"/imports/api/tasks.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"tasks"},"ignored":false,"code":"module.export({Tasks:function(){return Tasks}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});\n\n\n\nvar Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only publish tasks that are public or belong to the current user\n  Meteor.publish('tasks', function () {\n    function tasksPublication() {\n      return Tasks.find({\n        $or: [{ 'private': { $ne: true } }, { owner: this.userId }]\n      });\n    }\n\n    return tasksPublication;\n  }());\n}\n\nMeteor.methods({\n  // add information to our task db\n\n  'tasks.insert': function () {\n    function tasksInsert(object) {\n      var user = object.user;\n      var title = object.title;\n      var task = object.text;\n      var location = object.location;\n      check(title, String);\n      check(task, String);\n      check(location, String);\n\n      // Make sure the user is logged in before inserting a task\n      if (!this.userId) {\n        throw new Meteor.Error('not-authorized');\n      }\n\n      Tasks.insert({\n        user: user,\n        title: title,\n        task: task,\n        location: location,\n        createdAt: new Date(),\n        owner: this.userId,\n        username: Meteor.users.findOne(this.userId).username\n      });\n    }\n\n    return tasksInsert;\n  }(),\n  'tasks.remove': function () {\n    function tasksRemove(taskId) {\n      check(taskId, String);\n\n      var task = Tasks.findOne(taskId);\n      if (task['private'] && task.owner !== this.userId) {\n        // If the task is private, make sure only the owner can delete it\n        throw new Meteor.Error('not-authorized');\n      }\n\n      Tasks.remove(taskId);\n    }\n\n    return tasksRemove;\n  }(),\n  'tasks.setChecked': function () {\n    function tasksSetChecked(taskId, setChecked) {\n      check(taskId, String);\n      check(setChecked, Boolean);\n\n      var task = Tasks.findOne(taskId);\n      if (task['private'] && task.owner !== this.userId) {\n        // If the task is private, make sure only the owner can check it off\n        throw new Meteor.Error('not-authorized');\n      }\n\n      Tasks.update(taskId, { $set: { checked: setChecked } });\n    }\n\n    return tasksSetChecked;\n  }(),\n  'tasks.setPrivate': function () {\n    function tasksSetPrivate(taskId, setToPrivate) {\n      check(taskId, String);\n      check(setToPrivate, Boolean);\n\n      var task = Tasks.findOne(taskId);\n\n      // Make sure only the task owner can make a task private\n      if (task.owner !== this.userId) {\n        throw new Meteor.Error('not-authorized');\n      }\n\n      Tasks.update(taskId, { $set: { 'private': setToPrivate } });\n    }\n\n    return tasksSetPrivate;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/imports/api/tasks.js"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAM,QAAQ,IAAI,MAAM,UAAV,CAAqB,OAArB,CAAd;;AAEP,IAAI,OAAO,QAAX,EAAqB;;;AAGnB,SAAO,OAAP,CAAe,OAAf;AAAwB,aAAS,gBAAT,GAA4B;AAClD,aAAO,MAAM,IAAN,CAAW;AAChB,aAAK,CACH,EAAE,WAAS,EAAE,KAAK,IAAP,EAAX,EADG,EAEH,EAAE,OAAO,KAAK,MAAd,EAFG;AADW,OAAX,CAAP;AAMD;;AAPD,WAAiC,gBAAjC;AAAA;AAQD;;AAED,OAAO,OAAP,CAAe;;;AAEb,gBAFa;AAAA,yBAEE,MAFF,EAEU;AACrB,UAAI,OAAO,OAAO,IAAlB;AACA,UAAI,QAAQ,OAAO,KAAnB;AACA,UAAI,OAAO,OAAO,IAAlB;AACA,UAAI,WAAW,OAAO,QAAtB;AACA,YAAM,KAAN,EAAa,MAAb;AACA,YAAM,IAAN,EAAY,MAAZ;AACA,YAAM,QAAN,EAAgB,MAAhB;;;AAGA,UAAI,CAAE,KAAK,MAAX,EAAmB;AACjB,cAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,YAAM,MAAN,CAAa;AACX,kBADW;AAEX,oBAFW;AAGX,kBAHW;AAIX,0BAJW;AAKX,mBAAW,IAAI,IAAJ,EALA;AAMX,eAAO,KAAK,MAND;AAOX,kBAAU,OAAO,KAAP,CAAa,OAAb,CAAqB,KAAK,MAA1B,EAAkC;AAPjC,OAAb;AASD;;AAzBY;AAAA;AA0Bb,gBA1Ba;AAAA,yBA0BE,MA1BF,EA0BU;AACrB,YAAM,MAAN,EAAc,MAAd;;AAEA,UAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACA,UAAI,mBAAgB,KAAK,KAAL,KAAe,KAAK,MAAxC,EAAgD;;AAE9C,cAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,YAAM,MAAN,CAAa,MAAb;AACD;;AApCY;AAAA;AAqCb,oBArCa;AAAA,6BAqCM,MArCN,EAqCc,UArCd,EAqC0B;AACrC,YAAM,MAAN,EAAc,MAAd;AACA,YAAM,UAAN,EAAkB,OAAlB;;AAEA,UAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACA,UAAI,mBAAgB,KAAK,KAAL,KAAe,KAAK,MAAxC,EAAgD;;AAE9C,cAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,YAAM,MAAN,CAAa,MAAb,EAAqB,EAAE,MAAM,EAAE,SAAS,UAAX,EAAR,EAArB;AACD;;AAhDY;AAAA;AAiDb,oBAjDa;AAAA,6BAiDM,MAjDN,EAiDc,YAjDd,EAiD4B;AACvC,YAAM,MAAN,EAAc,MAAd;AACA,YAAM,YAAN,EAAoB,OAApB;;AAEA,UAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;;;AAGA,UAAI,KAAK,KAAL,KAAe,KAAK,MAAxB,EAAgC;AAC9B,cAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,YAAM,MAAN,CAAa,MAAb,EAAqB,EAAE,MAAM,EAAE,WAAS,YAAX,EAAR,EAArB;AACD;;AA7DY;AAAA;AAAA,CAAf","file":"/imports/api/tasks.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nexport const Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only publish tasks that are public or belong to the current user\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find({\n      $or: [\n        { private: { $ne: true } },\n        { owner: this.userId },\n      ],\n    });\n  });\n}\n\nMeteor.methods({\n  // add information to our task db\n  'tasks.insert'(object) {\n    let user = object.user;\n    let title = object.title;\n    let task = object.text;\n    let location = object.location;\n    check(title, String)\n    check(task, String);\n    check(location, String);\n\n    // Make sure the user is logged in before inserting a task\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.insert({\n      user,\n      title,\n      task,\n      location,\n      createdAt: new Date(),\n      owner: this.userId,\n      username: Meteor.users.findOne(this.userId).username,\n    });\n  },\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== this.userId) {\n      // If the task is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.remove(taskId);\n  },\n  'tasks.setChecked'(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== this.userId) {\n      // If the task is private, make sure only the owner can check it off\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, { $set: { checked: setChecked } });\n  },\n  'tasks.setPrivate'(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n\n    const task = Tasks.findOne(taskId);\n\n    // Make sure only the task owner can make a task private\n    if (task.owner !== this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, { $set: { private: setToPrivate } });\n  },\n\n} ) ;"]},"hash":"0fee6ee16e5ab4af56dabd088b816e7ba7cd569c"}
