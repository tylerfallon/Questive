{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/accounts-password/email_tests.js","filenameRelative":"/packages/accounts-password/email_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/accounts-password/email_tests.js.map","sourceFileName":"/packages/accounts-password/email_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"email_tests"},"ignored":false,"code":"var resetPasswordToken;\nvar verifyEmailToken;\nvar enrollAccountToken;\n\nAccounts._isolateLoginTokenForTest();\n\nif (Meteor.isServer) {\n  Accounts.removeDefaultRateLimit();\n}\n\ntestAsyncMulti(\"accounts emails - reset password flow\", [function (test, expect) {\n  var _this = this;\n\n  this.randomSuffix = Random.id();\n  this.email = \"Ada-intercept@example.com\" + this.randomSuffix;\n  // Create the user with another email and add the tested for email later,\n  // so we can test whether forgotPassword respects the passed in email\n  Accounts.createUser({ email: \"another@example.com\" + this.randomSuffix, password: 'foobar' }, expect(function (error) {\n    test.equal(error, undefined);\n    Meteor.call(\"addEmailForTestAndVerify\", _this.email);\n  }));\n}, function (test, expect) {\n  Accounts.forgotPassword({ email: this.email }, expect(function (error) {\n    test.equal(error, undefined);\n  }));\n}, function (test, expect) {\n  Accounts.connection.call(\"getInterceptedEmails\", this.email, expect(function (error, result) {\n    test.equal(error, undefined);\n    test.notEqual(result, undefined);\n    test.equal(result.length, 2); // the first is the email verification\n    var options = result[1];\n\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n    var match = options.text.match(re);\n    test.isTrue(match);\n    resetPasswordToken = match[1];\n    test.isTrue(options.html.match(re));\n\n    test.equal(options.from, 'test@meteor.com');\n    test.equal(options.headers['My-Custom-Header'], 'Cool');\n  }));\n}, function (test, expect) {\n  Accounts.resetPassword(resetPasswordToken, \"newPassword\", expect(function (error) {\n    test.isFalse(error);\n  }));\n}, function (test, expect) {\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Meteor.loginWithPassword({ email: this.email }, \"newPassword\", expect(function (error) {\n    test.isFalse(error);\n  }));\n}, function (test, expect) {\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}]);\n\ntestAsyncMulti(\"accounts emails - reset password flow with case insensitive email\", [function (test, expect) {\n  var _this2 = this;\n\n  this.randomSuffix = Random.id();\n  this.email = \"Ada-intercept@example.com\" + this.randomSuffix;\n  // Create the user with another email and add the tested for email later,\n  // so we can test whether forgotPassword respects the passed in email\n  Accounts.createUser({ email: \"another@example.com\" + this.randomSuffix, password: 'foobar' }, expect(function (error) {\n    test.equal(error, undefined);\n    Meteor.call(\"addEmailForTestAndVerify\", _this2.email);\n  }));\n}, function (test, expect) {\n  Accounts.forgotPassword({ email: \"ada-intercept@example.com\" + this.randomSuffix }, expect(function (error) {\n    test.equal(error, undefined);\n  }));\n}, function (test, expect) {\n  Accounts.connection.call(\"getInterceptedEmails\", this.email, expect(function (error, result) {\n    test.equal(error, undefined);\n    test.notEqual(result, undefined);\n    test.equal(result.length, 2); // the first is the email verification\n    var options = result[1];\n\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n    var match = options.text.match(re);\n    test.isTrue(match);\n    resetPasswordToken = match[1];\n    test.isTrue(options.html.match(re));\n\n    test.equal(options.from, 'test@meteor.com');\n    test.equal(options.headers['My-Custom-Header'], 'Cool');\n  }));\n}, function (test, expect) {\n  Accounts.resetPassword(resetPasswordToken, \"newPassword\", expect(function (error) {\n    test.isFalse(error);\n  }));\n}, function (test, expect) {\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Meteor.loginWithPassword({ email: this.email }, \"newPassword\", expect(function (error) {\n    test.isFalse(error);\n  }));\n}, function (test, expect) {\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}]);\n\nvar getVerifyEmailToken = function getVerifyEmailToken(email, test, expect) {\n  Accounts.connection.call(\"getInterceptedEmails\", email, expect(function (error, result) {\n    test.equal(error, undefined);\n    test.notEqual(result, undefined);\n    test.equal(result.length, 1);\n    var options = result[0];\n\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/verify-email/(\\\\S*)\");\n    var match = options.text.match(re);\n    test.isTrue(match);\n    verifyEmailToken = match[1];\n    test.isTrue(options.html.match(re));\n\n    test.equal(options.from, 'test@meteor.com');\n    test.equal(options.headers['My-Custom-Header'], 'Cool');\n  }));\n};\n\nvar loggedIn = function loggedIn(test, expect) {\n  return expect(function (error) {\n    test.equal(error, undefined);\n    test.isTrue(Meteor.user());\n  });\n};\n\ntestAsyncMulti(\"accounts emails - verify email flow\", [function (test, expect) {\n  this.email = Random.id() + \"-intercept@example.com\";\n  this.anotherEmail = Random.id() + \"-intercept@example.com\";\n  Accounts.createUser({ email: this.email, password: 'foobar' }, loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails.length, 1);\n  test.equal(Meteor.user().emails[0].address, this.email);\n  test.isFalse(Meteor.user().emails[0].verified);\n  // We should NOT be publishing things like verification tokens!\n  test.isFalse(_.has(Meteor.user(), 'services'));\n}, function (test, expect) {\n  getVerifyEmailToken(this.email, test, expect);\n}, function (test, expect) {\n  // Log out, to test that verifyEmail logs us back in.\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Accounts.verifyEmail(verifyEmailToken, loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails.length, 1);\n  test.equal(Meteor.user().emails[0].address, this.email);\n  test.isTrue(Meteor.user().emails[0].verified);\n}, function (test, expect) {\n  var _this3 = this;\n\n  Accounts.connection.call(\"addEmailForTestAndVerify\", this.anotherEmail, expect(function (error, result) {\n    test.isFalse(error);\n    test.equal(Meteor.user().emails.length, 2);\n    test.equal(Meteor.user().emails[1].address, _this3.anotherEmail);\n    test.isFalse(Meteor.user().emails[1].verified);\n  }));\n}, function (test, expect) {\n  getVerifyEmailToken(this.anotherEmail, test, expect);\n}, function (test, expect) {\n  // Log out, to test that verifyEmail logs us back in. (And if we don't\n  // do that, waitUntilLoggedIn won't be able to prevent race conditions.)\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Accounts.verifyEmail(verifyEmailToken, loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails[1].address, this.anotherEmail);\n  test.isTrue(Meteor.user().emails[1].verified);\n}, function (test, expect) {\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}]);\n\nvar getEnrollAccountToken = function getEnrollAccountToken(email, test, expect) {\n  Accounts.connection.call(\"getInterceptedEmails\", email, expect(function (error, result) {\n    test.equal(error, undefined);\n    test.notEqual(result, undefined);\n    test.equal(result.length, 1);\n    var options = result[0];\n\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/enroll-account/(\\\\S*)\");\n    var match = options.text.match(re);\n    test.isTrue(match);\n    enrollAccountToken = match[1];\n    test.isTrue(options.html.match(re));\n\n    test.equal(options.from, 'test@meteor.com');\n    test.equal(options.headers['My-Custom-Header'], 'Cool');\n  }));\n};\n\ntestAsyncMulti(\"accounts emails - enroll account flow\", [function (test, expect) {\n  var _this4 = this;\n\n  this.email = Random.id() + \"-intercept@example.com\";\n  Accounts.connection.call(\"createUserOnServer\", this.email, expect(function (error, result) {\n    test.isFalse(error);\n    var user = result;\n    test.equal(user.emails.length, 1);\n    test.equal(user.emails[0].address, _this4.email);\n    test.isFalse(user.emails[0].verified);\n  }));\n}, function (test, expect) {\n  getEnrollAccountToken(this.email, test, expect);\n}, function (test, expect) {\n  Accounts.resetPassword(enrollAccountToken, 'password', loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails.length, 1);\n  test.equal(Meteor.user().emails[0].address, this.email);\n  test.isTrue(Meteor.user().emails[0].verified);\n}, function (test, expect) {\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Meteor.loginWithPassword({ email: this.email }, 'password', loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails.length, 1);\n  test.equal(Meteor.user().emails[0].address, this.email);\n  test.isTrue(Meteor.user().emails[0].verified);\n}, function (test, expect) {\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}]);","ast":null,"map":{"version":3,"sources":["/packages/accounts-password/email_tests.js"],"names":[],"mappings":"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","file":"/packages/accounts-password/email_tests.js.map","sourcesContent":["var resetPasswordToken;\nvar verifyEmailToken;\nvar enrollAccountToken;\n\nAccounts._isolateLoginTokenForTest();\n\nif (Meteor.isServer) {\n  Accounts.removeDefaultRateLimit();\n}\n\ntestAsyncMulti(\"accounts emails - reset password flow\", [\n  function (test, expect) {\n    this.randomSuffix = Random.id();\n    this.email = \"Ada-intercept@example.com\" + this.randomSuffix;\n    // Create the user with another email and add the tested for email later,\n    // so we can test whether forgotPassword respects the passed in email\n    Accounts.createUser({email: \"another@example.com\" + this.randomSuffix, password: 'foobar'},\n      expect((error) => {\n        test.equal(error, undefined);\n        Meteor.call(\"addEmailForTestAndVerify\", this.email);\n      }));\n  },\n  function (test, expect) {\n    Accounts.forgotPassword({email: this.email}, expect((error) => {\n      test.equal(error, undefined);\n    }));\n  },\n  function (test, expect) {\n    Accounts.connection.call(\n      \"getInterceptedEmails\", this.email, expect((error, result) => {\n        test.equal(error, undefined);\n        test.notEqual(result, undefined);\n        test.equal(result.length, 2); // the first is the email verification\n        var options = result[1];\n\n        var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n        var match = options.text.match(re);\n        test.isTrue(match);\n        resetPasswordToken = match[1];\n        test.isTrue(options.html.match(re));\n\n        test.equal(options.from, 'test@meteor.com');\n        test.equal(options.headers['My-Custom-Header'], 'Cool');\n      }));\n  },\n  function (test, expect) {\n    Accounts.resetPassword(resetPasswordToken, \"newPassword\", expect((error) => {\n      test.isFalse(error);\n    }));\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Meteor.loginWithPassword(\n      {email: this.email}, \"newPassword\",\n      expect((error) => {\n        test.isFalse(error);\n      }));\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  }\n]);\n\ntestAsyncMulti(`accounts emails - \\\nreset password flow with case insensitive email`, [\n  function (test, expect) {\n    this.randomSuffix = Random.id();\n    this.email = \"Ada-intercept@example.com\" + this.randomSuffix;\n    // Create the user with another email and add the tested for email later,\n    // so we can test whether forgotPassword respects the passed in email\n    Accounts.createUser({email: \"another@example.com\" + this.randomSuffix, password: 'foobar'},\n      expect((error) => {\n        test.equal(error, undefined);\n        Meteor.call(\"addEmailForTestAndVerify\", this.email);\n      }));\n  },\n  function (test, expect) {\n    Accounts.forgotPassword({email: \"ada-intercept@example.com\" + this.randomSuffix}, expect((error) => {\n      test.equal(error, undefined);\n    }));\n  },\n  function (test, expect) {\n    Accounts.connection.call(\n      \"getInterceptedEmails\", this.email, expect((error, result) => {\n        test.equal(error, undefined);\n        test.notEqual(result, undefined);\n        test.equal(result.length, 2); // the first is the email verification\n        var options = result[1];\n\n        var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n        var match = options.text.match(re);\n        test.isTrue(match);\n        resetPasswordToken = match[1];\n        test.isTrue(options.html.match(re));\n\n        test.equal(options.from, 'test@meteor.com');\n        test.equal(options.headers['My-Custom-Header'], 'Cool');\n      }));\n  },\n  function (test, expect) {\n    Accounts.resetPassword(resetPasswordToken, \"newPassword\", expect((error) => {\n      test.isFalse(error);\n    }));\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Meteor.loginWithPassword(\n      {email: this.email}, \"newPassword\",\n      expect((error) => {\n        test.isFalse(error);\n      }));\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  }\n]);\n\nvar getVerifyEmailToken = function (email, test, expect) {\n  Accounts.connection.call(\n    \"getInterceptedEmails\", email, expect((error, result) => {\n      test.equal(error, undefined);\n      test.notEqual(result, undefined);\n      test.equal(result.length, 1);\n      var options = result[0];\n\n      var re = new RegExp(Meteor.absoluteUrl() + \"#/verify-email/(\\\\S*)\");\n      var match = options.text.match(re);\n      test.isTrue(match);\n      verifyEmailToken = match[1];\n      test.isTrue(options.html.match(re));\n\n      test.equal(options.from, 'test@meteor.com');\n      test.equal(options.headers['My-Custom-Header'], 'Cool');\n    }));\n};\n\nvar loggedIn = function (test, expect) {\n  return expect((error) => {\n    test.equal(error, undefined);\n    test.isTrue(Meteor.user());\n  });\n};\n\ntestAsyncMulti(\"accounts emails - verify email flow\", [\n  function (test, expect) {\n    this.email = Random.id() + \"-intercept@example.com\";\n    this.anotherEmail = Random.id() + \"-intercept@example.com\";\n    Accounts.createUser(\n      {email: this.email, password: 'foobar'},\n      loggedIn(test, expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails.length, 1);\n    test.equal(Meteor.user().emails[0].address, this.email);\n    test.isFalse(Meteor.user().emails[0].verified);\n    // We should NOT be publishing things like verification tokens!\n    test.isFalse(_.has(Meteor.user(), 'services'));\n  },\n  function (test, expect) {\n    getVerifyEmailToken(this.email, test, expect);\n  },\n  function (test, expect) {\n    // Log out, to test that verifyEmail logs us back in.\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Accounts.verifyEmail(verifyEmailToken,\n                         loggedIn(test, expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails.length, 1);\n    test.equal(Meteor.user().emails[0].address, this.email);\n    test.isTrue(Meteor.user().emails[0].verified);\n  },\n  function (test, expect) {\n    Accounts.connection.call(\n      \"addEmailForTestAndVerify\", this.anotherEmail,\n      expect((error, result) => {\n        test.isFalse(error);\n        test.equal(Meteor.user().emails.length, 2);\n        test.equal(Meteor.user().emails[1].address, this.anotherEmail);\n        test.isFalse(Meteor.user().emails[1].verified);\n      }));\n  },\n  function (test, expect) {\n    getVerifyEmailToken(this.anotherEmail, test, expect);\n  },\n  function (test, expect) {\n    // Log out, to test that verifyEmail logs us back in. (And if we don't\n    // do that, waitUntilLoggedIn won't be able to prevent race conditions.)\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Accounts.verifyEmail(verifyEmailToken,\n                         loggedIn(test, expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails[1].address, this.anotherEmail);\n    test.isTrue(Meteor.user().emails[1].verified);\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  }\n]);\n\nvar getEnrollAccountToken = function (email, test, expect) {\n  Accounts.connection.call(\n    \"getInterceptedEmails\", email, expect((error, result) => {\n      test.equal(error, undefined);\n      test.notEqual(result, undefined);\n      test.equal(result.length, 1);\n      var options = result[0];\n\n      var re = new RegExp(Meteor.absoluteUrl() + \"#/enroll-account/(\\\\S*)\")\n      var match = options.text.match(re);\n      test.isTrue(match);\n      enrollAccountToken = match[1];\n      test.isTrue(options.html.match(re));\n\n      test.equal(options.from, 'test@meteor.com');\n      test.equal(options.headers['My-Custom-Header'], 'Cool');\n    }));\n};\n\ntestAsyncMulti(\"accounts emails - enroll account flow\", [\n  function (test, expect) {\n    this.email = Random.id() + \"-intercept@example.com\";\n    Accounts.connection.call(\"createUserOnServer\", this.email,\n      expect((error, result) => {\n        test.isFalse(error);\n        var user = result;\n        test.equal(user.emails.length, 1);\n        test.equal(user.emails[0].address, this.email);\n        test.isFalse(user.emails[0].verified);\n      }));\n  },\n  function (test, expect) {\n    getEnrollAccountToken(this.email, test, expect);\n  },\n  function (test, expect) {\n    Accounts.resetPassword(enrollAccountToken, 'password',\n                           loggedIn(test, expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails.length, 1);\n    test.equal(Meteor.user().emails[0].address, this.email);\n    test.isTrue(Meteor.user().emails[0].verified);\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Meteor.loginWithPassword({email: this.email}, 'password',\n                             loggedIn(test ,expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails.length, 1);\n    test.equal(Meteor.user().emails[0].address, this.email);\n    test.isTrue(Meteor.user().emails[0].verified);\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  }\n]);\n"]},"hash":"f1750312532cc992a37e0ce1d0c08f77ce494f66"}
