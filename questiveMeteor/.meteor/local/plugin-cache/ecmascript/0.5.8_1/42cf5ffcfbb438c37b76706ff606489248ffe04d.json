{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"../../../core/class.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"AstroClass"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/fields/utils/cast_nested.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/fields/utils/cast_nested.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/fields/utils/cast_nested.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/fields/utils/cast_nested.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"cast_nested"},"ignored":false,"code":"var _;module.import('lodash',{\"default\":function(v){_=v}});var AstroClass;module.import('../../../core/class.js',{\"default\":function(v){AstroClass=v}});\n\n\nfunction createDocument(Class, rawDoc, options) {\n  // If a nested field has a type field, then we have to check if we are\n  // casting to some of the nested classes.\n  var typeField = Class.getTypeField();\n  if (typeField) {\n    var ChildClass = AstroClass.get(rawDoc[typeField]);\n    if (ChildClass && ChildClass.isChildOf(Class)) {\n      return new ChildClass(rawDoc);\n    }\n  }\n  return new Class(rawDoc, options);\n};\n\nfunction castNested() {\n  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n  var doc = args.doc;\n  var options = args.options;\n\n  _.defaults(options, {\n    clone: true\n  });\n  var Class = doc.constructor;\n\n  _.each(Class.getObjectFields(), function (field) {\n    var value = doc[field.name];\n    // If field value is empty then go to the next one.\n    if (_.isNil(value)) {\n      return;\n    }\n    var NestedClass = field.type['class'];\n    if (!(value instanceof NestedClass)) {\n      if (!_.isPlainObject(value)) {\n        return;\n      }\n      doc[field.name] = createDocument(NestedClass, value, options);\n    }\n  });\n\n  _.each(Class.getListFields(), function (field) {\n    var value = doc[field.name];\n    // If field value is empty then go to the next one.\n    if (!_.isArray(value) || !field.isClass) {\n      return;\n    }\n    var NestedClass = field.type['class'];\n    _.each(value, function (element, index) {\n      if (!(element instanceof NestedClass)) {\n        if (!_.isPlainObject(element)) {\n          return;\n        }\n        value[index] = createDocument(NestedClass, element, options);\n      }\n    });\n  });\n};\n\nmodule.export(\"default\",exports.default=(castNested));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/fields/utils/cast_nested.js"],"names":[],"mappings":"AAAA,OAAO,CAAP,MAAc,QAAd;AACA,OAAO,UAAP,MAAuB,wBAAvB;;AAEA,SAAS,cAAT,CAAwB,KAAxB,EAA+B,MAA/B,EAAuC,OAAvC,EAAgD;;;AAG9C,MAAM,YAAY,MAAM,YAAN,EAAlB;AACA,MAAI,SAAJ,EAAe;AACb,QAAM,aAAa,WAAW,GAAX,CAAe,OAAO,SAAP,CAAf,CAAnB;AACA,QAAI,cAAc,WAAW,SAAX,CAAqB,KAArB,CAAlB,EAA+C;AAC7C,aAAO,IAAI,UAAJ,CAAe,MAAf,CAAP;AACD;AACF;AACD,SAAO,IAAI,KAAJ,CAAU,MAAV,EAAkB,OAAlB,CAAP;AACD;;AAED,SAAS,UAAT,GAA+B;AAAA,MAAX,IAAW,yDAAJ,EAAI;AAAA,MAE3B,GAF2B,GAIzB,IAJyB,CAE3B,GAF2B;AAAA,MAG3B,OAH2B,GAIzB,IAJyB,CAG3B,OAH2B;;AAK7B,IAAE,QAAF,CAAW,OAAX,EAAoB;AAClB,WAAO;AADW,GAApB;AAGA,MAAM,QAAQ,IAAI,WAAlB;;AAEA,IAAE,IAAF,CAAO,MAAM,eAAN,EAAP,EAAgC,UAAC,KAAD,EAAW;AACzC,QAAI,QAAQ,IAAI,MAAM,IAAV,CAAZ;;AAEA,QAAI,EAAE,KAAF,CAAQ,KAAR,CAAJ,EAAoB;AAClB;AACD;AACD,QAAI,cAAc,MAAM,IAAN,SAAlB;AACA,QAAI,EAAE,iBAAiB,WAAnB,CAAJ,EAAqC;AACnC,UAAI,CAAC,EAAE,aAAF,CAAgB,KAAhB,CAAL,EAA6B;AAC3B;AACD;AACD,UAAI,MAAM,IAAV,IAAkB,eAAe,WAAf,EAA4B,KAA5B,EAAmC,OAAnC,CAAlB;AACD;AACF,GAbD;;AAeA,IAAE,IAAF,CAAO,MAAM,aAAN,EAAP,EAA8B,UAAC,KAAD,EAAW;AACvC,QAAI,QAAQ,IAAI,MAAM,IAAV,CAAZ;;AAEA,QAAI,CAAC,EAAE,OAAF,CAAU,KAAV,CAAD,IAAqB,CAAC,MAAM,OAAhC,EAAyC;AACvC;AACD;AACD,QAAI,cAAc,MAAM,IAAN,SAAlB;AACA,MAAE,IAAF,CAAO,KAAP,EAAc,UAAC,OAAD,EAAU,KAAV,EAAoB;AAChC,UAAI,EAAE,mBAAmB,WAArB,CAAJ,EAAuC;AACrC,YAAI,CAAC,EAAE,aAAF,CAAgB,OAAhB,CAAL,EAA+B;AAC7B;AACD;AACD,cAAM,KAAN,IAAe,eAAe,WAAf,EAA4B,OAA5B,EAAqC,OAArC,CAAf;AACD;AACF,KAPD;AAQD,GAfD;AAgBD;;AAED,eAAe,UAAf","file":"/packages/jagi:astronomy/lib/modules/fields/utils/cast_nested.js.map","sourcesContent":["import _ from 'lodash';\nimport AstroClass from '../../../core/class.js';\n\nfunction createDocument(Class, rawDoc, options) {\n  // If a nested field has a type field, then we have to check if we are\n  // casting to some of the nested classes.\n  const typeField = Class.getTypeField();\n  if (typeField) {\n    const ChildClass = AstroClass.get(rawDoc[typeField]);\n    if (ChildClass && ChildClass.isChildOf(Class)) {\n      return new ChildClass(rawDoc);\n    }\n  }\n  return new Class(rawDoc, options);\n};\n\nfunction castNested(args = {}) {\n  const {\n    doc,\n    options\n  } = args;\n  _.defaults(options, {\n    clone: true\n  });\n  const Class = doc.constructor;\n\n  _.each(Class.getObjectFields(), (field) => {\n    let value = doc[field.name];\n    // If field value is empty then go to the next one.\n    if (_.isNil(value)) {\n      return;\n    }\n    let NestedClass = field.type.class;\n    if (!(value instanceof NestedClass)) {\n      if (!_.isPlainObject(value)) {\n        return;\n      }\n      doc[field.name] = createDocument(NestedClass, value, options);\n    }\n  });\n\n  _.each(Class.getListFields(), (field) => {\n    let value = doc[field.name];\n    // If field value is empty then go to the next one.\n    if (!_.isArray(value) || !field.isClass) {\n      return;\n    }\n    let NestedClass = field.type.class;\n    _.each(value, (element, index) => {\n      if (!(element instanceof NestedClass)) {\n        if (!_.isPlainObject(element)) {\n          return;\n        }\n        value[index] = createDocument(NestedClass, element, options);\n      }\n    });\n  });\n};\n\nexport default castNested;"]},"hash":"42cf5ffcfbb438c37b76706ff606489248ffe04d"}
