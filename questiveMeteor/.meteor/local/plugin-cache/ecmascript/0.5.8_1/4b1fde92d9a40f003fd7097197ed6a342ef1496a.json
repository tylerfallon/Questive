{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"../utils/set_many.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"setMany"}]},{"source":"../utils/set_one.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"setOne"}]},{"source":"../utils/cast_nested.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"castNested"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/lib/modules/fields/class_prototype_methods/set.js","filenameRelative":"/packages/jagi:astronomy/lib/modules/fields/class_prototype_methods/set.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/lib/modules/fields/class_prototype_methods/set.js.map","sourceFileName":"/packages/jagi:astronomy/lib/modules/fields/class_prototype_methods/set.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"set"},"ignored":false,"code":"var _;module.import('lodash',{\"default\":function(v){_=v}});var setMany;module.import('../utils/set_many.js',{\"default\":function(v){setMany=v}});var setOne;module.import('../utils/set_one.js',{\"default\":function(v){setOne=v}});var castNested;module.import('../utils/cast_nested.js',{\"default\":function(v){castNested=v}});\n\n\n\n\nfunction set() {\n  var doc = this;\n  var args = arguments;\n  var options = {\n    clone: true\n  };\n\n  // Setting single field.\n  if (_.isString(args[0]) && args.length >= 2) {\n    // The last argument is an options object.\n    if (_.isObject(args[2])) {\n      _.extend(options, args[2]);\n    }\n    setOne(doc, args[0], args[1], options);\n  } else if (_.isObject(args[0]) && args.length >= 1) {\n    // The last argument is an options object.\n    if (_.isObject(args[1])) {\n      _.extend(options, args[1]);\n    }\n    setMany(doc, args[0], options);\n  }\n\n  // Cast nested documents.\n  castNested({\n    doc: doc,\n    options: {\n      clone: options.clone\n    }\n  });\n};\n\nmodule.export(\"default\",exports.default=(set));","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/lib/modules/fields/class_prototype_methods/set.js"],"names":[],"mappings":"AAAA,OAAO,CAAP,MAAc,QAAd;AACA,OAAO,OAAP,MAAoB,sBAApB;AACA,OAAO,MAAP,MAAmB,qBAAnB;AACA,OAAO,UAAP,MAAuB,yBAAvB;;AAEA,SAAS,GAAT,GAAe;AACb,MAAM,MAAM,IAAZ;AACA,MAAM,OAAO,SAAb;AACA,MAAI,UAAU;AACZ,WAAO;AADK,GAAd;;;AAKA,MAAI,EAAE,QAAF,CAAW,KAAK,CAAL,CAAX,KAAuB,KAAK,MAAL,IAAe,CAA1C,EAA6C;;AAE3C,QAAI,EAAE,QAAF,CAAW,KAAK,CAAL,CAAX,CAAJ,EAAyB;AACvB,QAAE,MAAF,CAAS,OAAT,EAAkB,KAAK,CAAL,CAAlB;AACD;AACD,WAAO,GAAP,EAAY,KAAK,CAAL,CAAZ,EAAqB,KAAK,CAAL,CAArB,EAA8B,OAA9B;AACD,GAND,MAOK,IAAI,EAAE,QAAF,CAAW,KAAK,CAAL,CAAX,KAAuB,KAAK,MAAL,IAAe,CAA1C,EAA6C;;AAEhD,QAAI,EAAE,QAAF,CAAW,KAAK,CAAL,CAAX,CAAJ,EAAyB;AACvB,QAAE,MAAF,CAAS,OAAT,EAAkB,KAAK,CAAL,CAAlB;AACD;AACD,YAAQ,GAAR,EAAa,KAAK,CAAL,CAAb,EAAsB,OAAtB;AACD;;;AAGD,aAAW;AACT,YADS;AAET,aAAS;AACP,aAAO,QAAQ;AADR;AAFA,GAAX;AAMD;;AAED,eAAe,GAAf","file":"/packages/jagi:astronomy/lib/modules/fields/class_prototype_methods/set.js.map","sourcesContent":["import _ from 'lodash';\nimport setMany from '../utils/set_many.js';\nimport setOne from '../utils/set_one.js';\nimport castNested from '../utils/cast_nested.js';\n\nfunction set() {\n  const doc = this;\n  const args = arguments;\n  let options = {\n    clone: true\n  };\n\n  // Setting single field.\n  if (_.isString(args[0]) && args.length >= 2) {\n    // The last argument is an options object.\n    if (_.isObject(args[2])) {\n      _.extend(options, args[2]);\n    }\n    setOne(doc, args[0], args[1], options);\n  }\n  else if (_.isObject(args[0]) && args.length >= 1) {\n    // The last argument is an options object.\n    if (_.isObject(args[1])) {\n      _.extend(options, args[1]);\n    }\n    setMany(doc, args[0], options);\n  }\n\n  // Cast nested documents.\n  castNested({\n    doc,\n    options: {\n      clone: options.clone\n    }\n  });\n};\n\nexport default set;"]},"hash":"4b1fde92d9a40f003fd7097197ed6a342ef1496a"}
