{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-dom","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOM"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/react-meteor-data","imported":["createContainer"],"specifiers":[{"kind":"named","imported":"createContainer","local":"createContainer"}]},{"source":"../../api/tasks.js","imported":["Tasks"],"specifiers":[{"kind":"named","imported":"Tasks","local":"Tasks"}]},{"source":"../../api/scavenger_hunts.js","imported":["Scavenger_Hunts"],"specifiers":[{"kind":"named","imported":"Scavenger_Hunts","local":"Scavenger_Hunts"}]},{"source":"./Task.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Task"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/ui/Children/create_hunt.jsx","filenameRelative":"/imports/ui/Children/create_hunt.jsx","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/ui/Children/create_hunt.jsx.map","sourceFileName":"/imports/ui/Children/create_hunt.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"create_hunt"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var React,Component,PropTypes;module.import('react',{\"default\":function(v){React=v},\"Component\":function(v){Component=v},\"PropTypes\":function(v){PropTypes=v}});var ReactDOM;module.import('react-dom',{\"default\":function(v){ReactDOM=v}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var createContainer;module.import('meteor/react-meteor-data',{\"createContainer\":function(v){createContainer=v}});var Tasks;module.import('../../api/tasks.js',{\"Tasks\":function(v){Tasks=v}});var Scavenger_Hunts;module.import('../../api/scavenger_hunts.js',{\"Scavenger_Hunts\":function(v){Scavenger_Hunts=v}});var Task;module.import('./Task.jsx',{\"default\":function(v){Task=v}});\n\n\n\n\n//Get meteor from all the correct informaiton from user\n\n\n// inport the database information fro tasks api\n\n\n// import tasks ux.  just like react components\n\n// get the Blaze account informaiton\n\n// App component - represents the whole app\n\nvar createBoard = function (_Component) {\n  _inherits(createBoard, _Component);\n\n  function createBoard(props) {\n    _classCallCheck(this, createBoard);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      hideForm: false,\n      title: \"Franks Title\",\n      title_id: \"\"\n\n    };\n    return _this;\n  }\n\n  createBoard.prototype.handleTitleSubmit = function handleTitleSubmit(event) {\n    event.preventDefault();\n    // let title = ReactDOM.findDOMNode(this.refs.title).trim();\n    // console.log(title);\n\n    var title_obj = {\n      title: this._title.value,\n      user: Meteor.user()\n    };\n    // console.log(title_obj);\n    var temp_id = \"temp\";\n    Meteor.call('scavenger_hunts.insert', title_obj);\n    // calling our db to find the most recent value entered\n    var object = Meteor.call(\"scavenger_hunts.findOne\", function (error, data) {\n      console.log(\"id Check\");\n      console.log(data[0]._id);\n      temp_id = data[0]._id;\n    });\n    this.setState({\n      title: this._title.value,\n      title_id: temp_idds\n    });\n\n    this._title.value = \"\";\n  };\n\n  createBoard.prototype.handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n\n    // Find the text field via the React ref\n    var object_task = {\n      user: Meteor.user(),\n      title_id: this.state.title_id,\n      text: ReactDOM.findDOMNode(this.refs.textInput).value.trim(),\n      location: ReactDOM.findDOMNode(this.refs.location_text).value.trim()\n    };\n    console.log(object_task);\n\n    Meteor.call('tasks.insert', object_task);\n\n    // Clear form\n    ReactDOM.findDOMNode(this.refs.textInput).value = '';\n    ReactDOM.findDOMNode(this.refs.location_text).value = '';\n  };\n\n  createBoard.prototype.toggleHideCompleted = function toggleHideCompleted() {\n    this.setState({\n      hideCompleted: !this.state.hideCompleted\n    });\n  };\n\n  createBoard.prototype.renderTasks = function renderTasks() {\n    var _this2 = this;\n\n    var filteredTasks = this.props.tasks;\n    if (this.state.hideCompleted) {\n      filteredTasks = filteredTasks.filter(function (task) {\n        return !task.checked;\n      });\n    }\n    return filteredTasks.map(function (task) {\n      var currentUserId = _this2.props.currentUser && _this2.props.currentUser._id;\n      var showPrivateButton = task.owner === currentUserId;\n\n      return React.createElement(Task, {\n        key: task._id,\n        task: task,\n        showPrivateButton: showPrivateButton\n      });\n    });\n  };\n\n  createBoard.prototype.renderTitle = function renderTitle() {\n    var _this3 = this;\n\n    if (this.props.currentUser) {\n      return React.createElement(\n        'form',\n        { className: 'new-title', onSubmit: this.handleTitleSubmit.bind(this) },\n        React.createElement('input', {\n          type: 'text',\n          ref: function ref(title) {\n            _this3._title = title;\n          },\n          placeholder: this.state.title,\n          checked: this.state.hideCompleted\n        }),\n        React.createElement('input', {\n          type: 'submit',\n          value: 'submit'\n        })\n      );\n    } else {\n      return null;\n    }\n  };\n\n  createBoard.prototype.renderInputBox = function renderInputBox() {\n    if (this.props.currentUser) {\n      return React.createElement(\n        'form',\n        { className: 'new-task', onSubmit: this.handleSubmit.bind(this) },\n        React.createElement('input', {\n          type: 'text',\n          ref: 'textInput',\n          placeholder: 'Type to add new tasks'\n        }),\n        React.createElement('input', {\n          type: 'text',\n          ref: 'location_text',\n          placeholder: 'Enter a location'\n        }),\n        React.createElement('input', {\n          type: 'submit',\n          value: 'submit'\n        })\n      );\n    } else {\n      return null;\n    }\n  };\n\n  createBoard.prototype.render = function render() {\n    return React.createElement(\n      'div',\n      { className: 'container' },\n      React.createElement(\n        'header',\n        null,\n        React.createElement(\n          'h1',\n          null,\n          'Create a New Game'\n        ),\n        this.renderTitle(),\n        this.renderInputBox()\n      ),\n      React.createElement(\n        'ul',\n        null,\n        this.renderTasks()\n      )\n    );\n  };\n\n  return createBoard;\n}(Component);\n\nconsole.log(Tasks.find().fetch());\ncreateBoard.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  scavenger_hunts: PropTypes.array.isRequired,\n  incompleteCount: PropTypes.number.isRequired,\n  currentUser: PropTypes.object\n};\n\nmodule.export(\"default\",exports.default=(createContainer(function () {\n  //Subscribe to tasks\n  Meteor.subscribe('tasks');\n  Meteor.subscribe('scavenger_hunts');\n\n  return {\n    scavenger_hunts: Scavenger_Hunts.find({}).fetch(),\n    tasks: Tasks.find({}, { sort: { createdAt: -1 } }).fetch(),\n    incompleteCount: Tasks.find({ checked: { $ne: true } }).count(),\n    currentUser: Meteor.user()\n  };\n}, createBoard)));","ast":null,"map":{"version":3,"sources":["/imports/ui/Children/create_hunt.jsx"],"names":[],"mappings":"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","file":"/imports/ui/Children/create_hunt.jsx.map","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport ReactDOM from 'react-dom';\n//Get meteor from all the correct informaiton from user \nimport { Meteor } from 'meteor/meteor';\nimport { createContainer } from 'meteor/react-meteor-data';\n// inport the database information fro tasks api\nimport { Tasks } from '../../api/tasks.js';\nimport { Scavenger_Hunts } from '../../api/scavenger_hunts.js';\n// import tasks ux.  just like react components \nimport Task from './Task.jsx';\n// get the Blaze account informaiton \n\n// App component - represents the whole app\nclass createBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hideForm: false,\n      title: \"Franks Title\",\n      title_id: \"\",\n\n    };\n  }\n  handleTitleSubmit(event){\n    event.preventDefault();\n    // let title = ReactDOM.findDOMNode(this.refs.title).trim();\n    // console.log(title);\n    \n    const title_obj = {\n      title:this._title.value,\n      user:Meteor.user()\n    };\n    // console.log(title_obj);\n    let temp_id =\"temp\"\n    Meteor.call('scavenger_hunts.insert',title_obj)\n    // calling our db to find the most recent value entered \n    let object = Meteor.call(\"scavenger_hunts.findOne\",function(error,data){\n      console.log(\"id Check\");\n      console.log(data[0]._id);\n      temp_id = data[0]._id;\n    });\n    this.setState({\n      title:this._title.value,\n      title_id:temp_idds\n    });\n   \n    \n    this._title.value = \"\";\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    // Find the text field via the React ref\n    const object_task = {\n      user: Meteor.user(),\n      title_id: this.state.title_id,\n      text : ReactDOM.findDOMNode(this.refs.textInput).value.trim(),\n      location: ReactDOM.findDOMNode(this.refs.location_text).value.trim()\n    };\n    console.log(object_task);\n\n   Meteor.call('tasks.insert', object_task);\n\n\n    // Clear form\n    ReactDOM.findDOMNode(this.refs.textInput).value = '';\n    ReactDOM.findDOMNode(this.refs.location_text).value = '';\n  }\n\n  toggleHideCompleted() {\n    this.setState({\n      hideCompleted: !this.state.hideCompleted,\n    });\n  }\n\n  renderTasks() {\n    let filteredTasks = this.props.tasks;\n    if (this.state.hideCompleted) {\n      filteredTasks = filteredTasks.filter(task => !task.checked);\n    }\n      return filteredTasks.map((task) => {\n      const currentUserId = this.props.currentUser && this.props.currentUser._id;\n      const showPrivateButton = task.owner === currentUserId;\n \n      return (\n        <Task\n          key={task._id}\n          task={task}\n          showPrivateButton={showPrivateButton}\n        />\n      );\n    });\n  }\n  renderTitle(){\n    if(this.props.currentUser){\n      return(\n      <form className='new-title' onSubmit ={this.handleTitleSubmit.bind(this)} >\n                <input\n                  type='text'\n                  ref ={(title) => {\n                    this._title = title;\n                  }}\n                  placeholder={this.state.title}\n                  checked={this.state.hideCompleted}\n                />\n                <input\n                  type='submit'\n                  value ='submit'\n                />\n        </form> \n        )\n    }else{\n      return null\n    } \n  }\n  renderInputBox(){\n    if(this.props.currentUser){ \n    return(     \n      <form className=\"new-task\" onSubmit={this.handleSubmit.bind(this)} >\n              <input\n                type=\"text\"\n                ref=\"textInput\"\n                placeholder=\"Type to add new tasks\"\n              />\n               <input\n                  type=\"text\"\n                  ref=\"location_text\"\n                  placeholder=\"Enter a location\"\n                />  \n                <input \n                  type=\"submit\"\n                  value = \"submit\"\n                  />          \n      </form>\n      )}else {\n      return null\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header>\n          <h1>Create a New Game</h1>\n{/*\n          <label className=\"hide-completed\">\n            <input\n              type=\"checkbox\"\n              readOnly\n              checked={this.state.hideCompleted}\n              onClick={this.toggleHideCompleted.bind(this)}\n            />\n            Hide Completed Tasks\n          </label>\n          */}\n\n          {this.renderTitle()}\n        {/* We can conditionaly display this but right now I dont know how */}\n          {this.renderInputBox()} \n            \n          </header>\n\n        <ul>\n          {this.renderTasks()}\n         \n        </ul>\n      </div>\n    );\n  }\n}\n\nconsole.log(Tasks.find().fetch());\ncreateBoard.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  scavenger_hunts: PropTypes.array.isRequired,\n  incompleteCount: PropTypes.number.isRequired,\n  currentUser: PropTypes.object,\n};\n\nexport default createContainer(() => {\n  //Subscribe to tasks \n  Meteor.subscribe('tasks');\n  Meteor.subscribe('scavenger_hunts');\n\n  return {\n    scavenger_hunts:Scavenger_Hunts.find({}).fetch(),\n    tasks: Tasks.find({}, { sort: { createdAt: -1 } }).fetch(),\n    incompleteCount: Tasks.find({ checked: { $ne: true } }).count(),\n    currentUser: Meteor.user(),\n  };\n}, createBoard);"]},"hash":"12bed3ace24bee3dc27d5866330a58d8acd3119f"}
