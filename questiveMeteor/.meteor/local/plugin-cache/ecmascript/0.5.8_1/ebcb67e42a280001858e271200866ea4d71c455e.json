{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/test/modules/fields/default.js","filenameRelative":"/packages/jagi:astronomy/test/modules/fields/default.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/test/modules/fields/default.js.map","sourceFileName":"/packages/jagi:astronomy/test/modules/fields/default.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"default"},"ignored":false,"code":"Tinytest.add('Modules - Fields - Default', function (test) {\n  reset();\n\n  var DefaultNested = Astro.Class.create({\n    name: 'DefaultNested',\n    fields: {\n      string: {\n        type: String,\n        'default': 'abc'\n      },\n      number: {\n        type: Number,\n        'default': 123\n      },\n      boolean: {\n        type: Boolean,\n        'default': true\n      },\n      date: {\n        type: Date,\n        'default': function () {\n          function _default() {\n            return new Date(2000, 0, 1);\n          }\n\n          return _default;\n        }()\n      }\n    }\n  });\n\n  // Define simple class to work with.\n  var Default = Astro.Class.create({\n    name: 'Default',\n    fields: {\n      one: {\n        type: DefaultNested,\n        'default': function () {\n          function _default() {\n            return new DefaultNested();\n          }\n\n          return _default;\n        }()\n      },\n      many: {\n        type: [DefaultNested],\n        'default': function () {\n          function _default() {\n            return [new DefaultNested()];\n          }\n\n          return _default;\n        }()\n      },\n      string: {\n        type: String,\n        'default': 'abc'\n      },\n      number: {\n        type: Number,\n        'default': 123\n      },\n      boolean: {\n        type: Boolean,\n        'default': true\n      },\n      date: {\n        type: Date,\n        'default': function () {\n          function _default() {\n            return new Date(2000, 0, 1);\n          }\n\n          return _default;\n        }()\n      }\n    }\n  });\n\n  var doc = new Default();\n\n  test.equal(doc.string, 'abc', 'The default value of the \"string\" field is not correct');\n  test.equal(doc.number, 123, 'The default value of the \"number\" field is not correct');\n  test.equal(doc.boolean, true, 'The default value of the \"boolean\" field is not correct');\n  test.equal(doc.date, new Date(2000, 0, 1), 'The default value of the \"date\" field is not correct');\n  test.equal(doc.one, new DefaultNested(), 'The default value of the \"one\" field is not correct');\n  test.equal(doc.many, [new DefaultNested()], 'The default value of the \"many\" field is not correct');\n});","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/test/modules/fields/default.js"],"names":[],"mappings":"AAAA,SAAS,GAAT,CAAa,4BAAb,EAA2C,UAAS,IAAT,EAAe;AACxD;;AAEA,MAAI,gBAAgB,MAAM,KAAN,CAAY,MAAZ,CAAmB;AACrC,UAAM,eAD+B;AAErC,YAAQ;AACN,cAAQ;AACN,cAAM,MADA;AAEN,mBAAS;AAFH,OADF;AAKN,cAAQ;AACN,cAAM,MADA;AAEN,mBAAS;AAFH,OALF;AASN,eAAS;AACP,cAAM,OADC;AAEP,mBAAS;AAFF,OATH;AAaN,YAAM;AACJ,cAAM,IADF;AAEJ;AAAS,8BAAW;AAClB,mBAAO,IAAI,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAAP;AACD;;AAFD;AAAA;AAFI;AAbA;AAF6B,GAAnB,CAApB;;;AAyBA,MAAI,UAAU,MAAM,KAAN,CAAY,MAAZ,CAAmB;AAC/B,UAAM,SADyB;AAE/B,YAAQ;AACN,WAAK;AACH,cAAM,aADH;AAEH;AAAS,8BAAW;AAClB,mBAAO,IAAI,aAAJ,EAAP;AACD;;AAFD;AAAA;AAFG,OADC;AAON,YAAM;AACJ,cAAM,CAAC,aAAD,CADF;AAEJ;AAAS,8BAAW;AAClB,mBAAO,CAAC,IAAI,aAAJ,EAAD,CAAP;AACD;;AAFD;AAAA;AAFI,OAPA;AAaN,cAAQ;AACN,cAAM,MADA;AAEN,mBAAS;AAFH,OAbF;AAiBN,cAAQ;AACN,cAAM,MADA;AAEN,mBAAS;AAFH,OAjBF;AAqBN,eAAS;AACP,cAAM,OADC;AAEP,mBAAS;AAFF,OArBH;AAyBN,YAAM;AACJ,cAAM,IADF;AAEJ;AAAS,8BAAW;AAClB,mBAAO,IAAI,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAAP;AACD;;AAFD;AAAA;AAFI;AAzBA;AAFuB,GAAnB,CAAd;;AAoCA,MAAI,MAAM,IAAI,OAAJ,EAAV;;AAEA,OAAK,KAAL,CAAW,IAAI,MAAf,EAAuB,KAAvB,EACE,wDADF;AAGA,OAAK,KAAL,CAAW,IAAI,MAAf,EAAuB,GAAvB,EACE,wDADF;AAGA,OAAK,KAAL,CAAW,IAAI,OAAf,EAAwB,IAAxB,EACE,yDADF;AAGA,OAAK,KAAL,CAAW,IAAI,IAAf,EAAqB,IAAI,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAArB,EACE,sDADF;AAGA,OAAK,KAAL,CAAW,IAAI,GAAf,EAAoB,IAAI,aAAJ,EAApB,EACE,qDADF;AAGA,OAAK,KAAL,CAAW,IAAI,IAAf,EAAqB,CAAC,IAAI,aAAJ,EAAD,CAArB,EACE,sDADF;AAGD,CApFD","file":"/packages/jagi:astronomy/test/modules/fields/default.js.map","sourcesContent":["Tinytest.add('Modules - Fields - Default', function(test) {\n  reset();\n\n  let DefaultNested = Astro.Class.create({\n    name: 'DefaultNested',\n    fields: {\n      string: {\n        type: String,\n        default: 'abc'\n      },\n      number: {\n        type: Number,\n        default: 123\n      },\n      boolean: {\n        type: Boolean,\n        default: true\n      },\n      date: {\n        type: Date,\n        default: function() {\n          return new Date(2000, 0, 1);\n        }\n      }\n    }\n  });\n\n  // Define simple class to work with.\n  let Default = Astro.Class.create({\n    name: 'Default',\n    fields: {\n      one: {\n        type: DefaultNested,\n        default: function() {\n          return new DefaultNested();\n        }\n      },\n      many: {\n        type: [DefaultNested],\n        default: function() {\n          return [new DefaultNested()];\n        }\n      },\n      string: {\n        type: String,\n        default: 'abc'\n      },\n      number: {\n        type: Number,\n        default: 123\n      },\n      boolean: {\n        type: Boolean,\n        default: true\n      },\n      date: {\n        type: Date,\n        default: function() {\n          return new Date(2000, 0, 1);\n        }\n      }\n    }\n  });\n\n  let doc = new Default();\n\n  test.equal(doc.string, 'abc',\n    'The default value of the \"string\" field is not correct'\n  );\n  test.equal(doc.number, 123,\n    'The default value of the \"number\" field is not correct'\n  );\n  test.equal(doc.boolean, true,\n    'The default value of the \"boolean\" field is not correct'\n  );\n  test.equal(doc.date, new Date(2000, 0, 1),\n    'The default value of the \"date\" field is not correct'\n  );\n  test.equal(doc.one, new DefaultNested(),\n    'The default value of the \"one\" field is not correct'\n  );\n  test.equal(doc.many, [new DefaultNested()],\n    'The default value of the \"many\" field is not correct'\n  );\n});\n"]},"hash":"ebcb67e42a280001858e271200866ea4d71c455e"}
