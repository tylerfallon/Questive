{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"meteor/jagi:astronomy","imported":["Class","ValidationError"],"specifiers":[{"kind":"named","imported":"Class","local":"Class"},{"kind":"named","imported":"ValidationError","local":"ValidationError"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/jagi:astronomy/test/modules/fields/optional.js","filenameRelative":"/packages/jagi:astronomy/test/modules/fields/optional.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/jagi:astronomy/test/modules/fields/optional.js.map","sourceFileName":"/packages/jagi:astronomy/test/modules/fields/optional.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"optional"},"ignored":false,"code":"var _;module.import('lodash',{\"default\":function(v){_=v}});var Class,ValidationError;module.import('meteor/jagi:astronomy',{\"Class\":function(v){Class=v},\"ValidationError\":function(v){ValidationError=v}});\n\n\nTinytest.add('Modules - Fields - Optional', function (test) {\n  reset();\n\n  // Define simple class to work with.\n  var Optional = Class.create({\n    name: 'Optional',\n    fields: {\n      optional: {\n        type: String,\n        optional: true\n      },\n      resolveOptional: {\n        type: String,\n        optional: function optional(doc) {\n          return true;\n        }\n      },\n      required: {\n        type: String\n      }\n    }\n  });\n\n  var optional = new Optional();\n  var error = void 0;\n\n  try {\n    optional.validate({\n      fields: ['optional']\n    });\n  } catch (err) {\n    error = err;\n  } finally {\n    test.isUndefined(error, 'The \"optional\" field should be optional');\n  }\n\n  try {\n    optional.validate({\n      fields: ['resolveOptional']\n    });\n  } catch (err) {\n    error = err;\n  } finally {\n    test.isUndefined(error, 'The \"resolveOptional\" field should be resolved as optional');\n  }\n\n  try {\n    optional.validate({\n      fields: ['required']\n    });\n  } catch (err) {\n    error = err;\n  } finally {\n    test.isTrue(ValidationError.is(error), 'The \"required\" field should be required');\n  }\n});","ast":null,"map":{"version":3,"sources":["/packages/jagi:astronomy/test/modules/fields/optional.js"],"names":[],"mappings":"AAAA,OAAO,CAAP,MAAc,QAAd;AACA,SAAS,KAAT,EAAgB,eAAhB,QAAuC,uBAAvC;;AAEA,SAAS,GAAT,CAAa,6BAAb,EAA4C,UAAS,IAAT,EAAe;AACzD;;;AAGA,MAAM,WAAW,MAAM,MAAN,CAAa;AAC5B,UAAM,UADsB;AAE5B,YAAQ;AACN,gBAAU;AACR,cAAM,MADE;AAER,kBAAU;AAFF,OADJ;AAKN,uBAAiB;AACf,cAAM,MADS;AAEf,gBAFe,oBAEN,GAFM,EAED;AACZ,iBAAO,IAAP;AACD;AAJc,OALX;AAWN,gBAAU;AACR,cAAM;AADE;AAXJ;AAFoB,GAAb,CAAjB;;AAmBA,MAAM,WAAW,IAAI,QAAJ,EAAjB;AACA,MAAI,cAAJ;;AAEA,MAAI;AACF,aAAS,QAAT,CAAkB;AAChB,cAAQ,CAAC,UAAD;AADQ,KAAlB;AAGD,GAJD,CAKA,OAAO,GAAP,EAAY;AACV,YAAQ,GAAR;AACD,GAPD,SAQQ;AACN,SAAK,WAAL,CACE,KADF,EAEE,yCAFF;AAID;;AAED,MAAI;AACF,aAAS,QAAT,CAAkB;AAChB,cAAQ,CAAC,iBAAD;AADQ,KAAlB;AAGD,GAJD,CAKA,OAAO,GAAP,EAAY;AACV,YAAQ,GAAR;AACD,GAPD,SAQQ;AACN,SAAK,WAAL,CACE,KADF,EAEE,4DAFF;AAID;;AAED,MAAI;AACF,aAAS,QAAT,CAAkB;AAChB,cAAQ,CAAC,UAAD;AADQ,KAAlB;AAGD,GAJD,CAKA,OAAO,GAAP,EAAY;AACV,YAAQ,GAAR;AACD,GAPD,SAQQ;AACN,SAAK,MAAL,CACE,gBAAgB,EAAhB,CAAmB,KAAnB,CADF,EAEE,yCAFF;AAID;AACF,CAtED","file":"/packages/jagi:astronomy/test/modules/fields/optional.js.map","sourcesContent":["import _ from 'lodash';\nimport { Class, ValidationError } from 'meteor/jagi:astronomy';\n\nTinytest.add('Modules - Fields - Optional', function(test) {\n  reset();\n\n  // Define simple class to work with.\n  const Optional = Class.create({\n    name: 'Optional',\n    fields: {\n      optional: {\n        type: String,\n        optional: true,\n      },\n      resolveOptional: {\n        type: String,\n        optional(doc) {\n          return true;\n        },\n      },\n      required: {\n        type: String,\n      },\n    }\n  });\n\n  const optional = new Optional();\n  let error;\n\n  try {\n    optional.validate({\n      fields: ['optional'],\n    });\n  }\n  catch (err) {\n    error = err;\n  }\n  finally {\n    test.isUndefined(\n      error,\n      'The \"optional\" field should be optional',\n    );\n  }\n\n  try {\n    optional.validate({\n      fields: ['resolveOptional'],\n    });\n  }\n  catch (err) {\n    error = err;\n  }\n  finally {\n    test.isUndefined(\n      error,\n      'The \"resolveOptional\" field should be resolved as optional',\n    );\n  }\n\n  try {\n    optional.validate({\n      fields: ['required'],\n    });\n  }\n  catch (err) {\n    error = err;\n  }\n  finally {\n    test.isTrue(\n      ValidationError.is(error),\n      'The \"required\" field should be required',\n    );\n  }\n});"]},"hash":"c7a27ff2a28895fd6ee7e6e279380df5651827ec"}
