{"version":3,"sources":["meteor://ðŸ’»app/packages/react-meteor-data/react-meteor-data.jsx","meteor://ðŸ’»app/packages/react-meteor-data/ReactMeteorData.jsx","meteor://ðŸ’»app/packages/react-meteor-data/createContainer.jsx"],"names":[],"mappings":"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","file":"/packages/react-meteor-data.js","sourcesContent":["import { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\ncheckNpmVersions({\n  react: '15.x',\n  'react-addons-pure-render-mixin': '15.x',\n}, 'react-meteor-data');\n\nconst createContainer = require('./createContainer.jsx').default;\nconst ReactMeteorData = require('./ReactMeteorData.jsx').default;\n\nexport { createContainer, ReactMeteorData };\n","const ReactMeteorData = {\n  componentWillMount() {\n    this.data = {};\n    this._meteorDataManager = new MeteorDataManager(this);\n    const newData = this._meteorDataManager.calculateData();\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUpdate(nextProps, nextState) {\n    const saveProps = this.props;\n    const saveState = this.state;\n    let newData;\n    try {\n      // Temporarily assign this.state and this.props,\n      // so that they are seen by getMeteorData!\n      // This is a simulation of how the proposed Observe API\n      // for React will work, which calls observe() after\n      // componentWillUpdate and after props and state are\n      // updated, but before render() is called.\n      // See https://github.com/facebook/react/issues/3398.\n      this.props = nextProps;\n      this.state = nextState;\n      newData = this._meteorDataManager.calculateData();\n    } finally {\n      this.props = saveProps;\n      this.state = saveState;\n    }\n\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUnmount() {\n    this._meteorDataManager.dispose();\n  },\n};\n\n// A class to keep the state and utility methods needed to manage\n// the Meteor data for a component.\nclass MeteorDataManager {\n  constructor(component) {\n    this.component = component;\n    this.computation = null;\n    this.oldData = null;\n  }\n\n  dispose() {\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n  }\n\n  calculateData() {\n    const component = this.component;\n\n    if (! component.getMeteorData) {\n      return null;\n    }\n\n    // When rendering on the server, we don't want to use the Tracker.\n    // We only do the first rendering on the server so we can get the data right away\n    if (Meteor.isServer) {\n      return component.getMeteorData();\n    }\n\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n\n    let data;\n    // Use Tracker.nonreactive in case we are inside a Tracker Computation.\n    // This can happen if someone calls `ReactDOM.render` inside a Computation.\n    // In that case, we want to opt out of the normal behavior of nested\n    // Computations, where if the outer one is invalidated or stopped,\n    // it stops the inner one.\n    this.computation = Tracker.nonreactive(() => {\n      return Tracker.autorun((c) => {\n        if (c.firstRun) {\n          const savedSetState = component.setState;\n          try {\n            component.setState = () => {\n              throw new Error(\n\"Can't call `setState` inside `getMeteorData` as this could cause an endless\" +\n\" loop. To respond to Meteor data changing, consider making this component\" +\n\" a \\\"wrapper component\\\" that only fetches data and passes it in as props to\" +\n\" a child component. Then you can use `componentWillReceiveProps` in that\" +\n\" child component.\");\n            };\n\n            data = component.getMeteorData();\n          } finally {\n            component.setState = savedSetState;\n          }\n        } else {\n          // Stop this computation instead of using the re-run.\n          // We use a brand-new autorun for each call to getMeteorData\n          // to capture dependencies on any reactive data sources that\n          // are accessed.  The reason we can't use a single autorun\n          // for the lifetime of the component is that Tracker only\n          // re-runs autoruns at flush time, while we need to be able to\n          // re-call getMeteorData synchronously whenever we want, e.g.\n          // from componentWillUpdate.\n          c.stop();\n          // Calling forceUpdate() triggers componentWillUpdate which\n          // recalculates getMeteorData() and re-renders the component.\n          component.forceUpdate();\n        }\n      });\n    });\n\n    if (Package.mongo && Package.mongo.Mongo) {\n      Object.keys(data).forEach(function (key) {\n        if (data[key] instanceof Package.mongo.Mongo.Cursor) {\n          console.warn(\n  \"Warning: you are returning a Mongo cursor from getMeteorData. This value \" +\n  \"will not be reactive. You probably want to call `.fetch()` on the cursor \" +\n  \"before returning it.\");\n        }\n      });\n    }\n\n    return data;\n  }\n\n  updateData(newData) {\n    const component = this.component;\n    const oldData = this.oldData;\n\n    if (! (newData && (typeof newData) === 'object')) {\n      throw new Error(\"Expected object returned from getMeteorData\");\n    }\n    // update componentData in place based on newData\n    for (let key in newData) {\n      component.data[key] = newData[key];\n    }\n    // if there is oldData (which is every time this method is called\n    // except the first), delete keys in newData that aren't in\n    // oldData.  don't interfere with other keys, in case we are\n    // co-existing with something else that writes to a component's\n    // this.data.\n    if (oldData) {\n      for (let key in oldData) {\n        if (!(key in newData)) {\n          delete component.data[key];\n        }\n      }\n    }\n    this.oldData = newData;\n  }\n}\n\nexport default ReactMeteorData;\n","/**\n * Container helper using react-meteor-data.\n */\n\nimport React from 'react';\nimport PureRenderMixin from 'react-addons-pure-render-mixin';\n\nimport ReactMeteorData from './ReactMeteorData.jsx';\n\nexport default function createContainer(options = {}, Component) {\n  let expandedOptions = options;\n  if (typeof options === 'function') {\n    expandedOptions = {\n      getMeteorData: options,\n    };\n  }\n\n  const {\n    getMeteorData,\n    pure = true,\n  } = expandedOptions;\n\n  const mixins = [ReactMeteorData];\n  if (pure) {\n    mixins.push(PureRenderMixin);\n  }\n\n  /* eslint-disable react/prefer-es6-class */\n  return React.createClass({\n    displayName: 'MeteorDataContainer',\n    mixins,\n    getMeteorData() {\n      return getMeteorData(this.props);\n    },\n    render() {\n      return <Component {...this.props} {...this.data} />;\n    },\n  });\n}\n"]}