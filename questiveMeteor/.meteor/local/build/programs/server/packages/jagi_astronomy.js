(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var ECMAScript = Package.ecmascript.ECMAScript;
var DDP = Package['ddp-client'].DDP;
var DDPServer = Package['ddp-server'].DDPServer;
var MongoInternals = Package.mongo.MongoInternals;
var Mongo = Package.mongo.Mongo;
var check = Package.check.check;
var Match = Package.check.Match;
var LocalCollection = Package.minimongo.LocalCollection;
var Minimongo = Package.minimongo.Minimongo;
var EJSON = Package.ejson.EJSON;
var ValidationError = Package['mdg:validation-error'].ValidationError;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;
var Symbol = Package['ecmascript-runtime'].Symbol;
var Map = Package['ecmascript-runtime'].Map;
var Set = Package['ecmascript-runtime'].Set;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;

/* Package-scope variables */
var Astro;

var require = meteorInstall({"node_modules":{"meteor":{"jagi:astronomy":{"lib":{"main.js":["./core/ejson.js","./modules/core/module.js","./modules/storage/module.js","./modules/behaviors/module.js","./modules/events/module.js","./modules/methods/module.js","./modules/fields/module.js","./modules/indexes/module.js","./modules/validators/module.js","./core/config.js","./core/module.js","./core/class.js","./core/reserved_keywords.js","./modules/fields/enum.js","./modules/fields/type.js","./modules/fields/Field","./modules/fields/ScalarField","./modules/fields/ObjectField","./modules/fields/ListField","./modules/behaviors/behavior.js","./modules/validators/validator.js","./modules/validators/validators.js","meteor/mdg:validation-error","./modules/events/event.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/main.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({Astro:function(){return Astro},Module:function(){return Module},Class:function(){return Class},Enum:function(){return Enum},Type:function(){return Type},Field:function(){return Field},ScalarField:function(){return ScalarField},ObjectField:function(){return ObjectField},ListField:function(){return ListField},Behavior:function(){return Behavior},Validator:function(){return Validator},Validators:function(){return Validators},ValidationError:function(){return ValidationError},Event:function(){return Event},reservedKeywords:function(){return reservedKeywords}});module.import('./core/ejson.js');module.import('./modules/core/module.js');module.import('./modules/storage/module.js');module.import('./modules/behaviors/module.js');module.import('./modules/events/module.js');module.import('./modules/methods/module.js');module.import('./modules/fields/module.js');module.import('./modules/indexes/module.js');module.import('./modules/validators/module.js');var Config;module.import('./core/config.js',{"default":function(v){Config=v}});var Module;module.import('./core/module.js',{"default":function(v){Module=v}});var Class;module.import('./core/class.js',{"default":function(v){Class=v}});var reservedKeywords;module.import('./core/reserved_keywords.js',{"default":function(v){reservedKeywords=v}});var Enum;module.import('./modules/fields/enum.js',{"default":function(v){Enum=v}});var Type;module.import('./modules/fields/type.js',{"default":function(v){Type=v}});var Field;module.import('./modules/fields/Field',{"default":function(v){Field=v}});var ScalarField;module.import('./modules/fields/ScalarField',{"default":function(v){ScalarField=v}});var ObjectField;module.import('./modules/fields/ObjectField',{"default":function(v){ObjectField=v}});var ListField;module.import('./modules/fields/ListField',{"default":function(v){ListField=v}});var Behavior;module.import('./modules/behaviors/behavior.js',{"default":function(v){Behavior=v}});var Validator;module.import('./modules/validators/validator.js',{"default":function(v){Validator=v}});var Validators;module.import('./modules/validators/validators.js',{"default":function(v){Validators=v}});var ValidationError;module.import('meteor/mdg:validation-error',{"ValidationError":function(v){ValidationError=v}});var Event;module.import('./modules/events/event.js',{"default":function(v){Event=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
                                                                                                                       // 9
                                                                                                                       //
                                                                                                                       // 11
                                                                                                                       // 12
                                                                                                                       // 13
                                                                                                                       // 14
                                                                                                                       // 15
                                                                                                                       // 16
                                                                                                                       // 17
                                                                                                                       // 18
                                                                                                                       // 19
                                                                                                                       // 20
                                                                                                                       // 21
                                                                                                                       // 22
                                                                                                                       // 23
                                                                                                                       // 24
                                                                                                                       // 25
                                                                                                                       //
var Astro = {                                                                                                          // 27
  Config: Config,                                                                                                      // 28
  Module: Module,                                                                                                      // 29
  Class: Class,                                                                                                        // 30
  Enum: Enum,                                                                                                          // 31
  Type: Type,                                                                                                          // 32
  Field: Field,                                                                                                        // 33
  ScalarField: ScalarField,                                                                                            // 34
  ObjectField: ObjectField,                                                                                            // 35
  ListField: ListField,                                                                                                // 36
  Behavior: Behavior,                                                                                                  // 37
  Validator: Validator,                                                                                                // 38
  Validators: Validators,                                                                                              // 39
  ValidationError: ValidationError,                                                                                    // 40
  Event: Event,                                                                                                        // 41
  reservedKeywords: reservedKeywords                                                                                   // 42
};                                                                                                                     // 27
                                                                                                                       //
                                                                                                                       // 45
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"core":{"class.js":["babel-runtime/helpers/possibleConstructorReturn","babel-runtime/helpers/inherits","babel-runtime/helpers/classCallCheck","lodash","meteor/ejson","../modules/core/utils/throw_parse_error.js","../modules/core/utils/clone_definition.js","../modules/fields/utils/set_defaults.js","../modules/fields/utils/cast_nested.js","./module.js","../modules/events/event.js","../modules/fields/type.js","../modules/validators/validators.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/core/class.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{"default":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{"default":function(v){_inherits=v}});var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{"default":function(v){_classCallCheck=v}});var _;module.import('lodash',{"default":function(v){_=v}});var EJSON;module.import('meteor/ejson',{"EJSON":function(v){EJSON=v}});var throwParseError;module.import('../modules/core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});var cloneDefinition;module.import('../modules/core/utils/clone_definition.js',{"default":function(v){cloneDefinition=v}});var setDefaults;module.import('../modules/fields/utils/set_defaults.js',{"default":function(v){setDefaults=v}});var castNested;module.import('../modules/fields/utils/cast_nested.js',{"default":function(v){castNested=v}});var Module;module.import('./module.js',{"default":function(v){Module=v}});var Event;module.import('../modules/events/event.js',{"default":function(v){Event=v}});var Type;module.import('../modules/fields/type.js',{"default":function(v){Type=v}});var Validators;module.import('../modules/validators/validators.js',{"default":function(v){Validators=v}});
                                                                                                                       //
                                                                                                                       //
                                                                                                                       // 1
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
                                                                                                                       // 9
                                                                                                                       // 10
                                                                                                                       //
var initClass = function initClass(Class) {                                                                            // 12
  // Create and store the schema "definition" object in the class constructor.                                         //
  // It's a combination of all parent definitions and a definition that                                                //
  // created this class. It's used to create child classes.                                                            //
  Class.definition = {};                                                                                               // 16
  // Create and store the "schema" object in the class constructor. It's an                                            //
  // object that contains all the data related with a given class. The                                                 //
  // "schema" object contains "computed" data of the schema "definition".                                              //
  // Thanks to that, Astronomy does not need to compute data on the fly and                                            //
  // everything works faster.                                                                                          //
  Class.schema = {};                                                                                                   // 22
  // Create empty array for storing child classes.                                                                     //
  Class.children = [];                                                                                                 // 24
  // Init the class schema and schema definition.                                                                      //
  Module.forEach(function (module) {                                                                                   // 26
    module.onInitSchema(Class.schema, Class.getName());                                                                // 27
    module.onInitDefinition(Class.definition, Class.getName());                                                        // 28
  });                                                                                                                  // 29
  // We have to call the "onInitClass" hooks in the separate loop after                                                //
  // initiation of the schema and schema definition, because some                                                      //
  // "onInitClass" hooks can execute the "Class.extend" method which requires                                          //
  // schema and schama definition to be initalized.                                                                    //
  Module.forEach(function (module) {                                                                                   // 34
    module.onInitClass(Class, Class.getName());                                                                        // 35
  });                                                                                                                  // 36
};                                                                                                                     // 37
                                                                                                                       //
// Helper variables for passing information about options to nested documents                                          //
// being initialised during construction.                                                                              //
var callsCount = 0;                                                                                                    // 41
var cloneArgs = null;                                                                                                  // 42
                                                                                                                       //
var Class = function () {                                                                                              //
  function Class(rawDoc) {                                                                                             // 45
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                             // 45
                                                                                                                       //
    _classCallCheck(this, Class);                                                                                      // 45
                                                                                                                       //
    // Set default options.                                                                                            //
    _.defaults(options, {                                                                                              // 47
      defaults: true,                                                                                                  // 48
      clone: true                                                                                                      // 49
    });                                                                                                                // 47
                                                                                                                       //
    if (callsCount === 0 && cloneArgs === null) {                                                                      // 52
      cloneArgs = options.clone;                                                                                       // 53
    }                                                                                                                  // 54
    callsCount++;                                                                                                      // 55
                                                                                                                       //
    var doc = this;                                                                                                    // 57
    var _Class = doc.constructor;                                                                                      // 58
                                                                                                                       //
    if (!_Class.getName()) {                                                                                           // 60
      throw new Error('Can not create instance of the "Astro.Class" class');                                           // 61
    }                                                                                                                  // 64
                                                                                                                       //
    // Trigger the "beforeInit" event handlers.                                                                        //
    doc.dispatchEvent(new Event('beforeInit'));                                                                        // 67
                                                                                                                       //
    // Clone an argument if the "clone" option is set.                                                                 //
    rawDoc = rawDoc || {};                                                                                             // 70
    if (cloneArgs) {                                                                                                   // 71
      rawDoc = EJSON.clone(rawDoc);                                                                                    // 72
    }                                                                                                                  // 73
                                                                                                                       //
    // Set values in a document.                                                                                       //
    var fields = _Class.getFields();                                                                                   // 76
    _.each(fields, function (field) {                                                                                  // 77
      doc[field.name] = rawDoc[field.name];                                                                            // 78
    });                                                                                                                // 79
                                                                                                                       //
    // Set default values if the "defaults" option is set.                                                             //
    if (options.defaults) {                                                                                            // 82
      setDefaults({                                                                                                    // 83
        doc: doc                                                                                                       // 84
      });                                                                                                              // 83
    }                                                                                                                  // 86
    // Cast nested documents.                                                                                          //
    castNested({                                                                                                       // 88
      doc: doc,                                                                                                        // 89
      options: {                                                                                                       // 90
        clone: options.clone                                                                                           // 91
      }                                                                                                                // 90
    });                                                                                                                // 88
                                                                                                                       //
    // Trigger the "afterInit" event handlers.                                                                         //
    doc.dispatchEvent(new Event('afterInit'));                                                                         // 96
                                                                                                                       //
    // Decrease number of nested documents being initialised.                                                          //
    if (callsCount > 0) {                                                                                              // 99
      callsCount--;                                                                                                    // 100
    }                                                                                                                  // 101
    if (callsCount === 0) {                                                                                            // 102
      cloneArgs = null;                                                                                                // 103
    }                                                                                                                  // 104
  }                                                                                                                    // 105
                                                                                                                       //
  // Method needed for EJSONification.                                                                                 //
                                                                                                                       //
                                                                                                                       //
  Class.prototype.typeName = function typeName() {                                                                     //
    return 'Astronomy';                                                                                                // 109
  };                                                                                                                   // 110
                                                                                                                       //
  Class.prototype.toJSONValue = function toJSONValue(args) {                                                           //
    var doc = this;                                                                                                    // 113
    var Class = doc.constructor;                                                                                       // 114
                                                                                                                       //
    var json = {                                                                                                       // 116
      'class': Class.getName()                                                                                         // 117
    };                                                                                                                 // 116
                                                                                                                       //
    // Trigger the "toJSONValue" event handlers.                                                                       //
    doc.dispatchEvent(new Event('toJSONValue', {                                                                       // 121
      json: json                                                                                                       // 122
    }));                                                                                                               // 121
                                                                                                                       //
    return json;                                                                                                       // 125
  };                                                                                                                   // 126
                                                                                                                       //
  Class.getName = function getName() {                                                                                 //
    return this.className;                                                                                             // 129
  };                                                                                                                   // 130
                                                                                                                       //
  Class.getParent = function getParent() {                                                                             //
    if (this.parentClassName) {                                                                                        // 133
      return this.get(this.parentClassName);                                                                           // 134
    }                                                                                                                  // 135
  };                                                                                                                   // 136
                                                                                                                       //
  Class.getChildren = function getChildren() {                                                                         //
    return this.children;                                                                                              // 139
  };                                                                                                                   // 140
                                                                                                                       //
  Class.create = function create(definition) {                                                                         //
    // Get class name.                                                                                                 //
    var className = definition.name;                                                                                   // 144
    // Extend the Astro.Class class.                                                                                   //
    var Class = this.classes[className] = function (_ref) {                                                            // 146
      _inherits(Class, _ref);                                                                                          // 146
                                                                                                                       //
      function Class() {                                                                                               // 146
        _classCallCheck(this, Class);                                                                                  // 146
                                                                                                                       //
        return _possibleConstructorReturn(this, _ref.apply(this, arguments));                                          // 146
      }                                                                                                                // 146
                                                                                                                       //
      return Class;                                                                                                    // 146
    }(this);                                                                                                           // 146
    // Store the class name in the constructor.                                                                        //
    Class.className = className;                                                                                       // 148
    // Initialize class.                                                                                               //
    initClass(Class);                                                                                                  // 150
    // Extend class with a definition.                                                                                 //
    Class.extend(definition);                                                                                          // 152
    // Register a new type.                                                                                            //
    Type.create({                                                                                                      // 154
      name: className,                                                                                                 // 155
      'class': Class,                                                                                                  // 156
      validate: function validate(args) {                                                                              // 157
        // Add current class as a param of validator.                                                                  //
        args.param = Class;                                                                                            // 159
        Validators['class'](args);                                                                                     // 160
      }                                                                                                                // 161
    });                                                                                                                // 154
                                                                                                                       //
    return Class;                                                                                                      // 164
  };                                                                                                                   // 165
                                                                                                                       //
  Class.inherit = function inherit(definition) {                                                                       //
    var Parent = this;                                                                                                 // 168
    var className = definition.name;                                                                                   // 169
                                                                                                                       //
    // Extend the parent class.                                                                                        //
    var Class = this.classes[className] = function (_Parent) {                                                         // 172
      _inherits(Class, _Parent);                                                                                       // 172
                                                                                                                       //
      function Class() {                                                                                               // 172
        _classCallCheck(this, Class);                                                                                  // 172
                                                                                                                       //
        return _possibleConstructorReturn(this, _Parent.apply(this, arguments));                                       // 172
      }                                                                                                                // 172
                                                                                                                       //
      return Class;                                                                                                    // 172
    }(Parent);                                                                                                         // 172
                                                                                                                       //
    // Store the class name in the constructor.                                                                        //
    Class.className = className;                                                                                       // 175
    // Store the parent class name in the constructor.                                                                 //
    Class.parentClassName = Parent.getName();                                                                          // 177
    // Initialize class.                                                                                               //
    initClass(Class);                                                                                                  // 179
    // Store child class in the parent class.                                                                          //
    Parent.children.push(Class);                                                                                       // 181
    // Extend class with the parent class definition.                                                                  //
    Class.extend(Parent.definition);                                                                                   // 183
    // Extend class with the definition.                                                                               //
    Class.extend(definition);                                                                                          // 185
    // Register a new type.                                                                                            //
    Type.create({                                                                                                      // 187
      name: className,                                                                                                 // 188
      'class': Class,                                                                                                  // 189
      validate: function validate(args) {                                                                              // 190
        // Add current class as a param of validator.                                                                  //
        args.param = Class;                                                                                            // 192
        Validators['class'](args);                                                                                     // 193
      }                                                                                                                // 194
    });                                                                                                                // 187
                                                                                                                       //
    return Class;                                                                                                      // 197
  };                                                                                                                   // 198
                                                                                                                       //
  Class.extend = function extend(extendDefinition, onlyModules) {                                                      //
    var _this3 = this;                                                                                                 // 200
                                                                                                                       //
    if (onlyModules !== undefined && !Match.test(onlyModules, Match.OneOf(String, [String]))) {                        // 201
      throwParseError([{                                                                                               // 205
        'class': this.getName()                                                                                        // 206
      }, {                                                                                                             // 205
        'method': 'extend'                                                                                             // 208
      }, 'The second argument has to be a string or an array of strings']);                                            // 207
    }                                                                                                                  // 212
                                                                                                                       //
    if (Match.test(onlyModules, String)) {                                                                             // 214
      onlyModules = [onlyModules];                                                                                     // 215
    }                                                                                                                  // 216
                                                                                                                       //
    // Clone definition to not modify the original one.                                                                //
    extendDefinition = cloneDefinition(extendDefinition);                                                              // 219
                                                                                                                       //
    Module.forEach(function (module) {                                                                                 // 221
      // If the second argument was passed, then we only run module hooks for                                          //
      // modules that were listed in the second argument.                                                              //
      if (onlyModules !== undefined && !_.includes(onlyModules, module.name)) {                                        // 224
        return;                                                                                                        // 225
      }                                                                                                                // 226
      // Initialize parsed definition.                                                                                 //
      var parsedDefinition = {};                                                                                       // 228
      module.onInitDefinition(parsedDefinition, Class.getName());                                                      // 229
      // Parse the extending definition and put parsed properties in the parsed                                        //
      // definition.                                                                                                   //
      module.onParseDefinition(parsedDefinition, extendDefinition, _this3.getName());                                  // 232
      // Apply parsed definition.                                                                                      //
      module.onApplyDefinition(_this3, parsedDefinition, _this3.getName());                                            // 234
      // Merge parsed definition with a class definition.                                                              //
      module.onMergeDefinitions(_this3.definition, parsedDefinition, _this3.getName());                                // 236
    });                                                                                                                // 237
  };                                                                                                                   // 238
                                                                                                                       //
  Class.get = function get(className) {                                                                                //
    return this.classes[className];                                                                                    // 241
  };                                                                                                                   // 242
                                                                                                                       //
  Class.has = function has(className) {                                                                                //
    return _.has(this.classes, className);                                                                             // 245
  };                                                                                                                   // 246
                                                                                                                       //
  Class.includes = function includes(Class) {                                                                          //
    return _.includes(this.classes, Class);                                                                            // 249
  };                                                                                                                   // 250
                                                                                                                       //
  Class.isParentOf = function isParentOf(Class) {                                                                      //
    if (!Class || !Class.prototype) {                                                                                  // 253
      return false;                                                                                                    // 254
    }                                                                                                                  // 255
    return this.prototype.isPrototypeOf(Class.prototype);                                                              // 256
  };                                                                                                                   // 257
                                                                                                                       //
  Class.isChildOf = function isChildOf(Class) {                                                                        //
    if (!Class || !Class.prototype) {                                                                                  // 260
      return false;                                                                                                    // 261
    }                                                                                                                  // 262
    return Class.prototype.isPrototypeOf(this.prototype);                                                              // 263
  };                                                                                                                   // 264
                                                                                                                       //
  return Class;                                                                                                        //
}();                                                                                                                   //
                                                                                                                       //
;                                                                                                                      // 265
                                                                                                                       //
Class.classes = {};                                                                                                    // 267
                                                                                                                       //
module.export("default",exports.default=(Class));                                                                      // 269
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"config.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/core/config.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Config = {                                                                                                         // 1
	verbose: true                                                                                                         // 2
};                                                                                                                     // 1
                                                                                                                       //
module.export("default",exports.default=(Config));                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ejson.js":["./class.js","../modules/events/event.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/core/ejson.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var AstroClass;module.import('./class.js',{"default":function(v){AstroClass=v}});var Event;module.import('../modules/events/event.js',{"default":function(v){Event=v}});
                                                                                                                       // 2
                                                                                                                       //
EJSON.addType('Astronomy', function (json) {                                                                           // 4
  var Class = AstroClass.get(json['class']);                                                                           // 5
  var doc = new Class();                                                                                               // 6
                                                                                                                       //
  // Trigger the "fromJSONValue" event handlers.                                                                       //
  doc.dispatchEvent(new Event('fromJSONValue', {                                                                       // 9
    json: json                                                                                                         // 10
  }));                                                                                                                 // 9
                                                                                                                       //
  return doc;                                                                                                          // 13
});                                                                                                                    // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"module.js":["babel-runtime/helpers/classCallCheck","lodash","../modules/core/utils/throw_parse_error.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/core/module.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{"default":function(v){_classCallCheck=v}});var _;module.import('lodash',{"default":function(v){_=v}});var throwParseError;module.import('../modules/core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});
                                                                                                                       // 1
                                                                                                                       // 2
                                                                                                                       //
var Module = function () {                                                                                             //
	function Module(definition) {                                                                                         // 5
		var _this = this;                                                                                                    // 5
                                                                                                                       //
		_classCallCheck(this, Module);                                                                                       // 5
                                                                                                                       //
		if (!Match.test(definition, Object)) {                                                                               // 6
			throwParseError(['Module definition has to be an object']);                                                         // 7
		}                                                                                                                    // 10
                                                                                                                       //
		// Set module name.                                                                                                  //
		if (!Match.test(definition.name, String)) {                                                                          // 13
			throwParseError(['Module name has to be a string']);                                                                // 14
		}                                                                                                                    // 17
		var moduleName = this.name = definition.name;                                                                        // 18
                                                                                                                       //
		// Set module hooks.                                                                                                 //
		_.each(['onInitSchema', 'onInitDefinition', 'onInitClass', 'onParseDefinition', 'onApplyDefinition', 'onMergeDefinitions'], function (hookName) {
			if (definition[hookName] === undefined) {                                                                           // 25
				return;                                                                                                            // 26
			}                                                                                                                   // 27
			if (!Match.test(definition[hookName], Function)) {                                                                  // 28
				throwParseError([{                                                                                                 // 29
					'module': moduleName                                                                                              // 30
				}, {                                                                                                               // 29
					'property': hookName                                                                                              // 32
				}, 'The "' + hookName + '" hook has to be a function']);                                                           // 31
			}                                                                                                                   // 36
			_this[hookName] = definition[hookName];                                                                             // 37
		});                                                                                                                  // 38
                                                                                                                       //
		// Set module utils.                                                                                                 //
		if (definition.utils) {                                                                                              // 41
			if (!Match.test(definition.utils, Object)) {                                                                        // 42
				throwParseError([{                                                                                                 // 43
					'module': moduleName                                                                                              // 44
				}, {                                                                                                               // 43
					'property': 'utils'                                                                                               // 46
				}, 'Utilities definition has to be an object']);                                                                   // 45
			}                                                                                                                   // 50
			this.utils = {};                                                                                                    // 51
			_.each(definition.utils, function (method, methodName) {                                                            // 52
				if (!Match.test(method, Function)) {                                                                               // 53
					throwParseError([{                                                                                                // 54
						'module': moduleName                                                                                             // 55
					}, {                                                                                                              // 54
						'property': 'utils'                                                                                              // 57
					}, {                                                                                                              // 56
						'method': methodName                                                                                             // 59
					}, 'Utility has to be a function']);                                                                              // 58
				}                                                                                                                  // 63
				_this.utils[methodName] = method;                                                                                  // 64
			});                                                                                                                 // 65
		}                                                                                                                    // 66
	}                                                                                                                     // 67
                                                                                                                       //
	Module.prototype.onInitSchema = function onInitSchema(schema, className) {};                                          //
                                                                                                                       //
	Module.prototype.onInitDefinition = function onInitDefinition(definition, className) {};                              //
                                                                                                                       //
	Module.prototype.onInitClass = function onInitClass(Class, className) {};                                             //
                                                                                                                       //
	Module.prototype.onParseDefinition = function onParseDefinition(parsedDefinition, definition, className) {};          //
                                                                                                                       //
	Module.prototype.onApplyDefinition = function onApplyDefinition(Class, definition, className) {};                     //
                                                                                                                       //
	Module.prototype.onMergeDefinitions = function onMergeDefinitions(targetDefinition, sourceDefinition, className) {};  //
                                                                                                                       //
	Module.create = function create(definition) {                                                                         //
		var module = new this(definition);                                                                                   // 79
		this.modules[module.name] = module;                                                                                  // 80
		this.modulesOrder.push(module.name);                                                                                 // 81
		return module;                                                                                                       // 82
	};                                                                                                                    // 83
                                                                                                                       //
	Module.get = function get(moduleName) {                                                                               //
		return this.modules[moduleName];                                                                                     // 86
	};                                                                                                                    // 87
                                                                                                                       //
	Module.forEach = function forEach(iteratee) {                                                                         //
		var _this2 = this;                                                                                                   // 89
                                                                                                                       //
		if (!Match.test(iteratee, Function)) {                                                                               // 90
			throwParseError(['The first argument of the "Module.forEach" method has to be a function']);                        // 91
		}                                                                                                                    // 94
		_.each(this.modulesOrder, function (moduleName) {                                                                    // 95
			iteratee(_this2.modules[moduleName]);                                                                               // 96
		});                                                                                                                  // 97
	};                                                                                                                    // 98
                                                                                                                       //
	return Module;                                                                                                        //
}();                                                                                                                   //
                                                                                                                       //
;                                                                                                                      // 99
                                                                                                                       //
Module.modules = {};                                                                                                   // 101
Module.modulesOrder = [];                                                                                              // 102
                                                                                                                       //
module.export("default",exports.default=(Module));                                                                     // 104
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"reserved_keywords.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/core/reserved_keywords.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var reservedNames = ['_isNew', 'copy', 'dispatchEvent', 'get', 'getModified', 'getModifiedValues', 'getModifier', 'isModified', 'raw', 'reload', 'remove', 'save', 'set', 'toJSONValue', 'typeName', 'validate', 'validateAll'];
                                                                                                                       //
module.export("default",exports.default=(reservedNames));                                                              // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modules":{"behaviors":{"behavior.js":["babel-runtime/helpers/possibleConstructorReturn","babel-runtime/helpers/inherits","babel-runtime/helpers/classCallCheck","lodash","../core/utils/throw_parse_error.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/behaviors/behavior.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{"default":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{"default":function(v){_inherits=v}});var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{"default":function(v){_classCallCheck=v}});var _;module.import('lodash',{"default":function(v){_=v}});var throwParseError;module.import('../core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});
                                                                                                                       //
                                                                                                                       //
                                                                                                                       // 1
                                                                                                                       // 2
                                                                                                                       //
var checkDefinition = function checkDefinition(definition) {                                                           // 4
	// Check parameters validity.                                                                                         //
	if (!Match.test(definition, Object)) {                                                                                // 6
		throwParseError(['Behavior definition has to be an object']);                                                        // 7
	}                                                                                                                     // 10
                                                                                                                       //
	// Check if behavior name is provided and is a string.                                                                //
	if (!Match.test(definition.name, String)) {                                                                           // 13
		throwParseError(['Behavior has to be named']);                                                                       // 14
	}                                                                                                                     // 17
                                                                                                                       //
	// Check if behavior with a given name already exists.                                                                //
	if (_.has(Behavior.behaviors, definition.name)) {                                                                     // 20
		throwParseError([{                                                                                                   // 21
			'behavior': definition.name                                                                                         // 22
		}, 'Behavior already exists']);                                                                                      // 21
	}                                                                                                                     // 26
};                                                                                                                     // 27
                                                                                                                       //
var Behavior = function () {                                                                                           //
	function Behavior(options) {                                                                                          // 30
		_classCallCheck(this, Behavior);                                                                                     // 30
                                                                                                                       //
		this.options = _.extend({}, this.options, options);                                                                  // 31
	}                                                                                                                     // 32
                                                                                                                       //
	Behavior.prototype.createClassDefinition = function createClassDefinition() {};                                       //
                                                                                                                       //
	Behavior.prototype.apply = function apply(Class) {                                                                    //
		var definition = this.createClassDefinition();                                                                       // 37
		if (definition) {                                                                                                    // 38
			Class.extend(definition);                                                                                           // 39
		}                                                                                                                    // 40
	};                                                                                                                    // 41
                                                                                                                       //
	Behavior.create = function create(definition) {                                                                       //
		checkDefinition(definition);                                                                                         // 44
                                                                                                                       //
		// Get behavior name.                                                                                                //
		var behaviorName = definition.name;                                                                                  // 47
		// Extend the Behavior class.                                                                                        //
		var Behavior = this.behaviors[behaviorName] = function (_ref) {                                                      // 49
			_inherits(Behavior, _ref);                                                                                          // 49
                                                                                                                       //
			function Behavior() {                                                                                               // 49
				_classCallCheck(this, Behavior);                                                                                   // 49
                                                                                                                       //
				return _possibleConstructorReturn(this, _ref.apply(this, arguments));                                              // 49
			}                                                                                                                   // 49
                                                                                                                       //
			return Behavior;                                                                                                    // 49
		}(this);                                                                                                             // 49
		// Store definition in behavior class.                                                                               //
		Behavior.definition = definition;                                                                                    // 51
		// Extend prototype with a definition.                                                                               //
		_.extend(Behavior.prototype, definition);                                                                            // 53
                                                                                                                       //
		return Behavior;                                                                                                     // 55
	};                                                                                                                    // 56
                                                                                                                       //
	Behavior.get = function get(behaviorName) {                                                                           //
		return this.behaviors[behaviorName];                                                                                 // 59
	};                                                                                                                    // 60
                                                                                                                       //
	Behavior.has = function has(behaviorName) {                                                                           //
		return _.has(this.behaviors, behaviorName);                                                                          // 63
	};                                                                                                                    // 64
                                                                                                                       //
	return Behavior;                                                                                                      //
}();                                                                                                                   //
                                                                                                                       //
;                                                                                                                      // 65
                                                                                                                       //
Behavior.behaviors = {};                                                                                               // 67
                                                                                                                       //
module.export("default",exports.default=(Behavior));                                                                   // 69
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"module.js":["../../core/module.js","./hooks/init_schema.js","./hooks/init_definition.js","./hooks/parse_definition.js","./hooks/merge_definitions.js","./hooks/apply_definition.js","./hooks/init_class.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/behaviors/module.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Module;module.import('../../core/module.js',{"default":function(v){Module=v}});var onInitSchema;module.import('./hooks/init_schema.js',{"default":function(v){onInitSchema=v}});var onInitDefinition;module.import('./hooks/init_definition.js',{"default":function(v){onInitDefinition=v}});var onParseDefinition;module.import('./hooks/parse_definition.js',{"default":function(v){onParseDefinition=v}});var onMergeDefinitions;module.import('./hooks/merge_definitions.js',{"default":function(v){onMergeDefinitions=v}});var onApplyDefinition;module.import('./hooks/apply_definition.js',{"default":function(v){onApplyDefinition=v}});var onInitClass;module.import('./hooks/init_class.js',{"default":function(v){onInitClass=v}});
// Hooks.                                                                                                              //
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
                                                                                                                       //
Module.create({                                                                                                        // 10
	name: 'behaviors',                                                                                                    // 11
	onInitSchema: onInitSchema,                                                                                           // 12
	onInitDefinition: onInitDefinition,                                                                                   // 13
	onParseDefinition: onParseDefinition,                                                                                 // 14
	onMergeDefinitions: onMergeDefinitions,                                                                               // 15
	onApplyDefinition: onApplyDefinition,                                                                                 // 16
	onInitClass: onInitClass                                                                                              // 17
});                                                                                                                    // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"class_static_methods":{"get_behavior.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/behaviors/class_static_methods/get_behavior.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function getBehavior(behaviorName) {                                                                                   // 1
  return this.schema.behaviors[behaviorName];                                                                          // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(getBehavior));                                                                // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"get_behaviors.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/behaviors/class_static_methods/get_behaviors.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function getBehaviors() {                                                                                              // 1
  return this.schema.behaviors;                                                                                        // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(getBehaviors));                                                               // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"has_behavior.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/behaviors/class_static_methods/has_behavior.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function hasBehavior(behaviorName) {                                                                                   // 3
  return _.has(this.schema.behaviors, behaviorName);                                                                   // 4
};                                                                                                                     // 5
                                                                                                                       //
module.export("default",exports.default=(hasBehavior));                                                                // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"hooks":{"apply_definition.js":["lodash","../behavior.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/behaviors/hooks/apply_definition.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Behavior;module.import('../behavior.js',{"default":function(v){Behavior=v}});
                                                                                                                       // 2
                                                                                                                       //
function onApplyDefinition(Class, parsedDefinition, className) {                                                       // 4
	var schema = Class.schema;                                                                                            // 5
                                                                                                                       //
	// Add behaviors to the class.                                                                                        //
	_.each(parsedDefinition.behaviors, function (behaviorsOptions, behaviorName) {                                        // 8
		// Get the behavior class.                                                                                           //
		var BehaviorClass = Behavior.get(behaviorName);                                                                      // 10
		_.each(behaviorsOptions, function (behaviorOptions) {                                                                // 11
			// Create the behavior instance passing behavior options.                                                           //
			var behavior = new BehaviorClass(behaviorOptions);                                                                  // 13
			// Add behavior to the schema.                                                                                      //
			schema.behaviors[behaviorName] = schema.behaviors[behaviorName] || [];                                              // 15
			schema.behaviors[behaviorName].push(behavior);                                                                      // 16
			// Apply behavior to the class.                                                                                     //
			behavior.apply(Class);                                                                                              // 18
		});                                                                                                                  // 19
	});                                                                                                                   // 20
};                                                                                                                     // 21
                                                                                                                       //
module.export("default",exports.default=(onApplyDefinition));                                                          // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"init_class.js":["../class_static_methods/get_behavior.js","../class_static_methods/get_behaviors.js","../class_static_methods/has_behavior.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/behaviors/hooks/init_class.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var getBehavior;module.import('../class_static_methods/get_behavior.js',{"default":function(v){getBehavior=v}});var getBehaviors;module.import('../class_static_methods/get_behaviors.js',{"default":function(v){getBehaviors=v}});var hasBehavior;module.import('../class_static_methods/has_behavior.js',{"default":function(v){hasBehavior=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function onInitClass(Class, className) {                                                                               // 5
	Class.getBehavior = getBehavior;                                                                                      // 6
	Class.getBehaviors = getBehaviors;                                                                                    // 7
	Class.hasBehavior = hasBehavior;                                                                                      // 8
};                                                                                                                     // 9
                                                                                                                       //
module.export("default",exports.default=(onInitClass));                                                                // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"init_definition.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/behaviors/hooks/init_definition.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function onInitDefinition(definition, className) {                                                                     // 1
	definition.behaviors = {};                                                                                            // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(onInitDefinition));                                                           // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"init_schema.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/behaviors/hooks/init_schema.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function onInitSchema(schema, className) {                                                                             // 1
	schema.behaviors = {};                                                                                                // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(onInitSchema));                                                               // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"merge_definitions.js":["babel-runtime/helpers/toConsumableArray","lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/behaviors/hooks/merge_definitions.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _toConsumableArray;module.import('babel-runtime/helpers/toConsumableArray',{"default":function(v){_toConsumableArray=v}});var _;module.import('lodash',{"default":function(v){_=v}});
                                                                                                                       // 1
                                                                                                                       //
function onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {                                           // 3
	_.each(sourceDefinition.behaviors, function (behaviors, behaviorName) {                                               // 4
		var _targetDefinition$beh;                                                                                           // 4
                                                                                                                       //
		targetDefinition.behaviors[behaviorName] = targetDefinition.behaviors[behaviorName] || [];                           // 5
		(_targetDefinition$beh = targetDefinition.behaviors[behaviorName]).push.apply(_targetDefinition$beh, _toConsumableArray(behaviors));
	});                                                                                                                   // 8
};                                                                                                                     // 9
                                                                                                                       //
module.export("default",exports.default=(onMergeDefinitions));                                                         // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"parse_definition.js":["lodash","../../core/utils/throw_parse_error.js","../behavior.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/behaviors/hooks/parse_definition.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});var Behavior;module.import('../behavior.js',{"default":function(v){Behavior=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function onParseDefinition(parsedDefinition, definition, className) {                                                  // 5
	// Check existence of the "behaviors" property.                                                                       //
	if (definition.behaviors !== undefined) {                                                                             // 7
		if (!Match.test(definition.behaviors, Match.OneOf([String], Object))) {                                              // 8
			throwParseError([{                                                                                                  // 9
				'class': className                                                                                                 // 10
			}, {                                                                                                                // 9
				'property': 'behaviors'                                                                                            // 12
			}, 'Behaviors definition has to be an array of behaviors\' names or an ' + 'object with behaviors\' options']);     // 11
		}                                                                                                                    // 17
		_.each(definition.behaviors, function (behaviorOptions, behaviorName) {                                              // 18
			// If we deal with an array of behaviors' names, then behavior options is                                           //
			// an empty object.                                                                                                 //
			if (_.isString(behaviorOptions)) {                                                                                  // 21
				behaviorName = behaviorOptions;                                                                                    // 22
				behaviorOptions = [{}];                                                                                            // 23
			}                                                                                                                   // 24
			// Check if behavior with a given name exists.                                                                      //
			if (!Behavior.has(behaviorName)) {                                                                                  // 26
				throwParseError([{                                                                                                 // 27
					'class': className                                                                                                // 28
				}, {                                                                                                               // 27
					'behavior': behaviorName                                                                                          // 30
				}, 'Behavior does not exist']);                                                                                    // 29
			}                                                                                                                   // 34
			// Behavior options has to be an object or an array of objects, when we                                             //
			// are adding multiple behaviors of the same type.                                                                  //
			if (!Match.test(behaviorOptions, Match.OneOf(Object, [Object]))) {                                                  // 37
				throwParseError([{                                                                                                 // 38
					'class': className                                                                                                // 39
				}, {                                                                                                               // 38
					'behavior': behaviorName                                                                                          // 41
				}, 'Behavior options have to be an object or an array of objects']);                                               // 40
			}                                                                                                                   // 45
			// Make sure that behavior options is an array of objects.                                                          //
			if (!Match.test(behaviorOptions, Array)) {                                                                          // 47
				behaviorOptions = [behaviorOptions];                                                                               // 48
			}                                                                                                                   // 49
			parsedDefinition.behaviors[behaviorName] = behaviorOptions;                                                         // 50
		});                                                                                                                  // 51
	}                                                                                                                     // 52
};                                                                                                                     // 53
                                                                                                                       //
module.export("default",exports.default=(onParseDefinition));                                                          // 55
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"core":{"module.js":["../../core/module.js","./utils/clone_definition.js","./utils/override_method.js","./utils/throw_parse_error.js","./utils/warn.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/core/module.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Module;module.import('../../core/module.js',{"default":function(v){Module=v}});var cloneDefinition;module.import('./utils/clone_definition.js',{"default":function(v){cloneDefinition=v}});var overrideMethod;module.import('./utils/override_method.js',{"default":function(v){overrideMethod=v}});var throwParseError;module.import('./utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});var warn;module.import('./utils/warn.js',{"default":function(v){warn=v}});
// Utils.                                                                                                              //
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       //
Module.create({                                                                                                        // 8
  name: 'core',                                                                                                        // 9
  utils: {                                                                                                             // 10
    cloneDefinition: cloneDefinition,                                                                                  // 11
    overrideMethod: overrideMethod,                                                                                    // 12
    throwParseError: throwParseError,                                                                                  // 13
    warn: warn                                                                                                         // 14
  }                                                                                                                    // 10
});                                                                                                                    // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"utils":{"clone_definition.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/core/utils/clone_definition.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function cloneDefinition(definition) {                                                                                 // 3
	return _.cloneDeepWith(definition, function (value) {                                                                 // 4
		if (!_.isPlainObject(value) && !_.isArray(value)) {                                                                  // 5
			return value;                                                                                                       // 6
		}                                                                                                                    // 7
	});                                                                                                                   // 8
};                                                                                                                     // 9
                                                                                                                       //
module.export("default",exports.default=(cloneDefinition));                                                            // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"override_method.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/core/utils/override_method.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function overrideMethod(object, methodName, overridingMethod, param) {                                                 // 3
  // Get original method.                                                                                              //
  var originalMethod = object[methodName];                                                                             // 5
                                                                                                                       //
  // Override original method.                                                                                         //
  object[methodName] = function () {                                                                                   // 8
    // Convert arguments to array.                                                                                     //
    var args = _.toArray(arguments);                                                                                   // 10
                                                                                                                       //
    // Execute overriding method passing arguments, original method and extra                                          //
    // parameters.                                                                                                     //
    return overridingMethod.call(this, args, originalMethod, param);                                                   // 14
  };                                                                                                                   // 15
};                                                                                                                     // 16
                                                                                                                       //
module.export("default",exports.default=(overrideMethod));                                                             // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"throw_parse_error.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/core/utils/throw_parse_error.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function throwParseError(details) {                                                                                    // 3
  var message = '';                                                                                                    // 4
                                                                                                                       //
  _.each(details, function (detail) {                                                                                  // 6
    if (_.isObject(detail)) {                                                                                          // 7
      _.each(detail, function (value, key) {                                                                           // 8
        message += '["' + value + '" ' + key + ']';                                                                    // 9
      });                                                                                                              // 10
    } else if (_.isString(detail)) {                                                                                   // 11
      message += ' ' + detail;                                                                                         // 12
    }                                                                                                                  // 13
  });                                                                                                                  // 14
                                                                                                                       //
  throw new TypeError(message);                                                                                        // 16
};                                                                                                                     // 17
                                                                                                                       //
module.export("default",exports.default=(throwParseError));                                                            // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"warn.js":["../../../core/config.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/core/utils/warn.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Config;module.import('../../../core/config.js',{"default":function(v){Config=v}});                                 // 1
                                                                                                                       //
function warn(warning) {                                                                                               // 3
  if (console && console.warn && Config.verbose) {                                                                     // 4
    console.warn(warning);                                                                                             // 5
  }                                                                                                                    // 6
};                                                                                                                     // 7
                                                                                                                       //
module.export("default",exports.default=(warn));                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"events":{"event.js":["babel-runtime/helpers/classCallCheck","lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/events/event.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{"default":function(v){_classCallCheck=v}});var _;module.import('lodash',{"default":function(v){_=v}});
                                                                                                                       // 1
                                                                                                                       //
var Event = function () {                                                                                              //
	function Event(type, data) {                                                                                          // 4
		_classCallCheck(this, Event);                                                                                        // 4
                                                                                                                       //
		this.cancelable = false;                                                                                             // 5
		this.propagates = false;                                                                                             // 6
                                                                                                                       //
		_.extend(this, data);                                                                                                // 8
                                                                                                                       //
		this.type = type.toLowerCase();                                                                                      // 10
		this.timeStamp = Date.now();                                                                                         // 11
                                                                                                                       //
		this.target = null;                                                                                                  // 13
		this.currentTarget = null;                                                                                           // 14
                                                                                                                       //
		this.defaultPrevented = false;                                                                                       // 16
		this.propagationStopped = false;                                                                                     // 17
		this.immediatePropagationStopped = false;                                                                            // 18
	}                                                                                                                     // 19
                                                                                                                       //
	Event.prototype.preventDefault = function preventDefault() {                                                          //
		this.defaultPrevented = true;                                                                                        // 22
	};                                                                                                                    // 23
                                                                                                                       //
	Event.prototype.stopPropagation = function stopPropagation() {                                                        //
		this.propagationStopped = true;                                                                                      // 26
	};                                                                                                                    // 27
                                                                                                                       //
	Event.prototype.stopImmediatePropagation = function stopImmediatePropagation() {                                      //
		this.immediatePropagationStopped = true;                                                                             // 30
		this.stopPropagation();                                                                                              // 31
	};                                                                                                                    // 32
                                                                                                                       //
	return Event;                                                                                                         //
}();                                                                                                                   //
                                                                                                                       //
;                                                                                                                      // 33
                                                                                                                       //
module.export("default",exports.default=(Event));                                                                      // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"module.js":["../../core/module.js","./hooks/init_schema.js","./hooks/init_definition.js","./hooks/parse_definition.js","./hooks/merge_definitions.js","./hooks/apply_definition.js","./hooks/init_class.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/events/module.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Module;module.import('../../core/module.js',{"default":function(v){Module=v}});var onInitSchema;module.import('./hooks/init_schema.js',{"default":function(v){onInitSchema=v}});var onInitDefinition;module.import('./hooks/init_definition.js',{"default":function(v){onInitDefinition=v}});var onParseDefinition;module.import('./hooks/parse_definition.js',{"default":function(v){onParseDefinition=v}});var onMergeDefinitions;module.import('./hooks/merge_definitions.js',{"default":function(v){onMergeDefinitions=v}});var onApplyDefinition;module.import('./hooks/apply_definition.js',{"default":function(v){onApplyDefinition=v}});var onInitClass;module.import('./hooks/init_class.js',{"default":function(v){onInitClass=v}});
                                                                                                                       //
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
                                                                                                                       //
Module.create({                                                                                                        // 10
	name: 'events',                                                                                                       // 11
	onInitSchema: onInitSchema,                                                                                           // 12
	onInitDefinition: onInitDefinition,                                                                                   // 13
	onParseDefinition: onParseDefinition,                                                                                 // 14
	onMergeDefinitions: onMergeDefinitions,                                                                               // 15
	onApplyDefinition: onApplyDefinition,                                                                                 // 16
	onInitClass: onInitClass                                                                                              // 17
});                                                                                                                    // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"class_prototype_methods":{"dispatch_event.js":["lodash","../event.js","../../core/utils/throw_parse_error.js","../../../core/class.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/events/class_prototype_methods/dispatch_event.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Event;module.import('../event.js',{"default":function(v){Event=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});var AstroClass;module.import('../../../core/class.js',{"default":function(v){AstroClass=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       //
function returnFromDispatchEvent(event) {                                                                              // 6
  // If an event is cancelable and it had been canceled with the                                                       //
  // "preventDefault" method call, then we return false.                                                               //
  if (event.cancelable) {                                                                                              // 9
    return !event.defaultPrevented;                                                                                    // 10
  }                                                                                                                    // 11
  return true;                                                                                                         // 12
}                                                                                                                      // 13
                                                                                                                       //
function dispatchEvent(event) {                                                                                        // 15
  var doc = this;                                                                                                      // 16
  var Class = doc.constructor;                                                                                         // 17
                                                                                                                       //
  if (!Match.test(event, Event)) {                                                                                     // 19
    throwParseError([{                                                                                                 // 20
      'class': Class.getName()                                                                                         // 21
    }, {                                                                                                               // 20
      'method': 'dispatchEvent'                                                                                        // 23
    }, 'The first argument has to be an event object']);                                                               // 22
  }                                                                                                                    // 27
                                                                                                                       //
  // Attach a document to the event as a target.                                                                       //
  if (event.target === null) {                                                                                         // 30
    event.target = doc;                                                                                                // 31
  }                                                                                                                    // 32
  if (event.currentTarget === null) {                                                                                  // 33
    event.currentTarget = doc;                                                                                         // 34
  }                                                                                                                    // 35
                                                                                                                       //
  // Get all event handlers of a given type.                                                                           //
  var eventHandlers = Class.getEvents(event.type);                                                                     // 38
                                                                                                                       //
  _.every(eventHandlers, function (eventHandler) {                                                                     // 40
    eventHandler(event);                                                                                               // 41
                                                                                                                       //
    // Stop execution of the following event handlers, if a flag is set.                                               //
    return !event.immediatePropagationStopped;                                                                         // 44
  });                                                                                                                  // 45
                                                                                                                       //
  // If propagation was stopped or bubbling is turned off, then we don't go                                            //
  // deeper into nested fields.                                                                                        //
  if (event.propagationStopped || !event.propagates) {                                                                 // 49
    return returnFromDispatchEvent(event);                                                                             // 50
  }                                                                                                                    // 51
                                                                                                                       //
  // Object fields.                                                                                                    //
  _.each(Class.getObjectFields(), function (field) {                                                                   // 54
    var value = doc[field.name];                                                                                       // 55
    if (value instanceof AstroClass) {                                                                                 // 56
      event.currentTarget = value;                                                                                     // 57
      value.dispatchEvent(event);                                                                                      // 58
    }                                                                                                                  // 59
  });                                                                                                                  // 60
                                                                                                                       //
  // List fields.                                                                                                      //
  _.each(Class.getListFields(), function (field) {                                                                     // 63
    var value = doc[field.name];                                                                                       // 64
    if (field.isClass && _.isArray(value)) {                                                                           // 65
      _.each(value, function (element) {                                                                               // 66
        if (element instanceof AstroClass) {                                                                           // 67
          event.currentTarget = element;                                                                               // 68
          element.dispatchEvent(event);                                                                                // 69
        }                                                                                                              // 70
      });                                                                                                              // 71
    }                                                                                                                  // 72
  });                                                                                                                  // 73
                                                                                                                       //
  return returnFromDispatchEvent(event);                                                                               // 75
}                                                                                                                      // 76
                                                                                                                       //
module.export("default",exports.default=(dispatchEvent));                                                              // 78
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"class_static_methods":{"dispatch_event.js":["lodash","../event.js","../../core/utils/throw_parse_error.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/events/class_static_methods/dispatch_event.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Event;module.import('../event.js',{"default":function(v){Event=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function returnFromDispatchEvent(event) {                                                                              // 5
  // If an event is cancelable and it had been canceled with the                                                       //
  // "preventDefault" method call, then we return false.                                                               //
  if (event.cancelable) {                                                                                              // 8
    return !event.defaultPrevented;                                                                                    // 9
  }                                                                                                                    // 10
  return true;                                                                                                         // 11
}                                                                                                                      // 12
                                                                                                                       //
function dispatchEvent(event) {                                                                                        // 14
  var Class = this;                                                                                                    // 15
                                                                                                                       //
  if (!Match.test(event, Event)) {                                                                                     // 17
    throwParseError([{                                                                                                 // 18
      'class': Class.getName()                                                                                         // 19
    }, {                                                                                                               // 18
      'method': 'dispatchEvent'                                                                                        // 21
    }, 'The first argument has to be an event object']);                                                               // 20
  }                                                                                                                    // 25
                                                                                                                       //
  // Attach a document to the event as a target.                                                                       //
  if (event.target === null) {                                                                                         // 28
    event.target = Class;                                                                                              // 29
  }                                                                                                                    // 30
  if (event.currentTarget === null) {                                                                                  // 31
    event.currentTarget = Class;                                                                                       // 32
  }                                                                                                                    // 33
                                                                                                                       //
  // Get all event handlers of a given type.                                                                           //
  var eventHandlers = Class.getEvents(event.type);                                                                     // 36
                                                                                                                       //
  _.every(eventHandlers, function (eventHandler) {                                                                     // 38
    eventHandler(event);                                                                                               // 39
                                                                                                                       //
    // Stop execution of the following event handlers, if a flag is set.                                               //
    return !event.immediatePropagationStopped;                                                                         // 42
  });                                                                                                                  // 43
                                                                                                                       //
  return returnFromDispatchEvent(event);                                                                               // 45
}                                                                                                                      // 46
                                                                                                                       //
module.export("default",exports.default=(dispatchEvent));                                                              // 48
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_events.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/events/class_static_methods/get_events.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function getEvents(eventName) {                                                                                        // 1
  var Class = this;                                                                                                    // 2
                                                                                                                       //
  if (eventName) {                                                                                                     // 4
    eventName = eventName.toLowerCase();                                                                               // 5
    return Class.schema.events[eventName] || [];                                                                       // 6
  }                                                                                                                    // 7
  return Class.schema.events;                                                                                          // 8
}                                                                                                                      // 9
                                                                                                                       //
module.export("default",exports.default=(getEvents));                                                                  // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"has_event.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/events/class_static_methods/has_event.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function hasEvent(eventName, eventHandler) {                                                                           // 3
  var Class = this;                                                                                                    // 4
                                                                                                                       //
  eventName = eventName.toLowerCase();                                                                                 // 6
                                                                                                                       //
  if (arguments.length === 2) {                                                                                        // 8
    return _.has(Class.schema.events[eventName], eventHandler);                                                        // 9
  } else if (arguments.length === 1) {                                                                                 // 10
    return _.has(Class.schema.events, eventName);                                                                      // 12
  }                                                                                                                    // 13
}                                                                                                                      // 14
                                                                                                                       //
module.export("default",exports.default=(hasEvent));                                                                   // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"hooks":{"apply_definition.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/events/hooks/apply_definition.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function onApplyDefinition(Class, parsedDefinition, className) {                                                       // 3
	var schema = Class.schema;                                                                                            // 4
                                                                                                                       //
	// Add events to the event manager.                                                                                   //
	_.each(parsedDefinition.events, function (eventHandlers, eventName) {                                                 // 7
		eventName = eventName.toLowerCase();                                                                                 // 8
		_.each(eventHandlers, function (eventHandler) {                                                                      // 9
			schema.events[eventName] = schema.events[eventName] || [];                                                          // 10
			schema.events[eventName].push(eventHandler);                                                                        // 11
		});                                                                                                                  // 12
	});                                                                                                                   // 13
};                                                                                                                     // 14
                                                                                                                       //
module.export("default",exports.default=(onApplyDefinition));                                                          // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"init_class.js":["../class_static_methods/dispatch_event.js","../class_static_methods/get_events.js","../class_static_methods/has_event.js","../class_prototype_methods/dispatch_event.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/events/hooks/init_class.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dispatchEvent;module.import('../class_static_methods/dispatch_event.js',{"default":function(v){dispatchEvent=v}});var getEvents;module.import('../class_static_methods/get_events.js',{"default":function(v){getEvents=v}});var hasEvent;module.import('../class_static_methods/has_event.js',{"default":function(v){hasEvent=v}});var dispatchEventProto;module.import('../class_prototype_methods/dispatch_event.js',{"default":function(v){dispatchEventProto=v}});// Class static methods.
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
// Class prototype methods.                                                                                            //
                                                                                                                       // 6
                                                                                                                       //
function onInitClass(Class, className) {                                                                               // 8
  // Class static methods.                                                                                             //
  Class.dispatchEvent = dispatchEvent;                                                                                 // 10
  Class.getEvents = getEvents;                                                                                         // 11
  Class.hasEvent = hasEvent;                                                                                           // 12
  // Class prototype methods.                                                                                          //
  Class.prototype.dispatchEvent = dispatchEventProto;                                                                  // 14
}                                                                                                                      // 15
                                                                                                                       //
module.export("default",exports.default=(onInitClass));                                                                // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"init_definition.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/events/hooks/init_definition.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function onInitDefinition(definition, className) {                                                                     // 1
	definition.events = {};                                                                                               // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(onInitDefinition));                                                           // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"init_schema.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/events/hooks/init_schema.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function onInitSchema(schema, className) {                                                                             // 1
	schema.events = {};                                                                                                   // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(onInitSchema));                                                               // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"merge_definitions.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/events/hooks/merge_definitions.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {                                           // 3
	_.each(sourceDefinition.events, function (events, eventName) {                                                        // 4
		eventName = eventName.toLowerCase();                                                                                 // 5
		targetDefinition.events[eventName] = targetDefinition.events[eventName] || [];                                       // 6
		targetDefinition.events[eventName] = targetDefinition.events[eventName].concat(events);                              // 7
	});                                                                                                                   // 9
};                                                                                                                     // 10
                                                                                                                       //
module.export("default",exports.default=(onMergeDefinitions));                                                         // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"parse_definition.js":["lodash","../../core/utils/throw_parse_error.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/events/hooks/parse_definition.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});
                                                                                                                       // 2
                                                                                                                       //
function onParseDefinition(parsedDefinition, definition, className) {                                                  // 4
	// Check existence and validity of the "events" property.                                                             //
	if (definition.events !== undefined) {                                                                                // 6
		_.each(definition.events, function (eventHandlers, eventName) {                                                      // 7
			eventName = eventName.toLowerCase();                                                                                // 8
			// Check if the event definition is an array of functions.                                                          //
			if (!Match.test(eventHandlers, Match.OneOf(Function, [Function]))) {                                                // 10
				throwParseError([{                                                                                                 // 11
					'class': className                                                                                                // 12
				}, {                                                                                                               // 11
					'event': eventName                                                                                                // 14
				}, 'Event handler has to be a function or an array of functions']);                                                // 13
			}                                                                                                                   // 18
			// Convert function to array of functions.                                                                          //
			if (Match.test(eventHandlers, Function)) {                                                                          // 20
				eventHandlers = [eventHandlers];                                                                                   // 21
			}                                                                                                                   // 22
			parsedDefinition.events[eventName] = eventHandlers;                                                                 // 23
		});                                                                                                                  // 24
	}                                                                                                                     // 25
};                                                                                                                     // 26
                                                                                                                       //
module.export("default",exports.default=(onParseDefinition));                                                          // 28
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"fields":{"Field.js":["babel-runtime/helpers/classCallCheck","lodash","../validators/validators.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/Field.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{"default":function(v){_classCallCheck=v}});var _;module.import('lodash',{"default":function(v){_=v}});var Validators;module.import('../validators/validators.js',{"default":function(v){Validators=v}});
                                                                                                                       // 1
                                                                                                                       // 2
                                                                                                                       //
var Field = function () {                                                                                              //
  function Field() {                                                                                                   // 5
    var definition = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                          // 5
                                                                                                                       //
    _classCallCheck(this, Field);                                                                                      // 5
                                                                                                                       //
    _.defaults(definition, {                                                                                           // 6
      optional: false,                                                                                                 // 7
      immutable: false,                                                                                                // 8
      transient: false                                                                                                 // 9
    });                                                                                                                // 6
                                                                                                                       //
    this.name = definition.name;                                                                                       // 12
    this.type = definition.type;                                                                                       // 13
    this['default'] = definition['default'];                                                                           // 14
    this.optional = definition.optional;                                                                               // 15
    this.immutable = definition.immutable;                                                                             // 16
    this.transient = definition.transient;                                                                             // 17
    this.resolve = definition.resolve;                                                                                 // 18
  }                                                                                                                    // 19
                                                                                                                       //
  Field.prototype.getDefault = function getDefault() {                                                                 //
    if (_.isFunction(this['default'])) {                                                                               // 22
      return this['default']();                                                                                        // 23
    }                                                                                                                  // 24
    return this['default'];                                                                                            // 25
  };                                                                                                                   // 26
                                                                                                                       //
  Field.prototype.getOptional = function getOptional(doc) {                                                            //
    if (_.isFunction(this.optional)) {                                                                                 // 29
      return this.optional(doc);                                                                                       // 30
    }                                                                                                                  // 31
    return this.optional;                                                                                              // 32
  };                                                                                                                   // 33
                                                                                                                       //
  Field.prototype.cast = function cast(value) {                                                                        //
    return value;                                                                                                      // 36
  };                                                                                                                   // 37
                                                                                                                       //
  Field.prototype.validate = function validate(args) {                                                                 //
    // If a field is not optional (required) then it has to have value.                                                //
    if (!this.getOptional(args.doc)) {                                                                                 // 41
      Validators.required(args);                                                                                       // 42
    }                                                                                                                  // 43
  };                                                                                                                   // 44
                                                                                                                       //
  Field.prototype.resolveValue = function resolveValue(rawDoc) {                                                       //
    if (this.resolve) {                                                                                                // 47
      return this.resolve(rawDoc);                                                                                     // 48
    } else {                                                                                                           // 49
      return rawDoc[this.name];                                                                                        // 51
    }                                                                                                                  // 52
  };                                                                                                                   // 53
                                                                                                                       //
  return Field;                                                                                                        //
}();                                                                                                                   //
                                                                                                                       //
;                                                                                                                      // 54
                                                                                                                       //
module.export("default",exports.default=(Field));                                                                      // 56
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ListField.js":["babel-runtime/helpers/classCallCheck","babel-runtime/helpers/possibleConstructorReturn","babel-runtime/helpers/inherits","lodash","./Field","./utils/castToClass","../../core/class.js","../validators/validators.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/ListField.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{"default":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{"default":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{"default":function(v){_inherits=v}});var _;module.import('lodash',{"default":function(v){_=v}});var Field;module.import('./Field',{"default":function(v){Field=v}});var castToClass;module.import('./utils/castToClass',{"default":function(v){castToClass=v}});var AstroClass;module.import('../../core/class.js',{"default":function(v){AstroClass=v}});var Validators;module.import('../validators/validators.js',{"default":function(v){Validators=v}});
                                                                                                                       //
                                                                                                                       //
                                                                                                                       // 1
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       //
var ListField = function (_Field) {                                                                                    //
  _inherits(ListField, _Field);                                                                                        //
                                                                                                                       //
  function ListField() {                                                                                               // 8
    var definition = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                          // 8
                                                                                                                       //
    _classCallCheck(this, ListField);                                                                                  // 8
                                                                                                                       //
    var _this = _possibleConstructorReturn(this, _Field.call(this, definition));                                       // 8
                                                                                                                       //
    _this.isClass = AstroClass.isParentOf(_this.type['class']);                                                        // 11
    return _this;                                                                                                      // 8
  }                                                                                                                    // 12
                                                                                                                       //
  ListField.prototype.cast = function cast(value, options) {                                                           //
    var _this2 = this;                                                                                                 // 14
                                                                                                                       //
    if (!_.isArray(value)) {                                                                                           // 15
      return value;                                                                                                    // 16
    }                                                                                                                  // 17
                                                                                                                       //
    return _.map(value, function (element) {                                                                           // 19
      // Class type.                                                                                                   //
      if (_this2.isClass) {                                                                                            // 21
        // We only cast if value is a plain object.                                                                    //
        if (!_.isPlainObject(element)) {                                                                               // 23
          return element;                                                                                              // 24
        }                                                                                                              // 25
        // Get class from type property.                                                                               //
        var Class = _this2.type['class'];                                                                              // 27
        // Cast value to an instance of the class.                                                                     //
        return castToClass({                                                                                           // 29
          Class: Class,                                                                                                // 30
          rawDoc: element,                                                                                             // 31
          options: options                                                                                             // 32
        });                                                                                                            // 29
      }                                                                                                                // 34
      // Scalar type.                                                                                                  //
      else {                                                                                                           // 21
          return _this2.type.cast(element);                                                                            // 37
        }                                                                                                              // 38
    });                                                                                                                // 39
  };                                                                                                                   // 40
                                                                                                                       //
  ListField.prototype.validate = function validate(args) {                                                             //
    var _this3 = this;                                                                                                 // 42
                                                                                                                       //
    _Field.prototype.validate.call(this, args);                                                                        // 43
    var doc = args.doc;                                                                                                // 42
    var name = args.name;                                                                                              // 42
    var value = args.value;                                                                                            // 42
                                                                                                                       //
                                                                                                                       //
    if (!_.isNil(value)) {                                                                                             // 50
      Validators.array(args);                                                                                          // 51
      _.each(value, function (element, index) {                                                                        // 52
        _this3.type.validate({                                                                                         // 53
          doc: doc,                                                                                                    // 54
          name: name + '.' + index,                                                                                    // 55
          value: element                                                                                               // 56
        });                                                                                                            // 53
      });                                                                                                              // 58
    }                                                                                                                  // 59
  };                                                                                                                   // 60
                                                                                                                       //
  return ListField;                                                                                                    //
}(Field);                                                                                                              //
                                                                                                                       //
;                                                                                                                      // 61
                                                                                                                       //
module.export("default",exports.default=(ListField));                                                                  // 63
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ObjectField.js":["babel-runtime/helpers/classCallCheck","babel-runtime/helpers/possibleConstructorReturn","babel-runtime/helpers/inherits","lodash","./Field","./utils/castToClass",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/ObjectField.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{"default":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{"default":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{"default":function(v){_inherits=v}});var _;module.import('lodash',{"default":function(v){_=v}});var Field;module.import('./Field',{"default":function(v){Field=v}});var castToClass;module.import('./utils/castToClass',{"default":function(v){castToClass=v}});
                                                                                                                       //
                                                                                                                       //
                                                                                                                       // 1
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
var ObjectField = function (_Field) {                                                                                  //
  _inherits(ObjectField, _Field);                                                                                      //
                                                                                                                       //
  function ObjectField() {                                                                                             //
    _classCallCheck(this, ObjectField);                                                                                //
                                                                                                                       //
    return _possibleConstructorReturn(this, _Field.apply(this, arguments));                                            //
  }                                                                                                                    //
                                                                                                                       //
  ObjectField.prototype.cast = function cast(value, options) {                                                         //
    // We only cast if value is a plain object.                                                                        //
    if (!_.isPlainObject(value)) {                                                                                     // 8
      return value;                                                                                                    // 9
    }                                                                                                                  // 10
                                                                                                                       //
    // Get class from type property.                                                                                   //
    var Class = this.type['class'];                                                                                    // 13
                                                                                                                       //
    // Cast value to an instance of the class.                                                                         //
    return castToClass({                                                                                               // 16
      Class: Class,                                                                                                    // 17
      rawDoc: value,                                                                                                   // 18
      options: options                                                                                                 // 19
    });                                                                                                                // 16
  };                                                                                                                   // 21
                                                                                                                       //
  ObjectField.prototype.validate = function validate(args) {                                                           //
    _Field.prototype.validate.call(this, args);                                                                        // 24
                                                                                                                       //
    this.type.validate(args);                                                                                          // 26
  };                                                                                                                   // 27
                                                                                                                       //
  return ObjectField;                                                                                                  //
}(Field);                                                                                                              //
                                                                                                                       //
;                                                                                                                      // 28
                                                                                                                       //
module.export("default",exports.default=(ObjectField));                                                                // 30
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ScalarField.js":["babel-runtime/helpers/classCallCheck","babel-runtime/helpers/possibleConstructorReturn","babel-runtime/helpers/inherits","lodash","./Field",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/ScalarField.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{"default":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{"default":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{"default":function(v){_inherits=v}});var _;module.import('lodash',{"default":function(v){_=v}});var Field;module.import('./Field',{"default":function(v){Field=v}});
                                                                                                                       //
                                                                                                                       //
                                                                                                                       // 1
                                                                                                                       // 2
                                                                                                                       //
var ScalarField = function (_Field) {                                                                                  //
  _inherits(ScalarField, _Field);                                                                                      //
                                                                                                                       //
  function ScalarField() {                                                                                             // 5
    var definition = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                          // 5
                                                                                                                       //
    _classCallCheck(this, ScalarField);                                                                                // 5
                                                                                                                       //
    var _this = _possibleConstructorReturn(this, _Field.call(this, definition));                                       // 5
                                                                                                                       //
    _this.type = definition.type;                                                                                      // 8
    return _this;                                                                                                      // 5
  }                                                                                                                    // 9
                                                                                                                       //
  ScalarField.prototype.cast = function cast(value) {                                                                  //
    return this.type.cast(value);                                                                                      // 12
  };                                                                                                                   // 13
                                                                                                                       //
  ScalarField.prototype.validate = function validate(args) {                                                           //
    _Field.prototype.validate.call(this, args);                                                                        // 16
    var value = args.value;                                                                                            // 15
                                                                                                                       //
                                                                                                                       //
    if (!_.isNil(value)) {                                                                                             // 21
      return this.type.validate(args);                                                                                 // 22
    }                                                                                                                  // 23
  };                                                                                                                   // 24
                                                                                                                       //
  return ScalarField;                                                                                                  //
}(Field);                                                                                                              //
                                                                                                                       //
;                                                                                                                      // 25
                                                                                                                       //
module.export("default",exports.default=(ScalarField));                                                                // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"enum.js":["lodash","./type.js","../validators/validators.js","meteor/check",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/enum.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Type;module.import('./type.js',{"default":function(v){Type=v}});var Validators;module.import('../validators/validators.js',{"default":function(v){Validators=v}});var check,Match;module.import('meteor/check',{"check":function(v){check=v},"Match":function(v){Match=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       //
var enumDefinitionPattern = {                                                                                          // 6
  name: String,                                                                                                        // 7
  identifiers: Match.OneOf(Array, Object)                                                                              // 8
};                                                                                                                     // 6
                                                                                                                       //
var Enum = {                                                                                                           // 11
  create: function create(definition) {                                                                                // 12
    check(definition, enumDefinitionPattern);                                                                          // 13
                                                                                                                       //
    // Get identifiers and values.                                                                                     //
    var identifiers = void 0;                                                                                          // 16
    if (Match.test(definition.identifiers, Array)) {                                                                   // 17
      identifiers = _.zipObject(definition.identifiers, _.range(definition.identifiers.length));                       // 18
    } else if (Match.test(definition.identifiers, Object)) {                                                           // 21
      (function () {                                                                                                   // 22
        identifiers = definition.identifiers;                                                                          // 23
        var i = 0;                                                                                                     // 24
        _.forOwn(identifiers, function (value, key) {                                                                  // 25
          if (_.isNil(value)) {                                                                                        // 26
            identifiers[key] = i;                                                                                      // 27
            i++;                                                                                                       // 28
          } else if (_.isNumber(value)) {                                                                              // 29
            i = value + 1;                                                                                             // 31
          }                                                                                                            // 32
        });                                                                                                            // 33
      })();                                                                                                            // 22
    }                                                                                                                  // 34
    var values = _.values(identifiers);                                                                                // 35
    var keys = _.keys(identifiers);                                                                                    // 36
    // Create a new Enum constructor.                                                                                  //
    var Enum = function Enum(identifier) {                                                                             // 38
      return Enum[identifier];                                                                                         // 39
    };                                                                                                                 // 40
    Enum.getIdentifiers = function () {                                                                                // 41
      return keys;                                                                                                     // 42
    };                                                                                                                 // 43
    Enum.getIdentifier = function (value) {                                                                            // 44
      var index = _.indexOf(values, value);                                                                            // 45
      return keys[index];                                                                                              // 46
    };                                                                                                                 // 47
    // Set identifiers properties in the class.                                                                        //
    _.each(identifiers, function (value, name) {                                                                       // 49
      if (Object.defineProperty) {                                                                                     // 50
        Object.defineProperty(Enum, name, {                                                                            // 51
          writable: false,                                                                                             // 52
          enumerable: true,                                                                                            // 53
          value: value                                                                                                 // 54
        });                                                                                                            // 51
      } else {                                                                                                         // 56
        Enum[name] = value;                                                                                            // 58
      }                                                                                                                // 59
    });                                                                                                                // 60
    // Create type definition for the given enum.                                                                      //
    Type.create({                                                                                                      // 62
      name: definition.name,                                                                                           // 63
      'class': Enum,                                                                                                   // 64
      validate: function validate(args) {                                                                              // 65
        args.param = values;                                                                                           // 66
        Validators.choice(args);                                                                                       // 67
      }                                                                                                                // 68
    });                                                                                                                // 62
    // Store enum in the enums list.                                                                                   //
    this.enums[definition.name] = Enum;                                                                                // 71
                                                                                                                       //
    return Enum;                                                                                                       // 73
  },                                                                                                                   // 74
                                                                                                                       //
  enums: {}                                                                                                            // 75
};                                                                                                                     // 11
                                                                                                                       //
module.export("default",exports.default=(Enum));                                                                       // 78
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"module.js":["../../core/module.js","./types/boolean.js","./types/date.js","./types/mongo_object_id.js","./types/number.js","./types/object.js","./types/string.js","./utils/cast_nested.js","./utils/get_all.js","./utils/get_many.js","./utils/get_one.js","./utils/is_nested_field_name.js","./utils/raw_all.js","./utils/raw_many.js","./utils/raw_one.js","./utils/set_all.js","./utils/set_defaults.js","./utils/set_many.js","./utils/set_one.js","./utils/traverse.js","./hooks/init_schema.js","./hooks/init_definition.js","./hooks/parse_definition.js","./hooks/merge_definitions.js","./hooks/apply_definition.js","./hooks/init_class.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/module.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Module;module.import('../../core/module.js',{"default":function(v){Module=v}});module.import('./types/boolean.js');module.import('./types/date.js');module.import('./types/mongo_object_id.js');module.import('./types/number.js');module.import('./types/object.js');module.import('./types/string.js');var castNested;module.import('./utils/cast_nested.js',{"default":function(v){castNested=v}});var getAll;module.import('./utils/get_all.js',{"default":function(v){getAll=v}});var getMany;module.import('./utils/get_many.js',{"default":function(v){getMany=v}});var getOne;module.import('./utils/get_one.js',{"default":function(v){getOne=v}});var isNestedFieldName;module.import('./utils/is_nested_field_name.js',{"default":function(v){isNestedFieldName=v}});var rawAll;module.import('./utils/raw_all.js',{"default":function(v){rawAll=v}});var rawMany;module.import('./utils/raw_many.js',{"default":function(v){rawMany=v}});var rawOne;module.import('./utils/raw_one.js',{"default":function(v){rawOne=v}});var setAll;module.import('./utils/set_all.js',{"default":function(v){setAll=v}});var setDefaults;module.import('./utils/set_defaults.js',{"default":function(v){setDefaults=v}});var setMany;module.import('./utils/set_many.js',{"default":function(v){setMany=v}});var setOne;module.import('./utils/set_one.js',{"default":function(v){setOne=v}});var traverse;module.import('./utils/traverse.js',{"default":function(v){traverse=v}});var onInitSchema;module.import('./hooks/init_schema.js',{"default":function(v){onInitSchema=v}});var onInitDefinition;module.import('./hooks/init_definition.js',{"default":function(v){onInitDefinition=v}});var onParseDefinition;module.import('./hooks/parse_definition.js',{"default":function(v){onParseDefinition=v}});var onMergeDefinitions;module.import('./hooks/merge_definitions.js',{"default":function(v){onMergeDefinitions=v}});var onApplyDefinition;module.import('./hooks/apply_definition.js',{"default":function(v){onApplyDefinition=v}});var onInitClass;module.import('./hooks/init_class.js',{"default":function(v){onInitClass=v}});
// Types.                                                                                                              //
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
// Utils.                                                                                                              //
                                                                                                                       // 10
                                                                                                                       // 11
                                                                                                                       // 12
                                                                                                                       // 13
                                                                                                                       // 14
                                                                                                                       // 15
                                                                                                                       // 16
                                                                                                                       // 17
                                                                                                                       // 18
                                                                                                                       // 19
                                                                                                                       // 20
                                                                                                                       // 21
                                                                                                                       // 22
// Hooks.                                                                                                              //
                                                                                                                       // 24
                                                                                                                       // 25
                                                                                                                       // 26
                                                                                                                       // 27
                                                                                                                       // 28
                                                                                                                       // 29
                                                                                                                       //
Module.create({                                                                                                        // 31
  name: 'fields',                                                                                                      // 32
  onInitSchema: onInitSchema,                                                                                          // 33
  onInitDefinition: onInitDefinition,                                                                                  // 34
  onParseDefinition: onParseDefinition,                                                                                // 35
  onMergeDefinitions: onMergeDefinitions,                                                                              // 36
  onApplyDefinition: onApplyDefinition,                                                                                // 37
  onInitClass: onInitClass,                                                                                            // 38
  utils: {                                                                                                             // 39
    castNested: castNested,                                                                                            // 40
    getAll: getAll,                                                                                                    // 41
    getMany: getMany,                                                                                                  // 42
    getOne: getOne,                                                                                                    // 43
    isNestedFieldName: isNestedFieldName,                                                                              // 44
    rawAll: rawAll,                                                                                                    // 45
    rawMany: rawMany,                                                                                                  // 46
    rawOne: rawOne,                                                                                                    // 47
    setAll: setAll,                                                                                                    // 48
    setDefaults: setDefaults,                                                                                          // 49
    setMany: setMany,                                                                                                  // 50
    setOne: setOne,                                                                                                    // 51
    traverse: traverse                                                                                                 // 52
  }                                                                                                                    // 39
});                                                                                                                    // 31
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"type.js":["babel-runtime/helpers/classCallCheck","lodash","../validators/validators.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/type.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{"default":function(v){_classCallCheck=v}});var _;module.import('lodash',{"default":function(v){_=v}});var Validators;module.import('../validators/validators.js',{"default":function(v){Validators=v}});
                                                                                                                       // 1
                                                                                                                       // 2
                                                                                                                       //
var typeDefinitionPattern = {                                                                                          // 4
  name: String,                                                                                                        // 5
  'class': Match.Any,                                                                                                  // 6
  cast: Match.Optional(Function),                                                                                      // 7
  validate: Match.Optional(Function)                                                                                   // 8
};                                                                                                                     // 4
                                                                                                                       //
var enumDefinitionPattern = {                                                                                          // 11
  name: String,                                                                                                        // 12
  options: Object                                                                                                      // 13
};                                                                                                                     // 11
                                                                                                                       //
var Type = function () {                                                                                               //
  function Type(definition) {                                                                                          // 17
    _classCallCheck(this, Type);                                                                                       // 17
                                                                                                                       //
    check(definition, typeDefinitionPattern);                                                                          // 18
                                                                                                                       //
    this.name = definition.name;                                                                                       // 20
    this['class'] = definition['class'];                                                                               // 21
                                                                                                                       //
    if (_.isFunction(definition.validate)) {                                                                           // 23
      this.validate = definition.validate;                                                                             // 24
    }                                                                                                                  // 25
                                                                                                                       //
    if (_.isFunction(definition.cast)) {                                                                               // 27
      this.cast = definition.cast;                                                                                     // 28
    }                                                                                                                  // 29
  }                                                                                                                    // 30
                                                                                                                       //
  Type.prototype.cast = function cast(value) {                                                                         //
    return value;                                                                                                      // 33
  };                                                                                                                   // 34
                                                                                                                       //
  Type.prototype.validate = function validate(doc, fieldName) {                                                        //
    return true;                                                                                                       // 37
  };                                                                                                                   // 38
                                                                                                                       //
  Type.create = function create(definition) {                                                                          //
    var type = new Type(definition);                                                                                   // 41
    this.types[type.name] = type;                                                                                      // 42
  };                                                                                                                   // 43
                                                                                                                       //
  Type.get = function get(name) {                                                                                      //
    return this.types[name];                                                                                           // 46
  };                                                                                                                   // 47
                                                                                                                       //
  Type.has = function has(name) {                                                                                      //
    return _.has(this.types, name);                                                                                    // 50
  };                                                                                                                   // 51
                                                                                                                       //
  Type.find = function find(Class) {                                                                                   //
    return _.find(this.types, function (type) {                                                                        // 54
      return type['class'].prototype === Class.prototype;                                                              // 55
    });                                                                                                                // 56
  };                                                                                                                   // 57
                                                                                                                       //
  return Type;                                                                                                         //
}();                                                                                                                   //
                                                                                                                       //
;                                                                                                                      // 58
                                                                                                                       //
Type.types = {};                                                                                                       // 60
                                                                                                                       //
module.export("default",exports.default=(Type));                                                                       // 62
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"class_events":{"from_json_value.js":["../utils/set_all.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/class_events/from_json_value.js                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var setAll;module.import('../utils/set_all.js',{"default":function(v){setAll=v}});                                     // 1
                                                                                                                       //
function fromJSONValue(e) {                                                                                            // 3
	var doc = e.currentTarget;                                                                                            // 4
	setAll(doc, EJSON.parse(e.json.values));                                                                              // 5
};                                                                                                                     // 6
                                                                                                                       //
module.export("default",exports.default=(fromJSONValue));                                                              // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"to_json_value.js":["../utils/get_all.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/class_events/to_json_value.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var getAll;module.import('../utils/get_all.js',{"default":function(v){getAll=v}});                                     // 1
                                                                                                                       //
function toJSONValue(e) {                                                                                              // 3
	var doc = e.currentTarget;                                                                                            // 4
	e.json.values = EJSON.stringify(getAll(doc));                                                                         // 5
};                                                                                                                     // 6
                                                                                                                       //
module.export("default",exports.default=(toJSONValue));                                                                // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"class_prototype_methods":{"get.js":["../utils/get_all.js","../utils/get_many.js","../utils/get_one.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/class_prototype_methods/get.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var getAll;module.import('../utils/get_all.js',{"default":function(v){getAll=v}});var getMany;module.import('../utils/get_many.js',{"default":function(v){getMany=v}});var getOne;module.import('../utils/get_one.js',{"default":function(v){getOne=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function get() {                                                                                                       // 5
	var doc = this;                                                                                                       // 6
	var args = arguments;                                                                                                 // 7
                                                                                                                       //
	if (args.length === 0) {                                                                                              // 9
		return getAll(doc);                                                                                                  // 10
	} else if (args.length === 1) {                                                                                       // 11
		if (args[0] instanceof Array) {                                                                                      // 13
			return getMany(doc, args[0]);                                                                                       // 14
		} else if (typeof args[0] === 'string') {                                                                            // 15
			return getOne(doc, args[0]);                                                                                        // 17
		}                                                                                                                    // 18
	}                                                                                                                     // 19
};                                                                                                                     // 20
                                                                                                                       //
module.export("default",exports.default=(get));                                                                        // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"raw.js":["../utils/raw_all.js","../utils/raw_many.js","../utils/raw_one.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/class_prototype_methods/raw.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var rawAll;module.import('../utils/raw_all.js',{"default":function(v){rawAll=v}});var rawMany;module.import('../utils/raw_many.js',{"default":function(v){rawMany=v}});var rawOne;module.import('../utils/raw_one.js',{"default":function(v){rawOne=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function raw() {                                                                                                       // 5
	var doc = this;                                                                                                       // 6
	var args = arguments;                                                                                                 // 7
                                                                                                                       //
	if (args.length === 0) {                                                                                              // 9
		return rawAll(doc);                                                                                                  // 10
	} else if (args.length === 1) {                                                                                       // 11
		if (args[0] instanceof Array) {                                                                                      // 13
			return rawMany(doc, args[0]);                                                                                       // 14
		} else if (typeof args[0] === 'string') {                                                                            // 15
			return rawOne(doc, args[0]);                                                                                        // 17
		}                                                                                                                    // 18
	}                                                                                                                     // 19
};                                                                                                                     // 20
                                                                                                                       //
module.export("default",exports.default=(raw));                                                                        // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"set.js":["lodash","../utils/set_many.js","../utils/set_one.js","../utils/cast_nested.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/class_prototype_methods/set.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var setMany;module.import('../utils/set_many.js',{"default":function(v){setMany=v}});var setOne;module.import('../utils/set_one.js',{"default":function(v){setOne=v}});var castNested;module.import('../utils/cast_nested.js',{"default":function(v){castNested=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       //
function set() {                                                                                                       // 6
  var doc = this;                                                                                                      // 7
  var args = arguments;                                                                                                // 8
  var options = {                                                                                                      // 9
    clone: true                                                                                                        // 10
  };                                                                                                                   // 9
                                                                                                                       //
  // Setting single field.                                                                                             //
  if (_.isString(args[0]) && args.length >= 2) {                                                                       // 14
    // The last argument is an options object.                                                                         //
    if (_.isObject(args[2])) {                                                                                         // 16
      _.extend(options, args[2]);                                                                                      // 17
    }                                                                                                                  // 18
    setOne(doc, args[0], args[1], options);                                                                            // 19
  } else if (_.isObject(args[0]) && args.length >= 1) {                                                                // 20
    // The last argument is an options object.                                                                         //
    if (_.isObject(args[1])) {                                                                                         // 23
      _.extend(options, args[1]);                                                                                      // 24
    }                                                                                                                  // 25
    setMany(doc, args[0], options);                                                                                    // 26
  }                                                                                                                    // 27
                                                                                                                       //
  // Cast nested documents.                                                                                            //
  castNested({                                                                                                         // 30
    doc: doc,                                                                                                          // 31
    options: {                                                                                                         // 32
      clone: options.clone                                                                                             // 33
    }                                                                                                                  // 32
  });                                                                                                                  // 30
};                                                                                                                     // 36
                                                                                                                       //
module.export("default",exports.default=(set));                                                                        // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"class_static_methods":{"get_field.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/class_static_methods/get_field.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function getField(fieldName) {                                                                                         // 1
	return this.schema.fields[fieldName];                                                                                 // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(getField));                                                                   // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"get_fields.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/class_static_methods/get_fields.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function getFields() {                                                                                                 // 3
	return _.values(this.schema.fields);                                                                                  // 4
};                                                                                                                     // 5
                                                                                                                       //
module.export("default",exports.default=(getFields));                                                                  // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_fields_names.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/class_static_methods/get_fields_names.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function getFieldsNames(options) {                                                                                     // 3
  // Prepare options.                                                                                                  //
  options = _.extend({                                                                                                 // 5
    transient: true,                                                                                                   // 6
    immutable: true                                                                                                    // 7
  }, options);                                                                                                         // 5
                                                                                                                       //
  var fieldsNames = [];                                                                                                // 10
  _.each(this.schema.fields, function (field, name) {                                                                  // 11
    // Don't get a transient field.                                                                                    //
    if (!options.transient && field.transient) {                                                                       // 13
      return;                                                                                                          // 14
    }                                                                                                                  // 15
    // Don't get an immutable field.                                                                                   //
    if (!options.immutable && field.immutable) {                                                                       // 17
      return;                                                                                                          // 18
    }                                                                                                                  // 19
    fieldsNames.push(name);                                                                                            // 20
  });                                                                                                                  // 21
                                                                                                                       //
  return fieldsNames;                                                                                                  // 23
};                                                                                                                     // 24
                                                                                                                       //
module.export("default",exports.default=(getFieldsNames));                                                             // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_list_fields.js":["lodash","../ListField",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/class_static_methods/get_list_fields.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var ListField;module.import('../ListField',{"default":function(v){ListField=v}});
                                                                                                                       //
                                                                                                                       // 3
                                                                                                                       //
function getListFields() {                                                                                             // 5
  var classOnly = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];                          // 5
                                                                                                                       //
  return _.filter(this.getFields(), function (field) {                                                                 // 6
    if (classOnly) {                                                                                                   // 7
      return field instanceof ListField && field.isClass;                                                              // 8
    }                                                                                                                  // 9
    return field instanceof ListField;                                                                                 // 10
  });                                                                                                                  // 11
};                                                                                                                     // 12
                                                                                                                       //
module.export("default",exports.default=(getListFields));                                                              // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_object_fields.js":["lodash","../ObjectField",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/class_static_methods/get_object_fields.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var ObjectField;module.import('../ObjectField',{"default":function(v){ObjectField=v}});
                                                                                                                       //
                                                                                                                       // 3
                                                                                                                       //
function getObjectFields() {                                                                                           // 5
	return _.filter(this.getFields(), function (field) {                                                                  // 6
		return field instanceof ObjectField;                                                                                 // 7
	});                                                                                                                   // 8
};                                                                                                                     // 9
                                                                                                                       //
module.export("default",exports.default=(getObjectFields));                                                            // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_scalar_fields.js":["lodash","../ScalarField",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/class_static_methods/get_scalar_fields.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var ScalarField;module.import('../ScalarField',{"default":function(v){ScalarField=v}});
                                                                                                                       //
                                                                                                                       // 3
                                                                                                                       //
function getScalarFields() {                                                                                           // 5
	return _.filter(this.getFields(), function (field) {                                                                  // 6
		return field instanceof ScalarField;                                                                                 // 7
	});                                                                                                                   // 8
};                                                                                                                     // 9
                                                                                                                       //
module.export("default",exports.default=(getScalarFields));                                                            // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"has_field.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/class_static_methods/has_field.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function hasField(fieldName) {                                                                                         // 3
	return _.has(this.schema.fields, fieldName);                                                                          // 4
};                                                                                                                     // 5
                                                                                                                       //
module.export("default",exports.default=(hasField));                                                                   // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"hooks":{"apply_definition.js":["lodash","../../core/utils/throw_parse_error.js","../type.js","../../../core/class.js","../ScalarField","../ObjectField","../ListField",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/hooks/apply_definition.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});var Type;module.import('../type.js',{"default":function(v){Type=v}});var AstroClass;module.import('../../../core/class.js',{"default":function(v){AstroClass=v}});var ScalarField;module.import('../ScalarField',{"default":function(v){ScalarField=v}});var ObjectField;module.import('../ObjectField',{"default":function(v){ObjectField=v}});var ListField;module.import('../ListField',{"default":function(v){ListField=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       //
function checkTypeExistence(type, className, fieldName) {                                                              // 9
  if (!type) {                                                                                                         // 10
    throwParseError([{                                                                                                 // 11
      'class': className                                                                                               // 12
    }, {                                                                                                               // 11
      'property': 'fields'                                                                                             // 14
    }, {                                                                                                               // 13
      'field': fieldName                                                                                               // 16
    }, 'Type does not exist']);                                                                                        // 15
  }                                                                                                                    // 20
}                                                                                                                      // 21
                                                                                                                       //
function onApplyDefinition(Class, parsedDefinition, className) {                                                       // 23
  _.each(parsedDefinition.fields, function (fieldDefinition, fieldName) {                                              // 24
    // Prepare field variable.                                                                                         //
    var field = void 0;                                                                                                // 26
    // List field.                                                                                                     //
    if (Match.test(fieldDefinition.type, Array)) {                                                                     // 28
      var type = Type.find(fieldDefinition.type[0]);                                                                   // 29
      checkTypeExistence(type, className, fieldDefinition.name);                                                       // 30
      if (AstroClass.isParentOf(type['class'])) {                                                                      // 31
        field = new ListField(_.extend({}, fieldDefinition, {                                                          // 32
          type: type                                                                                                   // 34
        }));                                                                                                           // 33
      } else {                                                                                                         // 37
        field = new ListField(_.extend({}, fieldDefinition, {                                                          // 39
          type: type                                                                                                   // 41
        }));                                                                                                           // 40
      }                                                                                                                // 44
    }                                                                                                                  // 45
    // Scalar or object field.                                                                                         //
    else {                                                                                                             // 28
        var _type = Type.find(fieldDefinition.type);                                                                   // 48
        checkTypeExistence(_type, className, fieldDefinition.name);                                                    // 49
        if (AstroClass.isParentOf(_type['class'])) {                                                                   // 50
          field = new ObjectField(_.extend({}, fieldDefinition, {                                                      // 51
            type: _type                                                                                                // 53
          }));                                                                                                         // 52
        } else {                                                                                                       // 56
          field = new ScalarField(_.extend({}, fieldDefinition, {                                                      // 58
            type: _type                                                                                                // 60
          }));                                                                                                         // 59
        }                                                                                                              // 63
      }                                                                                                                // 64
                                                                                                                       //
    // Add a field object to the fields list.                                                                          //
    Class.schema.fields[fieldName] = field;                                                                            // 67
    Class.schema.fieldsNames.push(fieldName);                                                                          // 68
  });                                                                                                                  // 69
}                                                                                                                      // 70
                                                                                                                       //
module.export("default",exports.default=(onApplyDefinition));                                                          // 72
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"init_class.js":["../class_static_methods/get_field.js","../class_static_methods/get_fields_names.js","../class_static_methods/get_fields.js","../class_static_methods/get_object_fields.js","../class_static_methods/get_list_fields.js","../class_static_methods/get_scalar_fields.js","../class_static_methods/has_field.js","../class_prototype_methods/get.js","../class_prototype_methods/raw.js","../class_prototype_methods/set.js","../class_events/from_json_value.js","../class_events/to_json_value.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/hooks/init_class.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var getField;module.import('../class_static_methods/get_field.js',{"default":function(v){getField=v}});var getFieldsNames;module.import('../class_static_methods/get_fields_names.js',{"default":function(v){getFieldsNames=v}});var getFields;module.import('../class_static_methods/get_fields.js',{"default":function(v){getFields=v}});var getObjectFields;module.import('../class_static_methods/get_object_fields.js',{"default":function(v){getObjectFields=v}});var getListFields;module.import('../class_static_methods/get_list_fields.js',{"default":function(v){getListFields=v}});var getScalarFields;module.import('../class_static_methods/get_scalar_fields.js',{"default":function(v){getScalarFields=v}});var hasField;module.import('../class_static_methods/has_field.js',{"default":function(v){hasField=v}});var get;module.import('../class_prototype_methods/get.js',{"default":function(v){get=v}});var raw;module.import('../class_prototype_methods/raw.js',{"default":function(v){raw=v}});var set;module.import('../class_prototype_methods/set.js',{"default":function(v){set=v}});var fromJSONValue;module.import('../class_events/from_json_value.js',{"default":function(v){fromJSONValue=v}});var toJSONValue;module.import('../class_events/to_json_value.js',{"default":function(v){toJSONValue=v}});// Class static methods.
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
// Class prototype methods.                                                                                            //
                                                                                                                       // 10
                                                                                                                       // 11
                                                                                                                       // 12
// Class events.                                                                                                       //
                                                                                                                       // 14
                                                                                                                       // 15
                                                                                                                       //
function onInitClass(Class, className) {                                                                               // 17
  // Class static methods.                                                                                             //
  Class.getField = getField;                                                                                           // 19
  Class.getFieldsNames = getFieldsNames;                                                                               // 20
  Class.getFields = getFields;                                                                                         // 21
  Class.getObjectFields = getObjectFields;                                                                             // 22
  Class.getListFields = getListFields;                                                                                 // 23
  Class.getScalarFields = getScalarFields;                                                                             // 24
  Class.hasField = hasField;                                                                                           // 25
  // Class prototype methods.                                                                                          //
  Class.prototype.get = get;                                                                                           // 27
  Class.prototype.raw = raw;                                                                                           // 28
  Class.prototype.set = set;                                                                                           // 29
  // Class events.                                                                                                     //
  Class.extend({                                                                                                       // 31
    events: {                                                                                                          // 32
      fromJSONValue: fromJSONValue,                                                                                    // 33
      toJSONValue: toJSONValue                                                                                         // 34
    }                                                                                                                  // 32
  }, ['events']);                                                                                                      // 31
};                                                                                                                     // 37
                                                                                                                       //
module.export("default",exports.default=(onInitClass));                                                                // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"init_definition.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/hooks/init_definition.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function onInitDefinition(definition, className) {                                                                     // 1
	definition.fields = {};                                                                                               // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(onInitDefinition));                                                           // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"init_schema.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/hooks/init_schema.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function onInitSchema(schema, className) {                                                                             // 1
  schema.fields = {};                                                                                                  // 2
  schema.fieldsNames = [];                                                                                             // 3
};                                                                                                                     // 4
                                                                                                                       //
module.export("default",exports.default=(onInitSchema));                                                               // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"merge_definitions.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/hooks/merge_definitions.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function onMergeDefinitions(targetDefinition, sourceDefinition, className) {                                           // 3
  _.each(sourceDefinition.fields, function (fieldDefinition, fieldName) {                                              // 4
    targetDefinition.fields[fieldName] = fieldDefinition;                                                              // 5
  });                                                                                                                  // 6
};                                                                                                                     // 7
                                                                                                                       //
module.export("default",exports.default=(onMergeDefinitions));                                                         // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"parse_definition.js":["lodash","../../core/utils/throw_parse_error.js","../../../core/class.js","../type.js","../../../core/reserved_keywords.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/hooks/parse_definition.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});var Class;module.import('../../../core/class.js',{"default":function(v){Class=v}});var Type;module.import('../type.js',{"default":function(v){Type=v}});var reservedKeywords;module.import('../../../core/reserved_keywords.js',{"default":function(v){reservedKeywords=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       //
var typePattern = Match.OneOf(Function, [Function]);                                                                   // 7
                                                                                                                       //
function onParseDefinition(parsedDefinition, definition, className) {                                                  // 9
	if (definition.fields === undefined) {                                                                                // 10
		return;                                                                                                              // 11
	}                                                                                                                     // 12
                                                                                                                       //
	// Fields definition has to be an object.                                                                             //
	if (!Match.test(definition.fields, Object)) {                                                                         // 15
		throwParseError([{                                                                                                   // 16
			'class': className                                                                                                  // 17
		}, {                                                                                                                 // 16
			'property': 'fields'                                                                                                // 19
		}, 'Fields definition has to be an object']);                                                                        // 18
	}                                                                                                                     // 23
                                                                                                                       //
	_.each(definition.fields, function (fieldDefinition, fieldName) {                                                     // 25
		if (Match.test(fieldDefinition, typePattern)) {                                                                      // 26
			fieldDefinition = {                                                                                                 // 27
				name: fieldName,                                                                                                   // 28
				type: fieldDefinition                                                                                              // 29
			};                                                                                                                  // 27
		} else if (Match.test(fieldDefinition, Object)) {                                                                    // 31
			fieldDefinition = _.extend(fieldDefinition, {                                                                       // 33
				name: fieldName                                                                                                    // 34
			});                                                                                                                 // 33
		} else {                                                                                                             // 36
			throwParseError([{                                                                                                  // 38
				'class': className                                                                                                 // 39
			}, {                                                                                                                // 38
				'property': 'fields'                                                                                               // 41
			}, {                                                                                                                // 40
				'field': fieldName                                                                                                 // 43
			}, 'Field definition has to be an object or type']);                                                                // 42
		}                                                                                                                    // 47
                                                                                                                       //
		// Check if a field name is not reserved keyword.                                                                    //
		if (_.includes(reservedKeywords, fieldName)) {                                                                       // 50
			throwParseError([{                                                                                                  // 51
				'class': className                                                                                                 // 52
			}, {                                                                                                                // 51
				'method': fieldName                                                                                                // 54
			}, 'Reserved keyword']);                                                                                            // 53
		}                                                                                                                    // 58
                                                                                                                       //
		parsedDefinition.fields[fieldDefinition.name] = fieldDefinition;                                                     // 60
	});                                                                                                                   // 61
};                                                                                                                     // 62
                                                                                                                       //
module.export("default",exports.default=(onParseDefinition));                                                          // 64
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"types":{"boolean.js":["../type.js","../../validators/validators.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/types/boolean.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Type;module.import('../type.js',{"default":function(v){Type=v}});var Validators;module.import('../../validators/validators.js',{"default":function(v){Validators=v}});
                                                                                                                       // 2
                                                                                                                       //
Type.create({                                                                                                          // 4
  name: 'Boolean',                                                                                                     // 5
  'class': Boolean,                                                                                                    // 6
  cast: function cast(value) {                                                                                         // 7
    if (_.isString(value) && value.toLowerCase() === 'false' || value === '0') {                                       // 8
      return false;                                                                                                    // 9
    }                                                                                                                  // 10
    return Boolean(value);                                                                                             // 11
  },                                                                                                                   // 12
  validate: function validate(args) {                                                                                  // 13
    Validators.boolean(args);                                                                                          // 14
  }                                                                                                                    // 15
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"date.js":["lodash","../type.js","../../validators/validators.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/types/date.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Type;module.import('../type.js',{"default":function(v){Type=v}});var Validators;module.import('../../validators/validators.js',{"default":function(v){Validators=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
Type.create({                                                                                                          // 5
  name: 'Date',                                                                                                        // 6
  'class': Date,                                                                                                       // 7
  cast: function cast(value) {                                                                                         // 8
    return new Date(value);                                                                                            // 9
  },                                                                                                                   // 10
  validate: function validate(args) {                                                                                  // 11
    Validators.date(args);                                                                                             // 12
  }                                                                                                                    // 13
});                                                                                                                    // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"mongo_object_id.js":["../type.js","../../validators/validators.js","meteor/mongo",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/types/mongo_object_id.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Type;module.import('../type.js',{"default":function(v){Type=v}});var Validators;module.import('../../validators/validators.js',{"default":function(v){Validators=v}});var Mongo;module.import('meteor/mongo',{"Mongo":function(v){Mongo=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
Type.create({                                                                                                          // 5
  name: 'MongoObjectID',                                                                                               // 6
  'class': Mongo.ObjectID,                                                                                             // 7
  validate: function validate(args) {                                                                                  // 8
    Validators.mongoObjectID(args);                                                                                    // 9
  }                                                                                                                    // 10
});                                                                                                                    // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"number.js":["../type.js","../../validators/validators.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/types/number.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Type;module.import('../type.js',{"default":function(v){Type=v}});var Validators;module.import('../../validators/validators.js',{"default":function(v){Validators=v}});
                                                                                                                       // 2
                                                                                                                       //
Type.create({                                                                                                          // 4
  name: 'Number',                                                                                                      // 5
  'class': Number,                                                                                                     // 6
  cast: function cast(value) {                                                                                         // 7
    return Number(value);                                                                                              // 8
  },                                                                                                                   // 9
  validate: function validate(args) {                                                                                  // 10
    Validators.number(args);                                                                                           // 11
  }                                                                                                                    // 12
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"object.js":["../type.js","../../validators/validators.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/types/object.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Type;module.import('../type.js',{"default":function(v){Type=v}});var Validators;module.import('../../validators/validators.js',{"default":function(v){Validators=v}});
                                                                                                                       // 2
                                                                                                                       //
Type.create({                                                                                                          // 4
  name: 'Object',                                                                                                      // 5
  'class': Object,                                                                                                     // 6
  validate: function validate(args) {                                                                                  // 7
    Validators.object(args);                                                                                           // 8
  }                                                                                                                    // 9
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"string.js":["../type.js","../../validators/validators.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/types/string.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Type;module.import('../type.js',{"default":function(v){Type=v}});var Validators;module.import('../../validators/validators.js',{"default":function(v){Validators=v}});
                                                                                                                       // 2
                                                                                                                       //
Type.create({                                                                                                          // 4
  name: 'String',                                                                                                      // 5
  'class': String,                                                                                                     // 6
  cast: function cast(value) {                                                                                         // 7
    return String(value);                                                                                              // 8
  },                                                                                                                   // 9
  validate: function validate(args) {                                                                                  // 10
    Validators.string(args);                                                                                           // 11
  }                                                                                                                    // 12
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"utils":{"castToClass.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/utils/castToClass.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function castToClass() {                                                                                               // 1
  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 1
  var Class = args.Class;                                                                                              // 1
  var rawDoc = args.rawDoc;                                                                                            // 1
  var options = args.options;                                                                                          // 1
  // If the class has a type field, then we have to check if we are                                                    //
  // casting to some of the nested classes.                                                                            //
                                                                                                                       //
  var typeField = Class.getTypeField();                                                                                // 9
  if (typeField) {                                                                                                     // 10
    var ChildClass = Class.get(rawDoc[typeField]);                                                                     // 11
    if (ChildClass && ChildClass.isChildOf(Class)) {                                                                   // 12
      return new ChildClass(rawDoc, options);                                                                          // 13
    }                                                                                                                  // 14
  }                                                                                                                    // 15
  return new Class(rawDoc, options);                                                                                   // 16
};                                                                                                                     // 17
                                                                                                                       //
module.export("default",exports.default=(castToClass));                                                                // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cast_nested.js":["lodash","../../../core/class.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/utils/cast_nested.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var AstroClass;module.import('../../../core/class.js',{"default":function(v){AstroClass=v}});
                                                                                                                       // 2
                                                                                                                       //
function createDocument(Class, rawDoc, options) {                                                                      // 4
  // If a nested field has a type field, then we have to check if we are                                               //
  // casting to some of the nested classes.                                                                            //
  var typeField = Class.getTypeField();                                                                                // 7
  if (typeField) {                                                                                                     // 8
    var ChildClass = AstroClass.get(rawDoc[typeField]);                                                                // 9
    if (ChildClass && ChildClass.isChildOf(Class)) {                                                                   // 10
      return new ChildClass(rawDoc);                                                                                   // 11
    }                                                                                                                  // 12
  }                                                                                                                    // 13
  return new Class(rawDoc, options);                                                                                   // 14
};                                                                                                                     // 15
                                                                                                                       //
function castNested() {                                                                                                // 17
  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 17
  var doc = args.doc;                                                                                                  // 17
  var options = args.options;                                                                                          // 17
                                                                                                                       //
  _.defaults(options, {                                                                                                // 22
    clone: true                                                                                                        // 23
  });                                                                                                                  // 22
  var Class = doc.constructor;                                                                                         // 25
                                                                                                                       //
  _.each(Class.getObjectFields(), function (field) {                                                                   // 27
    var value = doc[field.name];                                                                                       // 28
    // If field value is empty then go to the next one.                                                                //
    if (_.isNil(value)) {                                                                                              // 30
      return;                                                                                                          // 31
    }                                                                                                                  // 32
    var NestedClass = field.type['class'];                                                                             // 33
    if (!(value instanceof NestedClass)) {                                                                             // 34
      if (!_.isPlainObject(value)) {                                                                                   // 35
        return;                                                                                                        // 36
      }                                                                                                                // 37
      doc[field.name] = createDocument(NestedClass, value, options);                                                   // 38
    }                                                                                                                  // 39
  });                                                                                                                  // 40
                                                                                                                       //
  _.each(Class.getListFields(), function (field) {                                                                     // 42
    var value = doc[field.name];                                                                                       // 43
    // If field value is empty then go to the next one.                                                                //
    if (!_.isArray(value) || !field.isClass) {                                                                         // 45
      return;                                                                                                          // 46
    }                                                                                                                  // 47
    var NestedClass = field.type['class'];                                                                             // 48
    _.each(value, function (element, index) {                                                                          // 49
      if (!(element instanceof NestedClass)) {                                                                         // 50
        if (!_.isPlainObject(element)) {                                                                               // 51
          return;                                                                                                      // 52
        }                                                                                                              // 53
        value[index] = createDocument(NestedClass, element, options);                                                  // 54
      }                                                                                                                // 55
    });                                                                                                                // 56
  });                                                                                                                  // 57
};                                                                                                                     // 58
                                                                                                                       //
module.export("default",exports.default=(castNested));                                                                 // 60
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_all.js":["./get_many.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/utils/get_all.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var getMany;module.import('./get_many.js',{"default":function(v){getMany=v}});                                         // 1
                                                                                                                       //
function getAll(doc, options) {                                                                                        // 3
	var Class = doc.constructor;                                                                                          // 4
                                                                                                                       //
	// Get list of fields and their values.                                                                               //
	return getMany(doc, Class.getFieldsNames(), options);                                                                 // 7
};                                                                                                                     // 8
                                                                                                                       //
module.export("default",exports.default=(getAll));                                                                     // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_many.js":["lodash","./get_one.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/utils/get_many.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var getOne;module.import('./get_one.js',{"default":function(v){getOne=v}});
                                                                                                                       // 2
                                                                                                                       //
function getMany(doc, fieldNames, options) {                                                                           // 4
	var values = {};                                                                                                      // 5
                                                                                                                       //
	_.each(fieldNames, function (fieldName) {                                                                             // 7
		var fieldValue = getOne(doc, fieldName, options);                                                                    // 8
		if (fieldValue !== undefined) {                                                                                      // 9
			values[fieldName] = fieldValue;                                                                                     // 10
		}                                                                                                                    // 11
	});                                                                                                                   // 12
                                                                                                                       //
	return values;                                                                                                        // 14
};                                                                                                                     // 15
                                                                                                                       //
module.export("default",exports.default=(getMany));                                                                    // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_one.js":["lodash","../utils/traverse.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/utils/get_one.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var traverse;module.import('../utils/traverse.js',{"default":function(v){traverse=v}});
                                                                                                                       // 2
                                                                                                                       //
function getOne(doc, fieldPattern, options) {                                                                          // 4
	// Prepare options.                                                                                                   //
	options = _.extend({                                                                                                  // 6
		transient: true,                                                                                                     // 7
		immutable: true                                                                                                      // 8
	}, options);                                                                                                          // 6
                                                                                                                       //
	return traverse(doc, fieldPattern, function (nestedDoc, nestedFieldName, field) {                                     // 11
		// If a field does not exist than we don't return anything.                                                          //
		if (!field) {                                                                                                        // 15
			return;                                                                                                             // 16
		}                                                                                                                    // 17
                                                                                                                       //
		// Don't get a transient field.                                                                                      //
		if (!options.transient && field.transient) {                                                                         // 20
			return;                                                                                                             // 21
		}                                                                                                                    // 22
                                                                                                                       //
		// Don't get an immutable field.                                                                                     //
		if (!options.immutable && field.immutable) {                                                                         // 25
			return;                                                                                                             // 26
		}                                                                                                                    // 27
                                                                                                                       //
		// Just return a value.                                                                                              //
		return nestedDoc[nestedFieldName];                                                                                   // 30
	});                                                                                                                   // 31
};                                                                                                                     // 33
                                                                                                                       //
module.export("default",exports.default=(getOne));                                                                     // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"is_nested_field_name.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/utils/is_nested_field_name.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function isNestedFieldName(fieldPattern) {                                                                             // 1
  return fieldPattern.indexOf('.') !== -1;                                                                             // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(isNestedFieldName));                                                          // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"raw_all.js":["./raw_many.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/utils/raw_all.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var rawMany;module.import('./raw_many.js',{"default":function(v){rawMany=v}});                                         // 1
                                                                                                                       //
function rawAll(doc, options) {                                                                                        // 3
	var Class = doc.constructor;                                                                                          // 4
                                                                                                                       //
	// Get list of fields and their values.                                                                               //
	return rawMany(doc, Class.getFieldsNames(options), options);                                                          // 7
};                                                                                                                     // 8
                                                                                                                       //
module.export("default",exports.default=(rawAll));                                                                     // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"raw_many.js":["lodash","./raw_one.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/utils/raw_many.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var rawOne;module.import('./raw_one.js',{"default":function(v){rawOne=v}});
                                                                                                                       // 2
                                                                                                                       //
function rawMany(doc, fieldNames, options) {                                                                           // 4
  var values = {};                                                                                                     // 5
                                                                                                                       //
  _.each(fieldNames, function (fieldName) {                                                                            // 7
    values[fieldName] = rawOne(doc, fieldName, options);                                                               // 8
  });                                                                                                                  // 9
                                                                                                                       //
  return values;                                                                                                       // 11
};                                                                                                                     // 12
                                                                                                                       //
module.export("default",exports.default=(rawMany));                                                                    // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"raw_one.js":["lodash","../../../core/class.js","./traverse.js","./raw_all.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/utils/raw_one.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var AstroClass;module.import('../../../core/class.js',{"default":function(v){AstroClass=v}});var traverse;module.import('./traverse.js',{"default":function(v){traverse=v}});var rawAll;module.import('./raw_all.js',{"default":function(v){rawAll=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       //
function rawOne(doc, fieldPattern, options) {                                                                          // 6
	// Prepare options.                                                                                                   //
	options = _.extend({                                                                                                  // 8
		transient: true,                                                                                                     // 9
		immutable: true                                                                                                      // 10
	}, options);                                                                                                          // 8
                                                                                                                       //
	return traverse(doc, fieldPattern, function (nestedDoc, nestedFieldName, field) {                                     // 13
		// If a field does not exist than we don't return anything.                                                          //
		if (!field) {                                                                                                        // 17
			return;                                                                                                             // 18
		}                                                                                                                    // 19
                                                                                                                       //
		// Don't get a transient field.                                                                                      //
		if (!options.transient && field.transient) {                                                                         // 22
			return;                                                                                                             // 23
		}                                                                                                                    // 24
                                                                                                                       //
		// Don't get an immutable field.                                                                                     //
		if (!options.immutable && field.immutable) {                                                                         // 27
			return;                                                                                                             // 28
		}                                                                                                                    // 29
                                                                                                                       //
		// Get a value to be returned.                                                                                       //
		var fieldValue = nestedDoc[nestedFieldName];                                                                         // 32
                                                                                                                       //
		if (fieldValue instanceof AstroClass) {                                                                              // 34
			return rawAll(fieldValue, options);                                                                                 // 35
		} else if (_.isArray(fieldValue)) {                                                                                  // 36
			return _.map(fieldValue, function (element) {                                                                       // 38
				if (element instanceof AstroClass) {                                                                               // 39
					return rawAll(element, options);                                                                                  // 40
				} else {                                                                                                           // 41
					return element;                                                                                                   // 43
				}                                                                                                                  // 44
			});                                                                                                                 // 45
		} else {                                                                                                             // 46
			return fieldValue;                                                                                                  // 48
		}                                                                                                                    // 49
	});                                                                                                                   // 50
};                                                                                                                     // 52
                                                                                                                       //
module.export("default",exports.default=(rawOne));                                                                     // 54
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"resolve_values.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/utils/resolve_values.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function resolveValues(args) {                                                                                         // 3
  var Class = args.Class;                                                                                              // 3
  var values = args.values;                                                                                            // 3
                                                                                                                       //
  var fields = Class.getFields();                                                                                      // 8
  var resolvedValues = {};                                                                                             // 9
  _.each(fields, function (field) {                                                                                    // 10
    resolvedValues[field.name] = field.resolveValue(values);                                                           // 11
  });                                                                                                                  // 12
  return resolvedValues;                                                                                               // 13
};                                                                                                                     // 14
                                                                                                                       //
module.export("default",exports.default=(resolveValues));                                                              // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"set_all.js":["lodash","./set_one.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/utils/set_all.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var setOne;module.import('./set_one.js',{"default":function(v){setOne=v}});
                                                                                                                       // 2
                                                                                                                       //
function setAll(doc, fieldsValues) {                                                                                   // 4
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];                               // 4
                                                                                                                       //
  _.defaults(options, {                                                                                                // 5
    clone: true                                                                                                        // 6
  });                                                                                                                  // 5
  var Class = doc.constructor;                                                                                         // 8
                                                                                                                       //
  // Get names of the fields that are not present in the fieldsValues variable.                                        //
  var fieldsNames = _.difference(Class.getFieldsNames(), _.keys(fieldsValues));                                        // 11
                                                                                                                       //
  _.each(fieldsNames, function (fieldName) {                                                                           // 13
    setOne(doc, fieldName, undefined, options);                                                                        // 14
  });                                                                                                                  // 15
                                                                                                                       //
  _.forOwn(fieldsValues, function (fieldValue, fieldName) {                                                            // 17
    setOne(doc, fieldName, fieldValue, options);                                                                       // 18
  });                                                                                                                  // 19
};                                                                                                                     // 20
                                                                                                                       //
module.export("default",exports.default=(setAll));                                                                     // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"set_defaults.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/utils/set_defaults.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function setDefaults() {                                                                                               // 3
  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 3
  var doc = args.doc;                                                                                                  // 3
                                                                                                                       //
  var Class = doc.constructor;                                                                                         // 7
                                                                                                                       //
  _.each(Class.getFields(), function (field) {                                                                         // 9
    var value = doc[field.name];                                                                                       // 10
    if (value === undefined) {                                                                                         // 11
      doc[field.name] = field.getDefault();                                                                            // 12
    }                                                                                                                  // 13
  });                                                                                                                  // 14
}                                                                                                                      // 15
                                                                                                                       //
module.export("default",exports.default=(setDefaults));                                                                // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"set_many.js":["lodash","./set_one.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/utils/set_many.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var setOne;module.import('./set_one.js',{"default":function(v){setOne=v}});
                                                                                                                       // 2
                                                                                                                       //
function setMany(doc, fieldsValues) {                                                                                  // 4
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];                               // 4
                                                                                                                       //
  _.defaults(options, {                                                                                                // 5
    clone: true                                                                                                        // 6
  });                                                                                                                  // 5
                                                                                                                       //
  // Set multiple fields.                                                                                              //
  _.forOwn(fieldsValues, function (setValue, fieldName) {                                                              // 10
    setOne(doc, fieldName, setValue, options);                                                                         // 11
  });                                                                                                                  // 12
};                                                                                                                     // 13
                                                                                                                       //
module.export("default",exports.default=(setMany));                                                                    // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"set_one.js":["lodash","meteor/ejson","../utils/traverse.js","../../core/utils/warn.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/utils/set_one.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var EJSON;module.import('meteor/ejson',{"EJSON":function(v){EJSON=v}});var traverse;module.import('../utils/traverse.js',{"default":function(v){traverse=v}});var warn;module.import('../../core/utils/warn.js',{"default":function(v){warn=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       //
function setOne(doc, fieldPattern, fieldValue) {                                                                       // 6
  var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];                               // 6
                                                                                                                       //
  _.defaults(options, {                                                                                                // 7
    clone: true                                                                                                        // 8
  });                                                                                                                  // 7
                                                                                                                       //
  if (options.clone && _.isObject(fieldValue)) {                                                                       // 11
    fieldValue = EJSON.clone(fieldValue);                                                                              // 12
  }                                                                                                                    // 13
                                                                                                                       //
  return traverse(doc, fieldPattern, function (nestedDoc, nestedFieldName, field) {                                    // 15
    // If a field does not exist than we don't return anything.                                                        //
    if (!field) {                                                                                                      // 19
      var Class = doc.constructor;                                                                                     // 20
      warn('["' + Class.getName() + '" class]["' + fieldPattern + '" field] ' + 'Trying to set a value of the field that does not exist in the class');
      return;                                                                                                          // 25
    }                                                                                                                  // 26
                                                                                                                       //
    nestedDoc[nestedFieldName] = fieldValue;                                                                           // 28
  });                                                                                                                  // 29
};                                                                                                                     // 31
                                                                                                                       //
module.export("default",exports.default=(setOne));                                                                     // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"traverse.js":["lodash","./is_nested_field_name.js","../../../core/class.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/fields/utils/traverse.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var isNestedFieldName;module.import('./is_nested_field_name.js',{"default":function(v){isNestedFieldName=v}});var AstroClass;module.import('../../../core/class.js',{"default":function(v){AstroClass=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function traverse(doc, name, callback) {                                                                               // 5
  if (!doc) {                                                                                                          // 6
    return;                                                                                                            // 7
  }                                                                                                                    // 8
                                                                                                                       //
  var Class = void 0;                                                                                                  // 10
  var field = void 0;                                                                                                  // 11
                                                                                                                       //
  // Check whether the given field name is a nested field name.                                                        //
  if (!isNestedFieldName(name)) {                                                                                      // 14
    // Get a class.                                                                                                    //
    var _Class = doc.constructor;                                                                                      // 16
    // Get a field definition.                                                                                         //
    var _field = _Class.getField(name);                                                                                // 18
    // Execute the callback function passing the last nested document, the last                                        //
    // segment name and a field object.                                                                                //
    return callback(doc, name, _field);                                                                                // 21
  }                                                                                                                    // 22
                                                                                                                       //
  // Split the nested field pattern name by the "." character.                                                         //
  var segments = name.split('.');                                                                                      // 25
  // Get the last and one before the last index.                                                                       //
  var lastIndex = segments.length - 1;                                                                                 // 27
                                                                                                                       //
  // Traverse nested fields until reaching the last one from the pattern.                                              //
  var next = function next(nestedDoc, segmentIndex) {                                                                  // 30
    segmentIndex = segmentIndex || 0;                                                                                  // 31
    // Get a nested field name under the given index.                                                                  //
    var segment = segments[segmentIndex];                                                                              // 33
    // Check if a nested document is an instance of the Astronomy class and get                                        //
    // a field object for a given field name;                                                                          //
    if (nestedDoc instanceof AstroClass) {                                                                             // 36
      // Get a class for of a nested document.                                                                         //
      Class = nestedDoc.constructor;                                                                                   // 38
      // Get a field object from the nested class.                                                                     //
      field = Class.getField(segment);                                                                                 // 40
    }                                                                                                                  // 41
    if (segmentIndex === lastIndex) {                                                                                  // 42
      // Execute the callback function, if we reached the last nested document.                                        //
      return callback(nestedDoc, segment, field);                                                                      // 44
    } else if (_.isObject(nestedDoc[segment])) {                                                                       // 45
      // Go deeper if a value of the current nested document is an object.                                             //
      return next(nestedDoc[segment], segmentIndex + 1);                                                               // 48
    }                                                                                                                  // 49
  };                                                                                                                   // 50
                                                                                                                       //
  // Start traversing nested fields.                                                                                   //
  return next(doc);                                                                                                    // 53
};                                                                                                                     // 54
                                                                                                                       //
module.export("default",exports.default=(traverse));                                                                   // 56
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"indexes":{"module.js":["../../core/module.js","./hooks/init_schema.js","./hooks/init_definition.js","./hooks/parse_definition.js","./hooks/merge_definitions.js","./hooks/apply_definition.js","./hooks/init_class.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/indexes/module.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Module;module.import('../../core/module.js',{"default":function(v){Module=v}});var onInitSchema;module.import('./hooks/init_schema.js',{"default":function(v){onInitSchema=v}});var onInitDefinition;module.import('./hooks/init_definition.js',{"default":function(v){onInitDefinition=v}});var onParseDefinition;module.import('./hooks/parse_definition.js',{"default":function(v){onParseDefinition=v}});var onMergeDefinitions;module.import('./hooks/merge_definitions.js',{"default":function(v){onMergeDefinitions=v}});var onApplyDefinition;module.import('./hooks/apply_definition.js',{"default":function(v){onApplyDefinition=v}});var onInitClass;module.import('./hooks/init_class.js',{"default":function(v){onInitClass=v}});
// Hooks.                                                                                                              //
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
                                                                                                                       //
Module.create({                                                                                                        // 10
	name: 'indexes',                                                                                                      // 11
	onInitSchema: onInitSchema,                                                                                           // 12
	onInitDefinition: onInitDefinition,                                                                                   // 13
	onParseDefinition: onParseDefinition,                                                                                 // 14
	onMergeDefinitions: onMergeDefinitions,                                                                               // 15
	onApplyDefinition: onApplyDefinition,                                                                                 // 16
	onInitClass: onInitClass                                                                                              // 17
});                                                                                                                    // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"class_static_methods":{"get_index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/indexes/class_static_methods/get_index.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function getIndex(indexName) {                                                                                         // 1
	return this.schema.indexes[indexName];                                                                                // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(getIndex));                                                                   // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"get_indexes.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/indexes/class_static_methods/get_indexes.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function getIndexes() {                                                                                                // 1
	return this.schema.indexes;                                                                                           // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(getIndexes));                                                                 // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"has_index.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/indexes/class_static_methods/has_index.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function hasIndex(indexName) {                                                                                         // 3
	return _.has(this.schema.indexes, indexName);                                                                         // 4
};                                                                                                                     // 5
                                                                                                                       //
module.export("default",exports.default=(hasIndex));                                                                   // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"hooks":{"apply_definition.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/indexes/hooks/apply_definition.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function onApplyDefinition(Class, parsedDefinition, className) {                                                       // 3
	var Collection = Class.getCollection();                                                                               // 4
                                                                                                                       //
	if (!Meteor.isServer || !Collection || Collection && !Collection._connection) {                                       // 6
		return;                                                                                                              // 11
	}                                                                                                                     // 12
                                                                                                                       //
	var schema = Class.schema;                                                                                            // 14
                                                                                                                       //
	function prefixIndexes(indexes, fieldName) {                                                                          // 16
		// Prefix the fields property.                                                                                       //
		_.each(indexes, function (index, indexName) {                                                                        // 18
			index.fields = _.mapKeys(index.fields, function (value, key) {                                                      // 19
				return fieldName + '.' + key;                                                                                      // 20
			});                                                                                                                 // 21
			_.extend(index.options, {                                                                                           // 22
				name: fieldName + '.' + indexName                                                                                  // 23
			});                                                                                                                 // 22
		});                                                                                                                  // 25
		// Prefix object keys.                                                                                               //
		indexes = _.mapKeys(indexes, function (index, indexName) {                                                           // 27
			return fieldName + '.' + indexName;                                                                                 // 28
		});                                                                                                                  // 29
		return indexes;                                                                                                      // 30
	}                                                                                                                     // 31
                                                                                                                       //
	// Add indexes to the collection from nested classes.                                                                 //
	function collectNestedIndexes(Class) {                                                                                // 34
		var indexes = {};                                                                                                    // 35
		var fields = _.concat(Class.getObjectFields(), Class.getListFields(true));                                           // 36
		_.each(fields, function (field) {                                                                                    // 39
			_.extend(indexes, prefixIndexes(field.type['class'].definition.indexes, field.name), prefixIndexes(collectNestedIndexes(field.type['class']), field.name));
		});                                                                                                                  // 45
		return indexes;                                                                                                      // 46
	}                                                                                                                     // 47
                                                                                                                       //
	var indexes = _.extend({}, parsedDefinition.indexes, collectNestedIndexes(Class));                                    // 49
                                                                                                                       //
	_.each(indexes, function (index, indexName) {                                                                         // 55
		schema.indexes[indexName] = index;                                                                                   // 56
		Collection._ensureIndex(index.fields, index.options);                                                                // 57
	});                                                                                                                   // 58
};                                                                                                                     // 59
                                                                                                                       //
module.export("default",exports.default=(onApplyDefinition));                                                          // 61
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"init_class.js":["../class_static_methods/get_index.js","../class_static_methods/get_indexes.js","../class_static_methods/has_index.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/indexes/hooks/init_class.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var getIndex;module.import('../class_static_methods/get_index.js',{"default":function(v){getIndex=v}});var getIndexes;module.import('../class_static_methods/get_indexes.js',{"default":function(v){getIndexes=v}});var hasIndex;module.import('../class_static_methods/has_index.js',{"default":function(v){hasIndex=v}});// Class static methods.
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       //
function onInitClass(Class, className) {                                                                               // 6
	// Class static methods.                                                                                              //
	Class.getIndex = getIndex;                                                                                            // 8
	Class.getIndexes = getIndexes;                                                                                        // 9
	Class.hasIndex = hasIndex;                                                                                            // 10
};                                                                                                                     // 11
                                                                                                                       //
module.export("default",exports.default=(onInitClass));                                                                // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"init_definition.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/indexes/hooks/init_definition.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function onInitDefinition(definition, className) {                                                                     // 1
	definition.indexes = {};                                                                                              // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(onInitDefinition));                                                           // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"init_schema.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/indexes/hooks/init_schema.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function onInitSchema(schema, className) {                                                                             // 1
	schema.indexes = {};                                                                                                  // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(onInitSchema));                                                               // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"merge_definitions.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/indexes/hooks/merge_definitions.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {                                           // 3
	_.each(sourceDefinition.indexes, function (index, indexName) {                                                        // 4
		targetDefinition.indexes[indexName] = index;                                                                         // 5
	});                                                                                                                   // 6
};                                                                                                                     // 7
                                                                                                                       //
module.export("default",exports.default=(onMergeDefinitions));                                                         // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"parse_definition.js":["lodash","../../core/utils/throw_parse_error.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/indexes/hooks/parse_definition.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});
                                                                                                                       // 2
                                                                                                                       //
var fieldDefinitionPattern = Match.ObjectIncluding({                                                                   // 4
	index: Match.OneOf(1, -1, String)                                                                                     // 5
});                                                                                                                    // 4
                                                                                                                       //
function onParseDefinition(parsedDefinition, definition, className) {                                                  // 8
	// Check existence and validity of the "indexes" property.                                                            //
	if (definition.indexes !== undefined) {                                                                               // 10
		_.each(definition.indexes, function (index, indexName) {                                                             // 11
			if (!Match.test(index, Object)) {                                                                                   // 12
				throwParseError([{                                                                                                 // 13
					'class': className                                                                                                // 14
				}, {                                                                                                               // 13
					'index': indexName                                                                                                // 16
				}, 'Indexes definition has to be an object']);                                                                     // 15
			}                                                                                                                   // 20
			index = {                                                                                                           // 21
				fields: index.fields,                                                                                              // 22
				options: index.options || {}                                                                                       // 23
			};                                                                                                                  // 21
			index.options.name = index.options.name || indexName;                                                               // 25
			parsedDefinition.indexes[indexName] = index;                                                                        // 26
		});                                                                                                                  // 27
	}                                                                                                                     // 28
                                                                                                                       //
	if (definition.fields !== undefined) {                                                                                // 30
		_.each(definition.fields, function (fieldDefinition, fieldName) {                                                    // 31
			// Stop if a field definition does not contain index information.                                                   //
			if (!Match.test(fieldDefinition, fieldDefinitionPattern)) {                                                         // 33
				return;                                                                                                            // 34
			}                                                                                                                   // 35
			// Prepare an index definition.                                                                                     //
			var indexDefinition = {                                                                                             // 37
				fields: {},                                                                                                        // 38
				options: {                                                                                                         // 39
					name: fieldName                                                                                                   // 40
				}                                                                                                                  // 39
			};                                                                                                                  // 37
			indexDefinition.fields[fieldName] = fieldDefinition.index;                                                          // 43
			parsedDefinition.indexes[fieldName] = indexDefinition;                                                              // 44
		});                                                                                                                  // 45
	}                                                                                                                     // 46
};                                                                                                                     // 47
                                                                                                                       //
module.export("default",exports.default=(onParseDefinition));                                                          // 49
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"methods":{"module.js":["../../core/module.js","./hooks/init_schema.js","./hooks/init_definition.js","./hooks/parse_definition.js","./hooks/merge_definitions.js","./hooks/apply_definition.js","./hooks/init_class.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/methods/module.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Module;module.import('../../core/module.js',{"default":function(v){Module=v}});var onInitSchema;module.import('./hooks/init_schema.js',{"default":function(v){onInitSchema=v}});var onInitDefinition;module.import('./hooks/init_definition.js',{"default":function(v){onInitDefinition=v}});var onParseDefinition;module.import('./hooks/parse_definition.js',{"default":function(v){onParseDefinition=v}});var onMergeDefinitions;module.import('./hooks/merge_definitions.js',{"default":function(v){onMergeDefinitions=v}});var onApplyDefinition;module.import('./hooks/apply_definition.js',{"default":function(v){onApplyDefinition=v}});var onInitClass;module.import('./hooks/init_class.js',{"default":function(v){onInitClass=v}});
// Hooks.                                                                                                              //
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
                                                                                                                       //
Module.create({                                                                                                        // 10
	name: 'methods',                                                                                                      // 11
	onInitSchema: onInitSchema,                                                                                           // 12
	onInitDefinition: onInitDefinition,                                                                                   // 13
	onParseDefinition: onParseDefinition,                                                                                 // 14
	onMergeDefinitions: onMergeDefinitions,                                                                               // 15
	onApplyDefinition: onApplyDefinition,                                                                                 // 16
	onInitClass: onInitClass                                                                                              // 17
});                                                                                                                    // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"class_static_methods":{"get_method.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/methods/class_static_methods/get_method.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function getMethod(methodName) {                                                                                       // 1
	return this.schema.methods[methodName];                                                                               // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(getMethod));                                                                  // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"get_methods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/methods/class_static_methods/get_methods.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function getMethods() {                                                                                                // 1
	return this.schema.methods;                                                                                           // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(getMethods));                                                                 // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"has_method.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/methods/class_static_methods/has_method.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function hasMethod(methodName) {                                                                                       // 3
	return _.has(this.schema.methods, methodName);                                                                        // 4
};                                                                                                                     // 5
                                                                                                                       //
module.export("default",exports.default=(hasMethod));                                                                  // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"hooks":{"apply_definition.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/methods/hooks/apply_definition.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function onApplyDefinition(Class, parsedDefinition, className) {                                                       // 3
	var schema = Class.schema;                                                                                            // 4
                                                                                                                       //
	// Add methods to the class.                                                                                          //
	_.each(parsedDefinition.methods, function (method, methodName) {                                                      // 7
		schema.methods[methodName] = method;                                                                                 // 8
		Class.prototype[methodName] = method;                                                                                // 9
	});                                                                                                                   // 10
};                                                                                                                     // 11
                                                                                                                       //
module.export("default",exports.default=(onApplyDefinition));                                                          // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"init_class.js":["../class_static_methods/get_method.js","../class_static_methods/get_methods.js","../class_static_methods/has_method.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/methods/hooks/init_class.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var getMethod;module.import('../class_static_methods/get_method.js',{"default":function(v){getMethod=v}});var getMethods;module.import('../class_static_methods/get_methods.js',{"default":function(v){getMethods=v}});var hasMethod;module.import('../class_static_methods/has_method.js',{"default":function(v){hasMethod=v}});// Class static methods.
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       //
function onInitClass(Class, className) {                                                                               // 6
	// Class static methods.                                                                                              //
	Class.getMethod = getMethod;                                                                                          // 8
	Class.getMethods = getMethods;                                                                                        // 9
	Class.hasMethod = hasMethod;                                                                                          // 10
};                                                                                                                     // 11
                                                                                                                       //
module.export("default",exports.default=(onInitClass));                                                                // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"init_definition.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/methods/hooks/init_definition.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function onInitDefinition(definition, className) {                                                                     // 1
	definition.methods = {};                                                                                              // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(onInitDefinition));                                                           // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"init_schema.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/methods/hooks/init_schema.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function onInitSchema(schema, className) {                                                                             // 1
	schema.methods = {};                                                                                                  // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(onInitSchema));                                                               // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"merge_definitions.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/methods/hooks/merge_definitions.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {                                           // 3
	_.each(sourceDefinition.methods, function (method, methodName) {                                                      // 4
		targetDefinition.methods[methodName] = method;                                                                       // 5
	});                                                                                                                   // 6
};                                                                                                                     // 7
                                                                                                                       //
module.export("default",exports.default=(onMergeDefinitions));                                                         // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"parse_definition.js":["lodash","../../core/utils/throw_parse_error.js","../../../core/reserved_keywords.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/methods/hooks/parse_definition.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});var reservedKeywords;module.import('../../../core/reserved_keywords.js',{"default":function(v){reservedKeywords=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function onParseDefinition(parsedDefinition, definition, className) {                                                  // 5
	// Check existence and validity of the "methods" property.                                                            //
	if (definition.methods !== undefined) {                                                                               // 7
		if (!Match.test(definition.methods, Object)) {                                                                       // 8
			throwParseError([{                                                                                                  // 9
				'class': className                                                                                                 // 10
			}, {                                                                                                                // 9
				'property': 'methods'                                                                                              // 12
			}, 'Methods definition has to be an object']);                                                                      // 11
		}                                                                                                                    // 16
                                                                                                                       //
		_.each(definition.methods, function (method, methodName) {                                                           // 18
			if (!Match.test(method, Function)) {                                                                                // 19
				throwParseError([{                                                                                                 // 20
					'class': className                                                                                                // 21
				}, {                                                                                                               // 20
					'method': methodName                                                                                              // 23
				}, 'Method has to be a function']);                                                                                // 22
			}                                                                                                                   // 27
                                                                                                                       //
			if (_.includes(reservedKeywords, methodName)) {                                                                     // 29
				throwParseError([{                                                                                                 // 30
					'class': className                                                                                                // 31
				}, {                                                                                                               // 30
					'method': methodName                                                                                              // 33
				}, 'Reserved keyword']);                                                                                           // 32
			}                                                                                                                   // 37
			parsedDefinition.methods[methodName] = method;                                                                      // 38
		});                                                                                                                  // 39
	}                                                                                                                     // 40
};                                                                                                                     // 41
                                                                                                                       //
module.export("default",exports.default=(onParseDefinition));                                                          // 43
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"storage":{"module.js":["../../core/module.js","./utils/apply_modifier.js","./utils/call_meteor_method.js","./utils/class_insert.js","./utils/class_update.js","./utils/class_remove.js","./utils/document_insert.js","./utils/document_update.js","./utils/document_remove.js","./utils/get_modified.js","./utils/get_modifier.js","./utils/has_meteor_method.js","./utils/is_modified.js","./utils/is_remote.js","./utils/omit_undefined.js","./utils/throw_if_selector_is_not_id.js","./utils/transform_to_class.js","./utils/trigger_before_save.js","./utils/trigger_before_insert.js","./utils/trigger_before_update.js","./utils/trigger_before_remove.js","./utils/trigger_after_save.js","./utils/trigger_after_insert.js","./utils/trigger_after_update.js","./utils/trigger_after_remove.js","./hooks/init_schema.js","./hooks/init_definition.js","./hooks/parse_definition.js","./hooks/merge_definitions.js","./hooks/apply_definition.js","./hooks/init_class.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/module.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Module;module.import('../../core/module.js',{"default":function(v){Module=v}});var applyModifier;module.import('./utils/apply_modifier.js',{"default":function(v){applyModifier=v}});var callMeteorMethod;module.import('./utils/call_meteor_method.js',{"default":function(v){callMeteorMethod=v}});var classInsert;module.import('./utils/class_insert.js',{"default":function(v){classInsert=v}});var classUpdate;module.import('./utils/class_update.js',{"default":function(v){classUpdate=v}});var classRemove;module.import('./utils/class_remove.js',{"default":function(v){classRemove=v}});var documentInsert;module.import('./utils/document_insert.js',{"default":function(v){documentInsert=v}});var documentUpdate;module.import('./utils/document_update.js',{"default":function(v){documentUpdate=v}});var documentRemove;module.import('./utils/document_remove.js',{"default":function(v){documentRemove=v}});var getModified;module.import('./utils/get_modified.js',{"default":function(v){getModified=v}});var getModifier;module.import('./utils/get_modifier.js',{"default":function(v){getModifier=v}});var hasMeteorMethod;module.import('./utils/has_meteor_method.js',{"default":function(v){hasMeteorMethod=v}});var isModified;module.import('./utils/is_modified.js',{"default":function(v){isModified=v}});var isRemote;module.import('./utils/is_remote.js',{"default":function(v){isRemote=v}});var omitUndefined;module.import('./utils/omit_undefined.js',{"default":function(v){omitUndefined=v}});var throwIfSelectorIsNotId;module.import('./utils/throw_if_selector_is_not_id.js',{"default":function(v){throwIfSelectorIsNotId=v}});var transformToClass;module.import('./utils/transform_to_class.js',{"default":function(v){transformToClass=v}});var triggerBeforeSave;module.import('./utils/trigger_before_save.js',{"default":function(v){triggerBeforeSave=v}});var triggerBeforeInsert;module.import('./utils/trigger_before_insert.js',{"default":function(v){triggerBeforeInsert=v}});var triggerBeforeUpdate;module.import('./utils/trigger_before_update.js',{"default":function(v){triggerBeforeUpdate=v}});var triggerBeforeRemove;module.import('./utils/trigger_before_remove.js',{"default":function(v){triggerBeforeRemove=v}});var triggerAfterSave;module.import('./utils/trigger_after_save.js',{"default":function(v){triggerAfterSave=v}});var triggerAfterInsert;module.import('./utils/trigger_after_insert.js',{"default":function(v){triggerAfterInsert=v}});var triggerAfterUpdate;module.import('./utils/trigger_after_update.js',{"default":function(v){triggerAfterUpdate=v}});var triggerAfterRemove;module.import('./utils/trigger_after_remove.js',{"default":function(v){triggerAfterRemove=v}});var onInitSchema;module.import('./hooks/init_schema.js',{"default":function(v){onInitSchema=v}});var onInitDefinition;module.import('./hooks/init_definition.js',{"default":function(v){onInitDefinition=v}});var onParseDefinition;module.import('./hooks/parse_definition.js',{"default":function(v){onParseDefinition=v}});var onMergeDefinitions;module.import('./hooks/merge_definitions.js',{"default":function(v){onMergeDefinitions=v}});var onApplyDefinition;module.import('./hooks/apply_definition.js',{"default":function(v){onApplyDefinition=v}});var onInitClass;module.import('./hooks/init_class.js',{"default":function(v){onInitClass=v}});
// Utils.                                                                                                              //
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
                                                                                                                       // 9
                                                                                                                       // 10
                                                                                                                       // 11
                                                                                                                       // 12
                                                                                                                       // 13
                                                                                                                       // 14
                                                                                                                       // 15
                                                                                                                       // 16
                                                                                                                       // 17
                                                                                                                       // 18
                                                                                                                       // 19
                                                                                                                       // 20
                                                                                                                       // 21
                                                                                                                       // 22
                                                                                                                       // 23
                                                                                                                       // 24
                                                                                                                       // 25
                                                                                                                       // 26
// Hooks.                                                                                                              //
                                                                                                                       // 28
                                                                                                                       // 29
                                                                                                                       // 30
                                                                                                                       // 31
                                                                                                                       // 32
                                                                                                                       // 33
                                                                                                                       //
Module.create({                                                                                                        // 35
  name: 'storage',                                                                                                     // 36
  onInitSchema: onInitSchema,                                                                                          // 37
  onInitDefinition: onInitDefinition,                                                                                  // 38
  onParseDefinition: onParseDefinition,                                                                                // 39
  onMergeDefinitions: onMergeDefinitions,                                                                              // 40
  onApplyDefinition: onApplyDefinition,                                                                                // 41
  onInitClass: onInitClass,                                                                                            // 42
  utils: {                                                                                                             // 43
    applyModifier: applyModifier,                                                                                      // 44
    callMeteorMethod: callMeteorMethod,                                                                                // 45
    classInsert: classInsert,                                                                                          // 46
    classUpdate: classUpdate,                                                                                          // 47
    classRemove: classRemove,                                                                                          // 48
    documentInsert: documentInsert,                                                                                    // 49
    documentUpdate: documentUpdate,                                                                                    // 50
    documentRemove: documentRemove,                                                                                    // 51
    getModified: getModified,                                                                                          // 52
    getModifier: getModifier,                                                                                          // 53
    hasMeteorMethod: hasMeteorMethod,                                                                                  // 54
    isModified: isModified,                                                                                            // 55
    isRemote: isRemote,                                                                                                // 56
    omitUndefined: omitUndefined,                                                                                      // 57
    throwIfSelectorIsNotId: throwIfSelectorIsNotId,                                                                    // 58
    transformToClass: transformToClass,                                                                                // 59
    triggerBeforeSave: triggerBeforeSave,                                                                              // 60
    triggerBeforeInsert: triggerBeforeInsert,                                                                          // 61
    triggerBeforeUpdate: triggerBeforeUpdate,                                                                          // 62
    triggerBeforeRemove: triggerBeforeRemove,                                                                          // 63
    triggerAfterSave: triggerAfterSave,                                                                                // 64
    triggerAfterInsert: triggerAfterInsert,                                                                            // 65
    triggerAfterUpdate: triggerAfterUpdate,                                                                            // 66
    triggerAfterRemove: triggerAfterRemove                                                                             // 67
  }                                                                                                                    // 43
});                                                                                                                    // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"class_events":{"after_init.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_events/after_init.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function afterInit(e) {                                                                                                // 1
  var doc = e.currentTarget;                                                                                           // 2
  var Class = doc.constructor;                                                                                         // 3
                                                                                                                       //
  var typeField = Class.getTypeField();                                                                                // 5
  if (!doc[typeField]) {                                                                                               // 6
    doc[typeField] = Class.getName();                                                                                  // 7
  }                                                                                                                    // 8
};                                                                                                                     // 9
                                                                                                                       //
module.export("default",exports.default=(afterInit));                                                                  // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"before_init.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_events/before_init.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function beforeInit(e) {                                                                                               // 1
	var doc = e.currentTarget;                                                                                            // 2
                                                                                                                       //
	// Create the "_isNew" property to indicate if a document had been                                                    //
	// stored in a database. A default value of this property is set                                                      //
	// to false. Astronomy can modify this property and it can not appear                                                 //
	// in the list of the object properties.                                                                              //
	if (Object.defineProperty) {                                                                                          // 8
		Object.defineProperty(doc, '_isNew', {                                                                               // 9
			writable: true,                                                                                                     // 10
			enumerable: false                                                                                                   // 11
		});                                                                                                                  // 9
	}                                                                                                                     // 13
	doc._isNew = true;                                                                                                    // 14
};                                                                                                                     // 15
                                                                                                                       //
module.export("default",exports.default=(beforeInit));                                                                 // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"from_json_value.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_events/from_json_value.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function fromJSONValue(e) {                                                                                            // 1
	var doc = e.currentTarget;                                                                                            // 2
	doc._isNew = e.json.isNew;                                                                                            // 3
};                                                                                                                     // 4
                                                                                                                       //
module.export("default",exports.default=(fromJSONValue));                                                              // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"to_json_value.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_events/to_json_value.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function toJSONValue(e) {                                                                                              // 1
	var doc = e.currentTarget;                                                                                            // 2
	e.json.isNew = doc._isNew;                                                                                            // 3
};                                                                                                                     // 4
                                                                                                                       //
module.export("default",exports.default=(toJSONValue));                                                                // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"class_prototype_methods":{"copy.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/copy.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function copy(save) {                                                                                                  // 1
	var doc = this;                                                                                                       // 2
	save = save || false;                                                                                                 // 3
                                                                                                                       //
	// Use EJSON to clone object.                                                                                         //
	var copy = EJSON.clone(doc);                                                                                          // 6
                                                                                                                       //
	// Remove the "_id" value and set the "_isNew" flag to false so that it will                                          //
	// save the object as a new document instead updating the old one.                                                    //
	copy._id = null;                                                                                                      // 10
	copy._isNew = true;                                                                                                   // 11
                                                                                                                       //
	if (save) {                                                                                                           // 13
		copy.save();                                                                                                         // 14
	}                                                                                                                     // 15
                                                                                                                       //
	return copy;                                                                                                          // 17
};                                                                                                                     // 18
                                                                                                                       //
module.export("default",exports.default=(copy));                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"get_modified.js":["../utils/get_modified.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/get_modified.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var utilGetModified;module.import('../utils/get_modified.js',{"default":function(v){utilGetModified=v}});              // 1
                                                                                                                       //
function getModified() {                                                                                               // 3
	var doc = this;                                                                                                       // 4
                                                                                                                       //
	return utilGetModified({                                                                                              // 6
		doc: doc,                                                                                                            // 7
		transient: true                                                                                                      // 8
	});                                                                                                                   // 6
};                                                                                                                     // 10
                                                                                                                       //
module.export("default",exports.default=(getModified));                                                                // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_modified_values.js":["lodash","../utils/get_modified.js","../../fields/utils/raw_one.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/get_modified_values.js                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var utilGetModified;module.import('../utils/get_modified.js',{"default":function(v){utilGetModified=v}});var rawOne;module.import('../../fields/utils/raw_one.js',{"default":function(v){rawOne=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function getModifiedValues() {                                                                                         // 5
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                               // 5
  var _options$old = options.old;                                                                                      // 5
  var old = _options$old === undefined ? false : _options$old;                                                         // 5
  var _options$raw = options.raw;                                                                                      // 5
  var raw = _options$raw === undefined ? false : _options$raw;                                                         // 5
                                                                                                                       //
                                                                                                                       //
  var doc = this;                                                                                                      // 11
  var Class = doc.constructor;                                                                                         // 12
                                                                                                                       //
  // Get list of modified fields.                                                                                      //
  var modified = utilGetModified({                                                                                     // 15
    doc: doc,                                                                                                          // 16
    transient: true                                                                                                    // 17
  });                                                                                                                  // 15
                                                                                                                       //
  // Get old or new values of a document.                                                                              //
  if (old) {                                                                                                           // 21
    doc = doc._isNew ? new Class() : Class.findOne(doc._id);                                                           // 22
  }                                                                                                                    // 23
                                                                                                                       //
  // Collect values for each field.                                                                                    //
  var values = {};                                                                                                     // 26
  _.each(modified, function (name) {                                                                                   // 27
    if (raw) {                                                                                                         // 28
      values[name] = rawOne(doc, name);                                                                                // 29
    } else {                                                                                                           // 30
      values[name] = doc.get(name);                                                                                    // 32
    }                                                                                                                  // 33
  });                                                                                                                  // 34
                                                                                                                       //
  return values;                                                                                                       // 36
};                                                                                                                     // 37
                                                                                                                       //
module.export("default",exports.default=(getModifiedValues));                                                          // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_modifier.js":["../utils/get_modifier.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/get_modifier.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var utilGetModifier;module.import('../utils/get_modifier.js',{"default":function(v){utilGetModifier=v}});              // 1
                                                                                                                       //
function getModifier() {                                                                                               // 3
	var doc = this;                                                                                                       // 4
                                                                                                                       //
	return utilGetModifier({                                                                                              // 6
		doc: doc                                                                                                             // 7
	});                                                                                                                   // 6
};                                                                                                                     // 9
                                                                                                                       //
module.export("default",exports.default=(getModifier));                                                                // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"is_modified.js":["../utils/is_modified.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/is_modified.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var utilIsModified;module.import('../utils/is_modified.js',{"default":function(v){utilIsModified=v}});                 // 1
                                                                                                                       //
function isModified(pattern) {                                                                                         // 3
	var doc = this;                                                                                                       // 4
                                                                                                                       //
	return utilIsModified({                                                                                               // 6
		doc: doc,                                                                                                            // 7
		pattern: pattern,                                                                                                    // 8
		transient: true                                                                                                      // 9
	});                                                                                                                   // 6
};                                                                                                                     // 11
                                                                                                                       //
module.export("default",exports.default=(isModified));                                                                 // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"reload.js":["lodash","../../fields/utils/set_defaults.js","../../fields/utils/cast_nested.js","../../events/event.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/reload.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var setDefaults;module.import('../../fields/utils/set_defaults.js',{"default":function(v){setDefaults=v}});var castNested;module.import('../../fields/utils/cast_nested.js',{"default":function(v){castNested=v}});var Event;module.import('../../events/event.js',{"default":function(v){Event=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       //
function reload() {                                                                                                    // 6
		var doc = this;                                                                                                      // 7
		var Class = doc.constructor;                                                                                         // 8
                                                                                                                       //
		// The document has to be already saved in the collection.                                                           //
		if (!doc._isNew) {                                                                                                   // 11
				(function () {                                                                                                     // 11
						// Get a document from the collection without transformation.                                                    //
						var rawDoc = Class.findOne(doc._id, {                                                                            // 13
								transform: null                                                                                                // 14
						});                                                                                                              // 13
                                                                                                                       //
						// Trigger the "beforeInit" event handlers.                                                                      //
						doc.dispatchEvent(new Event('beforeInit'));                                                                      // 18
                                                                                                                       //
						// Set all fields.                                                                                               //
						var fields = Class.getFields();                                                                                  // 21
						_.each(fields, function (field) {                                                                                // 22
								doc[field.name] = field.resolveValue(rawDoc);                                                                  // 23
						});                                                                                                              // 24
                                                                                                                       //
						// Set default values if the "defaults" option is set.                                                           //
						setDefaults({                                                                                                    // 27
								doc: doc                                                                                                       // 28
						});                                                                                                              // 27
						// Cast nested documents.                                                                                        //
						castNested({                                                                                                     // 31
								doc: doc                                                                                                       // 32
						});                                                                                                              // 31
                                                                                                                       //
						// Trigger the "afterInit" event handlers.                                                                       //
						doc.dispatchEvent(new Event('afterInit'));                                                                       // 36
                                                                                                                       //
						// Mark the document as not new.                                                                                 //
						doc._isNew = false;                                                                                              // 39
				})();                                                                                                              // 11
		}                                                                                                                    // 40
};                                                                                                                     // 41
                                                                                                                       //
module.export("default",exports.default=(reload));                                                                     // 43
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"remove.js":["../utils/document_remove.js","../utils/is_remote.js","../utils/call_meteor_method.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/remove.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var documentRemove;module.import('../utils/document_remove.js',{"default":function(v){documentRemove=v}});var isRemote;module.import('../utils/is_remote.js',{"default":function(v){isRemote=v}});var callMeteorMethod;module.import('../utils/call_meteor_method.js',{"default":function(v){callMeteorMethod=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function remove() {                                                                                                    // 5
  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 5
  var callback = arguments[1];                                                                                         // 5
                                                                                                                       //
  var doc = this;                                                                                                      // 6
  var Class = doc.constructor;                                                                                         // 7
                                                                                                                       //
  // If the first argument is callback function then reassign values.                                                  //
  if (arguments.length === 1 && Match.test(args, Function)) {                                                          // 10
    callback = args;                                                                                                   // 11
    args = {};                                                                                                         // 12
  }                                                                                                                    // 13
  // Get variables from the first argument.                                                                            //
  var _args = args;                                                                                                    // 5
  var _args$simulation = _args.simulation;                                                                             // 5
  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 5
                                                                                                                       //
  // If we are dealing with a remote collection and we are not on the server.                                          //
                                                                                                                       //
  if (isRemote(Class)) {                                                                                               // 20
    // Prepare meteor method name to be called.                                                                        //
    var methodName = '/Astronomy/remove';                                                                              // 22
    // Prepare arguments for the meteor method.                                                                        //
    var methodArgs = {                                                                                                 // 24
      className: Class.getName(),                                                                                      // 25
      selector: {                                                                                                      // 26
        _id: doc._id                                                                                                   // 27
      },                                                                                                               // 26
      simulation: simulation                                                                                           // 29
    };                                                                                                                 // 24
                                                                                                                       //
    try {                                                                                                              // 32
      // Run meteor method.                                                                                            //
      var result = callMeteorMethod(Class, methodName, [methodArgs], callback);                                        // 34
      // Change the "_isNew" flag to "true". After removing a document can be                                          //
      // saved again as a new one.                                                                                     //
      doc._isNew = true;                                                                                               // 39
      // Return result of the meteor method call.                                                                      //
      return result;                                                                                                   // 41
    }                                                                                                                  // 42
    // Catch stub exceptions.                                                                                          //
    catch (err) {                                                                                                      // 44
      if (callback) {                                                                                                  // 45
        callback(err);                                                                                                 // 46
        return null;                                                                                                   // 47
      }                                                                                                                // 48
      throw err;                                                                                                       // 49
    }                                                                                                                  // 50
  }                                                                                                                    // 51
                                                                                                                       //
  // If we can just remove a document without calling the meteor method. We may                                        //
  // be on the server or the collection may be local.                                                                  //
  try {                                                                                                                // 55
    // Prepare arguments.                                                                                              //
    var _methodArgs = {                                                                                                // 57
      doc: doc,                                                                                                        // 58
      simulation: simulation,                                                                                          // 59
      trusted: true                                                                                                    // 60
    };                                                                                                                 // 57
    var _result = documentRemove(_methodArgs);                                                                         // 62
    if (callback) {                                                                                                    // 63
      callback(undefined, _result);                                                                                    // 64
    }                                                                                                                  // 65
    return _result;                                                                                                    // 66
  } catch (err) {                                                                                                      // 67
    if (callback) {                                                                                                    // 69
      callback(err);                                                                                                   // 70
      return null;                                                                                                     // 71
    }                                                                                                                  // 72
    throw err;                                                                                                         // 73
  }                                                                                                                    // 74
}                                                                                                                      // 75
                                                                                                                       //
module.export("default",exports.default=(remove));                                                                     // 77
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"save.js":["lodash","meteor/ddp","../utils/document_insert.js","../utils/document_update.js","../utils/is_remote.js","../utils/call_meteor_method.js","../../fields/utils/raw_all.js","../../fields/utils/cast_nested.js","../../storage/utils/get_modifier.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_prototype_methods/save.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var DDP;module.import('meteor/ddp',{"DDP":function(v){DDP=v}});var documentInsert;module.import('../utils/document_insert.js',{"default":function(v){documentInsert=v}});var documentUpdate;module.import('../utils/document_update.js',{"default":function(v){documentUpdate=v}});var isRemote;module.import('../utils/is_remote.js',{"default":function(v){isRemote=v}});var callMeteorMethod;module.import('../utils/call_meteor_method.js',{"default":function(v){callMeteorMethod=v}});var rawAll;module.import('../../fields/utils/raw_all.js',{"default":function(v){rawAll=v}});var castNested;module.import('../../fields/utils/cast_nested.js',{"default":function(v){castNested=v}});var getModifier;module.import('../../storage/utils/get_modifier.js',{"default":function(v){getModifier=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
                                                                                                                       // 9
                                                                                                                       //
function save() {                                                                                                      // 11
  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 11
  var callback = arguments[1];                                                                                         // 11
                                                                                                                       //
  var doc = this;                                                                                                      // 12
  var Class = doc.constructor;                                                                                         // 13
  var Collection = Class.getCollection();                                                                              // 14
                                                                                                                       //
  // If the first argument is callback function then reassign values.                                                  //
  if (arguments.length === 1 && Match.test(args, Function)) {                                                          // 17
    callback = args;                                                                                                   // 18
    args = {};                                                                                                         // 19
  }                                                                                                                    // 20
  // Get variables from the first argument.                                                                            //
  var _args = args;                                                                                                    // 11
  var stopOnFirstError = _args.stopOnFirstError;                                                                       // 11
  var simulation = _args.simulation;                                                                                   // 11
  var fields = _args.fields;                                                                                           // 11
                                                                                                                       //
  // Cast nested documents.                                                                                            //
                                                                                                                       //
  castNested({                                                                                                         // 29
    doc: doc                                                                                                           // 30
  });                                                                                                                  // 29
                                                                                                                       //
  // Detect which operation we are executing.                                                                          //
  var inserting = doc._isNew;                                                                                          // 34
                                                                                                                       //
  // Generate ID if not provided.                                                                                      //
  if (inserting && !doc._id) {                                                                                         // 37
    var generateId = true;                                                                                             // 38
    // Don't generate the id if we're the client and the 'outermost' call.                                             //
    // This optimization saves us passing both the randomSeed and the id.                                              //
    // Passing both is redundant.                                                                                      //
    if (Collection._isRemoteCollection()) {                                                                            // 42
      var enclosing = DDP._CurrentInvocation.get();                                                                    // 43
      if (!enclosing) {                                                                                                // 44
        generateId = false;                                                                                            // 45
      }                                                                                                                // 46
    }                                                                                                                  // 47
    if (generateId) {                                                                                                  // 48
      doc._id = Collection._makeNewID();                                                                               // 49
    }                                                                                                                  // 50
  }                                                                                                                    // 51
                                                                                                                       //
  // If we are dealing with a remote collection and we are not on the server.                                          //
  if (isRemote(Class)) {                                                                                               // 54
    // Prepare meteor method name to be called.                                                                        //
    var methodName = '/Astronomy/' + (inserting ? 'insert' : 'update');                                                // 56
    // Prepare arguments for meteor method.                                                                            //
    var methodArgs = {                                                                                                 // 58
      className: Class.getName(),                                                                                      // 59
      stopOnFirstError: stopOnFirstError,                                                                              // 60
      simulation: simulation                                                                                           // 61
    };                                                                                                                 // 58
    // Inserting.                                                                                                      //
    if (inserting) {                                                                                                   // 64
      _.extend(methodArgs, {                                                                                           // 65
        rawDoc: rawAll(doc, {                                                                                          // 66
          transient: false                                                                                             // 67
        })                                                                                                             // 66
      });                                                                                                              // 65
    }                                                                                                                  // 70
    // Updating.                                                                                                       //
    else {                                                                                                             // 64
        _.extend(methodArgs, {                                                                                         // 73
          selector: {                                                                                                  // 74
            _id: doc._id                                                                                               // 75
          },                                                                                                           // 74
          modifier: getModifier({                                                                                      // 77
            doc: doc                                                                                                   // 78
          }),                                                                                                          // 77
          options: {},                                                                                                 // 80
          fields: fields                                                                                               // 81
        });                                                                                                            // 73
      }                                                                                                                // 83
                                                                                                                       //
    try {                                                                                                              // 85
      // Run Meteor method.                                                                                            //
      var result = callMeteorMethod(Class, methodName, [methodArgs], callback);                                        // 87
      if (result && inserting) {                                                                                       // 90
        // In the insert operation the value return from the meteor method is                                          //
        // a document ID.                                                                                              //
        doc._id = result;                                                                                              // 93
      }                                                                                                                // 94
      // A document is not new anymore.                                                                                //
      doc._isNew = false;                                                                                              // 96
      return result;                                                                                                   // 97
    }                                                                                                                  // 98
    // Catch stub exceptions.                                                                                          //
    catch (err) {                                                                                                      // 100
      if (callback) {                                                                                                  // 101
        callback(err);                                                                                                 // 102
        return null;                                                                                                   // 103
      }                                                                                                                // 104
      throw err;                                                                                                       // 105
    }                                                                                                                  // 106
  }                                                                                                                    // 107
                                                                                                                       //
  // If we can just insert a document without calling the meteor method. We may                                        //
  // be on the server or the collection may be local.                                                                  //
  try {                                                                                                                // 111
    // Prepare arguments.                                                                                              //
    var _methodArgs = {                                                                                                // 113
      doc: doc,                                                                                                        // 114
      stopOnFirstError: stopOnFirstError,                                                                              // 115
      simulation: simulation,                                                                                          // 116
      trusted: true                                                                                                    // 117
    };                                                                                                                 // 113
    if (inserting) {                                                                                                   // 119
      var _result = documentInsert(_methodArgs);                                                                       // 120
      if (callback) {                                                                                                  // 121
        callback(undefined, _result);                                                                                  // 122
      }                                                                                                                // 123
      return _result;                                                                                                  // 124
    } else {                                                                                                           // 125
      _methodArgs.fields = fields;                                                                                     // 127
      var _result2 = documentUpdate(_methodArgs);                                                                      // 128
      if (callback) {                                                                                                  // 129
        callback(undefined, _result2);                                                                                 // 130
      }                                                                                                                // 131
      return _result2;                                                                                                 // 132
    }                                                                                                                  // 133
  } catch (err) {                                                                                                      // 134
    if (callback) {                                                                                                    // 136
      callback(err);                                                                                                   // 137
      return null;                                                                                                     // 138
    }                                                                                                                  // 139
    throw err;                                                                                                         // 140
  }                                                                                                                    // 141
}                                                                                                                      // 142
                                                                                                                       //
module.export("default",exports.default=(save));                                                                       // 144
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"class_static_methods":{"find.js":["lodash","../utils/transform_to_class.js","../../events/event.js","meteor/mongo",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_static_methods/find.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({find:function(){return find},findOne:function(){return findOne}});var _;module.import('lodash',{"default":function(v){_=v}});var transformToClass;module.import('../utils/transform_to_class.js',{"default":function(v){transformToClass=v}});var Event;module.import('../../events/event.js',{"default":function(v){Event=v}});var Mongo;module.import('meteor/mongo',{"Mongo":function(v){Mongo=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       //
function createMethod(methodName) {                                                                                    // 6
  return function (selector, options) {                                                                                // 7
    var Class = this;                                                                                                  // 8
    var Collection = Class.getCollection();                                                                            // 9
                                                                                                                       //
    // Get selector from arguments.                                                                                    //
    if (arguments.length === 0) {                                                                                      // 12
      selector = {};                                                                                                   // 13
    } else {                                                                                                           // 14
      selector = arguments[0];                                                                                         // 16
    }                                                                                                                  // 17
    // If selector is null then just proceed to collection's find method.                                              //
    if (_.isNull(selector)) {                                                                                          // 19
      return Collection[methodName](selector, options);                                                                // 20
    }                                                                                                                  // 21
    // Rewrite selector to make it an object.                                                                          //
    selector = Mongo.Collection._rewriteSelector(selector);                                                            // 23
                                                                                                                       //
    // Set default options.                                                                                            //
    options = _.defaults({}, options, {                                                                                // 26
      defaults: true,                                                                                                  // 27
      children: true                                                                                                   // 28
    });                                                                                                                // 26
    // We don't want to clone raw object in the "find" method.                                                         //
    options.clone = false;                                                                                             // 31
                                                                                                                       //
    // Modify selector and options using the "beforeFind" event handlers.                                              //
    if (!options.disableEvents) {                                                                                      // 34
      Class.dispatchEvent(new Event('beforeFind', {                                                                    // 35
        selector: selector,                                                                                            // 36
        options: options                                                                                               // 37
      }));                                                                                                             // 35
    }                                                                                                                  // 39
                                                                                                                       //
    // If it's an inherited class, then get only documents being instances of                                          //
    // the subclass.                                                                                                   //
    var typeField = Class.getTypeField();                                                                              // 43
    if (typeField) {                                                                                                   // 44
      // If a class has child classes then we have to fetch document being                                             //
      // instances of the parent and child classes depending on a value of                                             //
      // the "children" option.                                                                                        //
      var children = Class.getChildren();                                                                              // 48
      if (options.children === true && children.length > 0) {                                                          // 49
        selector[typeField] = {                                                                                        // 50
          $in: _(children).map(function (Child) {                                                                      // 51
            return Child.getName();                                                                                    // 52
          }).concat(Class.getName()).value()                                                                           // 53
        };                                                                                                             // 50
      } else {                                                                                                         // 55
        selector[typeField] = Class.getName();                                                                         // 57
      }                                                                                                                // 58
    }                                                                                                                  // 59
                                                                                                                       //
    // Get custom transform function from the class schema.                                                            //
    if (options.transform === undefined) {                                                                             // 62
      options.transform = Class.getTransform(options);                                                                 // 63
    }                                                                                                                  // 64
    // Get default transform function if none is provided.                                                             //
    if (options.transform === undefined) {                                                                             // 66
      options.transform = transformToClass(Class.getName(), {                                                          // 67
        defaults: options.defaults                                                                                     // 68
      });                                                                                                              // 67
    }                                                                                                                  // 70
                                                                                                                       //
    // Execute the original method.                                                                                    //
    var result = Collection[methodName](selector, options);                                                            // 73
                                                                                                                       //
    // Modify a query result using the "afterFind" event handlers.                                                     //
    if (!options.disableEvents) {                                                                                      // 76
      Class.dispatchEvent(new Event('afterFind', {                                                                     // 77
        selector: selector,                                                                                            // 78
        options: options,                                                                                              // 79
        result: result                                                                                                 // 80
      }));                                                                                                             // 77
    }                                                                                                                  // 82
                                                                                                                       //
    return result;                                                                                                     // 84
  };                                                                                                                   // 85
}                                                                                                                      // 86
                                                                                                                       //
var find = createMethod('find');                                                                                       // 88
var findOne = createMethod('findOne');                                                                                 // 89
                                                                                                                       //
                                                                                                                       // 91
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_collection.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_static_methods/get_collection.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function getCollection() {                                                                                             // 1
	return this.schema.collection;                                                                                        // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(getCollection));                                                              // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"get_transform.js":["../../../core/class.js","../../fields/utils/set_defaults.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_static_methods/get_transform.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Class;module.import('../../../core/class.js',{"default":function(v){Class=v}});var setDefaults;module.import('../../fields/utils/set_defaults.js',{"default":function(v){setDefaults=v}});
                                                                                                                       // 2
                                                                                                                       //
function getTransform(options) {                                                                                       // 4
  return this.schema.transform;                                                                                        // 5
};                                                                                                                     // 6
                                                                                                                       //
module.export("default",exports.default=(getTransform));                                                               // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_type_field.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_static_methods/get_type_field.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function getTypeField() {                                                                                              // 1
	return this.schema.typeField;                                                                                         // 2
};                                                                                                                     // 3
                                                                                                                       //
module.export("default",exports.default=(getTypeField));                                                               // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"insert.js":["../utils/is_remote.js","../utils/call_meteor_method.js","../utils/class_insert.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_static_methods/insert.js                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isRemote;module.import('../utils/is_remote.js',{"default":function(v){isRemote=v}});var callMeteorMethod;module.import('../utils/call_meteor_method.js',{"default":function(v){callMeteorMethod=v}});var classInsert;module.import('../utils/class_insert.js',{"default":function(v){classInsert=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function insert(rawDoc, callback) {                                                                                    // 5
  var Class = this;                                                                                                    // 6
  var Collection = Class.getCollection();                                                                              // 7
                                                                                                                       //
  // Prepare arguments.                                                                                                //
  var args = {                                                                                                         // 10
    className: Class.getName(),                                                                                        // 11
    rawDoc: rawDoc                                                                                                     // 12
  };                                                                                                                   // 10
                                                                                                                       //
  // Generate ID if not provided.                                                                                      //
  if (!rawDoc._id) {                                                                                                   // 16
    var generateId = true;                                                                                             // 17
    // Don't generate the id if we're the client and the 'outermost' call.                                             //
    // This optimization saves us passing both the randomSeed and the id.                                              //
    // Passing both is redundant.                                                                                      //
    if (Collection._isRemoteCollection()) {                                                                            // 21
      var enclosing = DDP._CurrentInvocation.get();                                                                    // 22
      if (!enclosing) {                                                                                                // 23
        generateId = false;                                                                                            // 24
      }                                                                                                                // 25
    }                                                                                                                  // 26
    if (generateId) {                                                                                                  // 27
      rawDoc._id = Collection._makeNewID();                                                                            // 28
    }                                                                                                                  // 29
  }                                                                                                                    // 30
                                                                                                                       //
  // If we are dealing with a remote collection and we are not on the server.                                          //
  if (isRemote(Class)) {                                                                                               // 33
    // Prepare meteor method name to be called.                                                                        //
    var methodName = '/Astronomy/insert';                                                                              // 35
                                                                                                                       //
    try {                                                                                                              // 37
      // Run Meteor method.                                                                                            //
      return callMeteorMethod(Class, methodName, [args], callback);                                                    // 39
    }                                                                                                                  // 42
    // Catch stub exceptions.                                                                                          //
    catch (err) {                                                                                                      // 44
      if (callback) {                                                                                                  // 45
        callback(err);                                                                                                 // 46
        return null;                                                                                                   // 47
      }                                                                                                                // 48
      throw err;                                                                                                       // 49
    }                                                                                                                  // 50
  }                                                                                                                    // 51
                                                                                                                       //
  // If we can just insert a document without calling the meteor method. We may                                        //
  // be on the server or the collection may be local.                                                                  //
  try {                                                                                                                // 55
    // Set the "trusted" argument to true.                                                                             //
    args.trusted = true;                                                                                               // 57
    // Insert a document.                                                                                              //
    var result = classInsert(args);                                                                                    // 59
    if (callback) {                                                                                                    // 60
      callback(undefined, result);                                                                                     // 61
    }                                                                                                                  // 62
    return result;                                                                                                     // 63
  } catch (err) {                                                                                                      // 64
    if (callback) {                                                                                                    // 66
      callback(err);                                                                                                   // 67
      return null;                                                                                                     // 68
    }                                                                                                                  // 69
    throw err;                                                                                                         // 70
  }                                                                                                                    // 71
}                                                                                                                      // 72
                                                                                                                       //
module.export("default",exports.default=(insert));                                                                     // 74
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"is_secured.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_static_methods/is_secured.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function isSecured(operation) {                                                                                        // 3
  if (_.has(this.schema.secured, operation)) {                                                                         // 4
    return this.schema.secured[operation];                                                                             // 5
  } else {                                                                                                             // 6
    var common = this.schema.secured.common;                                                                           // 8
    return common !== undefined ? common : true;                                                                       // 9
  }                                                                                                                    // 10
};                                                                                                                     // 11
                                                                                                                       //
module.export("default",exports.default=(isSecured));                                                                  // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"remove.js":["../utils/is_remote.js","../utils/call_meteor_method.js","../utils/class_remove.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_static_methods/remove.js                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isRemote;module.import('../utils/is_remote.js',{"default":function(v){isRemote=v}});var callMeteorMethod;module.import('../utils/call_meteor_method.js',{"default":function(v){callMeteorMethod=v}});var classRemove;module.import('../utils/class_remove.js',{"default":function(v){classRemove=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function remove(selector, options, callback) {                                                                         // 5
  var Class = this;                                                                                                    // 6
                                                                                                                       //
  // If we omit options argument then it may be a callback function.                                                   //
  if (options instanceof Function) {                                                                                   // 9
    callback = options;                                                                                                // 10
    options = {};                                                                                                      // 11
  }                                                                                                                    // 12
  // Make sure that options is at least an empty object.                                                               //
  options = options || {};                                                                                             // 14
  // Prepare arguments.                                                                                                //
  var args = {                                                                                                         // 16
    className: Class.getName(),                                                                                        // 17
    selector: selector,                                                                                                // 18
    options: options                                                                                                   // 19
  };                                                                                                                   // 16
                                                                                                                       //
  // If we are dealing with a remote collection and we are not on the server.                                          //
  if (isRemote(Class)) {                                                                                               // 23
    // Prepare meteor method name to be called.                                                                        //
    var methodName = '/Astronomy/remove';                                                                              // 25
                                                                                                                       //
    try {                                                                                                              // 27
      // Run Meteor method.                                                                                            //
      return callMeteorMethod(Class, methodName, [args], callback);                                                    // 29
    }                                                                                                                  // 32
    // Catch stub exceptions.                                                                                          //
    catch (err) {                                                                                                      // 34
      if (callback) {                                                                                                  // 35
        callback(err);                                                                                                 // 36
        return null;                                                                                                   // 37
      }                                                                                                                // 38
      throw err;                                                                                                       // 39
    }                                                                                                                  // 40
  }                                                                                                                    // 41
                                                                                                                       //
  // If we can just remove a document without calling the meteor method. We may                                        //
  // be on the server or the collection may be local.                                                                  //
  try {                                                                                                                // 45
    // Set the "trusted" argument to true.                                                                             //
    args.trusted = true;                                                                                               // 47
    // Remove a document.                                                                                              //
    var result = classRemove(args);                                                                                    // 49
    if (callback) {                                                                                                    // 50
      callback(undefined, result);                                                                                     // 51
    }                                                                                                                  // 52
    return result;                                                                                                     // 53
  } catch (err) {                                                                                                      // 54
    if (callback) {                                                                                                    // 56
      callback(err);                                                                                                   // 57
      return null;                                                                                                     // 58
    }                                                                                                                  // 59
    throw err;                                                                                                         // 60
  }                                                                                                                    // 61
}                                                                                                                      // 62
                                                                                                                       //
module.export("default",exports.default=(remove));                                                                     // 64
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"update.js":["../utils/is_remote.js","../utils/call_meteor_method.js","../utils/class_update.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_static_methods/update.js                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isRemote;module.import('../utils/is_remote.js',{"default":function(v){isRemote=v}});var callMeteorMethod;module.import('../utils/call_meteor_method.js',{"default":function(v){callMeteorMethod=v}});var classUpdate;module.import('../utils/class_update.js',{"default":function(v){classUpdate=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function update(selector, modifier, options, callback) {                                                               // 5
  var Class = this;                                                                                                    // 6
                                                                                                                       //
  // If we omit options argument then it may be a callback function.                                                   //
  if (options instanceof Function) {                                                                                   // 9
    callback = options;                                                                                                // 10
    options = {};                                                                                                      // 11
  }                                                                                                                    // 12
  // Make sure that options is at least an empty object.                                                               //
  options = options || {};                                                                                             // 14
  // Prepare arguments.                                                                                                //
  var args = {                                                                                                         // 16
    className: Class.getName(),                                                                                        // 17
    selector: selector,                                                                                                // 18
    modifier: modifier,                                                                                                // 19
    options: options                                                                                                   // 20
  };                                                                                                                   // 16
                                                                                                                       //
  // If we are dealing with a remote collection and we are not on the server.                                          //
  if (isRemote(Class)) {                                                                                               // 24
    // Prepare meteor method name to be called.                                                                        //
    var methodName = '/Astronomy/update';                                                                              // 26
                                                                                                                       //
    try {                                                                                                              // 28
      // Run Meteor method.                                                                                            //
      return callMeteorMethod(Class, methodName, [args], callback);                                                    // 30
    }                                                                                                                  // 33
    // Catch stub exceptions.                                                                                          //
    catch (err) {                                                                                                      // 35
      if (callback) {                                                                                                  // 36
        callback(err);                                                                                                 // 37
        return null;                                                                                                   // 38
      }                                                                                                                // 39
      throw err;                                                                                                       // 40
    }                                                                                                                  // 41
  }                                                                                                                    // 42
                                                                                                                       //
  // If we can just remove a document without calling the meteor method. We may                                        //
  // be on the server or the collection may be local.                                                                  //
  try {                                                                                                                // 46
    // Set the "trusted" argument to true.                                                                             //
    args.trusted = true;                                                                                               // 48
    // Remove a document.                                                                                              //
    var result = classUpdate(args);                                                                                    // 50
    if (callback) {                                                                                                    // 51
      callback(undefined, result);                                                                                     // 52
    }                                                                                                                  // 53
    return result;                                                                                                     // 54
  } catch (err) {                                                                                                      // 55
    if (callback) {                                                                                                    // 57
      callback(err);                                                                                                   // 58
      return null;                                                                                                     // 59
    }                                                                                                                  // 60
    throw err;                                                                                                         // 61
  }                                                                                                                    // 62
}                                                                                                                      // 63
                                                                                                                       //
module.export("default",exports.default=(update));                                                                     // 65
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"upsert.js":["../utils/is_remote.js","../utils/call_meteor_method.js","../utils/class_upsert.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/class_static_methods/upsert.js                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isRemote;module.import('../utils/is_remote.js',{"default":function(v){isRemote=v}});var callMeteorMethod;module.import('../utils/call_meteor_method.js',{"default":function(v){callMeteorMethod=v}});var classUpsert;module.import('../utils/class_upsert.js',{"default":function(v){classUpsert=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function upsert(selector, modifier, options, callback) {                                                               // 5
  var Class = this;                                                                                                    // 6
                                                                                                                       //
  // If we omit options argument then it may be a callback function.                                                   //
  if (options instanceof Function) {                                                                                   // 9
    callback = options;                                                                                                // 10
    options = {};                                                                                                      // 11
  }                                                                                                                    // 12
  // Make sure that options is at least an empty object.                                                               //
  options = options || {};                                                                                             // 14
  // Prepare arguments.                                                                                                //
  var args = {                                                                                                         // 16
    className: Class.getName(),                                                                                        // 17
    selector: selector,                                                                                                // 18
    modifier: modifier,                                                                                                // 19
    options: options                                                                                                   // 20
  };                                                                                                                   // 16
                                                                                                                       //
  // If we are dealing with a remote collection and we are not on the server.                                          //
  if (isRemote(Class)) {                                                                                               // 24
    // Prepare meteor method name to be called.                                                                        //
    var methodName = '/Astronomy/upsert';                                                                              // 26
                                                                                                                       //
    try {                                                                                                              // 28
      // Run Meteor method.                                                                                            //
      return callMeteorMethod(Class, methodName, [args], callback);                                                    // 30
    }                                                                                                                  // 33
    // Catch stub exceptions.                                                                                          //
    catch (err) {                                                                                                      // 35
      if (callback) {                                                                                                  // 36
        callback(err);                                                                                                 // 37
        return null;                                                                                                   // 38
      }                                                                                                                // 39
      throw err;                                                                                                       // 40
    }                                                                                                                  // 41
  }                                                                                                                    // 42
                                                                                                                       //
  // If we can just remove a document without calling the meteor method. We may                                        //
  // be on the server or the collection may be local.                                                                  //
  try {                                                                                                                // 46
    // Set the "trusted" argument to true.                                                                             //
    args.trusted = true;                                                                                               // 48
    // Remove a document.                                                                                              //
    var result = classUpsert(args);                                                                                    // 50
    if (callback) {                                                                                                    // 51
      callback(undefined, result);                                                                                     // 52
    }                                                                                                                  // 53
    return result;                                                                                                     // 54
  } catch (err) {                                                                                                      // 55
    if (callback) {                                                                                                    // 57
      callback(err);                                                                                                   // 58
      return null;                                                                                                     // 59
    }                                                                                                                  // 60
    throw err;                                                                                                         // 61
  }                                                                                                                    // 62
}                                                                                                                      // 63
                                                                                                                       //
module.export("default",exports.default=(upsert));                                                                     // 65
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"hooks":{"apply_definition.js":["lodash","../../fields/utils/resolve_values.js","../utils/has_meteor_method.js","../class_static_methods/find.js","../class_static_methods/insert.js","../class_static_methods/update.js","../class_static_methods/upsert.js","../class_static_methods/remove.js","../class_prototype_methods/save.js","../class_prototype_methods/remove.js","../class_prototype_methods/reload.js","../class_prototype_methods/copy.js","../class_prototype_methods/get_modifier.js","../class_prototype_methods/get_modified.js","../class_prototype_methods/get_modified_values.js","../class_prototype_methods/is_modified.js","../meteor_methods/insert.js","../meteor_methods/update.js","../meteor_methods/upsert.js","../meteor_methods/remove.js","../class_events/before_init.js","../class_events/after_init.js","../class_events/from_json_value.js","../class_events/to_json_value.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/hooks/apply_definition.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var resolveValues;module.import('../../fields/utils/resolve_values.js',{"default":function(v){resolveValues=v}});var hasMeteorMethod;module.import('../utils/has_meteor_method.js',{"default":function(v){hasMeteorMethod=v}});var find,findOne;module.import('../class_static_methods/find.js',{"find":function(v){find=v},"findOne":function(v){findOne=v}});var insert;module.import('../class_static_methods/insert.js',{"default":function(v){insert=v}});var update;module.import('../class_static_methods/update.js',{"default":function(v){update=v}});var upsert;module.import('../class_static_methods/upsert.js',{"default":function(v){upsert=v}});var remove;module.import('../class_static_methods/remove.js',{"default":function(v){remove=v}});var protoSave;module.import('../class_prototype_methods/save.js',{"default":function(v){protoSave=v}});var protoRemove;module.import('../class_prototype_methods/remove.js',{"default":function(v){protoRemove=v}});var protoReload;module.import('../class_prototype_methods/reload.js',{"default":function(v){protoReload=v}});var protoCopy;module.import('../class_prototype_methods/copy.js',{"default":function(v){protoCopy=v}});var protoGetModifier;module.import('../class_prototype_methods/get_modifier.js',{"default":function(v){protoGetModifier=v}});var protoGetModified;module.import('../class_prototype_methods/get_modified.js',{"default":function(v){protoGetModified=v}});var protoGetModifiedValues;module.import('../class_prototype_methods/get_modified_values.js',{"default":function(v){protoGetModifiedValues=v}});var protoIsModified;module.import('../class_prototype_methods/is_modified.js',{"default":function(v){protoIsModified=v}});var meteorInsert;module.import('../meteor_methods/insert.js',{"default":function(v){meteorInsert=v}});var meteorUpdate;module.import('../meteor_methods/update.js',{"default":function(v){meteorUpdate=v}});var meteorUpsert;module.import('../meteor_methods/upsert.js',{"default":function(v){meteorUpsert=v}});var meteorRemove;module.import('../meteor_methods/remove.js',{"default":function(v){meteorRemove=v}});var beforeInit;module.import('../class_events/before_init.js',{"default":function(v){beforeInit=v}});var afterInit;module.import('../class_events/after_init.js',{"default":function(v){afterInit=v}});var fromJSONValue;module.import('../class_events/from_json_value.js',{"default":function(v){fromJSONValue=v}});var toJSONValue;module.import('../class_events/to_json_value.js',{"default":function(v){toJSONValue=v}});
// Utils.                                                                                                              //
                                                                                                                       // 3
                                                                                                                       // 4
// Class static methods.                                                                                               //
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
                                                                                                                       // 9
                                                                                                                       // 10
// Class prototype methods.                                                                                            //
                                                                                                                       // 12
                                                                                                                       // 13
                                                                                                                       // 14
                                                                                                                       // 15
                                                                                                                       // 16
                                                                                                                       // 17
                                                                                                                       // 18
                                                                                                                       // 19
// Meteor methods.                                                                                                     //
                                                                                                                       // 21
                                                                                                                       // 22
                                                                                                                       // 23
                                                                                                                       // 24
// Class events.                                                                                                       //
                                                                                                                       // 26
                                                                                                                       // 27
                                                                                                                       // 28
                                                                                                                       // 29
                                                                                                                       //
function onApplyDefinition(Class, parsedDefinition, className) {                                                       // 31
  var schema = Class.schema;                                                                                           // 32
                                                                                                                       //
  if (parsedDefinition.collection) {                                                                                   // 34
    (function () {                                                                                                     // 34
      var Collection = schema.collection = parsedDefinition.collection;                                                // 35
      var id = Collection._makeNewID();                                                                                // 36
                                                                                                                       //
      Class.extend({                                                                                                   // 38
        // Add the "_id" field.                                                                                        //
        fields: {                                                                                                      // 40
          _id: {                                                                                                       // 41
            name: '_id',                                                                                               // 42
            type: id.constructor,                                                                                      // 43
            optional: true                                                                                             // 44
          }                                                                                                            // 41
        },                                                                                                             // 40
        // Add storage events.                                                                                         //
        events: {                                                                                                      // 48
          beforeInit: [beforeInit],                                                                                    // 49
          toJSONValue: [toJSONValue],                                                                                  // 50
          fromJSONValue: [fromJSONValue]                                                                               // 51
        }                                                                                                              // 48
      }, ['fields', 'events']);                                                                                        // 38
                                                                                                                       //
      // If it's a remote collection then we register methods on the connection                                        //
      // object of the collection.                                                                                     //
      var connection = Collection._connection;                                                                         // 57
      if (connection) {                                                                                                // 58
        // Prepare meteor methods to be added.                                                                         //
        var meteorMethods = {                                                                                          // 60
          '/Astronomy/insert': meteorInsert,                                                                           // 61
          '/Astronomy/update': meteorUpdate,                                                                           // 62
          '/Astronomy/upsert': meteorUpsert,                                                                           // 63
          '/Astronomy/remove': meteorRemove                                                                            // 64
        };                                                                                                             // 60
        _.each(meteorMethods, function (meteorMethod, methodName) {                                                    // 66
          if (!hasMeteorMethod(connection, methodName)) {                                                              // 67
            // Add meteor method.                                                                                      //
            connection.methods(_.zipObject([methodName], [meteorMethod]));                                             // 69
          }                                                                                                            // 70
        });                                                                                                            // 71
      }                                                                                                                // 72
                                                                                                                       //
      // Class static methods.                                                                                         //
      Class.find = find;                                                                                               // 75
      Class.findOne = findOne;                                                                                         // 76
      Class.insert = insert;                                                                                           // 77
      Class.update = update;                                                                                           // 78
      Class.upsert = upsert;                                                                                           // 79
      Class.remove = remove;                                                                                           // 80
      // Class prototype methods.                                                                                      //
      Class.prototype.save = protoSave;                                                                                // 82
      Class.prototype.remove = protoRemove;                                                                            // 83
      Class.prototype.reload = protoReload;                                                                            // 84
      Class.prototype.copy = protoCopy;                                                                                // 85
      Class.prototype.getModifier = protoGetModifier;                                                                  // 86
      Class.prototype.getModified = protoGetModified;                                                                  // 87
      Class.prototype.getModifiedValues = protoGetModifiedValues;                                                      // 88
      Class.prototype.isModified = protoIsModified;                                                                    // 89
    })();                                                                                                              // 34
  }                                                                                                                    // 90
                                                                                                                       //
  // Apply type field.                                                                                                 //
  if (parsedDefinition.typeField) {                                                                                    // 93
    var _fields;                                                                                                       // 93
                                                                                                                       //
    var typeField = schema.typeField = parsedDefinition.typeField;                                                     // 94
    Class.extend({                                                                                                     // 95
      // Add the type field.                                                                                           //
      fields: (_fields = {}, _fields[typeField] = {                                                                    // 97
        type: String                                                                                                   // 99
      }, _fields),                                                                                                     // 98
      events: {                                                                                                        // 102
        afterInit: [afterInit]                                                                                         // 103
      }                                                                                                                // 102
    }, ['fields', 'events']);                                                                                          // 95
                                                                                                                       //
    if (parsedDefinition.typeField) {                                                                                  // 107
      schema.typeField = parsedDefinition.typeField;                                                                   // 108
    }                                                                                                                  // 109
  }                                                                                                                    // 110
                                                                                                                       //
  // If class has already assigned collection.                                                                         //
  var Collection = Class.getCollection();                                                                              // 113
  if (Collection) {                                                                                                    // 114
    // Apply custom transformation function if the transform property is a                                             //
    // function.                                                                                                       //
    if (_.isFunction(parsedDefinition.transform)) {                                                                    // 117
      schema.transform = function (rawDoc) {                                                                           // 118
        var resolvedDoc = resolveValues({                                                                              // 119
          Class: Class,                                                                                                // 120
          values: rawDoc                                                                                               // 121
        });                                                                                                            // 119
        return parsedDefinition.transform(resolvedDoc);                                                                // 123
      };                                                                                                               // 124
    } else if (parsedDefinition.transform === null) {                                                                  // 125
      schema.transform = null;                                                                                         // 127
    }                                                                                                                  // 128
                                                                                                                       //
    if (parsedDefinition.secured !== undefined) {                                                                      // 130
      _.extend(schema.secured, parsedDefinition.secured);                                                              // 131
    }                                                                                                                  // 132
  }                                                                                                                    // 133
};                                                                                                                     // 134
                                                                                                                       //
module.export("default",exports.default=(onApplyDefinition));                                                          // 136
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"init_class.js":["../class_static_methods/get_collection.js","../class_static_methods/get_type_field.js","../class_static_methods/get_transform.js","../class_static_methods/is_secured.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/hooks/init_class.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var getCollection;module.import('../class_static_methods/get_collection.js',{"default":function(v){getCollection=v}});var getTypeField;module.import('../class_static_methods/get_type_field.js',{"default":function(v){getTypeField=v}});var getTransform;module.import('../class_static_methods/get_transform.js',{"default":function(v){getTransform=v}});var isSecured;module.import('../class_static_methods/is_secured.js',{"default":function(v){isSecured=v}});// Class static methods.
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       //
function onInitClass(Class, className) {                                                                               // 7
  // Class static methods.                                                                                             //
  Class.getCollection = getCollection;                                                                                 // 9
  Class.getTypeField = getTypeField;                                                                                   // 10
  Class.getTransform = getTransform;                                                                                   // 11
  Class.isSecured = isSecured;                                                                                         // 12
};                                                                                                                     // 13
                                                                                                                       //
module.export("default",exports.default=(onInitClass));                                                                // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"init_definition.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/hooks/init_definition.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function onInitDefinition(definition, className) {                                                                     // 1
  definition.collection = undefined;                                                                                   // 2
  definition.typeField = undefined;                                                                                    // 3
  definition.transform = undefined;                                                                                    // 4
  definition.secured = undefined;                                                                                      // 5
};                                                                                                                     // 6
                                                                                                                       //
module.export("default",exports.default=(onInitDefinition));                                                           // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"init_schema.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/hooks/init_schema.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function onInitSchema(schema, className) {                                                                             // 1
  schema.collection = undefined;                                                                                       // 2
  schema.typeField = undefined;                                                                                        // 3
  schema.transform = undefined;                                                                                        // 4
  schema.secured = {                                                                                                   // 5
    common: true                                                                                                       // 6
  };                                                                                                                   // 5
};                                                                                                                     // 8
                                                                                                                       //
module.export("default",exports.default=(onInitSchema));                                                               // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"merge_definitions.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/hooks/merge_definitions.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {                                           // 3
  if (sourceDefinition.collection) {                                                                                   // 4
    targetDefinition.collection = sourceDefinition.collection;                                                         // 5
  }                                                                                                                    // 6
  if (sourceDefinition.typeField) {                                                                                    // 7
    targetDefinition.typeField = sourceDefinition.typeField;                                                           // 8
  }                                                                                                                    // 9
  if (sourceDefinition.transform !== undefined) {                                                                      // 10
    targetDefinition.transform = sourceDefinition.transform;                                                           // 11
  }                                                                                                                    // 12
  if (sourceDefinition.secured !== undefined) {                                                                        // 13
    targetDefinition.secured = _.extend({}, targetDefinition.secured, sourceDefinition.secured);                       // 14
  }                                                                                                                    // 19
};                                                                                                                     // 20
                                                                                                                       //
module.export("default",exports.default=(onMergeDefinitions));                                                         // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"parse_definition.js":["lodash","../../core/utils/throw_parse_error.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/hooks/parse_definition.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});
                                                                                                                       // 2
                                                                                                                       //
function onParseDefinition(parsedDefinition, definition, className) {                                                  // 4
  // Check existence and validity of the "collection" property.                                                        //
  if (definition.collection !== undefined) {                                                                           // 6
    // The "collection" property has to be an instance of the                                                          //
    // "Mongo.Collection".                                                                                             //
    if (!(definition.collection instanceof Mongo.Collection)) {                                                        // 9
      throwParseError([{                                                                                               // 10
        'class': className                                                                                             // 11
      }, {                                                                                                             // 10
        'property': 'collection'                                                                                       // 13
      }, 'Property value has to be an instance of "Mongo.Collection"']);                                               // 12
    }                                                                                                                  // 17
    parsedDefinition.collection = definition.collection;                                                               // 18
  }                                                                                                                    // 19
                                                                                                                       //
  // Check existence and validity of the "typeField" property.                                                         //
  if (definition.typeField !== undefined) {                                                                            // 22
    // The "typeField" property has to be a string.                                                                    //
    if (!Match.test(definition.typeField, String)) {                                                                   // 24
      throwParseError([{                                                                                               // 25
        'class': className                                                                                             // 26
      }, {                                                                                                             // 25
        'property': 'typeField'                                                                                        // 28
      }, 'Property value has to be a string']);                                                                        // 27
    }                                                                                                                  // 32
    parsedDefinition.typeField = definition.typeField;                                                                 // 33
  }                                                                                                                    // 34
                                                                                                                       //
  // Check existence and validity of the "transform" property.                                                         //
  if (definition.transform !== undefined) {                                                                            // 37
    // The "transform" property has to be a function.                                                                  //
    if (!Match.test(definition.transform, Match.OneOf(Function, null))) {                                              // 39
      throwParseError([{                                                                                               // 40
        'class': className                                                                                             // 41
      }, {                                                                                                             // 40
        'property': 'transform'                                                                                        // 43
      }, 'Property value has to be a function or null']);                                                              // 42
    }                                                                                                                  // 47
    parsedDefinition.transform = definition.transform;                                                                 // 48
  }                                                                                                                    // 49
                                                                                                                       //
  // Check existence and validity of the "secured" property.                                                           //
  if (definition.secured !== undefined) {                                                                              // 52
    if (!Match.test(definition.secured, Match.OneOf(Boolean, Object))) {                                               // 53
      throwParseError([{                                                                                               // 54
        'class': className                                                                                             // 55
      }, {                                                                                                             // 54
        'property': 'secured'                                                                                          // 57
      }, 'Property value has to be a boolean or an object with keys being ' + 'method name and values being boolean']);
    }                                                                                                                  // 62
    if (_.isBoolean(definition.secured)) {                                                                             // 63
      parsedDefinition.secured = {                                                                                     // 64
        common: definition.secured                                                                                     // 65
      };                                                                                                               // 64
    } else {                                                                                                           // 67
      parsedDefinition.secured = definition.secured;                                                                   // 69
    }                                                                                                                  // 70
  }                                                                                                                    // 71
};                                                                                                                     // 72
                                                                                                                       //
module.export("default",exports.default=(onParseDefinition));                                                          // 74
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"meteor_methods":{"insert.js":["../utils/class_insert.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/meteor_methods/insert.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var classInsert;module.import('../utils/class_insert.js',{"default":function(v){classInsert=v}});                      // 1
                                                                                                                       //
function insert(args) {                                                                                                // 3
  return classInsert(args);                                                                                            // 4
};                                                                                                                     // 5
                                                                                                                       //
module.export("default",exports.default=(insert));                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"remove.js":["../utils/class_remove.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/meteor_methods/remove.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var classRemove;module.import('../utils/class_remove.js',{"default":function(v){classRemove=v}});                      // 1
                                                                                                                       //
function remove(args) {                                                                                                // 3
  return classRemove(args);                                                                                            // 4
};                                                                                                                     // 5
                                                                                                                       //
module.export("default",exports.default=(remove));                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"update.js":["../utils/class_update.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/meteor_methods/update.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var classUpdate;module.import('../utils/class_update.js',{"default":function(v){classUpdate=v}});                      // 1
                                                                                                                       //
function update(args) {                                                                                                // 3
  return classUpdate(args);                                                                                            // 4
};                                                                                                                     // 5
                                                                                                                       //
module.export("default",exports.default=(update));                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"upsert.js":["../utils/class_upsert.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/meteor_methods/upsert.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var classUpsert;module.import('../utils/class_upsert.js',{"default":function(v){classUpsert=v}});                      // 1
                                                                                                                       //
function upsert(args) {                                                                                                // 3
  return classUpsert(args);                                                                                            // 4
};                                                                                                                     // 5
                                                                                                                       //
module.export("default",exports.default=(upsert));                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"utils":{"already_in_simulation.js":["meteor/ddp",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/already_in_simulation.js                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var DDP;module.import('meteor/ddp',{"DDP":function(v){DDP=v}});                                                        // 1
                                                                                                                       //
function alreadyInSimulation() {                                                                                       // 3
  var enclosing = DDP._CurrentInvocation.get();                                                                        // 4
  return enclosing && enclosing.isSimulation;                                                                          // 5
}                                                                                                                      // 6
                                                                                                                       //
module.export("default",exports.default=(alreadyInSimulation));                                                        // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"apply_modifier.js":["lodash","../../fields/utils/cast_nested.js","../../fields/utils/set_all.js","meteor/minimongo",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/apply_modifier.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var castNested;module.import('../../fields/utils/cast_nested.js',{"default":function(v){castNested=v}});var setAll;module.import('../../fields/utils/set_all.js',{"default":function(v){setAll=v}});var LocalCollection;module.import('meteor/minimongo',{"LocalCollection":function(v){LocalCollection=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       //
function applyModifier(_ref) {                                                                                         // 6
  var doc = _ref.doc;                                                                                                  // 10
  var modifier = _ref.modifier;                                                                                        // 10
  var options = _ref.options;                                                                                          // 10
                                                                                                                       //
  // Apply modifier only if provided.                                                                                  //
  if (modifier && _.size(modifier) > 0) {                                                                              // 12
    // Get raw object because the "_modify" method can only work with plain                                            //
    // objects.                                                                                                        //
    var rawDoc = doc.raw();                                                                                            // 15
    // Use Minimongo's the "_modify" method to apply modifier.                                                         //
    LocalCollection._modify(rawDoc, modifier, options);                                                                // 17
    // Set all values back again on a document.                                                                        //
    setAll(doc, rawDoc);                                                                                               // 19
  }                                                                                                                    // 20
};                                                                                                                     // 21
                                                                                                                       //
module.export("default",exports.default=(applyModifier));                                                              // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"call_meteor_method.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/call_meteor_method.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function callMeteorMethod(Class, methodName, methodArgs, callback) {                                                   // 1
  var Collection = Class.getCollection();                                                                              // 4
  var connection = Collection && Collection._connection;                                                               // 5
  if (!connection && (!Collection || !Collection._name)) {                                                             // 6
    connection = Meteor.connection;                                                                                    // 7
  }                                                                                                                    // 8
                                                                                                                       //
  // Prepare meteor method options.                                                                                    //
  var methodOptions = {                                                                                                // 11
    throwStubExceptions: true,                                                                                         // 12
    returnStubValue: true                                                                                              // 13
  };                                                                                                                   // 11
                                                                                                                       //
  return connection.apply(methodName, methodArgs, methodOptions, callback);                                            // 16
}                                                                                                                      // 19
                                                                                                                       //
module.export("default",exports.default=(callMeteorMethod));                                                           // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"class_insert.js":["../../../core/class.js","./document_insert.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/class_insert.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var AstroClass;module.import('../../../core/class.js',{"default":function(v){AstroClass=v}});var documentInsert;module.import('./document_insert.js',{"default":function(v){documentInsert=v}});
                                                                                                                       // 2
                                                                                                                       //
function classInsert() {                                                                                               // 4
  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 4
  var className = args.className;                                                                                      // 4
  var rawDoc = args.rawDoc;                                                                                            // 4
  var stopOnFirstError = args.stopOnFirstError;                                                                        // 4
  var fields = args.fields;                                                                                            // 4
  var _args$simulation = args.simulation;                                                                              // 4
  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 4
  var _args$trusted = args.trusted;                                                                                    // 4
  var trusted = _args$trusted === undefined ? false : _args$trusted;                                                   // 4
                                                                                                                       //
  // Stop execution, if we are not on the server, when the "simulation" flag is                                        //
  // not set.                                                                                                          //
                                                                                                                       //
  if (!simulation && !Meteor.isServer) {                                                                               // 16
    return;                                                                                                            // 17
  }                                                                                                                    // 18
                                                                                                                       //
  var Class = AstroClass.get(className);                                                                               // 20
  // Create a new document.                                                                                            //
  var doc = new Class(rawDoc);                                                                                         // 22
                                                                                                                       //
  // Insert a document.                                                                                                //
  return documentInsert({                                                                                              // 25
    doc: doc,                                                                                                          // 26
    stopOnFirstError: stopOnFirstError,                                                                                // 27
    simulation: simulation,                                                                                            // 28
    trusted: trusted                                                                                                   // 29
  });                                                                                                                  // 25
};                                                                                                                     // 31
                                                                                                                       //
module.export("default",exports.default=(classInsert));                                                                // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"class_remove.js":["../../../core/class.js","./already_in_simulation.js","./throw_if_selector_is_not_id.js","./document_remove.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/class_remove.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var AstroClass;module.import('../../../core/class.js',{"default":function(v){AstroClass=v}});var alreadyInSimulation;module.import('./already_in_simulation.js',{"default":function(v){alreadyInSimulation=v}});var throwIfSelectorIsNotId;module.import('./throw_if_selector_is_not_id.js',{"default":function(v){throwIfSelectorIsNotId=v}});var documentRemove;module.import('./document_remove.js',{"default":function(v){documentRemove=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       //
function classRemove() {                                                                                               // 6
  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 6
  var className = args.className;                                                                                      // 6
  var selector = args.selector;                                                                                        // 6
  var options = args.options;                                                                                          // 6
  var _args$simulation = args.simulation;                                                                              // 6
  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 6
  var _args$trusted = args.trusted;                                                                                    // 6
  var trusted = _args$trusted === undefined ? false : _args$trusted;                                                   // 6
                                                                                                                       //
  // Stop execution, if we are not on the server, when the "simulation" flag is                                        //
  // not set.                                                                                                          //
                                                                                                                       //
  if (!simulation && !Meteor.isServer) {                                                                               // 17
    return;                                                                                                            // 18
  }                                                                                                                    // 19
                                                                                                                       //
  // Throw exception if we are trying to perform an operation on more than one                                         //
  // document at once and it's not trusted call.                                                                       //
  if (!trusted && !alreadyInSimulation()) {                                                                            // 23
    throwIfSelectorIsNotId(selector, 'remove');                                                                        // 24
  }                                                                                                                    // 25
                                                                                                                       //
  var Class = AstroClass.get(className);                                                                               // 27
  // Get all documents matching selector.                                                                              //
  var docs = Class.find(selector, options);                                                                            // 29
  // Prepare result of the method execution.                                                                           //
  var result = 0;                                                                                                      // 31
                                                                                                                       //
  docs.forEach(function (doc) {                                                                                        // 33
    // Update a document.                                                                                              //
    result += documentRemove({                                                                                         // 35
      doc: doc,                                                                                                        // 36
      simulation: simulation,                                                                                          // 37
      trusted: trusted                                                                                                 // 38
    });                                                                                                                // 35
  });                                                                                                                  // 40
                                                                                                                       //
  return result;                                                                                                       // 42
};                                                                                                                     // 43
                                                                                                                       //
module.export("default",exports.default=(classRemove));                                                                // 45
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"class_update.js":["lodash","../../../core/class.js","./already_in_simulation.js","./throw_if_selector_is_not_id.js","./document_update.js","./apply_modifier.js","meteor/minimongo",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/class_update.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var AstroClass;module.import('../../../core/class.js',{"default":function(v){AstroClass=v}});var alreadyInSimulation;module.import('./already_in_simulation.js',{"default":function(v){alreadyInSimulation=v}});var throwIfSelectorIsNotId;module.import('./throw_if_selector_is_not_id.js',{"default":function(v){throwIfSelectorIsNotId=v}});var documentUpdate;module.import('./document_update.js',{"default":function(v){documentUpdate=v}});var applyModifier;module.import('./apply_modifier.js',{"default":function(v){applyModifier=v}});var Minimongo;module.import('meteor/minimongo',{"Minimongo":function(v){Minimongo=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       //
function classUpdate() {                                                                                               // 9
  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 9
  var className = args.className;                                                                                      // 9
  var selector = args.selector;                                                                                        // 9
  var modifier = args.modifier;                                                                                        // 9
  var options = args.options;                                                                                          // 9
  var stopOnFirstError = args.stopOnFirstError;                                                                        // 9
  var fields = args.fields;                                                                                            // 9
  var _args$simulation = args.simulation;                                                                              // 9
  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 9
  var _args$trusted = args.trusted;                                                                                    // 9
  var trusted = _args$trusted === undefined ? false : _args$trusted;                                                   // 9
                                                                                                                       //
  // Stop execution, if we are not on the server, when the "simulation" flag is                                        //
  // not set.                                                                                                          //
                                                                                                                       //
  if (!simulation && !Meteor.isServer) {                                                                               // 23
    return;                                                                                                            // 24
  }                                                                                                                    // 25
                                                                                                                       //
  // Throw exception if we are trying to perform an operation on more than one                                         //
  // document at once and it's not trusted call.                                                                       //
  if (!trusted && !alreadyInSimulation()) {                                                                            // 29
    throwIfSelectorIsNotId(selector, 'update');                                                                        // 30
  }                                                                                                                    // 31
                                                                                                                       //
  var Class = AstroClass.get(className);                                                                               // 33
  // Get all documents matching selector.                                                                              //
  var docs = void 0;                                                                                                   // 35
  if (options.multi) {                                                                                                 // 36
    docs = Class.find(selector, options);                                                                              // 37
  } else {                                                                                                             // 38
    docs = Class.find(selector, _.extend(options, {                                                                    // 40
      limit: 1                                                                                                         // 41
    }));                                                                                                               // 40
  }                                                                                                                    // 43
                                                                                                                       //
  // Create a minimongo matcher object to find array indexes on the projection                                         //
  // operator use.                                                                                                     //
  var matcher = new Minimongo.Matcher(selector);                                                                       // 47
                                                                                                                       //
  // Prepare result of the method execution.                                                                           //
  var result = 0;                                                                                                      // 50
                                                                                                                       //
  docs.forEach(function (doc) {                                                                                        // 52
    // Use matcher to find array indexes in a given document that needs updating                                       //
    // on the projection operator use.                                                                                 //
    var queryResult = matcher.documentMatches(doc);                                                                    // 55
                                                                                                                       //
    // Apply modifier.                                                                                                 //
    applyModifier({                                                                                                    // 58
      doc: doc,                                                                                                        // 59
      modifier: modifier,                                                                                              // 60
      options: queryResult.arrayIndices ? {                                                                            // 61
        arrayIndices: queryResult.arrayIndices                                                                         // 62
      } : {}                                                                                                           // 61
    });                                                                                                                // 58
                                                                                                                       //
    // Update a document.                                                                                              //
    result += documentUpdate({                                                                                         // 67
      doc: doc,                                                                                                        // 68
      stopOnFirstError: stopOnFirstError,                                                                              // 69
      simulation: simulation,                                                                                          // 70
      fields: fields,                                                                                                  // 71
      trusted: trusted                                                                                                 // 72
    });                                                                                                                // 67
  });                                                                                                                  // 74
                                                                                                                       //
  return result;                                                                                                       // 76
};                                                                                                                     // 77
                                                                                                                       //
module.export("default",exports.default=(classUpdate));                                                                // 79
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"class_upsert.js":["../../../core/class.js","./already_in_simulation.js","./throw_if_selector_is_not_id.js","./document_insert.js","./document_update.js","./apply_modifier.js","meteor/minimongo",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/class_upsert.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var AstroClass;module.import('../../../core/class.js',{"default":function(v){AstroClass=v}});var alreadyInSimulation;module.import('./already_in_simulation.js',{"default":function(v){alreadyInSimulation=v}});var throwIfSelectorIsNotId;module.import('./throw_if_selector_is_not_id.js',{"default":function(v){throwIfSelectorIsNotId=v}});var documentInsert;module.import('./document_insert.js',{"default":function(v){documentInsert=v}});var documentUpdate;module.import('./document_update.js',{"default":function(v){documentUpdate=v}});var applyModifier;module.import('./apply_modifier.js',{"default":function(v){applyModifier=v}});var Minimongo,LocalCollection;module.import('meteor/minimongo',{"Minimongo":function(v){Minimongo=v},"LocalCollection":function(v){LocalCollection=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       //
function classUpsert() {                                                                                               // 9
  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 9
  var className = args.className;                                                                                      // 9
  var selector = args.selector;                                                                                        // 9
  var modifier = args.modifier;                                                                                        // 9
  var options = args.options;                                                                                          // 9
  var stopOnFirstError = args.stopOnFirstError;                                                                        // 9
  var fields = args.fields;                                                                                            // 9
  var _args$simulation = args.simulation;                                                                              // 9
  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 9
  var _args$trusted = args.trusted;                                                                                    // 9
  var trusted = _args$trusted === undefined ? false : _args$trusted;                                                   // 9
                                                                                                                       //
  // Stop execution, if we are not on the server, when the "simulation" flag is                                        //
  // not set.                                                                                                          //
                                                                                                                       //
  if (!simulation && !Meteor.isServer) {                                                                               // 23
    return;                                                                                                            // 24
  }                                                                                                                    // 25
                                                                                                                       //
  // Throw exception if we are trying to perform an operation on more than one                                         //
  // document at once and it's not trusted call.                                                                       //
  if (!trusted && !alreadyInSimulation()) {                                                                            // 29
    throwIfSelectorIsNotId(selector, 'upsert');                                                                        // 30
  }                                                                                                                    // 31
                                                                                                                       //
  var Class = AstroClass.get(className);                                                                               // 33
  // Get all documents matching selector.                                                                              //
  var docs = void 0;                                                                                                   // 35
  if (options.multi) {                                                                                                 // 36
    docs = Class.find(selector, options);                                                                              // 37
  } else {                                                                                                             // 38
    docs = Class.find(selector, _.extend(options, {                                                                    // 40
      limit: 1                                                                                                         // 41
    }));                                                                                                               // 40
  }                                                                                                                    // 43
                                                                                                                       //
  // Create a minimongo matcher object to find array indexes on the projection                                         //
  // operator use.                                                                                                     //
  var matcher = new Minimongo.Matcher(selector);                                                                       // 47
                                                                                                                       //
  // Prepare result of the method execution.                                                                           //
  var result = {                                                                                                       // 50
    numberAffected: 0,                                                                                                 // 51
    insertedId: null                                                                                                   // 52
  };                                                                                                                   // 50
                                                                                                                       //
  if (docs.count() > 0) {                                                                                              // 55
    docs.forEach(function (doc) {                                                                                      // 56
      // Use matcher to find array indexes in a given document that needs updating                                     //
      // on the projection operator use.                                                                               //
      var queryResult = matcher.documentMatches(doc);                                                                  // 59
                                                                                                                       //
      // Apply modifier.                                                                                               //
      applyModifier({                                                                                                  // 62
        doc: doc,                                                                                                      // 63
        modifier: modifier,                                                                                            // 64
        options: queryResult.arrayIndices ? {                                                                          // 65
          arrayIndices: queryResult.arrayIndices                                                                       // 66
        } : {}                                                                                                         // 65
      });                                                                                                              // 62
                                                                                                                       //
      // Update a document.                                                                                            //
      result.numberAffected += documentUpdate({                                                                        // 71
        doc: doc,                                                                                                      // 72
        stopOnFirstError: stopOnFirstError,                                                                            // 73
        simulation: simulation,                                                                                        // 74
        fields: fields,                                                                                                // 75
        trusted: trusted                                                                                               // 76
      });                                                                                                              // 71
    });                                                                                                                // 78
  } else {                                                                                                             // 79
    // Create a new document from selector.                                                                            //
    var doc = new Class(LocalCollection._removeDollarOperators(selector));                                             // 82
    // Apply modifier for the insert operation.                                                                        //
    applyModifier({                                                                                                    // 84
      doc: doc,                                                                                                        // 85
      modifier: modifier,                                                                                              // 86
      options: {                                                                                                       // 87
        isInsert: true                                                                                                 // 88
      }                                                                                                                // 87
    });                                                                                                                // 84
                                                                                                                       //
    // Insert a document.                                                                                              //
    result.insertedId = documentInsert({                                                                               // 93
      doc: doc,                                                                                                        // 94
      stopOnFirstError: stopOnFirstError,                                                                              // 95
      simulation: simulation,                                                                                          // 96
      trusted: trusted                                                                                                 // 97
    });                                                                                                                // 93
  }                                                                                                                    // 99
                                                                                                                       //
  return result;                                                                                                       // 101
};                                                                                                                     // 102
                                                                                                                       //
module.export("default",exports.default=(classUpsert));                                                                // 104
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"document_insert.js":["lodash","../../fields/utils/cast_nested.js","../../fields/utils/raw_all.js","./trigger_before_save.js","./trigger_before_insert.js","./trigger_after_save.js","./trigger_after_insert.js","../../validators/utils/document_validate.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/document_insert.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var castNested;module.import('../../fields/utils/cast_nested.js',{"default":function(v){castNested=v}});var rawAll;module.import('../../fields/utils/raw_all.js',{"default":function(v){rawAll=v}});var triggerBeforeSave;module.import('./trigger_before_save.js',{"default":function(v){triggerBeforeSave=v}});var triggerBeforeInsert;module.import('./trigger_before_insert.js',{"default":function(v){triggerBeforeInsert=v}});var triggerAfterSave;module.import('./trigger_after_save.js',{"default":function(v){triggerAfterSave=v}});var triggerAfterInsert;module.import('./trigger_after_insert.js',{"default":function(v){triggerAfterInsert=v}});var documentValidate;module.import('../../validators/utils/document_validate.js',{"default":function(v){documentValidate=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
                                                                                                                       //
function documentInsert() {                                                                                            // 10
  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 10
  var doc = args.doc;                                                                                                  // 10
  var stopOnFirstError = args.stopOnFirstError;                                                                        // 10
  var fields = args.fields;                                                                                            // 10
  var _args$simulation = args.simulation;                                                                              // 10
  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 10
  var _args$trusted = args.trusted;                                                                                    // 10
  var trusted = _args$trusted === undefined ? false : _args$trusted;                                                   // 10
                                                                                                                       //
  // Stop execution, if we are not on the server, when the "simulation" flag is                                        //
  // not set.                                                                                                          //
                                                                                                                       //
  if (!simulation && !Meteor.isServer) {                                                                               // 21
    return;                                                                                                            // 22
  }                                                                                                                    // 23
                                                                                                                       //
  var Class = doc.constructor;                                                                                         // 25
  var Collection = Class.getCollection();                                                                              // 26
                                                                                                                       //
  // Generate ID if not provided.                                                                                      //
  if (!doc._id) {                                                                                                      // 29
    doc._id = Collection._makeNewID();                                                                                 // 30
  }                                                                                                                    // 31
                                                                                                                       //
  // Check if a class is secured.                                                                                      //
  if (Class.isSecured('insert') && Meteor.isServer && !trusted) {                                                      // 34
    throw new Meteor.Error(403, 'Inserting from the client is not allowed');                                           // 35
  }                                                                                                                    // 36
                                                                                                                       //
  // Cast nested documents.                                                                                            //
  castNested({                                                                                                         // 39
    doc: doc                                                                                                           // 40
  });                                                                                                                  // 39
                                                                                                                       //
  // Trigger before events.                                                                                            //
  triggerBeforeSave(doc, trusted);                                                                                     // 44
  triggerBeforeInsert(doc, trusted);                                                                                   // 45
                                                                                                                       //
  // Cast nested documents.                                                                                            //
  castNested({                                                                                                         // 48
    doc: doc                                                                                                           // 49
  });                                                                                                                  // 48
                                                                                                                       //
  // Validate a document.                                                                                              //
  documentValidate({                                                                                                   // 53
    doc: doc,                                                                                                          // 54
    fields: fields,                                                                                                    // 55
    stopOnFirstError: stopOnFirstError,                                                                                // 56
    simulation: simulation                                                                                             // 57
  });                                                                                                                  // 53
                                                                                                                       //
  // Get plain values of all fields. Pick only values that we want to save.                                            //
  var values = rawAll(doc, {                                                                                           // 61
    transient: false                                                                                                   // 62
  });                                                                                                                  // 61
  values = _.omitBy(values, _.isUndefined);                                                                            // 64
                                                                                                                       //
  // Insert a document.                                                                                                //
  try {                                                                                                                // 67
    // There is a difference in what the insert method returns depending on the                                        //
    // environment. On the client it returns an inserted document id, on the                                           //
    // server it returns array of inserted documents. So we always return the                                          //
    // generated id. We can't send an entire document because it could be a                                            //
    // security issue if we are not subscribed to all fields of a document.                                            //
    Collection._collection.insert(values);                                                                             // 73
                                                                                                                       //
    // Change the "_isNew" flag to "false". Now a document is not new.                                                 //
    doc._isNew = false;                                                                                                // 76
                                                                                                                       //
    // Trigger after events.                                                                                           //
    triggerAfterInsert(doc, trusted);                                                                                  // 79
    triggerAfterSave(doc, trusted);                                                                                    // 80
                                                                                                                       //
    return doc._id;                                                                                                    // 82
  } catch (err) {                                                                                                      // 83
    if (err.name === 'MongoError' || err.name === 'MinimongoError') {                                                  // 85
      throw new Meteor.Error(409, err.toString());                                                                     // 86
    } else {                                                                                                           // 87
      throw err;                                                                                                       // 89
    }                                                                                                                  // 90
  }                                                                                                                    // 91
};                                                                                                                     // 92
                                                                                                                       //
module.export("default",exports.default=(documentInsert));                                                             // 94
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"document_remove.js":["./trigger_before_remove.js","./trigger_after_remove.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/document_remove.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var triggerBeforeRemove;module.import('./trigger_before_remove.js',{"default":function(v){triggerBeforeRemove=v}});var triggerAfterRemove;module.import('./trigger_after_remove.js',{"default":function(v){triggerAfterRemove=v}});
                                                                                                                       // 2
                                                                                                                       //
function documentRemove() {                                                                                            // 4
  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 4
  var doc = args.doc;                                                                                                  // 4
  var _args$simulation = args.simulation;                                                                              // 4
  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 4
  var _args$trusted = args.trusted;                                                                                    // 4
  var trusted = _args$trusted === undefined ? false : _args$trusted;                                                   // 4
                                                                                                                       //
  // Stop execution, if we are not on the server, when the "simulation" flag is                                        //
  // not set.                                                                                                          //
                                                                                                                       //
  if (!simulation && !Meteor.isServer) {                                                                               // 13
    return;                                                                                                            // 14
  }                                                                                                                    // 15
                                                                                                                       //
  var Class = doc.constructor;                                                                                         // 17
  var Collection = Class.getCollection();                                                                              // 18
                                                                                                                       //
  // Remove only when document has the "_id" field (it's persisted).                                                   //
  if (doc._isNew || !doc._id) {                                                                                        // 21
    return 0;                                                                                                          // 22
  }                                                                                                                    // 23
                                                                                                                       //
  // Check if a class is secured.                                                                                      //
  if (Class.isSecured('remove') && Meteor.isServer && !trusted) {                                                      // 26
    throw new Meteor.Error(403, 'Removing from the client is not allowed');                                            // 27
  }                                                                                                                    // 28
                                                                                                                       //
  // Trigger before events.                                                                                            //
  triggerBeforeRemove(doc, trusted);                                                                                   // 31
                                                                                                                       //
  // Remove a document.                                                                                                //
  try {                                                                                                                // 34
    var result = Collection._collection.remove({                                                                       // 35
      _id: doc._id                                                                                                     // 36
    });                                                                                                                // 35
                                                                                                                       //
    // Mark a document as new, so it will be possible to save it again.                                                //
    doc._isNew = true;                                                                                                 // 40
                                                                                                                       //
    // Trigger after events.                                                                                           //
    triggerAfterRemove(doc, trusted);                                                                                  // 43
                                                                                                                       //
    return result;                                                                                                     // 45
  } catch (err) {                                                                                                      // 46
    if (err.name === 'MongoError' || err.name === 'MinimongoError') {                                                  // 48
      throw new Meteor.Error(409, err.toString());                                                                     // 49
    } else {                                                                                                           // 50
      throw err;                                                                                                       // 52
    }                                                                                                                  // 53
  }                                                                                                                    // 54
};                                                                                                                     // 55
                                                                                                                       //
module.export("default",exports.default=(documentRemove));                                                             // 57
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"document_update.js":["lodash","../../fields/utils/cast_nested.js","./trigger_before_save.js","./trigger_before_update.js","./trigger_after_save.js","./trigger_after_update.js","./is_modified.js","./get_modifier.js","../../validators/utils/document_validate.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/document_update.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var castNested;module.import('../../fields/utils/cast_nested.js',{"default":function(v){castNested=v}});var triggerBeforeSave;module.import('./trigger_before_save.js',{"default":function(v){triggerBeforeSave=v}});var triggerBeforeUpdate;module.import('./trigger_before_update.js',{"default":function(v){triggerBeforeUpdate=v}});var triggerAfterSave;module.import('./trigger_after_save.js',{"default":function(v){triggerAfterSave=v}});var triggerAfterUpdate;module.import('./trigger_after_update.js',{"default":function(v){triggerAfterUpdate=v}});var isModified;module.import('./is_modified.js',{"default":function(v){isModified=v}});var getModifier;module.import('./get_modifier.js',{"default":function(v){getModifier=v}});var documentValidate;module.import('../../validators/utils/document_validate.js',{"default":function(v){documentValidate=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
                                                                                                                       // 9
                                                                                                                       //
function documentUpdate() {                                                                                            // 11
  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 11
  var doc = args.doc;                                                                                                  // 11
  var stopOnFirstError = args.stopOnFirstError;                                                                        // 11
  var fields = args.fields;                                                                                            // 11
  var _args$simulation = args.simulation;                                                                              // 11
  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 11
  var _args$trusted = args.trusted;                                                                                    // 11
  var trusted = _args$trusted === undefined ? false : _args$trusted;                                                   // 11
                                                                                                                       //
  // Stop execution, if we are not on the server, when the "simulation" flag is                                        //
  // not set.                                                                                                          //
                                                                                                                       //
  if (!simulation && !Meteor.isServer) {                                                                               // 22
    return;                                                                                                            // 23
  }                                                                                                                    // 24
                                                                                                                       //
  var Class = doc.constructor;                                                                                         // 26
  var Collection = Class.getCollection();                                                                              // 27
                                                                                                                       //
  // Return if there were no modifications.                                                                            //
  if (!isModified({                                                                                                    // 30
    doc: doc,                                                                                                          // 31
    fields: fields                                                                                                     // 32
  })) {                                                                                                                // 30
    // Validate a document even if there were no modifications.                                                        //
    documentValidate({                                                                                                 // 35
      doc: doc,                                                                                                        // 36
      fields: fields,                                                                                                  // 37
      stopOnFirstError: stopOnFirstError,                                                                              // 38
      simulation: simulation                                                                                           // 39
    });                                                                                                                // 35
    // 0 documents were modified.                                                                                      //
    return 0;                                                                                                          // 42
  }                                                                                                                    // 43
                                                                                                                       //
  // Check if a class is secured.                                                                                      //
  if (Class.isSecured('update') && Meteor.isServer && !trusted) {                                                      // 46
    throw new Meteor.Error(403, 'Updating from the client is not allowed');                                            // 47
  }                                                                                                                    // 48
                                                                                                                       //
  // Cast nested documents.                                                                                            //
  castNested({                                                                                                         // 51
    doc: doc                                                                                                           // 52
  });                                                                                                                  // 51
                                                                                                                       //
  // Trigger before events.                                                                                            //
  triggerBeforeSave(doc, trusted);                                                                                     // 56
  triggerBeforeUpdate(doc, trusted);                                                                                   // 57
                                                                                                                       //
  // Cast nested documents.                                                                                            //
  castNested({                                                                                                         // 60
    doc: doc                                                                                                           // 61
  });                                                                                                                  // 60
                                                                                                                       //
  // Validate a document.                                                                                              //
  documentValidate({                                                                                                   // 65
    doc: doc,                                                                                                          // 66
    fields: fields,                                                                                                    // 67
    stopOnFirstError: stopOnFirstError,                                                                                // 68
    simulation: simulation                                                                                             // 69
  });                                                                                                                  // 65
                                                                                                                       //
  // Get modifier.                                                                                                     //
  var modifier = getModifier({                                                                                         // 73
    doc: doc,                                                                                                          // 74
    fields: fields                                                                                                     // 75
  });                                                                                                                  // 73
  // Stop execution is a modifier is empty.                                                                            //
  if (_.size(modifier) === 0) {                                                                                        // 78
    return 0;                                                                                                          // 79
  }                                                                                                                    // 80
  // Update a document.                                                                                                //
  try {                                                                                                                // 82
    var result = Collection._collection.update({                                                                       // 83
      _id: doc._id                                                                                                     // 84
    }, modifier);                                                                                                      // 83
                                                                                                                       //
    // Trigger after events.                                                                                           //
    triggerAfterUpdate(doc, trusted);                                                                                  // 88
    triggerAfterSave(doc, trusted);                                                                                    // 89
                                                                                                                       //
    return result;                                                                                                     // 91
  } catch (err) {                                                                                                      // 92
    if (err.name === 'MongoError' || err.name === 'MinimongoError') {                                                  // 94
      throw new Meteor.Error(409, err.toString());                                                                     // 95
    } else {                                                                                                           // 96
      throw err;                                                                                                       // 98
    }                                                                                                                  // 99
  }                                                                                                                    // 100
};                                                                                                                     // 101
                                                                                                                       //
module.export("default",exports.default=(documentUpdate));                                                             // 103
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_modified.js":["babel-runtime/helpers/toConsumableArray","lodash","../../../core/class.js","../../core/utils/throw_parse_error.js","../../fields/utils/raw_many.js","./omit_undefined.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/get_modified.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _toConsumableArray;module.import('babel-runtime/helpers/toConsumableArray',{"default":function(v){_toConsumableArray=v}});var _;module.import('lodash',{"default":function(v){_=v}});var AstroClass;module.import('../../../core/class.js',{"default":function(v){AstroClass=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});var rawMany;module.import('../../fields/utils/raw_many.js',{"default":function(v){rawMany=v}});var omitUndefined;module.import('./omit_undefined.js',{"default":function(v){omitUndefined=v}});
                                                                                                                       // 1
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       //
function diff(_ref) {                                                                                                  // 7
  var newDoc = _ref.newDoc;                                                                                            // 11
  var oldDoc = _ref.oldDoc;                                                                                            // 11
  var _ref$prefix = _ref.prefix;                                                                                       // 11
  var prefix = _ref$prefix === undefined ? '' : _ref$prefix;                                                           // 11
                                                                                                                       //
  var result = [];                                                                                                     // 12
                                                                                                                       //
  var fieldsNames = _.union(_.keys(oldDoc), _.keys(newDoc));                                                           // 14
  _.each(fieldsNames, function (fieldName) {                                                                           // 15
    var oldValue = oldDoc[fieldName];                                                                                  // 16
    var newValue = newDoc[fieldName];                                                                                  // 17
                                                                                                                       //
    if (!EJSON.equals(oldValue, newValue)) {                                                                           // 19
      (function () {                                                                                                   // 19
        var nestedPrefix = (prefix && prefix + '.') + fieldName;                                                       // 20
        result.push(nestedPrefix);                                                                                     // 21
                                                                                                                       //
        // Compare two objects.                                                                                        //
        if (_.isPlainObject(oldValue) && _.isPlainObject(newValue)) {                                                  // 24
                                                                                                                       //
          result.push.apply(result, _toConsumableArray(diff({                                                          // 26
            oldDoc: oldValue,                                                                                          // 27
            newDoc: newValue,                                                                                          // 28
            prefix: nestedPrefix                                                                                       // 29
          })));                                                                                                        // 26
        }                                                                                                              // 32
        // Compare two arrays.                                                                                         //
        else if (_.isArray(oldValue) && _.isArray(newValue)) {                                                         // 24
                                                                                                                       //
            var maxLength = Math.max(oldValue.length, newValue.length);                                                // 36
            _.each(_.range(maxLength), function (index) {                                                              // 37
              var arrayPrefix = nestedPrefix + '.' + index;                                                            // 38
              var oldElement = oldValue[index];                                                                        // 39
              var newElement = newValue[index];                                                                        // 40
              if (!EJSON.equals(oldElement, newElement)) {                                                             // 41
                result.push(arrayPrefix);                                                                              // 42
                // If both array elements are object, then we perform diff between                                     //
                // them.                                                                                               //
                if (_.isPlainObject(oldElement) && _.isPlainObject(newElement)) {                                      // 45
                  // Get a difference between elements.                                                                //
                  result.push.apply(result, _toConsumableArray(diff({                                                  // 47
                    oldDoc: oldElement,                                                                                // 48
                    newDoc: newElement,                                                                                // 49
                    prefix: arrayPrefix                                                                                // 50
                  })));                                                                                                // 47
                }                                                                                                      // 52
              }                                                                                                        // 53
            });                                                                                                        // 54
          }                                                                                                            // 56
      })();                                                                                                            // 19
    }                                                                                                                  // 57
  });                                                                                                                  // 58
                                                                                                                       //
  return result;                                                                                                       // 60
}                                                                                                                      // 61
                                                                                                                       //
function getModified() {                                                                                               // 63
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                               // 63
  var newDoc = options.doc;                                                                                            // 63
  var _options$transient = options.transient;                                                                          // 63
  var transient = _options$transient === undefined ? false : _options$transient;                                       // 63
  var _options$immutable = options.immutable;                                                                          // 63
  var immutable = _options$immutable === undefined ? false : _options$immutable;                                       // 63
  var fields = options.fields;                                                                                         // 63
                                                                                                                       //
                                                                                                                       //
  var Class = newDoc.constructor;                                                                                      // 71
  var opts = {                                                                                                         // 72
    defaults: false                                                                                                    // 73
  };                                                                                                                   // 72
  var oldDoc = newDoc._isNew ? new Class({}, opts) : Class.findOne(newDoc._id, opts);                                  // 75
  // If there is no document before modifications that may mean that we are not                                        //
  // subscribed to the publication publishing given document or we modified the                                        //
  // _id of a document.                                                                                                //
  if (!oldDoc) {                                                                                                       // 80
    throwParseError([{                                                                                                 // 81
      'module': 'storage'                                                                                              // 82
    }, {                                                                                                               // 81
      'utility': 'getModified'                                                                                         // 84
    }, 'Can not get a document before modifications. You are not subscribed ' + ('to the publication publishing a "' + Class.getName() + '" document with ') + ('the id "' + newDoc._id + '" or you have modified the "_id" field')]);
  }                                                                                                                    // 90
                                                                                                                       //
  // If there are not fields specified, then get all of them.                                                          //
  if (!fields) {                                                                                                       // 93
    fields = Class.getFieldsNames();                                                                                   // 94
  }                                                                                                                    // 95
                                                                                                                       //
  return diff({                                                                                                        // 97
    // Get raw data from the docs.                                                                                     //
    oldDoc: omitUndefined(rawMany(oldDoc, fields, {                                                                    // 99
      transient: transient,                                                                                            // 100
      immutable: immutable                                                                                             // 101
    })),                                                                                                               // 99
    newDoc: omitUndefined(rawMany(newDoc, fields, {                                                                    // 103
      transient: transient,                                                                                            // 104
      immutable: immutable                                                                                             // 105
    }))                                                                                                                // 103
  });                                                                                                                  // 97
};                                                                                                                     // 108
                                                                                                                       //
module.export("default",exports.default=(getModified));                                                                // 110
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_modifier.js":["lodash","../../core/utils/throw_parse_error.js","../../fields/utils/raw_many.js","./omit_undefined.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/get_modifier.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});var rawMany;module.import('../../fields/utils/raw_many.js',{"default":function(v){rawMany=v}});var omitUndefined;module.import('./omit_undefined.js',{"default":function(v){omitUndefined=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       //
function diff(_ref) {                                                                                                  // 6
  var oldDoc = _ref.oldDoc;                                                                                            // 10
  var newDoc = _ref.newDoc;                                                                                            // 10
  var _ref$prefix = _ref.prefix;                                                                                       // 10
  var prefix = _ref$prefix === undefined ? '' : _ref$prefix;                                                           // 10
                                                                                                                       //
  var $set = {};                                                                                                       // 11
  var $unset = {};                                                                                                     // 12
  var $push = {};                                                                                                      // 13
                                                                                                                       //
  var fieldsNames = _.union(_.keys(oldDoc), _.keys(newDoc));                                                           // 15
  _.each(fieldsNames, function (fieldName) {                                                                           // 16
    var oldValue = oldDoc[fieldName];                                                                                  // 17
    var newValue = newDoc[fieldName];                                                                                  // 18
                                                                                                                       //
    if (!EJSON.equals(oldValue, newValue)) {                                                                           // 20
      (function () {                                                                                                   // 20
        var nestedPrefix = (prefix && prefix + '.') + fieldName;                                                       // 21
                                                                                                                       //
        // Compare two objects.                                                                                        //
        if (_.isPlainObject(oldValue) && _.isPlainObject(newValue)) {                                                  // 24
          var _diff = diff({                                                                                           // 24
            oldDoc: oldValue,                                                                                          // 31
            newDoc: newValue,                                                                                          // 32
            prefix: nestedPrefix                                                                                       // 33
          });                                                                                                          // 30
                                                                                                                       //
          var $nestedSet = _diff.$set;                                                                                 // 24
          var $nestedUnset = _diff.$unset;                                                                             // 24
          var $nestedPush = _diff.$push;                                                                               // 24
                                                                                                                       //
          _.extend($set, $nestedSet);                                                                                  // 35
          _.extend($unset, $nestedUnset);                                                                              // 36
          _.extend($push, $nestedPush);                                                                                // 37
        }                                                                                                              // 39
        // Compare two arrays.                                                                                         //
        else if (_.isArray(oldValue) && _.isArray(newValue)) {                                                         // 24
            (function () {                                                                                             // 41
                                                                                                                       //
              // NOTE: We need check a new array size. If its length increased or                                      //
              // stayed the same then all changes can be registered using the $set                                     //
              // modifier. If an array length decreased, then we should slice it.                                      //
              // However it may not be possible if some element has also changed.                                      //
              // In such situation we have to override entire array.                                                   //
              var $arraySet = {};                                                                                      // 48
              var $arrayUnset = {};                                                                                    // 49
              var $arrayPush = {};                                                                                     // 50
              // Compare up to number of elements in the array after the change.                                       //
              _.each(newValue, function (newElement, index) {                                                          // 52
                var arrayPrefix = nestedPrefix + '.' + index;                                                          // 53
                var oldElement = oldValue[index];                                                                      // 54
                if (!EJSON.equals(oldElement, newElement)) {                                                           // 55
                  // If both array elements are object, then we perform diff between                                   //
                  // them.                                                                                             //
                  if (_.isPlainObject(oldElement) && _.isPlainObject(newElement)) {                                    // 58
                    // Get a difference between elements.                                                              //
                                                                                                                       //
                    var _diff2 = diff({                                                                                // 58
                      oldDoc: oldElement,                                                                              // 65
                      newDoc: newElement,                                                                              // 66
                      prefix: arrayPrefix                                                                              // 67
                    });                                                                                                // 64
                                                                                                                       //
                    var $elementSet = _diff2.$set;                                                                     // 58
                    var $elementUnset = _diff2.$unset;                                                                 // 58
                    var $elementPush = _diff2.$push;                                                                   // 58
                                                                                                                       //
                    _.extend($arraySet, $elementSet);                                                                  // 69
                    _.extend($arrayUnset, $elementUnset);                                                              // 70
                    _.extend($arrayPush, $elementPush);                                                                // 71
                  } else {                                                                                             // 72
                    $arraySet[arrayPrefix] = newElement;                                                               // 74
                  }                                                                                                    // 75
                }                                                                                                      // 76
              });                                                                                                      // 77
                                                                                                                       //
              // If an array was empty, then we override entire field with a new                                       //
              // array. That way we solve a problem with treating array indexes as                                     //
              // object keys, which cause inserting Object instead of Array into the                                   //
              // Mongo collection.                                                                                     //
              if (oldValue.length === 0 && newValue.length > 0) {                                                      // 83
                $set[nestedPrefix] = newValue;                                                                         // 84
              }                                                                                                        // 85
              // Array length increased or stayed the same.                                                            //
              else if (newValue.length >= oldValue.length) {                                                           // 83
                  _.extend($set, $arraySet);                                                                           // 88
                  _.extend($unset, $arrayUnset);                                                                       // 89
                  _.extend($push, $arrayPush);                                                                         // 90
                }                                                                                                      // 91
                // Array length decreased.                                                                             //
                else {                                                                                                 // 87
                    // At least one array element has changed.                                                         //
                    // FIXME: Due to an error in MiniMongo it's not possible to apply                                  //
                    // $push modifier with the $slice operator set to positive number.                                 //
                    // That's why the following "if" statement is always true and we                                   //
                    // have to override entire array when it was shrinked.                                             //
                    if (true || _.size($arraySet) > 0 || _.size($arrayPush) > 0) {                                     // 99
                      // So, we need to override entire array with its new state.                                      //
                      $set[nestedPrefix] = newValue;                                                                   // 101
                    }                                                                                                  // 102
                    // Array elements have not changed. The array length just shrinked.                                //
                    else {                                                                                             // 99
                        $push[nestedPrefix] = {                                                                        // 105
                          // We do not want to add any elements, we just want to slice an                              //
                          // array.                                                                                    //
                          $each: [],                                                                                   // 108
                          // Slice array to new array length.                                                          //
                          $slice: newValue.length                                                                      // 110
                        };                                                                                             // 105
                      }                                                                                                // 112
                  }                                                                                                    // 113
            })();                                                                                                      // 41
          } else {                                                                                                     // 115
                                                                                                                       //
            if (newValue !== undefined) {                                                                              // 118
              $set[nestedPrefix] = newValue;                                                                           // 119
            } else {                                                                                                   // 120
              $unset[nestedPrefix] = '';                                                                               // 122
            }                                                                                                          // 123
          }                                                                                                            // 124
      })();                                                                                                            // 20
    }                                                                                                                  // 125
  });                                                                                                                  // 126
                                                                                                                       //
  // Return only non empty modifiers.                                                                                  //
  var modifier = {};                                                                                                   // 129
  if (_.size($set)) {                                                                                                  // 130
    modifier.$set = $set;                                                                                              // 131
  }                                                                                                                    // 132
  if (_.size($unset)) {                                                                                                // 133
    modifier.$unset = $unset;                                                                                          // 134
  }                                                                                                                    // 135
  if (_.size($push)) {                                                                                                 // 136
    modifier.$push = $push;                                                                                            // 137
  }                                                                                                                    // 138
  return modifier;                                                                                                     // 139
};                                                                                                                     // 140
                                                                                                                       //
function getModifier(options) {                                                                                        // 142
  var newDoc = options.doc;                                                                                            // 142
  var _options$transient = options.transient;                                                                          // 142
  var transient = _options$transient === undefined ? false : _options$transient;                                       // 142
  var _options$immutable = options.immutable;                                                                          // 142
  var immutable = _options$immutable === undefined ? false : _options$immutable;                                       // 142
  var fields = options.fields;                                                                                         // 142
                                                                                                                       //
                                                                                                                       //
  var Class = newDoc.constructor;                                                                                      // 150
  var opts = {                                                                                                         // 151
    defaults: false                                                                                                    // 152
  };                                                                                                                   // 151
  var oldDoc = newDoc._isNew ? new Class({}, opts) : Class.findOne(newDoc._id, opts);                                  // 154
  // If there is no document before modifications that may mean that we are not                                        //
  // subscribed to the publication publishing given document or we modified the                                        //
  // _id of a document.                                                                                                //
  if (!oldDoc) {                                                                                                       // 159
    throwParseError([{                                                                                                 // 160
      'module': 'storage'                                                                                              // 161
    }, {                                                                                                               // 160
      'utility': 'getModified'                                                                                         // 163
    }, 'Can not get a document before modifications. You are not subscribed ' + ('to the publication publishing a "' + Class.getName() + '" document with ') + ('the id "' + newDoc._id + '" or you have modified the "_id" field')]);
  }                                                                                                                    // 169
                                                                                                                       //
  // If there are not fields specified, then get all of them.                                                          //
  if (!fields) {                                                                                                       // 172
    fields = Class.getFieldsNames();                                                                                   // 173
  }                                                                                                                    // 174
                                                                                                                       //
  return diff({                                                                                                        // 176
    // Get raw data from the docs.                                                                                     //
    oldDoc: omitUndefined(rawMany(oldDoc, fields, {                                                                    // 178
      transient: transient,                                                                                            // 179
      immutable: immutable                                                                                             // 180
    })),                                                                                                               // 178
    newDoc: omitUndefined(rawMany(newDoc, fields, {                                                                    // 182
      transient: transient,                                                                                            // 183
      immutable: immutable                                                                                             // 184
    }))                                                                                                                // 182
  });                                                                                                                  // 176
};                                                                                                                     // 187
                                                                                                                       //
module.export("default",exports.default=(getModifier));                                                                // 189
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"has_meteor_method.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/has_meteor_method.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function hasMeteorMethod(connection, methodName) {                                                                     // 3
  // There is inconsistency between client and server. On the client connection                                        //
  // object contains the "_methodHandlers" property and on the server the                                              //
  // "method_handlers" property.                                                                                       //
  var methodHandlers = connection._methodHandlers || connection.method_handlers;                                       // 7
                                                                                                                       //
  return _.has(methodHandlers, methodName);                                                                            // 9
};                                                                                                                     // 10
                                                                                                                       //
module.export("default",exports.default=(hasMeteorMethod));                                                            // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"is_modified.js":["lodash","./get_modified.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/is_modified.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var getModified;module.import('./get_modified.js',{"default":function(v){getModified=v}});
                                                                                                                       // 2
                                                                                                                       //
function isModified() {                                                                                                // 4
	var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                // 4
	var doc = options.doc;                                                                                                // 4
	var pattern = options.pattern;                                                                                        // 4
	var _options$transient = options.transient;                                                                           // 4
	var transient = _options$transient === undefined ? false : _options$transient;                                        // 4
	var _options$immutable = options.immutable;                                                                           // 4
	var immutable = _options$immutable === undefined ? false : _options$immutable;                                        // 4
                                                                                                                       //
                                                                                                                       //
	var modified = getModified({                                                                                          // 12
		doc: doc,                                                                                                            // 13
		transient: transient,                                                                                                // 14
		immutable: immutable                                                                                                 // 15
	});                                                                                                                   // 12
                                                                                                                       //
	if (pattern) {                                                                                                        // 18
		return _.includes(modified, pattern);                                                                                // 19
	} else {                                                                                                              // 20
		return modified.length > 0;                                                                                          // 22
	}                                                                                                                     // 23
};                                                                                                                     // 24
                                                                                                                       //
module.export("default",exports.default=(isModified));                                                                 // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"is_remote.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/is_remote.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function isRemote(Class) {                                                                                             // 1
  var Collection = Class.getCollection();                                                                              // 2
  if (!Collection) {                                                                                                   // 3
    return false;                                                                                                      // 4
  }                                                                                                                    // 5
  var connection = Collection._connection;                                                                             // 6
                                                                                                                       //
  return connection && connection !== Meteor.server;                                                                   // 8
}                                                                                                                      // 9
                                                                                                                       //
module.export("default",exports.default=(isRemote));                                                                   // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"omit_undefined.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/omit_undefined.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function omitUndefined(obj) {                                                                                          // 3
  return _.transform(obj, function (result, value, key) {                                                              // 4
    if (_.isPlainObject(value)) {                                                                                      // 5
      result[key] = omitUndefined(value);                                                                              // 6
    } else if (!_.isUndefined(value)) {                                                                                // 7
      result[key] = value;                                                                                             // 9
    }                                                                                                                  // 10
  });                                                                                                                  // 11
}                                                                                                                      // 12
                                                                                                                       //
module.export("default",exports.default=(omitUndefined));                                                              // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"throw_if_selector_is_not_id.js":["meteor/minimongo",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/throw_if_selector_is_not_id.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var LocalCollection;module.import('meteor/minimongo',{"LocalCollection":function(v){LocalCollection=v}});              // 1
                                                                                                                       //
function throwIfSelectorIsNotId(selector, methodName) {                                                                // 3
  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {                                                       // 4
    throw new Meteor.Error(403, 'Not permitted. Untrusted code may only ' + methodName + ' documents by ID.');         // 5
  }                                                                                                                    // 9
};                                                                                                                     // 10
                                                                                                                       //
module.export("default",exports.default=(throwIfSelectorIsNotId));                                                     // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"transform_to_class.js":["lodash","../../../core/class.js","../../fields/utils/resolve_values.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/transform_to_class.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var AstroClass;module.import('../../../core/class.js',{"default":function(v){AstroClass=v}});var resolveValues;module.import('../../fields/utils/resolve_values.js',{"default":function(v){resolveValues=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function transformToClass(className) {                                                                                 // 5
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                               // 5
                                                                                                                       //
  // Set default options.                                                                                              //
  _.defaults(options, {                                                                                                // 7
    defaults: true                                                                                                     // 8
  });                                                                                                                  // 7
  options.clone = false;                                                                                               // 10
                                                                                                                       //
  return function (rawDoc) {                                                                                           // 12
    var Class = AstroClass.get(className);                                                                             // 13
                                                                                                                       //
    if (Class) {                                                                                                       // 15
      var typeField = Class.getTypeField();                                                                            // 16
      if (typeField) {                                                                                                 // 17
        var TypeClass = AstroClass.get(rawDoc[typeField]);                                                             // 18
        if (TypeClass) {                                                                                               // 19
          Class = TypeClass;                                                                                           // 20
        }                                                                                                              // 21
      }                                                                                                                // 22
                                                                                                                       //
      // Resolve values using the "resolveValue" method if provided.                                                   //
      var resolvedDoc = resolveValues({                                                                                // 25
        Class: Class,                                                                                                  // 26
        values: rawDoc                                                                                                 // 27
      });                                                                                                              // 25
                                                                                                                       //
      var doc = new Class(resolvedDoc, options);                                                                       // 30
      doc._isNew = false;                                                                                              // 31
      return doc;                                                                                                      // 32
    }                                                                                                                  // 33
                                                                                                                       //
    return rawDoc;                                                                                                     // 35
  };                                                                                                                   // 36
};                                                                                                                     // 37
                                                                                                                       //
module.export("default",exports.default=(transformToClass));                                                           // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"trigger_after_insert.js":["../../events/event.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/trigger_after_insert.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Event;module.import('../../events/event.js',{"default":function(v){Event=v}});                                     // 1
                                                                                                                       //
function triggerAfterInsert(doc, trusted) {                                                                            // 3
	// Trigger the "afterInsert" event handlers.                                                                          //
	doc.dispatchEvent(new Event('afterInsert', {                                                                          // 5
		propagates: true,                                                                                                    // 6
		trusted: trusted                                                                                                     // 7
	}));                                                                                                                  // 5
};                                                                                                                     // 9
                                                                                                                       //
module.export("default",exports.default=(triggerAfterInsert));                                                         // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"trigger_after_remove.js":["../../events/event.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/trigger_after_remove.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Event;module.import('../../events/event.js',{"default":function(v){Event=v}});                                     // 1
                                                                                                                       //
function triggerAfterRemove(doc, trusted) {                                                                            // 3
	// Trigger the "afterRemove" event handlers.                                                                          //
	doc.dispatchEvent(new Event('afterRemove', {                                                                          // 5
		propagates: true,                                                                                                    // 6
		trusted: trusted                                                                                                     // 7
	}));                                                                                                                  // 5
};                                                                                                                     // 9
                                                                                                                       //
module.export("default",exports.default=(triggerAfterRemove));                                                         // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"trigger_after_save.js":["../../events/event.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/trigger_after_save.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Event;module.import('../../events/event.js',{"default":function(v){Event=v}});                                     // 1
                                                                                                                       //
function triggerAfterSave(doc, trusted) {                                                                              // 3
	// Trigger the "afterSave" event handlers.                                                                            //
	doc.dispatchEvent(new Event('afterSave', {                                                                            // 5
		propagates: true,                                                                                                    // 6
		trusted: trusted                                                                                                     // 7
	}));                                                                                                                  // 5
};                                                                                                                     // 9
                                                                                                                       //
module.export("default",exports.default=(triggerAfterSave));                                                           // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"trigger_after_update.js":["../../events/event.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/trigger_after_update.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Event;module.import('../../events/event.js',{"default":function(v){Event=v}});                                     // 1
                                                                                                                       //
function triggerAfterUpdate(doc, trusted) {                                                                            // 3
	// Trigger the "afterUpdate" event handlers.                                                                          //
	doc.dispatchEvent(new Event('afterUpdate', {                                                                          // 5
		propagates: true,                                                                                                    // 6
		trusted: trusted                                                                                                     // 7
	}));                                                                                                                  // 5
};                                                                                                                     // 9
                                                                                                                       //
module.export("default",exports.default=(triggerAfterUpdate));                                                         // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"trigger_before_insert.js":["../../events/event.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/trigger_before_insert.js                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Event;module.import('../../events/event.js',{"default":function(v){Event=v}});                                     // 1
                                                                                                                       //
function triggerBeforeInsert(doc, trusted) {                                                                           // 3
	// Trigger the "beforeInsert" event handlers.                                                                         //
	if (!doc.dispatchEvent(new Event('beforeInsert', {                                                                    // 5
		cancelable: true,                                                                                                    // 6
		propagates: true,                                                                                                    // 7
		trusted: trusted                                                                                                     // 8
	}))) {                                                                                                                // 5
		// If an event was prevented, then we stop here.                                                                     //
		throw new Meteor.Error('prevented', 'Operation prevented', {                                                         // 11
			eventName: 'beforeInsert'                                                                                           // 12
		});                                                                                                                  // 11
	}                                                                                                                     // 14
};                                                                                                                     // 15
                                                                                                                       //
module.export("default",exports.default=(triggerBeforeInsert));                                                        // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"trigger_before_remove.js":["../../events/event.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/trigger_before_remove.js                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Event;module.import('../../events/event.js',{"default":function(v){Event=v}});                                     // 1
                                                                                                                       //
function triggerBeforeRemove(doc, trusted) {                                                                           // 3
	// Trigger the "beforeRemove" event handlers.                                                                         //
	if (!doc.dispatchEvent(new Event('beforeRemove', {                                                                    // 5
		cancelable: true,                                                                                                    // 6
		propagates: true,                                                                                                    // 7
		trusted: trusted                                                                                                     // 8
	}))) {                                                                                                                // 5
		// If an event was prevented, then we stop here.                                                                     //
		throw new Meteor.Error('prevented', 'Operation prevented', {                                                         // 11
			eventName: 'beforeRemove'                                                                                           // 12
		});                                                                                                                  // 11
	}                                                                                                                     // 14
};                                                                                                                     // 15
                                                                                                                       //
module.export("default",exports.default=(triggerBeforeRemove));                                                        // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"trigger_before_save.js":["../../events/event.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/trigger_before_save.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Event;module.import('../../events/event.js',{"default":function(v){Event=v}});                                     // 1
                                                                                                                       //
function triggerBeforeSave(doc, trusted) {                                                                             // 3
	// Trigger the "beforeSave" event handlers.                                                                           //
	if (!doc.dispatchEvent(new Event('beforeSave', {                                                                      // 5
		cancelable: true,                                                                                                    // 6
		propagates: true,                                                                                                    // 7
		trusted: trusted                                                                                                     // 8
	}))) {                                                                                                                // 5
		// If an event was prevented, then we stop here.                                                                     //
		throw new Meteor.Error('prevented', 'Operation prevented', {                                                         // 11
			eventName: 'beforeSave'                                                                                             // 12
		});                                                                                                                  // 11
	}                                                                                                                     // 14
};                                                                                                                     // 15
                                                                                                                       //
module.export("default",exports.default=(triggerBeforeSave));                                                          // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"trigger_before_update.js":["../../events/event.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/storage/utils/trigger_before_update.js                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Event;module.import('../../events/event.js',{"default":function(v){Event=v}});                                     // 1
                                                                                                                       //
function triggerBeforeUpdate(doc, trusted) {                                                                           // 3
	// Trigger the "beforeUpdate" event handlers.                                                                         //
	if (!doc.dispatchEvent(new Event('beforeUpdate', {                                                                    // 5
		cancelable: true,                                                                                                    // 6
		propagates: true,                                                                                                    // 7
		trusted: trusted                                                                                                     // 8
	}))) {                                                                                                                // 5
		// If an event was prevented, then we stop here.                                                                     //
		throw new Meteor.Error('prevented', 'Operation prevented', {                                                         // 11
			eventName: 'beforeUpdate'                                                                                           // 12
		});                                                                                                                  // 11
	}                                                                                                                     // 14
};                                                                                                                     // 15
                                                                                                                       //
module.export("default",exports.default=(triggerBeforeUpdate));                                                        // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"validators":{"module.js":["../../core/module.js","./validators/comparison/choice.js","./validators/comparison/email.js","./validators/comparison/equal.js","./validators/comparison/not_equal.js","./validators/comparison/regexp.js","./validators/existence/null.js","./validators/existence/not_null.js","./validators/existence/required.js","./validators/logical/and.js","./validators/logical/or.js","./validators/nested/every.js","./validators/nested/has.js","./validators/nested/includes.js","./validators/size/gt.js","./validators/size/gte.js","./validators/size/length.js","./validators/size/lt.js","./validators/size/lte.js","./validators/size/max_length.js","./validators/size/min_length.js","./validators/type/array.js","./validators/type/boolean.js","./validators/type/class.js","./validators/type/date.js","./validators/type/integer.js","./validators/type/mongo_object_id.js","./validators/type/number.js","./validators/type/object.js","./validators/type/string.js","./utils/document_validate.js","./utils/parse_validators.js","./hooks/init_schema.js","./hooks/init_definition.js","./hooks/parse_definition.js","./hooks/merge_definitions.js","./hooks/apply_definition.js","./hooks/init_class.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/module.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Module;module.import('../../core/module.js',{"default":function(v){Module=v}});module.import('./validators/comparison/choice.js');module.import('./validators/comparison/email.js');module.import('./validators/comparison/equal.js');module.import('./validators/comparison/not_equal.js');module.import('./validators/comparison/regexp.js');module.import('./validators/existence/null.js');module.import('./validators/existence/not_null.js');module.import('./validators/existence/required.js');module.import('./validators/logical/and.js');module.import('./validators/logical/or.js');module.import('./validators/nested/every.js');module.import('./validators/nested/has.js');module.import('./validators/nested/includes.js');module.import('./validators/size/gt.js');module.import('./validators/size/gte.js');module.import('./validators/size/length.js');module.import('./validators/size/lt.js');module.import('./validators/size/lte.js');module.import('./validators/size/max_length.js');module.import('./validators/size/min_length.js');module.import('./validators/type/array.js');module.import('./validators/type/boolean.js');module.import('./validators/type/class.js');module.import('./validators/type/date.js');module.import('./validators/type/integer.js');module.import('./validators/type/mongo_object_id.js');module.import('./validators/type/number.js');module.import('./validators/type/object.js');module.import('./validators/type/string.js');var documentValidate;module.import('./utils/document_validate.js',{"default":function(v){documentValidate=v}});var parseValidators;module.import('./utils/parse_validators.js',{"default":function(v){parseValidators=v}});var onInitSchema;module.import('./hooks/init_schema.js',{"default":function(v){onInitSchema=v}});var onInitDefinition;module.import('./hooks/init_definition.js',{"default":function(v){onInitDefinition=v}});var onParseDefinition;module.import('./hooks/parse_definition.js',{"default":function(v){onParseDefinition=v}});var onMergeDefinitions;module.import('./hooks/merge_definitions.js',{"default":function(v){onMergeDefinitions=v}});var onApplyDefinition;module.import('./hooks/apply_definition.js',{"default":function(v){onApplyDefinition=v}});var onInitClass;module.import('./hooks/init_class.js',{"default":function(v){onInitClass=v}});
// Validators.                                                                                                         //
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
                                                                                                                       // 9
                                                                                                                       // 10
                                                                                                                       // 11
                                                                                                                       // 12
                                                                                                                       // 13
                                                                                                                       // 14
                                                                                                                       // 15
                                                                                                                       // 16
                                                                                                                       // 17
                                                                                                                       // 18
                                                                                                                       // 19
                                                                                                                       // 20
                                                                                                                       // 21
                                                                                                                       // 22
                                                                                                                       // 23
                                                                                                                       // 24
                                                                                                                       // 25
                                                                                                                       // 26
                                                                                                                       // 27
                                                                                                                       // 28
                                                                                                                       // 29
                                                                                                                       // 30
                                                                                                                       // 31
// Utils.                                                                                                              //
                                                                                                                       // 33
                                                                                                                       // 34
// Hooks.                                                                                                              //
                                                                                                                       // 36
                                                                                                                       // 37
                                                                                                                       // 38
                                                                                                                       // 39
                                                                                                                       // 40
                                                                                                                       // 41
                                                                                                                       //
Module.create({                                                                                                        // 43
	name: 'validators',                                                                                                   // 44
	onInitSchema: onInitSchema,                                                                                           // 45
	onInitDefinition: onInitDefinition,                                                                                   // 46
	onParseDefinition: onParseDefinition,                                                                                 // 47
	onMergeDefinitions: onMergeDefinitions,                                                                               // 48
	onApplyDefinition: onApplyDefinition,                                                                                 // 49
	onInitClass: onInitClass,                                                                                             // 50
	utils: {                                                                                                              // 51
		documentValidate: documentValidate,                                                                                  // 52
		parseValidators: parseValidators                                                                                     // 53
	}                                                                                                                     // 51
});                                                                                                                    // 43
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"validator.js":["babel-runtime/helpers/classCallCheck","meteor/mdg:validation-error","./validators.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validator.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{"default":function(v){_classCallCheck=v}});var ValidationError;module.import('meteor/mdg:validation-error',{"ValidationError":function(v){ValidationError=v}});var Validators;module.import('./validators.js',{"default":function(v){Validators=v}});
                                                                                                                       // 1
                                                                                                                       // 2
                                                                                                                       //
var Validator = function () {                                                                                          //
  function Validator(definition) {                                                                                     // 5
    _classCallCheck(this, Validator);                                                                                  // 5
                                                                                                                       //
    this.name = definition.name;                                                                                       // 6
    if (definition.parseParam) {                                                                                       // 7
      this.parseParam = definition.parseParam;                                                                         // 8
    }                                                                                                                  // 9
    if (definition.isValid) {                                                                                          // 10
      this.isValid = definition.isValid;                                                                               // 11
    }                                                                                                                  // 12
    if (definition.validate) {                                                                                         // 13
      this.validate = definition.validate;                                                                             // 14
    }                                                                                                                  // 15
    if (definition.resolveError) {                                                                                     // 16
      this.resolveError = definition.resolveError;                                                                     // 17
    }                                                                                                                  // 18
  }                                                                                                                    // 19
                                                                                                                       //
  Validator.prototype.validate = function validate(_ref) {                                                             //
    var _this = this;                                                                                                  // 30
                                                                                                                       //
    var doc = _ref.doc;                                                                                                // 30
    var name = _ref.name;                                                                                              // 30
    var nestedName = _ref.nestedName;                                                                                  // 30
    var value = _ref.value;                                                                                            // 30
    var param = _ref.param;                                                                                            // 30
    var resolveParam = _ref.resolveParam;                                                                              // 30
    var message = _ref.message;                                                                                        // 30
    var resolveError = _ref.resolveError;                                                                              // 30
                                                                                                                       //
    // Get the class name, which will be used later for letting know what class                                        //
    // thrown error.                                                                                                   //
    var className = doc.constructor.getName();                                                                         // 33
                                                                                                                       //
    // Resolve param is the "resolveParam" function is provided.                                                       //
    if (Match.test(resolveParam, Function)) {                                                                          // 36
      param = resolveParam({                                                                                           // 37
        doc: doc,                                                                                                      // 38
        name: name,                                                                                                    // 39
        nestedName: nestedName,                                                                                        // 40
        value: value                                                                                                   // 41
      });                                                                                                              // 37
    }                                                                                                                  // 43
    // Parse param type if validator has parsing function.                                                             //
    if (Match.test(this.parseParam, Function)) {                                                                       // 45
      this.parseParam(param);                                                                                          // 46
    }                                                                                                                  // 47
    // Prepare data for validation.                                                                                    //
    var args = {                                                                                                       // 49
      className: className,                                                                                            // 50
      doc: doc,                                                                                                        // 51
      name: name,                                                                                                      // 52
      nestedName: nestedName,                                                                                          // 53
      value: value,                                                                                                    // 54
      param: param,                                                                                                    // 55
      validator: this.name                                                                                             // 56
    };                                                                                                                 // 49
    // Perform validation.                                                                                             //
    if (!this.isValid(args)) {                                                                                         // 59
      // Prepare function for throwing validation error.                                                               //
      var throwError = function throwError(message) {                                                                  // 61
        // Throw error only if the error message has been successfully                                                 //
        // generated.                                                                                                  //
        if (!message) {                                                                                                // 64
          return;                                                                                                      // 65
        }                                                                                                              // 66
        // Throw error.                                                                                                //
        throw new ValidationError([{                                                                                   // 68
          className: className,                                                                                        // 69
          type: _this.name,                                                                                            // 70
          name: name,                                                                                                  // 71
          nestedName: nestedName,                                                                                      // 72
          value: value,                                                                                                // 73
          param: param,                                                                                                // 74
          message: message                                                                                             // 75
        }], message);                                                                                                  // 68
      };                                                                                                               // 77
                                                                                                                       //
      // Generate error message using the "resolveError" function if provided.                                         //
      if (Match.test(resolveError, Function)) {                                                                        // 80
        throwError(resolveError(args));                                                                                // 81
      }                                                                                                                // 82
      // Get error message from the string if provided.                                                                //
      if (Match.test(message, String)) {                                                                               // 84
        throwError(message);                                                                                           // 85
      }                                                                                                                // 86
      // Get error by executing a class level "resolveError" function.                                                 //
      var Class = doc.constructor;                                                                                     // 88
      var classResolveError = Class.getResolveError();                                                                 // 89
      if (classResolveError instanceof Function) {                                                                     // 90
        throwError(classResolveError(args));                                                                           // 91
      }                                                                                                                // 92
      // Get default error message.                                                                                    //
      if (this.resolveError instanceof Function) {                                                                     // 94
        throwError(this.resolveError(args));                                                                           // 95
      }                                                                                                                // 96
      throwError(ValidationError.DEFAULT_REASON);                                                                      // 97
    }                                                                                                                  // 98
  };                                                                                                                   // 99
                                                                                                                       //
  Validator.create = function create(definition) {                                                                     //
    var validator = new Validator(definition);                                                                         // 102
    Validator.validators[validator.name] = validator;                                                                  // 103
                                                                                                                       //
    // Create a validation function.                                                                                   //
    return Validators[validator.name] = function (options) {                                                           // 106
      validator.validate(options);                                                                                     // 107
    };                                                                                                                 // 108
  };                                                                                                                   // 109
                                                                                                                       //
  return Validator;                                                                                                    //
}();                                                                                                                   //
                                                                                                                       //
;                                                                                                                      // 110
                                                                                                                       //
Validator.validators = {};                                                                                             // 112
                                                                                                                       //
module.export("default",exports.default=(Validator));                                                                  // 114
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"validators.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Validators = {};                                                                                                   // 1
                                                                                                                       //
module.export("default",exports.default=(Validators));                                                                 // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"class_prototype_methods":{"validate.js":["../../fields/utils/cast_nested.js","../utils/document_validate.js","../../storage/utils/call_meteor_method.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/class_prototype_methods/validate.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var castNested;module.import('../../fields/utils/cast_nested.js',{"default":function(v){castNested=v}});var documentValidate;module.import('../utils/document_validate.js',{"default":function(v){documentValidate=v}});var callMeteorMethod;module.import('../../storage/utils/call_meteor_method.js',{"default":function(v){callMeteorMethod=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function validate() {                                                                                                  // 5
  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                                  // 5
  var callback = arguments[1];                                                                                         // 5
                                                                                                                       //
  var doc = this;                                                                                                      // 6
  var Class = doc.constructor;                                                                                         // 7
  var Collection = Class.getCollection();                                                                              // 8
  var connection = Collection && Collection._connection;                                                               // 9
  if (!connection && (!Collection || !Collection._name)) {                                                             // 10
    connection = Meteor.connection;                                                                                    // 11
  }                                                                                                                    // 12
                                                                                                                       //
  // If the first argument is callback function then reassign values.                                                  //
  if (arguments.length === 1 && Match.test(args, Function)) {                                                          // 15
    callback = args;                                                                                                   // 16
    args = {};                                                                                                         // 17
  }                                                                                                                    // 18
                                                                                                                       //
  var _args = args;                                                                                                    // 5
  var _args$fields = _args.fields;                                                                                     // 5
  var fields = _args$fields === undefined ? Class.getValidationOrder() : _args$fields;                                 // 5
  var _args$stopOnFirstErro = _args.stopOnFirstError;                                                                  // 5
  var stopOnFirstError = _args$stopOnFirstErro === undefined ? true : _args$stopOnFirstErro;                           // 5
  var _args$simulation = _args.simulation;                                                                             // 5
  var simulation = _args$simulation === undefined ? true : _args$simulation;                                           // 5
                                                                                                                       //
  // If a fields property is a string then put it into array.                                                          //
                                                                                                                       //
  if (Match.test(fields, String)) {                                                                                    // 27
    fields = [fields];                                                                                                 // 28
  }                                                                                                                    // 29
                                                                                                                       //
  // Cast nested documents.                                                                                            //
  castNested({                                                                                                         // 32
    doc: doc                                                                                                           // 33
  });                                                                                                                  // 32
                                                                                                                       //
  // Prepare arguments for meteor method and utility.                                                                  //
  var methodArgs = {                                                                                                   // 37
    doc: doc,                                                                                                          // 38
    fields: fields,                                                                                                    // 39
    stopOnFirstError: stopOnFirstError,                                                                                // 40
    simulation: simulation                                                                                             // 41
  };                                                                                                                   // 37
                                                                                                                       //
  // If we are dealing with a remote collection and we are not on the server.                                          //
  if (connection && connection !== Meteor.server) {                                                                    // 45
    // Prepare arguments for meteor method.                                                                            //
    var methodName = '/Astronomy/validate';                                                                            // 47
                                                                                                                       //
    try {                                                                                                              // 49
      // Run Meteor method.                                                                                            //
      return callMeteorMethod(Class, methodName, [methodArgs], callback);                                              // 51
    }                                                                                                                  // 54
    // Catch stub exceptions.                                                                                          //
    catch (err) {                                                                                                      // 56
      if (callback) {                                                                                                  // 57
        callback(err);                                                                                                 // 58
        return null;                                                                                                   // 59
      }                                                                                                                // 60
      throw err;                                                                                                       // 61
    }                                                                                                                  // 62
  }                                                                                                                    // 63
                                                                                                                       //
  // If we can just validate a document without calling the meteor method. We                                          //
  // may be on the server or the collection may be local.                                                              //
  try {                                                                                                                // 67
    // Validate a document.                                                                                            //
    var result = documentValidate(methodArgs);                                                                         // 69
    if (callback) {                                                                                                    // 70
      callback();                                                                                                      // 71
    }                                                                                                                  // 72
    return result;                                                                                                     // 73
  } catch (err) {                                                                                                      // 74
    if (callback) {                                                                                                    // 76
      callback(err);                                                                                                   // 77
      return null;                                                                                                     // 78
    }                                                                                                                  // 79
    throw err;                                                                                                         // 80
  }                                                                                                                    // 81
}                                                                                                                      // 82
                                                                                                                       //
module.export("default",exports.default=(validate));                                                                   // 84
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"validate_all.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/class_prototype_methods/validate_all.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function validateAll() {                                                                                               // 3
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                               // 3
  var callback = arguments[1];                                                                                         // 3
                                                                                                                       //
  var doc = this;                                                                                                      // 4
  var Class = doc.constructor;                                                                                         // 5
                                                                                                                       //
  // If the first argument is callback function then reassign values.                                                  //
  if (arguments.length === 1 && Match.test(options, Function)) {                                                       // 8
    callback = options;                                                                                                // 9
    options = {};                                                                                                      // 10
  }                                                                                                                    // 11
                                                                                                                       //
  _.extend(options, {                                                                                                  // 13
    fields: Class.getValidationOrder(),                                                                                // 14
    stopOnFirstError: false                                                                                            // 15
  });                                                                                                                  // 13
                                                                                                                       //
  doc.validate(options, callback);                                                                                     // 18
};                                                                                                                     // 19
                                                                                                                       //
module.export("default",exports.default=(validateAll));                                                                // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"class_static_methods":{"getCheckPattern.js":["meteor/check","meteor/mdg:validation-error",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/class_static_methods/getCheckPattern.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Match;module.import('meteor/check',{"Match":function(v){Match=v}});var ValidationError;module.import('meteor/mdg:validation-error',{"ValidationError":function(v){ValidationError=v}});
                                                                                                                       // 2
                                                                                                                       //
function getCheckPattern() {                                                                                           // 4
  var Class = this;                                                                                                    // 5
  return Match.Where(function (doc) {                                                                                  // 6
    try {                                                                                                              // 7
      doc.validate();                                                                                                  // 8
    } catch (err) {                                                                                                    // 9
      if (ValidationError.is(err)) {                                                                                   // 11
        var firstError = err.details[0];                                                                               // 12
        var matchError = new Match.Error(firstError.message);                                                          // 13
        matchError.sanitizedError = err;                                                                               // 14
        throw matchError;                                                                                              // 15
      } else {                                                                                                         // 16
        throw err;                                                                                                     // 18
      }                                                                                                                // 19
    }                                                                                                                  // 20
    return true;                                                                                                       // 21
  });                                                                                                                  // 22
};                                                                                                                     // 23
                                                                                                                       //
module.export("default",exports.default=(getCheckPattern));                                                            // 25
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_resolve_error.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/class_static_methods/get_resolve_error.js                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function getResolveError() {                                                                                           // 1
	var Class = this;                                                                                                     // 2
                                                                                                                       //
	return Class.schema.resolveError;                                                                                     // 4
};                                                                                                                     // 5
                                                                                                                       //
module.export("default",exports.default=(getResolveError));                                                            // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"get_validation_order.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/class_static_methods/get_validation_order.js                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function getValidationOrder() {                                                                                        // 3
	var Class = this;                                                                                                     // 4
                                                                                                                       //
	// Get all validators.                                                                                                //
	var validators = Class.getValidators();                                                                               // 7
	// Get fields names for defined validators.                                                                           //
	var fieldsNames = Class.getFieldsNames();                                                                             // 9
	// Make variable name shorter.                                                                                        //
	var validationOrder = Class.schema.validationOrder;                                                                   // 11
                                                                                                                       //
	// If there is a validation order provided, then combine fields provided in                                           //
	// the validation order with the order of validators.                                                                 //
	if (validationOrder) {                                                                                                // 15
		// Detect what fields are not present in the validation order.                                                       //
		var diff = _.difference(fieldsNames, validationOrder);                                                               // 17
		// Combine validation order with fields that left.                                                                   //
		return validationOrder.concat(diff);                                                                                 // 19
	}                                                                                                                     // 20
	// If there is no validation order, then just return fields names in the order                                        //
	// in which validators were defined.                                                                                  //
	else {                                                                                                                // 15
			return fieldsNames;                                                                                                 // 24
		}                                                                                                                    // 25
};                                                                                                                     // 26
                                                                                                                       //
module.export("default",exports.default=(getValidationOrder));                                                         // 28
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get_validators.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/class_static_methods/get_validators.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function getValidators(fieldName) {                                                                                    // 1
	var Class = this;                                                                                                     // 2
                                                                                                                       //
	if (!Match.test(fieldName, Match.Optional(String))) {                                                                 // 4
		throw TypeError('The first argument of the "getValidators" function has to be a string ' + 'or left empty');         // 5
	}                                                                                                                     // 9
                                                                                                                       //
	if (fieldName) {                                                                                                      // 11
		return Class.schema.validators[fieldName];                                                                           // 12
	} else {                                                                                                              // 13
		return Class.schema.validators;                                                                                      // 15
	}                                                                                                                     // 16
};                                                                                                                     // 17
                                                                                                                       //
module.export("default",exports.default=(getValidators));                                                              // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"validate.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/class_static_methods/validate.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function validate(rawDoc) {                                                                                            // 3
  var Class = this;                                                                                                    // 4
  var doc = new Class(rawDoc);                                                                                         // 5
  var args = _.tail(arguments);                                                                                        // 6
  return doc.validate.apply(doc, args);                                                                                // 7
};                                                                                                                     // 8
                                                                                                                       //
module.export("default",exports.default=(validate));                                                                   // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"validateAll.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/class_static_methods/validateAll.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function validateAll(rawDoc) {                                                                                         // 3
  var Class = this;                                                                                                    // 4
  var doc = new Class(rawDoc);                                                                                         // 5
  var args = _.tail(arguments);                                                                                        // 6
  return doc.validateAll.apply(doc, args);                                                                             // 7
};                                                                                                                     // 8
                                                                                                                       //
module.export("default",exports.default=(validateAll));                                                                // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"hooks":{"apply_definition.js":["lodash","../../storage/utils/has_meteor_method.js","../meteor_methods/validate.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/hooks/apply_definition.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var hasMeteorMethod;module.import('../../storage/utils/has_meteor_method.js',{"default":function(v){hasMeteorMethod=v}});var meteorValidate;module.import('../meteor_methods/validate.js',{"default":function(v){meteorValidate=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function onApplyDefinition(Class, parsedDefinition, className) {                                                       // 5
  _.each(parsedDefinition.validators, function (validators, fieldName) {                                               // 6
    Class.schema.validators[fieldName] = Class.schema.validators[fieldName] || [];                                     // 7
    _.each(validators, function (validator) {                                                                          // 9
      Class.schema.validators[fieldName] = Class.schema.validators[fieldName].concat(validator);                       // 10
    });                                                                                                                // 12
  });                                                                                                                  // 13
                                                                                                                       //
  // Add the "/Astronomy/validate" meteor method only when a class has assigned                                        //
  // collection.                                                                                                       //
  var Collection = Class.getCollection();                                                                              // 17
  // If it's a remote collection then we register methods on the connection                                            //
  // object of the collection.                                                                                         //
  var connection = Collection && Collection._connection;                                                               // 20
  // If it's not a remote collection than use main Meteor connection.                                                  //
  if (!connection && (!Collection || !Collection._name)) {                                                             // 22
    connection = Meteor.connection || Meteor.server;                                                                   // 23
  }                                                                                                                    // 24
  if (connection) {                                                                                                    // 25
    // Prepare meteor methods to be added.                                                                             //
    var meteorMethods = {                                                                                              // 27
      '/Astronomy/validate': meteorValidate                                                                            // 28
    };                                                                                                                 // 27
    _.each(meteorMethods, function (meteorMethod, methodName) {                                                        // 30
      if (!hasMeteorMethod(connection, methodName)) {                                                                  // 31
        // Add meteor method.                                                                                          //
        connection.methods(_.zipObject([methodName], [meteorMethod]));                                                 // 33
      }                                                                                                                // 34
    });                                                                                                                // 35
  }                                                                                                                    // 36
                                                                                                                       //
  Class.schema.resolveError = parsedDefinition.resolveError;                                                           // 38
};                                                                                                                     // 39
                                                                                                                       //
module.export("default",exports.default=(onApplyDefinition));                                                          // 41
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"init_class.js":["../class_static_methods/get_resolve_error.js","../class_static_methods/get_validation_order.js","../class_static_methods/get_validators.js","../class_static_methods/validate.js","../class_static_methods/validateAll.js","../class_static_methods/getCheckPattern.js","../class_prototype_methods/validate.js","../class_prototype_methods/validate_all.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/hooks/init_class.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var getResolveError;module.import('../class_static_methods/get_resolve_error.js',{"default":function(v){getResolveError=v}});var getValidationOrder;module.import('../class_static_methods/get_validation_order.js',{"default":function(v){getValidationOrder=v}});var getValidators;module.import('../class_static_methods/get_validators.js',{"default":function(v){getValidators=v}});var validateStatic;module.import('../class_static_methods/validate.js',{"default":function(v){validateStatic=v}});var validateAllStatic;module.import('../class_static_methods/validateAll.js',{"default":function(v){validateAllStatic=v}});var getCheckPatternStatic;module.import('../class_static_methods/getCheckPattern.js',{"default":function(v){getCheckPatternStatic=v}});var validate;module.import('../class_prototype_methods/validate.js',{"default":function(v){validate=v}});var validateAll;module.import('../class_prototype_methods/validate_all.js',{"default":function(v){validateAll=v}});// Class static methods.
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
// Class prototype methods.                                                                                            //
                                                                                                                       // 9
                                                                                                                       // 10
                                                                                                                       //
function onInitClass(Class, className) {                                                                               // 12
	// Class static methods.                                                                                              //
	Class.getResolveError = getResolveError;                                                                              // 14
	Class.getValidationOrder = getValidationOrder;                                                                        // 15
	Class.getValidators = getValidators;                                                                                  // 16
	Class.validate = validateStatic;                                                                                      // 17
	Class.validateAll = validateAllStatic;                                                                                // 18
	Class.getCheckPattern = getCheckPatternStatic;                                                                        // 19
	// Class prototype methods.                                                                                           //
	Class.prototype.validate = validate;                                                                                  // 21
	Class.prototype.validateAll = validateAll;                                                                            // 22
};                                                                                                                     // 23
                                                                                                                       //
module.export("default",exports.default=(onInitClass));                                                                // 25
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"init_definition.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/hooks/init_definition.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function onInitDefinition(definition, className) {                                                                     // 1
	definition.validators = {};                                                                                           // 2
	definition.resolveError = undefined;                                                                                  // 3
};                                                                                                                     // 4
                                                                                                                       //
module.export("default",exports.default=(onInitDefinition));                                                           // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"init_schema.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/hooks/init_schema.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function onInitSchema(schema, className) {                                                                             // 1
	schema.validators = {};                                                                                               // 2
	schema.resolveError = undefined;                                                                                      // 3
};                                                                                                                     // 4
                                                                                                                       //
module.export("default",exports.default=(onInitSchema));                                                               // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"merge_definitions.js":["lodash",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/hooks/merge_definitions.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});                                                            // 1
                                                                                                                       //
function onMergeDefinitions(targetDefinition, sourceDefinition, ClassName) {                                           // 3
	_.each(sourceDefinition.validators, function (validators, fieldName) {                                                // 4
		targetDefinition.validators[fieldName] = targetDefinition.validators[fieldName] || [];                               // 5
		targetDefinition.validators[fieldName] = targetDefinition.validators[fieldName].concat(validators);                  // 7
	});                                                                                                                   // 9
                                                                                                                       //
	targetDefinition.resolveError = sourceDefinition.resolveError;                                                        // 11
};                                                                                                                     // 12
                                                                                                                       //
module.export("default",exports.default=(onMergeDefinitions));                                                         // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"parse_definition.js":["lodash","../../core/utils/throw_parse_error.js","../utils/parse_validators.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/hooks/parse_definition.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});var parseValidators;module.import('../utils/parse_validators.js',{"default":function(v){parseValidators=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
function onParseDefinition(parsedDefinition, definition, className) {                                                  // 5
	if (definition.resolveError) {                                                                                        // 6
		if (!Match.test(definition.resolveError, Function)) {                                                                // 7
			throwParseError([{                                                                                                  // 8
				'class': className                                                                                                 // 9
			}, {                                                                                                                // 8
				'property': 'resolveError'                                                                                         // 11
			}, 'Property values has to be a function']);                                                                        // 10
		}                                                                                                                    // 15
                                                                                                                       //
		parsedDefinition.resolveError = definition.resolveError;                                                             // 17
	}                                                                                                                     // 18
                                                                                                                       //
	if (definition.fields) {                                                                                              // 20
		_.each(definition.fields, function (fieldDefinition, fieldName) {                                                    // 21
			if (_.has(fieldDefinition, 'validators')) {                                                                         // 22
				parseValidators(fieldDefinition.validators, [{                                                                     // 23
					'class': className                                                                                                // 25
				}, {                                                                                                               // 24
					'property': 'fields'                                                                                              // 27
				}, {                                                                                                               // 26
					'field': fieldName                                                                                                // 29
				}, {                                                                                                               // 28
					'property': 'validators'                                                                                          // 31
				}]);                                                                                                               // 30
                                                                                                                       //
				parsedDefinition.validators[fieldName] = fieldDefinition.validators;                                               // 35
				fieldDefinition.validators = undefined;                                                                            // 36
			}                                                                                                                   // 37
		});                                                                                                                  // 38
	}                                                                                                                     // 39
                                                                                                                       //
	if (definition.validators) {                                                                                          // 41
		_.each(definition.validators, function (validators, fieldName) {                                                     // 42
			parseValidators(validators, [{                                                                                      // 43
				'class': className                                                                                                 // 45
			}, {                                                                                                                // 44
				'property': 'validators'                                                                                           // 47
			}]);                                                                                                                // 46
                                                                                                                       //
			parsedDefinition.validators[fieldName] = validators;                                                                // 51
		});                                                                                                                  // 52
	}                                                                                                                     // 53
};                                                                                                                     // 54
                                                                                                                       //
module.export("default",exports.default=(onParseDefinition));                                                          // 56
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"meteor_methods":{"validate.js":["../utils/document_validate.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/meteor_methods/validate.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var documentValidate;module.import('../utils/document_validate.js',{"default":function(v){documentValidate=v}});       // 1
                                                                                                                       //
function validate(options) {                                                                                           // 3
  return documentValidate(options);                                                                                    // 4
};                                                                                                                     // 5
                                                                                                                       //
module.export("default",exports.default=(validate));                                                                   // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"utils":{"document_validate.js":["lodash","../../../core/class.js","../../core/utils/throw_parse_error.js","../../fields/utils/cast_nested.js","../../fields/utils/is_nested_field_name.js","../../fields/utils/traverse.js","../../fields/ObjectField","../../fields/ListField","../validators.js","meteor/mdg:validation-error",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/utils/document_validate.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var AstroClass;module.import('../../../core/class.js',{"default":function(v){AstroClass=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});var castNested;module.import('../../fields/utils/cast_nested.js',{"default":function(v){castNested=v}});var isNestedFieldName;module.import('../../fields/utils/is_nested_field_name.js',{"default":function(v){isNestedFieldName=v}});var traverse;module.import('../../fields/utils/traverse.js',{"default":function(v){traverse=v}});var ObjectField;module.import('../../fields/ObjectField',{"default":function(v){ObjectField=v}});var ListField;module.import('../../fields/ListField',{"default":function(v){ListField=v}});var Validators;module.import('../validators.js',{"default":function(v){Validators=v}});var ValidationError;module.import('meteor/mdg:validation-error',{"ValidationError":function(v){ValidationError=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
                                                                                                                       // 9
                                                                                                                       // 10
                                                                                                                       //
function documentValidate() {                                                                                          // 12
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                               // 12
  var doc = options.doc;                                                                                               // 12
  var fields = options.fields;                                                                                         // 12
  var _options$prefix = options.prefix;                                                                                // 12
  var prefix = _options$prefix === undefined ? '' : _options$prefix;                                                   // 12
  var _options$stopOnFirstE = options.stopOnFirstError;                                                                // 12
  var stopOnFirstError = _options$stopOnFirstE === undefined ? true : _options$stopOnFirstE;                           // 12
  var _options$simulation = options.simulation;                                                                        // 12
  var simulation = _options$simulation === undefined ? true : _options$simulation;                                     // 12
                                                                                                                       //
  // Stop execution, if we are not on the server, when the "simulation" flag is                                        //
  // not set.                                                                                                          //
                                                                                                                       //
  if (!simulation && !Meteor.isServer) {                                                                               // 23
    return;                                                                                                            // 24
  }                                                                                                                    // 25
                                                                                                                       //
  var Class = doc.constructor;                                                                                         // 27
                                                                                                                       //
  // Cast nested fields.                                                                                               //
  castNested({                                                                                                         // 30
    doc: doc                                                                                                           // 31
  });                                                                                                                  // 30
                                                                                                                       //
  // Prepare array for storing errors list.                                                                            //
  var errors = [];                                                                                                     // 35
                                                                                                                       //
  // Helper function for catching and collecting errors.                                                               //
  var catchValidationError = function catchValidationError(func) {                                                     // 38
    try {                                                                                                              // 39
      func();                                                                                                          // 40
    } catch (err) {                                                                                                    // 41
      // If it's ValidationError.                                                                                      //
      if (ValidationError.is(err)) {                                                                                   // 44
        // If we stop on first error then just throw error again.                                                      //
        if (stopOnFirstError) {                                                                                        // 46
          throw err;                                                                                                   // 47
        }                                                                                                              // 48
        // Otherwise we collect errors.                                                                                //
        else {                                                                                                         // 46
            _.each(err.details, function (details) {                                                                   // 51
              errors.push(details);                                                                                    // 52
            });                                                                                                        // 53
          }                                                                                                            // 54
      }                                                                                                                // 55
      // It it's not ValidationError, then we throw error again.                                                       //
      else {                                                                                                           // 44
          throw err;                                                                                                   // 58
        }                                                                                                              // 59
    }                                                                                                                  // 60
  };                                                                                                                   // 61
                                                                                                                       //
  // If no fields were passed to validation, then we pick default validation                                           //
  // order.                                                                                                            //
  if (!fields) {                                                                                                       // 65
    fields = Class.getValidationOrder();                                                                               // 66
  }                                                                                                                    // 67
                                                                                                                       //
  _.each(fields, function (name) {                                                                                     // 69
    // If it is a nested field pattern name then we have to look for the most                                          //
    // nested document and validate the nested field.                                                                  //
    if (isNestedFieldName(name)) {                                                                                     // 72
      traverse(doc, name, function (nestedDoc, nestedName, field) {                                                    // 73
        catchValidationError(function () {                                                                             // 74
          documentValidate({                                                                                           // 75
            doc: nestedDoc,                                                                                            // 76
            fields: [nestedName],                                                                                      // 77
            prefix: name.substr(0, name.lastIndexOf(nestedName)),                                                      // 78
            stopOnFirstError: stopOnFirstError,                                                                        // 79
            simulation: simulation                                                                                     // 80
          });                                                                                                          // 75
        });                                                                                                            // 82
      });                                                                                                              // 83
      return;                                                                                                          // 84
    }                                                                                                                  // 85
                                                                                                                       //
    var field = Class.getField(name);                                                                                  // 87
                                                                                                                       //
    // Move to the next one if a field does not exist.                                                                 //
    if (!field) {                                                                                                      // 90
      return;                                                                                                          // 91
    }                                                                                                                  // 92
                                                                                                                       //
    // We do not validate transient fields.                                                                            //
    if (field.transient) {                                                                                             // 95
      return;                                                                                                          // 96
    }                                                                                                                  // 97
                                                                                                                       //
    // Get value of the field.                                                                                         //
    var value = doc.get(name);                                                                                         // 100
                                                                                                                       //
    // If a field is optional and value is undefined then we do not validate.                                          //
    if (field.getOptional(doc) && _.isNil(value)) {                                                                    // 103
      return;                                                                                                          // 104
    }                                                                                                                  // 105
                                                                                                                       //
    // Execute validation in the try-catch block. That's because we want to                                            //
    // continue validation if the "stopOnFirstError" flag is set to false.                                             //
    catchValidationError(function () {                                                                                 // 109
      // First, execute type level validators.                                                                         //
      field.validate({                                                                                                 // 111
        doc: doc,                                                                                                      // 112
        name: prefix + name,                                                                                           // 113
        nestedName: name,                                                                                              // 114
        value: value                                                                                                   // 115
      });                                                                                                              // 111
      // Get validators for a given field.                                                                             //
      var validators = Class.getValidators(name);                                                                      // 118
      _.each(validators, function (_ref) {                                                                             // 119
        var type = _ref.type;                                                                                          // 125
        var param = _ref.param;                                                                                        // 125
        var resolveParam = _ref.resolveParam;                                                                          // 125
        var message = _ref.message;                                                                                    // 125
        var resolveError = _ref.resolveError;                                                                          // 125
                                                                                                                       //
        // Get validation helper function.                                                                             //
        var validationFunction = Validators[type];                                                                     // 127
        // Execute single validator.                                                                                   //
        validationFunction({                                                                                           // 129
          doc: doc,                                                                                                    // 130
          name: prefix + name,                                                                                         // 131
          nestedName: name,                                                                                            // 132
          value: value,                                                                                                // 133
          param: param,                                                                                                // 134
          resolveParam: resolveParam,                                                                                  // 135
          message: message,                                                                                            // 136
          resolveError: resolveError                                                                                   // 137
        });                                                                                                            // 129
      });                                                                                                              // 139
    });                                                                                                                // 140
                                                                                                                       //
    // If it is the object field then validate it.                                                                     //
    if (field instanceof ObjectField) {                                                                                // 143
      if (value instanceof AstroClass) {                                                                               // 144
        catchValidationError(function () {                                                                             // 145
          documentValidate({                                                                                           // 146
            doc: value,                                                                                                // 147
            fields: value.constructor.getValidationOrder(),                                                            // 148
            prefix: field.name + '.',                                                                                  // 149
            stopOnFirstError: stopOnFirstError                                                                         // 150
          });                                                                                                          // 146
        });                                                                                                            // 152
      }                                                                                                                // 153
    }                                                                                                                  // 154
    // If it is the list field then validate each one.                                                                 //
    else if (field instanceof ListField && field.isClass) {                                                            // 143
        _.each(value, function (element, index) {                                                                      // 157
          if (element instanceof AstroClass) {                                                                         // 158
            catchValidationError(function () {                                                                         // 159
              documentValidate({                                                                                       // 160
                doc: element,                                                                                          // 161
                fields: element.constructor.getValidationOrder(),                                                      // 162
                prefix: field.name + '.' + index + '.',                                                                // 163
                stopOnFirstError: stopOnFirstError                                                                     // 164
              });                                                                                                      // 160
            });                                                                                                        // 166
          }                                                                                                            // 167
        });                                                                                                            // 168
      }                                                                                                                // 169
  });                                                                                                                  // 170
                                                                                                                       //
  // If we have not thrown any error yet then it means that there are no errors                                        //
  // or we do not throw on the first error.                                                                            //
  if (errors.length > 0) {                                                                                             // 174
    throw new ValidationError(errors, errors[0].message);                                                              // 175
  }                                                                                                                    // 176
};                                                                                                                     // 177
                                                                                                                       //
module.export("default",exports.default=(documentValidate));                                                           // 179
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"parse_validators.js":["lodash","../../core/utils/throw_parse_error.js","../validators.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/utils/parse_validators.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var throwParseError;module.import('../../core/utils/throw_parse_error.js',{"default":function(v){throwParseError=v}});var Validators;module.import('../validators.js',{"default":function(v){Validators=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
var validatorsPattern = [{                                                                                             // 5
  type: String,                                                                                                        // 6
  param: Match.Optional(Match.Any),                                                                                    // 7
  resolveParam: Match.Optional(Function),                                                                              // 8
  message: Match.Optional(String),                                                                                     // 9
  resolveError: Match.Optional(Function)                                                                               // 10
}];                                                                                                                    // 5
                                                                                                                       //
function parseValidators(validators, parseContext) {                                                                   // 13
  // Validators list is an array of object that should include at least the                                            //
  // "type" property.                                                                                                  //
  if (validators && !Match.test(validators, validatorsPattern)) {                                                      // 16
    throwParseError(_.union(parseContext, ['Validators definition has to be an array of objects']));                   // 17
  }                                                                                                                    // 20
                                                                                                                       //
  _.forEach(validators, function (validator) {                                                                         // 22
    // Check if a validator of a given type exists.                                                                    //
    if (!_.has(Validators, validator.type)) {                                                                          // 24
      throwParseError(_.union(parseContext, ['There is no "' + validator.type + '" validator']));                      // 25
    }                                                                                                                  // 28
  });                                                                                                                  // 29
};                                                                                                                     // 30
                                                                                                                       //
module.export("default",exports.default=(parseValidators));                                                            // 32
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"validators":{"comparison":{"choice.js":["lodash","../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/comparison/choice.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});
                                                                                                                       // 2
                                                                                                                       //
Validator.create({                                                                                                     // 4
  name: 'choice',                                                                                                      // 5
  parseParam: function parseParam(param) {                                                                             // 6
    if (!Match.test(param, [Match.Any])) {                                                                             // 7
      throw new TypeError('Parameter for the "choice" validator has to be an array of values');                        // 8
    }                                                                                                                  // 11
  },                                                                                                                   // 12
  isValid: function isValid(_ref) {                                                                                    // 13
    var value = _ref.value;                                                                                            // 13
    var param = _ref.param;                                                                                            // 13
                                                                                                                       //
    return _.includes(param, value);                                                                                   // 14
  },                                                                                                                   // 15
  resolveError: function resolveError(_ref2) {                                                                         // 16
    var name = _ref2.name;                                                                                             // 16
    var param = _ref2.param;                                                                                           // 16
                                                                                                                       //
    var choices = param.join(', ');                                                                                    // 17
    return '"' + name + '" has to be one of the values ' + choices;                                                    // 18
  }                                                                                                                    // 19
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"email.js":["../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/comparison/email.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});                                // 1
                                                                                                                       //
// Email regular expression.                                                                                           //
var re = /^[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\.)+[A-Z]{2,}$/i;                                                               // 4
                                                                                                                       //
Validator.create({                                                                                                     // 6
  name: 'email',                                                                                                       // 7
  isValid: function isValid(_ref) {                                                                                    // 8
    var value = _ref.value;                                                                                            // 8
                                                                                                                       //
    return re.test(value);                                                                                             // 9
  },                                                                                                                   // 10
  resolveError: function resolveError(_ref2) {                                                                         // 11
    var name = _ref2.name;                                                                                             // 11
    var param = _ref2.param;                                                                                           // 11
                                                                                                                       //
    return '"' + name + '" should be a valid email address';                                                           // 12
  }                                                                                                                    // 13
});                                                                                                                    // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"equal.js":["../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/comparison/equal.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});                                // 1
                                                                                                                       //
Validator.create({                                                                                                     // 3
  name: 'equal',                                                                                                       // 4
  isValid: function isValid(_ref) {                                                                                    // 5
    var value = _ref.value;                                                                                            // 5
    var param = _ref.param;                                                                                            // 5
                                                                                                                       //
    return EJSON.equals(value, param);                                                                                 // 6
  },                                                                                                                   // 7
  resolveError: function resolveError(_ref2) {                                                                         // 8
    var name = _ref2.name;                                                                                             // 8
    var param = _ref2.param;                                                                                           // 8
                                                                                                                       //
    return '"' + name + '" should be equal ' + param;                                                                  // 9
  }                                                                                                                    // 10
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"not_equal.js":["../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/comparison/not_equal.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});                                // 1
                                                                                                                       //
Validator.create({                                                                                                     // 3
  name: 'notEqual',                                                                                                    // 4
  isValid: function isValid(_ref) {                                                                                    // 5
    var value = _ref.value;                                                                                            // 5
    var param = _ref.param;                                                                                            // 5
                                                                                                                       //
    return !EJSON.equals(value, param);                                                                                // 6
  },                                                                                                                   // 7
  resolveError: function resolveError(_ref2) {                                                                         // 8
    var name = _ref2.name;                                                                                             // 8
    var param = _ref2.param;                                                                                           // 8
                                                                                                                       //
    return '"' + name + '" should not to be equal ' + param;                                                           // 9
  }                                                                                                                    // 10
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"regexp.js":["../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/comparison/regexp.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});                                // 1
                                                                                                                       //
Validator.create({                                                                                                     // 3
  name: 'regexp',                                                                                                      // 4
  parseParam: function parseParam(param) {                                                                             // 5
    if (!Match.test(param, RegExp)) {                                                                                  // 6
      throw new TypeError('Parameter for the "regexp" validator has to be a regular expression');                      // 7
    }                                                                                                                  // 10
  },                                                                                                                   // 11
  isValid: function isValid(_ref) {                                                                                    // 12
    var value = _ref.value;                                                                                            // 12
    var param = _ref.param;                                                                                            // 12
                                                                                                                       //
    return param.test(value);                                                                                          // 13
  },                                                                                                                   // 14
  resolveError: function resolveError(_ref2) {                                                                         // 15
    var name = _ref2.name;                                                                                             // 15
    var param = _ref2.param;                                                                                           // 15
                                                                                                                       //
    return '"' + name + '" does not match the "' + param.toString() + '" regular expression';                          // 16
  }                                                                                                                    // 17
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"existence":{"not_null.js":["../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/existence/not_null.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});                                // 1
                                                                                                                       //
Validator.create({                                                                                                     // 3
  name: 'notNull',                                                                                                     // 4
  isValid: function isValid(_ref) {                                                                                    // 5
    var value = _ref.value;                                                                                            // 5
                                                                                                                       //
    return value !== null;                                                                                             // 6
  },                                                                                                                   // 7
  resolveError: function resolveError(_ref2) {                                                                         // 8
    var name = _ref2.name;                                                                                             // 8
                                                                                                                       //
    return '"' + name + '" should not be null';                                                                        // 9
  }                                                                                                                    // 10
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"null.js":["../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/existence/null.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});                                // 1
                                                                                                                       //
Validator.create({                                                                                                     // 3
  name: 'null',                                                                                                        // 4
  isValid: function isValid(_ref) {                                                                                    // 5
    var value = _ref.value;                                                                                            // 5
                                                                                                                       //
    return value === null;                                                                                             // 6
  },                                                                                                                   // 7
  resolveError: function resolveError(_ref2) {                                                                         // 8
    var name = _ref2.name;                                                                                             // 8
                                                                                                                       //
    return '"' + name + '" should be null';                                                                            // 9
  }                                                                                                                    // 10
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"required.js":["../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/existence/required.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});                                // 1
                                                                                                                       //
Validator.create({                                                                                                     // 3
  name: 'required',                                                                                                    // 4
  isValid: function isValid(_ref) {                                                                                    // 5
    var value = _ref.value;                                                                                            // 5
                                                                                                                       //
    return value !== null && value !== undefined;                                                                      // 6
  },                                                                                                                   // 7
  resolveError: function resolveError(_ref2) {                                                                         // 8
    var name = _ref2.name;                                                                                             // 8
                                                                                                                       //
    return '"' + name + '" is required';                                                                               // 9
  }                                                                                                                    // 10
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"logical":{"and.js":["lodash","../../utils/parse_validators.js","../../validator.js","../../validators.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/logical/and.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var parseValidators;module.import('../../utils/parse_validators.js',{"default":function(v){parseValidators=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});var Validators;module.import('../../validators.js',{"default":function(v){Validators=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       //
Validator.create({                                                                                                     // 6
  name: 'and',                                                                                                         // 7
  parseParam: function parseParam(param) {                                                                             // 8
    parseValidators(param);                                                                                            // 9
  },                                                                                                                   // 10
  validate: function validate(_ref) {                                                                                  // 11
    var doc = _ref.doc;                                                                                                // 16
    var name = _ref.name;                                                                                              // 16
    var value = _ref.value;                                                                                            // 16
    var validators = _ref.param;                                                                                       // 16
                                                                                                                       //
    _.each(validators, function (validator) {                                                                          // 17
      // Get validator.                                                                                                //
      var validationFunction = Validators[validator.type];                                                             // 19
      // Execute single validator.                                                                                     //
      validationFunction({                                                                                             // 21
        doc: doc,                                                                                                      // 22
        name: name,                                                                                                    // 23
        value: value,                                                                                                  // 24
        param: validator.param                                                                                         // 25
      });                                                                                                              // 21
    });                                                                                                                // 27
  }                                                                                                                    // 28
});                                                                                                                    // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"or.js":["lodash","../../utils/parse_validators.js","../../validator.js","../../validators.js","meteor/mdg:validation-error",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/logical/or.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var parseValidators;module.import('../../utils/parse_validators.js',{"default":function(v){parseValidators=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});var Validators;module.import('../../validators.js',{"default":function(v){Validators=v}});var ValidationError;module.import('meteor/mdg:validation-error',{"ValidationError":function(v){ValidationError=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       //
Validator.create({                                                                                                     // 7
  name: 'or',                                                                                                          // 8
  parseParam: function parseParam(param) {                                                                             // 9
    parseValidators(param);                                                                                            // 10
  },                                                                                                                   // 11
  validate: function validate(_ref) {                                                                                  // 12
    var doc = _ref.doc;                                                                                                // 17
    var name = _ref.name;                                                                                              // 17
    var value = _ref.value;                                                                                            // 17
    var validators = _ref.param;                                                                                       // 17
                                                                                                                       //
    var firstError = void 0;                                                                                           // 18
    var isValid = _.some(validators, function (validator) {                                                            // 19
      // Get validator.                                                                                                //
      var validationFunction = Validators[validator.type];                                                             // 21
      // Execute single validator.                                                                                     //
      try {                                                                                                            // 23
        validationFunction({                                                                                           // 24
          doc: doc,                                                                                                    // 25
          name: name,                                                                                                  // 26
          value: value,                                                                                                // 27
          param: validator.param                                                                                       // 28
        });                                                                                                            // 24
        return true;                                                                                                   // 30
      } catch (err) {                                                                                                  // 31
        if (ValidationError.is(err)) {                                                                                 // 33
          // Collect only the first error that occured.                                                                //
          if (!firstError) {                                                                                           // 35
            firstError = err;                                                                                          // 36
          }                                                                                                            // 37
          return false;                                                                                                // 38
        } else {                                                                                                       // 39
          throw err;                                                                                                   // 41
        }                                                                                                              // 42
      }                                                                                                                // 43
    });                                                                                                                // 44
                                                                                                                       //
    if (!isValid) {                                                                                                    // 46
      throw firstError;                                                                                                // 47
    }                                                                                                                  // 48
  }                                                                                                                    // 49
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"nested":{"every.js":["lodash","../../utils/parse_validators.js","../../validator.js","../../validators.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/nested/every.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var parseValidators;module.import('../../utils/parse_validators.js',{"default":function(v){parseValidators=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});var Validators;module.import('../../validators.js',{"default":function(v){Validators=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       //
Validator.create({                                                                                                     // 6
  name: 'every',                                                                                                       // 7
  parseParam: function parseParam(param) {                                                                             // 8
    parseValidators(param);                                                                                            // 9
  },                                                                                                                   // 10
  validate: function validate(_ref) {                                                                                  // 11
    var doc = _ref.doc;                                                                                                // 17
    var name = _ref.name;                                                                                              // 17
    var nestedName = _ref.nestedName;                                                                                  // 17
    var value = _ref.value;                                                                                            // 17
    var validators = _ref.param;                                                                                       // 17
                                                                                                                       //
    if (!_.isArray(value)) {                                                                                           // 18
      throw new TypeError('The "every" validator can only work with arrays');                                          // 19
    }                                                                                                                  // 22
                                                                                                                       //
    // Execute validators for each array element.                                                                      //
    _.each(value, function (element, index) {                                                                          // 25
      // Execute each validator.                                                                                       //
      _.each(validators, function (validator) {                                                                        // 27
        // Get validator.                                                                                              //
        var validationFunction = Validators[validator.type];                                                           // 29
        // Execute single validator.                                                                                   //
        validationFunction({                                                                                           // 31
          doc: doc,                                                                                                    // 32
          name: name + '.' + index,                                                                                    // 33
          nestedName: nestedName + '.' + index,                                                                        // 34
          value: element,                                                                                              // 35
          param: validator.param                                                                                       // 36
        });                                                                                                            // 31
      });                                                                                                              // 38
    });                                                                                                                // 39
  }                                                                                                                    // 40
});                                                                                                                    // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"has.js":["lodash","../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/nested/has.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});
                                                                                                                       // 2
                                                                                                                       //
Validator.create({                                                                                                     // 4
  name: 'has',                                                                                                         // 5
  isValid: function isValid(_ref) {                                                                                    // 6
    var value = _ref.value;                                                                                            // 6
    var param = _ref.param;                                                                                            // 6
                                                                                                                       //
    if (!_.isObject(value)) {                                                                                          // 7
      throw new TypeError('The "has" validator can only work with objects');                                           // 8
    }                                                                                                                  // 11
    return _.has(value, param);                                                                                        // 12
  },                                                                                                                   // 13
  resolveError: function resolveError(_ref2) {                                                                         // 14
    var name = _ref2.name;                                                                                             // 14
    var param = _ref2.param;                                                                                           // 14
                                                                                                                       //
    return 'The "' + name + '" field does not have the "' + param + '" property';                                      // 15
  }                                                                                                                    // 16
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"includes.js":["lodash","../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/nested/includes.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});
                                                                                                                       // 2
                                                                                                                       //
Validator.create({                                                                                                     // 4
  name: 'includes',                                                                                                    // 5
  isValid: function isValid(_ref) {                                                                                    // 6
    var value = _ref.value;                                                                                            // 6
    var param = _ref.param;                                                                                            // 6
                                                                                                                       //
    if (!_.isArray(value) && !_.isArray(object)) {                                                                     // 7
      throw new TypeError('The "includes" validator can only work with arrays and objects');                           // 8
    }                                                                                                                  // 11
    return _.includes(value, param);                                                                                   // 12
  },                                                                                                                   // 13
  resolveError: function resolveError(_ref2) {                                                                         // 14
    var name = _ref2.name;                                                                                             // 14
    var param = _ref2.param;                                                                                           // 14
                                                                                                                       //
    return 'The "' + name + '" field does not contain the "' + param + '" value';                                      // 15
  }                                                                                                                    // 16
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"size":{"gt.js":["../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/size/gt.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});                                // 1
                                                                                                                       //
Validator.create({                                                                                                     // 3
  name: 'gt',                                                                                                          // 4
  isValid: function isValid(_ref) {                                                                                    // 5
    var value = _ref.value;                                                                                            // 5
    var param = _ref.param;                                                                                            // 5
                                                                                                                       //
    return value > param;                                                                                              // 6
  },                                                                                                                   // 7
  resolveError: function resolveError(_ref2) {                                                                         // 8
    var name = _ref2.name;                                                                                             // 8
    var param = _ref2.param;                                                                                           // 8
                                                                                                                       //
    return '"' + name + '" has to be greater than ' + param;                                                           // 9
  }                                                                                                                    // 10
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"gte.js":["../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/size/gte.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});                                // 1
                                                                                                                       //
Validator.create({                                                                                                     // 3
  name: 'gte',                                                                                                         // 4
  isValid: function isValid(_ref) {                                                                                    // 5
    var value = _ref.value;                                                                                            // 5
    var param = _ref.param;                                                                                            // 5
                                                                                                                       //
    return value >= param;                                                                                             // 6
  },                                                                                                                   // 7
  resolveError: function resolveError(_ref2) {                                                                         // 8
    var name = _ref2.name;                                                                                             // 8
    var param = _ref2.param;                                                                                           // 8
                                                                                                                       //
    return '"' + name + '" has to be greater than or equal ' + param;                                                  // 9
  }                                                                                                                    // 10
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"length.js":["lodash","../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/size/length.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});
                                                                                                                       // 2
                                                                                                                       //
Validator.create({                                                                                                     // 4
  name: 'length',                                                                                                      // 5
  parseParam: function parseParam(param) {                                                                             // 6
    if (!Match.test(param, Number)) {                                                                                  // 7
      throw new TypeError('Parameter for the "length" validator has to be a number');                                  // 8
    }                                                                                                                  // 11
  },                                                                                                                   // 12
  isValid: function isValid(_ref) {                                                                                    // 13
    var value = _ref.value;                                                                                            // 13
    var param = _ref.param;                                                                                            // 13
                                                                                                                       //
    if (!_.has(value, 'length')) {                                                                                     // 14
      throw new TypeError('Length of the value can not be measured');                                                  // 15
    }                                                                                                                  // 18
    return value.length === param;                                                                                     // 19
  },                                                                                                                   // 20
  resolveError: function resolveError(_ref2) {                                                                         // 21
    var name = _ref2.name;                                                                                             // 21
    var param = _ref2.param;                                                                                           // 21
                                                                                                                       //
    return 'Length of "' + name + '" has to be ' + param;                                                              // 22
  }                                                                                                                    // 23
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"lt.js":["../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/size/lt.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});                                // 1
                                                                                                                       //
Validator.create({                                                                                                     // 3
  name: 'lt',                                                                                                          // 4
  isValid: function isValid(_ref) {                                                                                    // 5
    var value = _ref.value;                                                                                            // 5
    var param = _ref.param;                                                                                            // 5
                                                                                                                       //
    return value < param;                                                                                              // 6
  },                                                                                                                   // 7
  resolveError: function resolveError(_ref2) {                                                                         // 8
    var name = _ref2.name;                                                                                             // 8
    var param = _ref2.param;                                                                                           // 8
                                                                                                                       //
    return '"' + name + '" has to be less than ' + param;                                                              // 9
  }                                                                                                                    // 10
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"lte.js":["../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/size/lte.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});                                // 1
                                                                                                                       //
Validator.create({                                                                                                     // 3
  name: 'lte',                                                                                                         // 4
  isValid: function isValid(_ref) {                                                                                    // 5
    var value = _ref.value;                                                                                            // 5
    var param = _ref.param;                                                                                            // 5
                                                                                                                       //
    return value <= param;                                                                                             // 6
  },                                                                                                                   // 7
  resolveError: function resolveError(_ref2) {                                                                         // 8
    var name = _ref2.name;                                                                                             // 8
    var param = _ref2.param;                                                                                           // 8
                                                                                                                       //
    return '"' + name + '" has to be less than or equal ' + param;                                                     // 9
  }                                                                                                                    // 10
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"max_length.js":["lodash","../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/size/max_length.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});
                                                                                                                       // 2
                                                                                                                       //
Validator.create({                                                                                                     // 4
  name: 'maxLength',                                                                                                   // 5
  parseParam: function parseParam(param) {                                                                             // 6
    if (!Match.test(param, Number)) {                                                                                  // 7
      throw new TypeError('Parameter for the "maxLength" validator has to be a number');                               // 8
    }                                                                                                                  // 11
  },                                                                                                                   // 12
  isValid: function isValid(_ref) {                                                                                    // 13
    var value = _ref.value;                                                                                            // 13
    var param = _ref.param;                                                                                            // 13
                                                                                                                       //
    if (!_.has(value, 'length')) {                                                                                     // 14
      return false;                                                                                                    // 15
    }                                                                                                                  // 16
    return value.length <= param;                                                                                      // 17
  },                                                                                                                   // 18
  resolveError: function resolveError(_ref2) {                                                                         // 19
    var name = _ref2.name;                                                                                             // 19
    var param = _ref2.param;                                                                                           // 19
                                                                                                                       //
    return 'Length of "' + name + '" has to be at most ' + param;                                                      // 20
  }                                                                                                                    // 21
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"min_length.js":["lodash","../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/size/min_length.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});
                                                                                                                       // 2
                                                                                                                       //
Validator.create({                                                                                                     // 4
  name: 'minLength',                                                                                                   // 5
  parseParam: function parseParam(param) {                                                                             // 6
    if (!Match.test(param, Number)) {                                                                                  // 7
      throw new TypeError('Parameter for the "minLength" validator has to be a number');                               // 8
    }                                                                                                                  // 11
  },                                                                                                                   // 12
  isValid: function isValid(_ref) {                                                                                    // 13
    var value = _ref.value;                                                                                            // 13
    var param = _ref.param;                                                                                            // 13
                                                                                                                       //
    if (!_.has(value, 'length')) {                                                                                     // 14
      return false;                                                                                                    // 15
    }                                                                                                                  // 16
    return value.length >= param;                                                                                      // 17
  },                                                                                                                   // 18
  resolveError: function resolveError(_ref2) {                                                                         // 19
    var name = _ref2.name;                                                                                             // 19
    var param = _ref2.param;                                                                                           // 19
                                                                                                                       //
    return 'Length of "' + name + '" has to be at least ' + param;                                                     // 20
  }                                                                                                                    // 21
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"type":{"array.js":["lodash","../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/type/array.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});
                                                                                                                       // 2
                                                                                                                       //
Validator.create({                                                                                                     // 4
  name: 'array',                                                                                                       // 5
  isValid: function isValid(_ref) {                                                                                    // 6
    var value = _ref.value;                                                                                            // 6
                                                                                                                       //
    return _.isArray(value);                                                                                           // 7
  },                                                                                                                   // 8
  resolveError: function resolveError(_ref2) {                                                                         // 9
    var name = _ref2.name;                                                                                             // 9
                                                                                                                       //
    return '"' + name + '" has to be an array';                                                                        // 10
  }                                                                                                                    // 11
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"boolean.js":["lodash","../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/type/boolean.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});
                                                                                                                       // 2
                                                                                                                       //
Validator.create({                                                                                                     // 4
  name: 'boolean',                                                                                                     // 5
  isValid: function isValid(_ref) {                                                                                    // 6
    var value = _ref.value;                                                                                            // 6
                                                                                                                       //
    return _.isBoolean(value);                                                                                         // 7
  },                                                                                                                   // 8
  resolveError: function resolveError(_ref2) {                                                                         // 9
    var name = _ref2.name;                                                                                             // 9
                                                                                                                       //
    return '"' + name + '" has to be a boolean';                                                                       // 10
  }                                                                                                                    // 11
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"class.js":["../../validator.js","../../../../core/class.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/type/class.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});var AstroClass;module.import('../../../../core/class.js',{"default":function(v){AstroClass=v}});
                                                                                                                       // 2
                                                                                                                       //
Validator.create({                                                                                                     // 4
  name: 'class',                                                                                                       // 5
  parseParam: function parseParam(param) {                                                                             // 6
    if (!AstroClass.isParentOf(param)) {                                                                               // 7
      throw new TypeError('Parameter for the "class" validator has to be an Astronomy class');                         // 8
    }                                                                                                                  // 11
  },                                                                                                                   // 12
  isValid: function isValid(_ref) {                                                                                    // 13
    var value = _ref.value;                                                                                            // 16
    var Class = _ref.param;                                                                                            // 16
                                                                                                                       //
    return value instanceof Class;                                                                                     // 17
  },                                                                                                                   // 18
  resolveError: function resolveError(_ref2) {                                                                         // 19
    var name = _ref2.name;                                                                                             // 22
    var Class = _ref2.param;                                                                                           // 22
                                                                                                                       //
    var className = Class.getName();                                                                                   // 23
    return '"' + name + '" has to be ' + className;                                                                    // 24
  }                                                                                                                    // 25
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"date.js":["lodash","../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/type/date.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});
                                                                                                                       // 2
                                                                                                                       //
Validator.create({                                                                                                     // 4
  name: 'date',                                                                                                        // 5
  isValid: function isValid(_ref) {                                                                                    // 6
    var value = _ref.value;                                                                                            // 6
                                                                                                                       //
    return _.isDate(value);                                                                                            // 7
  },                                                                                                                   // 8
  resolveError: function resolveError(_ref2) {                                                                         // 9
    var name = _ref2.name;                                                                                             // 9
                                                                                                                       //
    return '"' + name + '" has to be a date';                                                                          // 10
  }                                                                                                                    // 11
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"integer.js":["lodash","../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/type/integer.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});
                                                                                                                       // 2
                                                                                                                       //
Validator.create({                                                                                                     // 4
  name: 'integer',                                                                                                     // 5
  isValid: function isValid(_ref) {                                                                                    // 6
    var value = _ref.value;                                                                                            // 6
                                                                                                                       //
    return _.isInteger(value);                                                                                         // 7
  },                                                                                                                   // 8
  resolveError: function resolveError(_ref2) {                                                                         // 9
    var name = _ref2.name;                                                                                             // 9
                                                                                                                       //
    return '"' + name + '" has to be an integer';                                                                      // 10
  }                                                                                                                    // 11
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"mongo_object_id.js":["../../validator.js","meteor/check","meteor/mongo",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/type/mongo_object_id.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});var Match;module.import('meteor/check',{"Match":function(v){Match=v}});var Mongo;module.import('meteor/mongo',{"Mongo":function(v){Mongo=v}});
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
Validator.create({                                                                                                     // 5
  name: 'mongoObjectID',                                                                                               // 6
  isValid: function isValid(_ref) {                                                                                    // 7
    var value = _ref.value;                                                                                            // 7
                                                                                                                       //
    return Match.test(value, Mongo.ObjectID);;                                                                         // 8
  },                                                                                                                   // 9
  resolveError: function resolveError(_ref2) {                                                                         // 10
    var name = _ref2.name;                                                                                             // 10
                                                                                                                       //
    return '"' + name + '" has to be a Mongo.ObjectID';                                                                // 11
  }                                                                                                                    // 12
});                                                                                                                    // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"number.js":["lodash","../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/type/number.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});
                                                                                                                       // 2
                                                                                                                       //
Validator.create({                                                                                                     // 4
  name: 'number',                                                                                                      // 5
  isValid: function isValid(_ref) {                                                                                    // 6
    var value = _ref.value;                                                                                            // 6
                                                                                                                       //
    return _.isNumber(value);                                                                                          // 7
  },                                                                                                                   // 8
  resolveError: function resolveError(_ref2) {                                                                         // 9
    var name = _ref2.name;                                                                                             // 9
                                                                                                                       //
    return '"' + name + '" has to be a number';                                                                        // 10
  }                                                                                                                    // 11
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"object.js":["lodash","../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/type/object.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});
                                                                                                                       // 2
                                                                                                                       //
Validator.create({                                                                                                     // 4
  name: 'object',                                                                                                      // 5
  isValid: function isValid(_ref) {                                                                                    // 6
    var value = _ref.value;                                                                                            // 6
                                                                                                                       //
    return _.isObject(value);                                                                                          // 7
  },                                                                                                                   // 8
  resolveError: function resolveError(_ref2) {                                                                         // 9
    var name = _ref2.name;                                                                                             // 9
                                                                                                                       //
    return '"' + name + '" has to be an object';                                                                       // 10
  }                                                                                                                    // 11
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"string.js":["lodash","../../validator.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jagi_astronomy/lib/modules/validators/validators/type/string.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _;module.import('lodash',{"default":function(v){_=v}});var Validator;module.import('../../validator.js',{"default":function(v){Validator=v}});
                                                                                                                       // 2
                                                                                                                       //
Validator.create({                                                                                                     // 4
  name: 'string',                                                                                                      // 5
  isValid: function isValid(_ref) {                                                                                    // 6
    var value = _ref.value;                                                                                            // 6
                                                                                                                       //
    return _.isString(value);                                                                                          // 7
  },                                                                                                                   // 8
  resolveError: function resolveError(_ref2) {                                                                         // 9
    var name = _ref2.name;                                                                                             // 9
                                                                                                                       //
    return '"' + name + '" has to be a string';                                                                        // 10
  }                                                                                                                    // 11
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}}}}},"node_modules":{"lodash":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// ../npm/node_modules/lodash/package.json                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "lodash";
exports.version = "4.14.1";
exports.main = "lodash.js";

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lodash.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/jagi:astronomy/node_modules/lodash/lodash.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**
 * @license
 * lodash <https://lodash.com/>
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.14.1';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for function metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256,
      FLIP_FLAG = 512;

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', ARY_FLAG],
    ['bind', BIND_FLAG],
    ['bindKey', BIND_KEY_FLAG],
    ['curry', CURRY_FLAG],
    ['curryRight', CURRY_RIGHT_FLAG],
    ['flip', FLIP_FLAG],
    ['partial', PARTIAL_FLAG],
    ['partialRight', PARTIAL_RIGHT_FLAG],
    ['rearg', REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match non-compound words composed of alphanumeric characters. */
  var reBasicWord = /[a-zA-Z0-9]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0x/i;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
      rsComboSymbolsRange = '\\u20d0-\\u20f0',
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reComplexWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
    rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
    rsUpper + '+' + rsOptUpperContr,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasComplexWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError',
    'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array ? array.length : 0;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array ? array.length : 0,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to search.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array ? array.length : 0;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to search.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array ? array.length : 0;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array ? array.length : 0;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return baseFindIndex(array, baseIsNaN, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array ? array.length : 0;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a cache value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        result++;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a function that invokes `func` with its first argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    if (!(string && reHasComplexSymbol.test(string))) {
      return string.length;
    }
    var result = reComplexSymbol.lastIndex = 0;
    while (reComplexSymbol.test(string)) {
      result++;
    }
    return result;
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return string.match(reComplexSymbol);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Use `context` to stub `Date#getTime` use in `_.now`.
   * var stubbed = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': stubGetTime };
   *   }
   * });
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Math = context.Math,
        RegExp = context.RegExp,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = context.Array.prototype,
        objectProto = context.Object.prototype,
        stringProto = context.String.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /** Used to resolve the decompiled source of functions. */
    var funcToString = context.Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Reflect = context.Reflect,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        enumerate = Reflect ? Reflect.enumerate : undefined,
        iteratorSymbol = Symbol ? Symbol.iterator : undefined,
        objectCreate = context.Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

    /** Built-in method references that are mockable. */
    var clearTimeout = function(id) { return context.clearTimeout.call(root, id); },
        setTimeout = function(func, wait) { return context.setTimeout.call(root, func, wait); };

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetPrototype = Object.getPrototypeOf,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = Object.keys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReplace = stringProto.replace,
        nativeReverse = arrayProto.reverse,
        nativeSplit = stringProto.split;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(context.Object, 'create');

    /* Used to set `toString` methods. */
    var defineProperty = (function() {
      var func = getNative(context.Object, 'defineProperty'),
          name = getNative.name;

      return (name && name.length > 2) ? func : undefined;
    }());

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array of at least `200` elements
     * and any iteratees accept only one argument. The heuristic for whether a
     * section qualifies for shortcut fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
          (arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      return getMapData(this, key)['delete'](key);
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      return this.__data__['delete'](key);
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (typeof key == 'number' && value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to search.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths of elements to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          isNil = object == null,
          length = paths.length,
          result = Array(length);

      while (++index < length) {
        result[index] = isNil ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {boolean} [isFull] Specify a clone including symbols.
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (!isArr) {
        var props = isFull ? getAllKeys(value) : keys(value);
      }
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      var index = length;
      while (index--) {
        var key = props[index],
            predicate = source[key],
            value = object[key];

        if ((value === undefined &&
            !(key in Object(object))) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(proto) {
      return isObject(proto) ? objectCreate(proto) : {};
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      return objectToString.call(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
      // that are composed entirely of index properties, return `false` for
      // `hasOwnProperty` checks of them.
      return object != null &&
        (hasOwnProperty.call(object, key) ||
          (typeof object == 'object' && key in object && getPrototype(object) === null));
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      if (!isKey(path, object)) {
        path = castPath(path);
        object = parent(object, path);
        path = last(path);
      }
      var func = object == null ? object : object[toKey(path)];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && objectToString.call(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {boolean} [bitmask] The bitmask of comparison flags.
     *  The bitmask may be composed of the following flags:
     *     1 - Unordered comparison
     *     2 - Partial comparison
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object),
          othIsObj = othTag == objectTag && !isHostObject(other),
          isSameTag = objTag == othTag;

      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObject(value) && objectToString.call(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    var baseKeys = overArg(nativeKeys, Object);

    /**
     * The base implementation of `_.keysIn` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      object = object == null ? object : Object(object);

      var result = [];
      for (var key in object) {
        result.push(key);
      }
      return result;
    }

    // Fallback for IE < 9 with es6-shim.
    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
      baseKeysIn = function(object) {
        return iteratorToArray(enumerate(object));
      };
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      if (!(isArray(source) || isTypedArray(source))) {
        var props = keysIn(source);
      }
      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      });
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        newValue = srcValue;
        if (isArray(srcValue) || isTypedArray(srcValue)) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else {
            isCommon = false;
            newValue = baseClone(srcValue, true);
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            isCommon = false;
            newValue = baseClone(srcValue, true);
          }
          else {
            newValue = objValue;
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property identifiers to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, props) {
      object = Object(object);
      return basePickBy(object, props, function(value, key) {
        return key in object;
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property identifiers to pick from.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, props, predicate) {
      var index = -1,
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (predicate(value, key)) {
          result[key] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          }
          else if (!isKey(index, array)) {
            var path = castPath(index),
                object = parent(array, path);

            if (object != null) {
              delete object[toKey(last(path))];
            }
          }
          else {
            delete array[toKey(index)];
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      path = isKey(path, object) ? [path] : castPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]);
        if (isObject(nested)) {
          var newValue = value;
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = objValue == null
                ? (isIndex(path[index + 1]) ? [] : {})
                : objValue;
            }
          }
          assignValue(nested, key, newValue);
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      object = parent(object, path);

      var key = toKey(last(path));
      return !(object != null && baseHas(object, key)) || delete object[key];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var index = -1,
          length = arrays.length;

      while (++index < length) {
        var result = result
          ? arrayPush(
              baseDifference(result, arrays[index], iteratee, comparator),
              baseDifference(arrays[index], result, iteratee, comparator)
            )
          : arrays[index];
      }
      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var result = new buffer.constructor(buffer.length);
      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        assignValue(object, key, newValue === undefined ? source[key] : newValue);
      }
      return object;
    }

    /**
     * Copies own symbol properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = reHasComplexSymbol.test(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return baseRest(function(funcs) {
        funcs = baseFlatten(funcs, 1);

        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 &&
              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
          isFlip = bitmask & FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return baseRest(function(iteratees) {
        iteratees = (iteratees.length == 1 && isArray(iteratees[0]))
          ? arrayMap(iteratees[0], baseUnary(getIteratee()))
          : arrayMap(baseFlatten(iteratees, 1), baseUnary(getIteratee()));

        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return reHasComplexSymbol.test(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

      if (!(bitmask & CURRY_BOUND_FLAG)) {
        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     *   512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!seen.has(othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
                  return seen.add(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, customizer, bitmask, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : baseHas(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a
     * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
     * Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * Gets the `[[Prototype]]` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {null|Object} Returns the `[[Prototype]]`.
     */
    var getPrototype = overArg(nativeGetPrototype, Object);

    /**
     * Creates an array of the own enumerable symbol properties of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

    /**
     * Creates an array of the own and inherited enumerable symbol properties
     * of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11,
    // for data views in Edge, and promises in Node.js.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : undefined;

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = isKey(path, object) ? [path] : castPath(path);

      var result,
          index = -1,
          length = path.length;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isString(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Creates an array of index keys for `object` values of arrays,
     * `arguments` objects, and strings, otherwise `null` is returned.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array|null} Returns index keys, else `null`.
     */
    function indexKeys(object) {
      var length = object ? object.length : undefined;
      if (isLength(length) &&
          (isArray(object) || isString(object) || isArguments(object))) {
        return baseTimes(length, String);
      }
      return null;
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length,
          lastIndex = length - 1;

      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

      var isCombo =
        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||
        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    var setWrapToString = !defineProperty ? identity : function(wrapper, reference, bitmask) {
      var source = (reference + '');
      return defineProperty(wrapper, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)))
      });
    };

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoize(function(string) {
      string = toString(string);

      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to process.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array ? array.length : 0;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length,
          args = Array(length ? length - 1 : 0),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return length
        ? arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1))
        : [];
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. The order of result values is determined by the
     * order they occur in the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. Result values are chosen from the first array.
     * The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. Result values
     * are chosen from the first array. The comparator is invoked with two arguments:
     * (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs ? pairs.length : 0,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. The order of result values is determined by the
     * order they occur in the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. Result values are chosen from the first array.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. Result values are chosen
     * from the first array. The comparator is invoked with two arguments:
     * (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (comparator === last(mapped)) {
        comparator = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array ? nativeJoin.call(array, separator) : '';
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = (
          index < 0
            ? nativeMax(length + index, 0)
            : nativeMin(index, length - 1)
        ) + 1;
      }
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, index - 1, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = baseRest(function(array, indexes) {
      indexes = baseFlatten(indexes, 1);

      var length = array ? array.length : 0,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array ? nativeReverse.call(array) : array;
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each
     * element is kept.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length)
        ? baseUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length)
        ? baseUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      return (array && array.length)
        ? baseUniq(array, undefined, comparator)
        : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths of elements to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = baseRest(function(paths) {
      paths = baseFlatten(paths, 1);
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity]
     *  The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _([1, 2]).forEach(function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var array = isArrayLike(collection) ? collection : values(collection),
          length = array.length;

      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = baseClamp(toInteger(n), 0, length);
      }
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sampleSize(collection, MAX_ARRAY_LENGTH);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        var result = collection.length;
        return (result && isString(collection)) ? stringSize(collection) : result;
      }
      if (isObjectLike(collection)) {
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
      }
      return keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, function(o) { return o.user; });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     *
     * _.sortBy(users, 'user', function(o) {
     *   return Math.floor(o.age / 10);
     * });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    function now() {
      return Date.now();
    }

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one or more milliseconds.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = baseRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = baseRest(function(func, indexes) {
      return createWrap(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/6.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return partial(wrapper, value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, false, true);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      return baseClone(value, false, true, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, true, true);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      return baseClone(value, true, true, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(getLength(value)) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && objectToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element,
     *  else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (isArrayLike(value) &&
          (isArray(value) || isString(value) || isFunction(value.splice) ||
            isArguments(value) || isBuffer(value))) {
        return !value.length;
      }
      if (isObjectLike(value)) {
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return !(nonEnumShadows && keys(value).length);
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are **not** supported.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent,
     *  else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent,
     *  else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object,
     *  else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      return (objectToString.call(value) == errorTag) ||
        (typeof value.message == 'string' && typeof value.name == 'string');
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number,
     *  else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 8 which returns 'object' for typed array and weak map constructors,
      // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length,
     *  else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`
     * and is equivalent to `_.matches` when `source` is partially applied.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error('This method is not supported with core-js. Try https://github.com/es-shims.');
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && objectToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object,
     *  else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) ||
          objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return (typeof Ctor == 'function' &&
        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer,
     *  else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (iteratorSymbol && value[iteratorSymbol]) {
        return iteratorToArray(value[iteratorSymbol]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = isFunction(value.valueOf) ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keysIn(source), object);
        return;
      }
      for (var key in source) {
        assignValue(object, key, source[key]);
      }
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths of elements to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = baseRest(function(object, paths) {
      return baseAt(object, baseFlatten(paths, 1));
    });

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(args) {
      args.push(undefined, assignInDefaults);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, mergeDefaults);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      var isProto = isPrototype(object);
      if (!(isProto || isArrayLike(object))) {
        return baseKeys(object);
      }
      var indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      for (var key in object) {
        if (baseHas(object, key) &&
            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(isProto && key == 'constructor')) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      var index = -1,
          isProto = isPrototype(object),
          props = baseKeysIn(object),
          propsLength = props.length,
          indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      while (++index < propsLength) {
        var key = props[index];
        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[iteratee(value, key, object)] = value;
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[key] = iteratee(value, key, object);
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with seven arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable string keyed properties of `object` that are
     * not omitted.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property identifiers to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = baseRest(function(object, props) {
      if (object == null) {
        return {};
      }
      props = arrayMap(baseFlatten(props, 1), toKey);
      return basePick(object, baseDifference(getAllKeysIn(object), props));
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property identifiers to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = baseRest(function(object, props) {
      return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      return object == null ? {} : basePickBy(object, getAllKeysIn(object), getIteratee(predicate));
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = isKey(path, object) ? [path] : castPath(path);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        object = undefined;
        length = 1;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getIteratee(iteratee, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object ? baseValues(object, keys(object)) : [];
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in IE < 9, they can break out of
     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the
     * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=3109 for more details.
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = toString(string).replace(reTrim, '');
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : nativeReplace.call(string, args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (separator == '' && reHasComplexSymbol.test(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return nativeSplit.call(string, separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = baseClamp(toInteger(position), 0, string.length);
      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES delimiter as an alternative to the default "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, assignInDefaults);

      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (reHasComplexSymbol.test(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = baseRest(function(object, methodNames) {
      arrayEach(baseFlatten(methodNames, 1), function(key) {
        key = toKey(key);
        object[key] = bind(object[key], object);
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs ? pairs.length : 0,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, true));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function supports comparing the same values as
     * `_.isEqual` is equivalent to `_.isMatch` with `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(value));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (iteratorSymbol) {
      lodash.prototype[iteratorSymbol] = wrapperToIterator;
    }
    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}}}},{"extensions":[".js",".json"]});
var exports = require("./node_modules/meteor/jagi:astronomy/lib/main.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['jagi:astronomy'] = exports, {
  Astro: Astro
});

})();

//# sourceMappingURL=jagi_astronomy.js.map
